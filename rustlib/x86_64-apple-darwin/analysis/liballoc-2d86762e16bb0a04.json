{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/","program":"/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1/bin/rustc","arguments":["--crate-name","alloc","--edition=2018","src/liballoc/lib.rs","--error-format=json","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","opt-level=3","-C","codegen-units=1","-C","debuginfo=1","--cfg","feature=\"compiler-builtins-c\"","-C","metadata=2d86762e16bb0a04","-C","extra-filename=-2d86762e16bb0a04","--out-dir","/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/deps","--target","x86_64-apple-darwin","-L","dependency=/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/deps","-L","dependency=/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/release/deps","--extern","compiler_builtins=/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/deps/libcompiler_builtins-1756ca15954acc6a.rmeta","--extern","core=/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/deps/libcore-50418dc826b2df8f.rmeta","-Zmacro-backtrace","-Zosx-rpath-install-name","-Clink-args=-Wl,-rpath,@loader_path/../lib","-Wrust_2018_idioms","-Wunused_lifetimes","-Dwarnings","-Zsave-analysis","-Cprefer-dynamic","-Zbinary-dep-depinfo","-L","native=/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/build/compiler_builtins-712a6834a23640cf/out","--sysroot","/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1","-C","debug-assertions=n","-Z","force-unstable-if-unmarked"],"output":"/Users/runner/runners/2.166.3/work/1/s/build/x86_64-apple-darwin/stage1-std/x86_64-apple-darwin/release/deps/liballoc-2d86762e16bb0a04.rmeta"},"prelude":{"crate_id":{"name":"alloc","disambiguator":[13327579764654116281,14306064291630426625]},"crate_root":"src/liballoc","external_crates":[{"file_name":"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/liballoc/lib.rs","num":1,"id":{"name":"core","disambiguator":[649336883146201894,3308516238322163950]}},{"file_name":"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/liballoc/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1154582834482060450,16344204990542480537]}},{"file_name":"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/liballoc/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[9212379515936652129,17808485286264063370]}}],"span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":5627,"line_start":1,"line_end":176,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/alloc.rs","byte_start":9412,"byte_end":9413,"line_start":11,"line_end":11,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"AllocErr, AllocRef, LayoutErr, Layout, GlobalAlloc","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":1,"index":1570},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":54789,"byte_end":54795,"line_start":10,"line_end":10,"column_start":24,"column_end":30},"alias_span":null,"name":"Borrow","value":"","parent":{"krate":0,"index":298}},{"kind":"Use","ref_id":{"krate":1,"index":1573},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":54797,"byte_end":54806,"line_start":10,"line_end":10,"column_start":32,"column_end":41},"alias_span":null,"name":"BorrowMut","value":"","parent":{"krate":0,"index":298}},{"kind":"Use","ref_id":{"krate":0,"index":2374},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375263,"byte_end":375268,"line_start":26,"line_end":26,"column_start":22,"column_end":27},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":2328}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67828,"byte_end":67829,"line_start":14,"line_end":14,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Keys, BTreeMap, IntoIter, Range","parent":{"krate":0,"index":2713}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67828,"byte_end":67829,"line_start":14,"line_end":14,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"BTreeSet","parent":{"krate":0,"index":2715}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68105,"byte_end":68115,"line_start":26,"line_end":26,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":671},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68201,"byte_end":68209,"line_start":30,"line_end":30,"column_start":20,"column_end":28},"alias_span":null,"name":"BTreeMap","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":4559},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68295,"byte_end":68303,"line_start":34,"line_end":34,"column_start":20,"column_end":28},"alias_span":null,"name":"BTreeSet","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":2003},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68391,"byte_end":68401,"line_start":38,"line_end":38,"column_start":22,"column_end":32},"alias_span":null,"name":"LinkedList","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":2419},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68487,"byte_end":68495,"line_start":42,"line_end":42,"column_start":20,"column_end":28},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":1,"index":5935},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495612,"byte_end":495614,"line_start":533,"line_end":533,"column_start":20,"column_end":22},"alias_span":null,"name":"rt","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":30257},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495692,"byte_end":495701,"line_start":535,"line_end":535,"column_start":20,"column_end":29},"alias_span":null,"name":"Alignment","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":30311},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495768,"byte_end":495773,"line_start":537,"line_end":537,"column_start":20,"column_end":25},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5998},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495841,"byte_end":495846,"line_start":539,"line_end":539,"column_start":21,"column_end":26},"alias_span":null,"name":"write","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":30333},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495848,"byte_end":495858,"line_start":539,"line_end":539,"column_start":28,"column_end":38},"alias_span":null,"name":"ArgumentV1","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":30358},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495860,"byte_end":495869,"line_start":539,"line_end":539,"column_start":40,"column_end":49},"alias_span":null,"name":"Arguments","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5986},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495938,"byte_end":495944,"line_start":541,"line_end":541,"column_start":21,"column_end":27},"alias_span":null,"name":"Binary","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5984},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":495946,"byte_end":495951,"line_start":541,"line_end":541,"column_start":29,"column_end":34},"alias_span":null,"name":"Octal","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5977},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496020,"byte_end":496025,"line_start":543,"line_end":543,"column_start":21,"column_end":26},"alias_span":null,"name":"Debug","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5982},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496027,"byte_end":496034,"line_start":543,"line_end":543,"column_start":28,"column_end":35},"alias_span":null,"name":"Display","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5819},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496103,"byte_end":496112,"line_start":545,"line_end":545,"column_start":21,"column_end":30},"alias_span":null,"name":"DebugList","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5835},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496114,"byte_end":496122,"line_start":545,"line_end":545,"column_start":32,"column_end":40},"alias_span":null,"name":"DebugMap","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5803},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496124,"byte_end":496132,"line_start":545,"line_end":545,"column_start":42,"column_end":50},"alias_span":null,"name":"DebugSet","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5754},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496134,"byte_end":496145,"line_start":545,"line_end":545,"column_start":52,"column_end":63},"alias_span":null,"name":"DebugStruct","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5773},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496147,"byte_end":496157,"line_start":545,"line_end":545,"column_start":65,"column_end":75},"alias_span":null,"name":"DebugTuple","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5948},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496226,"byte_end":496235,"line_start":547,"line_end":547,"column_start":21,"column_end":30},"alias_span":null,"name":"Formatter","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5937},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496237,"byte_end":496243,"line_start":547,"line_end":547,"column_start":32,"column_end":38},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5938},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496245,"byte_end":496250,"line_start":547,"line_end":547,"column_start":40,"column_end":45},"alias_span":null,"name":"Write","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5994},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496319,"byte_end":496327,"line_start":549,"line_end":549,"column_start":21,"column_end":29},"alias_span":null,"name":"LowerExp","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5996},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496329,"byte_end":496337,"line_start":549,"line_end":549,"column_start":31,"column_end":39},"alias_span":null,"name":"UpperExp","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5988},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496406,"byte_end":496414,"line_start":551,"line_end":551,"column_start":21,"column_end":29},"alias_span":null,"name":"LowerHex","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5992},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496416,"byte_end":496423,"line_start":551,"line_end":551,"column_start":31,"column_end":38},"alias_span":null,"name":"Pointer","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":1,"index":5990},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":496425,"byte_end":496433,"line_start":551,"line_end":551,"column_start":40,"column_end":48},"alias_span":null,"name":"UpperHex","value":"","parent":{"krate":0,"index":2730}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":498108,"byte_end":498115,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"alias_span":null,"name":"ToOwned","value":"","parent":{"krate":0,"index":2764}},{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":498195,"byte_end":498198,"line_start":10,"line_end":10,"column_start":23,"column_end":26},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":2764}},{"kind":"Use","ref_id":{"krate":0,"index":4732},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":498280,"byte_end":498286,"line_start":12,"line_end":12,"column_start":25,"column_end":31},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":2764}},{"kind":"Use","ref_id":{"krate":0,"index":3638},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":498288,"byte_end":498296,"line_start":12,"line_end":12,"column_start":33,"column_end":41},"alias_span":null,"name":"ToString","value":"","parent":{"krate":0,"index":2764}},{"kind":"Use","ref_id":{"krate":0,"index":4064},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":498375,"byte_end":498378,"line_start":14,"line_end":14,"column_start":21,"column_end":24},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":2764}},{"kind":"Use","ref_id":{"krate":1,"index":6568},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598470,"byte_end":598480,"line_start":100,"line_end":100,"column_start":22,"column_end":32},"alias_span":null,"name":"SliceIndex","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":7207},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598554,"byte_end":598562,"line_start":102,"line_end":102,"column_start":23,"column_end":31},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":7205},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598564,"byte_end":598572,"line_start":102,"line_end":102,"column_start":33,"column_end":41},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":7199},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598643,"byte_end":598657,"line_start":104,"line_end":104,"column_start":23,"column_end":37},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":7202},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598659,"byte_end":598677,"line_start":104,"line_end":104,"column_start":39,"column_end":57},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30910},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598748,"byte_end":598754,"line_start":106,"line_end":106,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30901},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598756,"byte_end":598763,"line_start":106,"line_end":106,"column_start":31,"column_end":38},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30928},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598842,"byte_end":598853,"line_start":108,"line_end":108,"column_start":23,"column_end":34},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30938},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598855,"byte_end":598869,"line_start":108,"line_end":108,"column_start":36,"column_end":50},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30919},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598940,"byte_end":598949,"line_start":110,"line_end":110,"column_start":23,"column_end":32},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6706},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598951,"byte_end":598956,"line_start":110,"line_end":110,"column_start":34,"column_end":39},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6777},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598958,"byte_end":598966,"line_start":110,"line_end":110,"column_start":41,"column_end":49},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6663},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599037,"byte_end":599041,"line_start":112,"line_end":112,"column_start":23,"column_end":27},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6686},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599043,"byte_end":599050,"line_start":112,"line_end":112,"column_start":29,"column_end":36},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30948},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599124,"byte_end":599131,"line_start":114,"line_end":114,"column_start":23,"column_end":30},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30966},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599133,"byte_end":599145,"line_start":114,"line_end":114,"column_start":32,"column_end":44},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30976},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599147,"byte_end":599162,"line_start":114,"line_end":114,"column_start":46,"column_end":61},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30957},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599164,"byte_end":599174,"line_start":114,"line_end":114,"column_start":63,"column_end":73},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":30840},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599253,"byte_end":599259,"line_start":116,"line_end":116,"column_start":23,"column_end":29},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6864},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599261,"byte_end":599270,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6909},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599341,"byte_end":599348,"line_start":118,"line_end":118,"column_start":23,"column_end":30},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6927},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599350,"byte_end":599360,"line_start":118,"line_end":118,"column_start":32,"column_end":42},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6900},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599362,"byte_end":599368,"line_start":118,"line_end":118,"column_start":44,"column_end":50},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":6918},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599370,"byte_end":599379,"line_start":118,"line_end":118,"column_start":52,"column_end":61},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":3183}},{"kind":"Use","ref_id":{"krate":1,"index":7311},"span":{"file_name":"src/liballoc/str.rs","byte_start":635188,"byte_end":635195,"line_start":44,"line_end":44,"column_start":20,"column_end":27},"alias_span":null,"name":"pattern","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31664},"span":{"file_name":"src/liballoc/str.rs","byte_start":635269,"byte_end":635280,"line_start":46,"line_end":46,"column_start":20,"column_end":31},"alias_span":null,"name":"EncodeUtf16","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31585},"span":{"file_name":"src/liballoc/str.rs","byte_start":635365,"byte_end":635385,"line_start":48,"line_end":48,"column_start":20,"column_end":40},"alias_span":null,"name":"SplitAsciiWhitespace","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31576},"span":{"file_name":"src/liballoc/str.rs","byte_start":635452,"byte_end":635467,"line_start":50,"line_end":50,"column_start":20,"column_end":35},"alias_span":null,"name":"SplitWhitespace","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":7509},"span":{"file_name":"src/liballoc/str.rs","byte_start":635535,"byte_end":635544,"line_start":52,"line_end":52,"column_start":21,"column_end":30},"alias_span":null,"name":"from_utf8","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":7510},"span":{"file_name":"src/liballoc/str.rs","byte_start":635546,"byte_end":635559,"line_start":52,"line_end":52,"column_start":32,"column_end":45},"alias_span":null,"name":"from_utf8_mut","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31241},"span":{"file_name":"src/liballoc/str.rs","byte_start":635561,"byte_end":635566,"line_start":52,"line_end":52,"column_start":47,"column_end":52},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31231},"span":{"file_name":"src/liballoc/str.rs","byte_start":635568,"byte_end":635579,"line_start":52,"line_end":52,"column_start":54,"column_end":65},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31225},"span":{"file_name":"src/liballoc/str.rs","byte_start":635581,"byte_end":635586,"line_start":52,"line_end":52,"column_start":67,"column_end":72},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":7511},"span":{"file_name":"src/liballoc/str.rs","byte_start":635655,"byte_end":635674,"line_start":54,"line_end":54,"column_start":21,"column_end":40},"alias_span":null,"name":"from_utf8_unchecked","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":7512},"span":{"file_name":"src/liballoc/str.rs","byte_start":635676,"byte_end":635699,"line_start":54,"line_end":54,"column_start":42,"column_end":65},"alias_span":null,"name":"from_utf8_unchecked_mut","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31197},"span":{"file_name":"src/liballoc/str.rs","byte_start":635701,"byte_end":635715,"line_start":54,"line_end":54,"column_start":67,"column_end":81},"alias_span":null,"name":"ParseBoolError","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31671},"span":{"file_name":"src/liballoc/str.rs","byte_start":635790,"byte_end":635801,"line_start":56,"line_end":56,"column_start":21,"column_end":32},"alias_span":null,"name":"EscapeDebug","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31680},"span":{"file_name":"src/liballoc/str.rs","byte_start":635803,"byte_end":635816,"line_start":56,"line_end":56,"column_start":34,"column_end":47},"alias_span":null,"name":"EscapeDefault","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31689},"span":{"file_name":"src/liballoc/str.rs","byte_start":635818,"byte_end":635831,"line_start":56,"line_end":56,"column_start":49,"column_end":62},"alias_span":null,"name":"EscapeUnicode","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":7497},"span":{"file_name":"src/liballoc/str.rs","byte_start":635900,"byte_end":635907,"line_start":58,"line_end":58,"column_start":21,"column_end":28},"alias_span":null,"name":"FromStr","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31210},"span":{"file_name":"src/liballoc/str.rs","byte_start":635909,"byte_end":635918,"line_start":58,"line_end":58,"column_start":30,"column_end":39},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31509},"span":{"file_name":"src/liballoc/str.rs","byte_start":636008,"byte_end":636013,"line_start":61,"line_end":61,"column_start":21,"column_end":26},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31519},"span":{"file_name":"src/liballoc/str.rs","byte_start":636015,"byte_end":636023,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"alias_span":null,"name":"LinesAny","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31405},"span":{"file_name":"src/liballoc/str.rs","byte_start":636092,"byte_end":636104,"line_start":63,"line_end":63,"column_start":21,"column_end":33},"alias_span":null,"name":"MatchIndices","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31423},"span":{"file_name":"src/liballoc/str.rs","byte_start":636106,"byte_end":636119,"line_start":63,"line_end":63,"column_start":35,"column_end":48},"alias_span":null,"name":"RMatchIndices","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31459},"span":{"file_name":"src/liballoc/str.rs","byte_start":636188,"byte_end":636195,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31477},"span":{"file_name":"src/liballoc/str.rs","byte_start":636197,"byte_end":636205,"line_start":65,"line_end":65,"column_start":30,"column_end":38},"alias_span":null,"name":"RMatches","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31273},"span":{"file_name":"src/liballoc/str.rs","byte_start":636274,"byte_end":636280,"line_start":67,"line_end":67,"column_start":21,"column_end":27},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31255},"span":{"file_name":"src/liballoc/str.rs","byte_start":636282,"byte_end":636287,"line_start":67,"line_end":67,"column_start":29,"column_end":34},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31377},"span":{"file_name":"src/liballoc/str.rs","byte_start":636356,"byte_end":636363,"line_start":69,"line_end":69,"column_start":21,"column_end":28},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31359},"span":{"file_name":"src/liballoc/str.rs","byte_start":636365,"byte_end":636371,"line_start":69,"line_end":69,"column_start":30,"column_end":36},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31323},"span":{"file_name":"src/liballoc/str.rs","byte_start":636440,"byte_end":636456,"line_start":71,"line_end":71,"column_start":21,"column_end":37},"alias_span":null,"name":"RSplitTerminator","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":31305},"span":{"file_name":"src/liballoc/str.rs","byte_start":636458,"byte_end":636473,"line_start":71,"line_end":71,"column_start":39,"column_end":54},"alias_span":null,"name":"SplitTerminator","value":"","parent":{"krate":0,"index":3336}},{"kind":"Use","ref_id":{"krate":1,"index":1943},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5446,"byte_end":5449,"line_start":169,"line_end":169,"column_start":19,"column_end":22},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":4487}},{"kind":"Use","ref_id":{"krate":1,"index":18},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5613,"byte_end":5624,"line_start":175,"line_end":175,"column_start":19,"column_end":30},"alias_span":null,"name":"format_args","value":"","parent":{"krate":0,"index":4489}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":5627,"line_start":1,"line_end":176,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"src/liballoc/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":39},{"krate":0,"index":298},{"krate":0,"index":394},{"krate":0,"index":2730},{"krate":0,"index":2763},{"krate":0,"index":2771},{"krate":0,"index":2870},{"krate":0,"index":3183},{"krate":0,"index":3336},{"krate":0,"index":3442},{"krate":0,"index":3714},{"krate":0,"index":4025},{"krate":0,"index":4487},{"krate":0,"index":4489}],"decl_id":null,"docs":" # The Rust core allocation and collections library","sig":null,"attributes":[{"value":"! # The Rust core allocation and collections library","span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":55,"byte_end":58,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This library provides smart pointers and collections for managing","span":{"file_name":"src/liballoc/lib.rs","byte_start":59,"byte_end":128,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"! heap-allocated values.","span":{"file_name":"src/liballoc/lib.rs","byte_start":129,"byte_end":155,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":156,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This library, like libcore, normally doesn’t need to be used directly","span":{"file_name":"src/liballoc/lib.rs","byte_start":160,"byte_end":235,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"! since its contents are re-exported in the [`std` crate](../std/index.html).","span":{"file_name":"src/liballoc/lib.rs","byte_start":236,"byte_end":315,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! Crates that use the `#![no_std]` attribute however will typically","span":{"file_name":"src/liballoc/lib.rs","byte_start":316,"byte_end":385,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"! not depend on `std`, so they’d use this crate instead.","span":{"file_name":"src/liballoc/lib.rs","byte_start":386,"byte_end":446,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":447,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Boxed values","span":{"file_name":"src/liballoc/lib.rs","byte_start":451,"byte_end":470,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":471,"byte_end":474,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! The [`Box`] type is a smart pointer type. There can only be one owner of a","span":{"file_name":"src/liballoc/lib.rs","byte_start":475,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! [`Box`], and the owner can decide to mutate the contents, which live on the","span":{"file_name":"src/liballoc/lib.rs","byte_start":554,"byte_end":633,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"! heap.","span":{"file_name":"src/liballoc/lib.rs","byte_start":634,"byte_end":643,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":644,"byte_end":647,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This type can be sent among threads efficiently as the size of a `Box` value","span":{"file_name":"src/liballoc/lib.rs","byte_start":648,"byte_end":728,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! is the same as that of a pointer. Tree-like data structures are often built","span":{"file_name":"src/liballoc/lib.rs","byte_start":729,"byte_end":808,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"! with boxes because each node often has only one owner, the parent.","span":{"file_name":"src/liballoc/lib.rs","byte_start":809,"byte_end":879,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":880,"byte_end":883,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ## Reference counted pointers","span":{"file_name":"src/liballoc/lib.rs","byte_start":884,"byte_end":917,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":918,"byte_end":921,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! The [`Rc`] type is a non-threadsafe reference-counted pointer type intended","span":{"file_name":"src/liballoc/lib.rs","byte_start":922,"byte_end":1001,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"! for sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and","span":{"file_name":"src/liballoc/lib.rs","byte_start":1002,"byte_end":1082,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"! only allows access to `&T`, a shared reference.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1083,"byte_end":1134,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1135,"byte_end":1138,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! This type is useful when inherited mutability (such as using [`Box`]) is too","span":{"file_name":"src/liballoc/lib.rs","byte_start":1139,"byte_end":1219,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"! constraining for an application, and is often paired with the [`Cell`] or","span":{"file_name":"src/liballoc/lib.rs","byte_start":1220,"byte_end":1297,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"! [`RefCell`] types in order to allow mutation.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1298,"byte_end":1347,"line_start":29,"line_end":29,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1348,"byte_end":1351,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! ## Atomically reference counted pointers","span":{"file_name":"src/liballoc/lib.rs","byte_start":1352,"byte_end":1396,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1397,"byte_end":1400,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It","span":{"file_name":"src/liballoc/lib.rs","byte_start":1401,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"! provides all the same functionality of [`Rc`], except it requires that the","span":{"file_name":"src/liballoc/lib.rs","byte_start":1474,"byte_end":1552,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"! contained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself","span":{"file_name":"src/liballoc/lib.rs","byte_start":1553,"byte_end":1631,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"! sendable while [`Rc<T>`][`Rc`] is not.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1632,"byte_end":1674,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1675,"byte_end":1678,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! This type allows for shared access to the contained data, and is often","span":{"file_name":"src/liballoc/lib.rs","byte_start":1679,"byte_end":1753,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"! paired with synchronization primitives such as mutexes to allow mutation of","span":{"file_name":"src/liballoc/lib.rs","byte_start":1754,"byte_end":1833,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! shared resources.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1834,"byte_end":1855,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1856,"byte_end":1859,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! ## Collections","span":{"file_name":"src/liballoc/lib.rs","byte_start":1860,"byte_end":1878,"line_start":42,"line_end":42,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1879,"byte_end":1882,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Implementations of the most common general purpose data structures are","span":{"file_name":"src/liballoc/lib.rs","byte_start":1883,"byte_end":1957,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"! defined in this library. They are re-exported through the","span":{"file_name":"src/liballoc/lib.rs","byte_start":1958,"byte_end":2019,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"! [standard collections library](../std/collections/index.html).","span":{"file_name":"src/liballoc/lib.rs","byte_start":2020,"byte_end":2086,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2087,"byte_end":2090,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ## Heap interfaces","span":{"file_name":"src/liballoc/lib.rs","byte_start":2091,"byte_end":2113,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2114,"byte_end":2117,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! The [`alloc`](alloc/index.html) module defines the low-level interface to the","span":{"file_name":"src/liballoc/lib.rs","byte_start":2118,"byte_end":2199,"line_start":50,"line_end":50,"column_start":1,"column_end":82}},{"value":"! default global allocator. It is not compatible with the libc allocator API.","span":{"file_name":"src/liballoc/lib.rs","byte_start":2200,"byte_end":2279,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2280,"byte_end":2283,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! [`Arc`]: sync/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2284,"byte_end":2312,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"! [`Box`]: boxed/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2313,"byte_end":2342,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"! [`Cell`]: ../core/cell/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2343,"byte_end":2380,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"! [`Rc`]: rc/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2381,"byte_end":2406,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"! [`RefCell`]: ../core/cell/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2407,"byte_end":2447,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"allow(unused_attributes)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2449,"byte_end":2477,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"stable(feature = \"alloc\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":2478,"byte_end":2525,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"no_std","span":{"file_name":"src/liballoc/lib.rs","byte_start":2799,"byte_end":2809,"line_start":67,"line_end":67,"column_start":1,"column_end":11}},{"value":"needs_allocator","span":{"file_name":"src/liballoc/lib.rs","byte_start":2810,"byte_end":2829,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"warn(deprecated_in_future)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2830,"byte_end":2860,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"warn(missing_docs)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2861,"byte_end":2883,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2884,"byte_end":2923,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"deny(intra_doc_link_resolution_failure)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2924,"byte_end":2967,"line_start":72,"line_end":72,"column_start":1,"column_end":44}},{"value":"allow(explicit_outlives_requirements)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3006,"byte_end":3047,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"allow(incomplete_features)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3048,"byte_end":3078,"line_start":74,"line_end":74,"column_start":1,"column_end":31}},{"value":"feature(generator_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3102,"byte_end":3126,"line_start":75,"line_end":75,"column_start":24,"column_end":48}},{"value":"feature(allocator_api)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3163,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"feature(allow_internal_unstable)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3190,"byte_end":3226,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"feature(arbitrary_self_types)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3227,"byte_end":3260,"line_start":79,"line_end":79,"column_start":1,"column_end":34}},{"value":"feature(box_into_raw_non_null)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3261,"byte_end":3295,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"feature(box_patterns)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3296,"byte_end":3321,"line_start":81,"line_end":81,"column_start":1,"column_end":26}},{"value":"feature(box_syntax)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3322,"byte_end":3345,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"feature(cfg_target_has_atomic)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3346,"byte_end":3380,"line_start":83,"line_end":83,"column_start":1,"column_end":35}},{"value":"feature(coerce_unsized)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3381,"byte_end":3408,"line_start":84,"line_end":84,"column_start":1,"column_end":28}},{"value":"feature(const_generic_impls_guard)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3409,"byte_end":3447,"line_start":85,"line_end":85,"column_start":1,"column_end":39}},{"value":"feature(const_generics)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3448,"byte_end":3475,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"feature(const_in_array_repeat_expressions)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3476,"byte_end":3522,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"feature(const_if_match)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3523,"byte_end":3550,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"feature(cow_is_borrowed)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3551,"byte_end":3579,"line_start":89,"line_end":89,"column_start":1,"column_end":29}},{"value":"feature(dispatch_from_dyn)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3580,"byte_end":3610,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"feature(core_intrinsics)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3611,"byte_end":3639,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"feature(container_error_extra)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3640,"byte_end":3674,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"feature(dropck_eyepatch)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3675,"byte_end":3703,"line_start":93,"line_end":93,"column_start":1,"column_end":29}},{"value":"feature(exact_size_is_empty)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3704,"byte_end":3736,"line_start":94,"line_end":94,"column_start":1,"column_end":33}},{"value":"feature(fmt_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3737,"byte_end":3763,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"feature(fn_traits)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3764,"byte_end":3786,"line_start":96,"line_end":96,"column_start":1,"column_end":23}},{"value":"feature(fundamental)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3787,"byte_end":3811,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"feature(internal_uninit_const)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3812,"byte_end":3846,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"feature(lang_items)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3847,"byte_end":3870,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"feature(libc)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3871,"byte_end":3888,"line_start":100,"line_end":100,"column_start":1,"column_end":18}},{"value":"feature(nll)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3889,"byte_end":3905,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"feature(optin_builtin_traits)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3906,"byte_end":3939,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"feature(pattern)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3940,"byte_end":3960,"line_start":103,"line_end":103,"column_start":1,"column_end":21}},{"value":"feature(ptr_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3961,"byte_end":3987,"line_start":104,"line_end":104,"column_start":1,"column_end":27}},{"value":"feature(ptr_offset_from)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3988,"byte_end":4016,"line_start":105,"line_end":105,"column_start":1,"column_end":29}},{"value":"feature(rustc_attrs)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4017,"byte_end":4041,"line_start":106,"line_end":106,"column_start":1,"column_end":25}},{"value":"feature(receiver_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4042,"byte_end":4069,"line_start":107,"line_end":107,"column_start":1,"column_end":28}},{"value":"feature(specialization)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4070,"byte_end":4097,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"feature(staged_api)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4098,"byte_end":4121,"line_start":109,"line_end":109,"column_start":1,"column_end":24}},{"value":"feature(std_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4122,"byte_end":4148,"line_start":110,"line_end":110,"column_start":1,"column_end":27}},{"value":"feature(str_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4149,"byte_end":4175,"line_start":111,"line_end":111,"column_start":1,"column_end":27}},{"value":"feature(trusted_len)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4176,"byte_end":4200,"line_start":112,"line_end":112,"column_start":1,"column_end":25}},{"value":"feature(try_reserve)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4201,"byte_end":4225,"line_start":113,"line_end":113,"column_start":1,"column_end":25}},{"value":"feature(unboxed_closures)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4226,"byte_end":4255,"line_start":114,"line_end":114,"column_start":1,"column_end":30}},{"value":"feature(unicode_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4256,"byte_end":4286,"line_start":115,"line_end":115,"column_start":1,"column_end":31}},{"value":"feature(unsize)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4287,"byte_end":4306,"line_start":116,"line_end":116,"column_start":1,"column_end":20}},{"value":"feature(unsized_locals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4307,"byte_end":4334,"line_start":117,"line_end":117,"column_start":1,"column_end":28}},{"value":"feature(allocator_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4335,"byte_end":4367,"line_start":118,"line_end":118,"column_start":1,"column_end":33}},{"value":"feature(slice_partition_dedup)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4368,"byte_end":4402,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"feature(maybe_uninit_extra, maybe_uninit_slice)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4403,"byte_end":4454,"line_start":120,"line_end":120,"column_start":1,"column_end":52}},{"value":"feature(alloc_layout_extra)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4455,"byte_end":4486,"line_start":121,"line_end":121,"column_start":1,"column_end":32}},{"value":"feature(try_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4487,"byte_end":4509,"line_start":122,"line_end":122,"column_start":1,"column_end":23}},{"value":"feature(associated_type_bounds)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4510,"byte_end":4545,"line_start":123,"line_end":123,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alloc","qualname":"::alloc","value":"src/liballoc/alloc.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":4491},{"krate":0,"index":4499},{"krate":0,"index":4497},{"krate":0,"index":4495},{"krate":0,"index":4493},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36}],"decl_id":null,"docs":" Memory allocation APIs\n","sig":null,"attributes":[{"value":"! Memory allocation APIs","span":{"file_name":"src/liballoc/alloc.rs","byte_start":9131,"byte_end":9157,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"stable(feature = \"alloc_module\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":9159,"byte_end":9213,"line_start":3,"line_end":3,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":4491},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":10699,"byte_end":10705,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"Global","qualname":"::alloc::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":" The global memory allocator.","sig":null,"attributes":[{"value":"/ The global memory allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10164,"byte_end":10196,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10197,"byte_end":10200,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This type implements the [`AllocRef`] trait by forwarding calls","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10201,"byte_end":10268,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ to the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10269,"byte_end":10341,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10342,"byte_end":10394,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10395,"byte_end":10398,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Note: while this type is unstable, the functionality it provides can be","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10399,"byte_end":10474,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ accessed through the [free functions in `alloc`](index.html#functions).","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10475,"byte_end":10550,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10551,"byte_end":10554,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`AllocRef`]: trait.AllocRef.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10555,"byte_end":10592,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"unstable(feature = \"allocator_api\", issue = \"32838\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10593,"byte_end":10648,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":11687,"byte_end":11692,"line_start":80,"line_end":80,"column_start":15,"column_end":20},"name":"alloc","qualname":"::alloc::alloc","value":"fn (layout: Layout) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Allocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Allocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10708,"byte_end":10754,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10755,"byte_end":10758,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::alloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10759,"byte_end":10828,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10829,"byte_end":10901,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10902,"byte_end":10954,"line_start":50,"line_end":50,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10955,"byte_end":10958,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `alloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10959,"byte_end":11036,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ of the [`Global`] type when it and the [`AllocRef`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11037,"byte_end":11113,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11114,"byte_end":11117,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11118,"byte_end":11130,"line_start":55,"line_end":55,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11131,"byte_end":11134,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::alloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11135,"byte_end":11166,"line_start":57,"line_end":57,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11167,"byte_end":11170,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11171,"byte_end":11205,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ [`AllocRef`]: trait.AllocRef.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11206,"byte_end":11243,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ [`GlobalAlloc::alloc`]: trait.GlobalAlloc.html#tymethod.alloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11244,"byte_end":11309,"line_start":61,"line_end":61,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11310,"byte_end":11313,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11314,"byte_end":11328,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11329,"byte_end":11332,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11333,"byte_end":11340,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use std::alloc::{alloc, dealloc, Layout};","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11341,"byte_end":11386,"line_start":66,"line_end":66,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11387,"byte_end":11390,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11391,"byte_end":11403,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/     let layout = Layout::new::<u16>();","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11404,"byte_end":11446,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/     let ptr = alloc(layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11447,"byte_end":11479,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11480,"byte_end":11483,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/     *(ptr as *mut u16) = 42;","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11484,"byte_end":11516,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/     assert_eq!(*(ptr as *mut u16), 42);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11517,"byte_end":11560,"line_start":73,"line_end":73,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11561,"byte_end":11564,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/     dealloc(ptr, layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11565,"byte_end":11594,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11595,"byte_end":11600,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11601,"byte_end":11608,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11609,"byte_end":11662,"line_start":78,"line_end":78,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11663,"byte_end":11672,"line_start":79,"line_end":79,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":12465,"byte_end":12472,"line_start":102,"line_end":102,"column_start":15,"column_end":22},"name":"dealloc","qualname":"::alloc::dealloc","value":"fn (ptr: *mut u8, layout: Layout) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Deallocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Deallocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11773,"byte_end":11821,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11822,"byte_end":11825,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::dealloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11826,"byte_end":11897,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11898,"byte_end":11970,"line_start":87,"line_end":87,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11971,"byte_end":12023,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12024,"byte_end":12027,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `dealloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12028,"byte_end":12107,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/ of the [`Global`] type when it and the [`AllocRef`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12108,"byte_end":12184,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12185,"byte_end":12188,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12189,"byte_end":12201,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12202,"byte_end":12205,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::dealloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12206,"byte_end":12239,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12240,"byte_end":12243,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12244,"byte_end":12278,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ [`AllocRef`]: trait.AllocRef.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12279,"byte_end":12316,"line_start":98,"line_end":98,"column_start":1,"column_end":38}},{"value":"/ [`GlobalAlloc::dealloc`]: trait.GlobalAlloc.html#tymethod.dealloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12317,"byte_end":12386,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12387,"byte_end":12440,"line_start":100,"line_end":100,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12441,"byte_end":12450,"line_start":101,"line_end":101,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":13253,"byte_end":13260,"line_start":124,"line_end":124,"column_start":15,"column_end":22},"name":"realloc","qualname":"::alloc::realloc","value":"fn (ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Reallocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Reallocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12563,"byte_end":12611,"line_start":106,"line_end":106,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12612,"byte_end":12615,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::realloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12616,"byte_end":12687,"line_start":108,"line_end":108,"column_start":1,"column_end":72}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12688,"byte_end":12760,"line_start":109,"line_end":109,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12761,"byte_end":12813,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12814,"byte_end":12817,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `realloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12818,"byte_end":12897,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ of the [`Global`] type when it and the [`AllocRef`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12898,"byte_end":12974,"line_start":113,"line_end":113,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12975,"byte_end":12978,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12979,"byte_end":12991,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12992,"byte_end":12995,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::realloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12996,"byte_end":13029,"line_start":117,"line_end":117,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13030,"byte_end":13033,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13034,"byte_end":13068,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/ [`AllocRef`]: trait.AllocRef.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13069,"byte_end":13106,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ [`GlobalAlloc::realloc`]: trait.GlobalAlloc.html#method.realloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13107,"byte_end":13174,"line_start":121,"line_end":121,"column_start":1,"column_end":68}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13175,"byte_end":13228,"line_start":122,"line_end":122,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13229,"byte_end":13238,"line_start":123,"line_end":123,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":14398,"byte_end":14410,"line_start":161,"line_end":161,"column_start":15,"column_end":27},"name":"alloc_zeroed","qualname":"::alloc::alloc_zeroed","value":"fn (layout: Layout) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Allocate zero-initialized memory with the global allocator.","sig":null,"attributes":[{"value":"/ Allocate zero-initialized memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13389,"byte_end":13452,"line_start":128,"line_end":128,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13453,"byte_end":13456,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13457,"byte_end":13533,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13534,"byte_end":13606,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13607,"byte_end":13659,"line_start":132,"line_end":132,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13660,"byte_end":13663,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `alloc_zeroed` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13664,"byte_end":13748,"line_start":134,"line_end":134,"column_start":1,"column_end":85}},{"value":"/ of the [`Global`] type when it and the [`AllocRef`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13749,"byte_end":13825,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13826,"byte_end":13829,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13830,"byte_end":13842,"line_start":137,"line_end":137,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13843,"byte_end":13846,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::alloc_zeroed`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13847,"byte_end":13885,"line_start":139,"line_end":139,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13886,"byte_end":13889,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13890,"byte_end":13924,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/ [`AllocRef`]: trait.AllocRef.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13925,"byte_end":13962,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/ [`GlobalAlloc::alloc_zeroed`]: trait.GlobalAlloc.html#method.alloc_zeroed","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13963,"byte_end":14040,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14041,"byte_end":14044,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14045,"byte_end":14059,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14060,"byte_end":14063,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14064,"byte_end":14071,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ use std::alloc::{alloc_zeroed, dealloc, Layout};","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14072,"byte_end":14124,"line_start":148,"line_end":148,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14125,"byte_end":14128,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14129,"byte_end":14141,"line_start":150,"line_end":150,"column_start":1,"column_end":13}},{"value":"/     let layout = Layout::new::<u16>();","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14142,"byte_end":14184,"line_start":151,"line_end":151,"column_start":1,"column_end":43}},{"value":"/     let ptr = alloc_zeroed(layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14185,"byte_end":14224,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14225,"byte_end":14228,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(*(ptr as *mut u16), 0);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14229,"byte_end":14271,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14272,"byte_end":14275,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/     dealloc(ptr, layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14276,"byte_end":14305,"line_start":156,"line_end":156,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14306,"byte_end":14311,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14312,"byte_end":14319,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14320,"byte_end":14373,"line_start":159,"line_end":159,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14374,"byte_end":14383,"line_start":160,"line_end":160,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":18076,"byte_end":18094,"line_start":263,"line_end":263,"column_start":8,"column_end":26},"name":"handle_alloc_error","qualname":"::alloc::handle_alloc_error","value":"fn (layout: Layout) -> !","parent":null,"children":[],"decl_id":null,"docs":" Abort on memory allocation error or failure.","sig":null,"attributes":[{"value":"/ Abort on memory allocation error or failure.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17382,"byte_end":17430,"line_start":249,"line_end":249,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17431,"byte_end":17434,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Callers of memory allocation APIs wishing to abort computation","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17435,"byte_end":17501,"line_start":251,"line_end":251,"column_start":1,"column_end":67}},{"value":"/ in response to an allocation error are encouraged to call this function,","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17502,"byte_end":17578,"line_start":252,"line_end":252,"column_start":1,"column_end":77}},{"value":"/ rather than directly invoking `panic!` or similar.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17579,"byte_end":17633,"line_start":253,"line_end":253,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17634,"byte_end":17637,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ The default behavior of this function is to print a message to standard error","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17638,"byte_end":17719,"line_start":255,"line_end":255,"column_start":1,"column_end":82}},{"value":"/ and abort the process.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17720,"byte_end":17746,"line_start":256,"line_end":256,"column_start":1,"column_end":27}},{"value":"/ It can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17747,"byte_end":17830,"line_start":257,"line_end":257,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17831,"byte_end":17834,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17835,"byte_end":17909,"line_start":259,"line_end":259,"column_start":1,"column_end":75}},{"value":"/ [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17910,"byte_end":17986,"line_start":260,"line_end":260,"column_start":1,"column_end":77}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":17987,"byte_end":18040,"line_start":261,"line_end":261,"column_start":1,"column_end":54}},{"value":"rustc_allocator_nounwind","span":{"file_name":"src/liballoc/alloc.rs","byte_start":18041,"byte_end":18068,"line_start":262,"line_end":262,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"src/liballoc/boxed.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":135},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":288},{"krate":0,"index":294}],"decl_id":null,"docs":" A pointer type for heap allocation.","sig":null,"attributes":[{"value":"cfg(not (test))","span":{"file_name":"src/liballoc/lib.rs","byte_start":5085,"byte_end":5102,"line_start":146,"line_end":146,"column_start":1,"column_end":18}},{"value":"! A pointer type for heap allocation.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18245,"byte_end":18284,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18285,"byte_end":18288,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! [`Box<T>`], casually referred to as a 'box', provides the simplest form of","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18289,"byte_end":18367,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! heap allocation in Rust. Boxes provide ownership for this allocation, and","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18368,"byte_end":18445,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! drop their contents when they go out of scope. Boxes also ensure that they","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18446,"byte_end":18524,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"! never allocate more than `isize::MAX` bytes.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18525,"byte_end":18573,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18574,"byte_end":18577,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18578,"byte_end":18592,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18593,"byte_end":18596,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Move a value from the stack to the heap by creating a [`Box`]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18597,"byte_end":18663,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18664,"byte_end":18667,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18668,"byte_end":18675,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"! let val: u8 = 5;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18676,"byte_end":18696,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"! let boxed: Box<u8> = Box::new(val);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18697,"byte_end":18736,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18737,"byte_end":18744,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18745,"byte_end":18748,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Move a value from a [`Box`] back to the stack by [dereferencing]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18749,"byte_end":18818,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18819,"byte_end":18822,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18823,"byte_end":18830,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"! let boxed: Box<u8> = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18831,"byte_end":18868,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"! let val: u8 = *boxed;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18869,"byte_end":18894,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18895,"byte_end":18902,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18903,"byte_end":18906,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! Creating a recursive data structure:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18907,"byte_end":18947,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18948,"byte_end":18951,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18952,"byte_end":18959,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"! #[derive(Debug)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18960,"byte_end":18980,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"! enum List<T> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18981,"byte_end":18999,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"!     Cons(T, Box<List<T>>),","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19000,"byte_end":19030,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"!     Nil,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19031,"byte_end":19043,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"! }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19044,"byte_end":19049,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19050,"byte_end":19053,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19054,"byte_end":19140,"line_start":33,"line_end":33,"column_start":1,"column_end":87}},{"value":"! println!(\"{:?}\", list);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19141,"byte_end":19168,"line_start":34,"line_end":34,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19169,"byte_end":19176,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19177,"byte_end":19180,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! This will print `Cons(1, Cons(2, Nil))`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19181,"byte_end":19225,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19226,"byte_end":19229,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Recursive structures must be boxed, because if the definition of `Cons`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19230,"byte_end":19305,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"! looked like this:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19306,"byte_end":19327,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19328,"byte_end":19331,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! ```compile_fail,E0072","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19332,"byte_end":19357,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"! # enum List<T> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19358,"byte_end":19378,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"! Cons(T, List<T>),","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19379,"byte_end":19400,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"! # }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19401,"byte_end":19408,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19409,"byte_end":19416,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19417,"byte_end":19420,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! It wouldn't work. This is because the size of a `List` depends on how many","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19421,"byte_end":19499,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"! elements are in the list, and so we don't know how much memory to allocate","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19500,"byte_end":19578,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"! for a `Cons`. By introducing a [`Box<T>`], which has a defined size, we know how","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19579,"byte_end":19663,"line_start":50,"line_end":50,"column_start":1,"column_end":85}},{"value":"! big `Cons` needs to be.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19664,"byte_end":19691,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19692,"byte_end":19695,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! # Memory layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19696,"byte_end":19715,"line_start":53,"line_end":53,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19716,"byte_end":19719,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19720,"byte_end":19798,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! its allocation. It is valid to convert both ways between a [`Box`] and a","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19799,"byte_end":19875,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"! raw pointer allocated with the [`Global`] allocator, given that the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19876,"byte_end":19947,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"! [`Layout`] used with the allocator is correct for the type. More precisely,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19948,"byte_end":20027,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"! a `value: *mut T` that has been allocated with the [`Global`] allocator","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20028,"byte_end":20103,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"! with `Layout::for_value(&*value)` may be converted into a box using","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20104,"byte_end":20175,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"! [`Box::<T>::from_raw(value)`]. Conversely, the memory backing a `value: *mut","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20176,"byte_end":20256,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20257,"byte_end":20329,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"! [`Global`] allocator with [`Layout::for_value(&*value)`].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20330,"byte_end":20391,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20392,"byte_end":20395,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20396,"byte_end":20465,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"! as a single pointer and is also ABI-compatible with C pointers","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20466,"byte_end":20532,"line_start":66,"line_end":66,"column_start":1,"column_end":67}},{"value":"! (i.e. the C type `T*`). This means that if you have extern \"C\"","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20533,"byte_end":20599,"line_start":67,"line_end":67,"column_start":1,"column_end":67}},{"value":"! Rust functions that will be called from C, you can define those","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20600,"byte_end":20667,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"! Rust functions using `Box<T>` types, and use `T*` as corresponding","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20668,"byte_end":20738,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"! type on the C side. As an example, consider this C header which","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20739,"byte_end":20806,"line_start":70,"line_end":70,"column_start":1,"column_end":68}},{"value":"! declares functions that create and destroy some kind of `Foo`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20807,"byte_end":20872,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! value:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20873,"byte_end":20883,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20884,"byte_end":20887,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! ```c","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20888,"byte_end":20896,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"! /* C header */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20897,"byte_end":20915,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20916,"byte_end":20919,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! /* Returns ownership to the caller */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20920,"byte_end":20961,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"! struct Foo* foo_new(void);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20962,"byte_end":20992,"line_start":78,"line_end":78,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20993,"byte_end":20996,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! /* Takes ownership from the caller; no-op when invoked with NULL */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20997,"byte_end":21068,"line_start":80,"line_end":80,"column_start":1,"column_end":72}},{"value":"! void foo_delete(struct Foo*);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21069,"byte_end":21102,"line_start":81,"line_end":81,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21103,"byte_end":21110,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21111,"byte_end":21114,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! These two functions might be implemented in Rust as follows. Here, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21115,"byte_end":21189,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! `struct Foo*` type from C is translated to `Box<Foo>`, which captures","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21190,"byte_end":21263,"line_start":85,"line_end":85,"column_start":1,"column_end":74}},{"value":"! the ownership constraints. Note also that the nullable argument to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21264,"byte_end":21334,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"! `foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21335,"byte_end":21414,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"! cannot be null.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21415,"byte_end":21434,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21435,"byte_end":21438,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21439,"byte_end":21446,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"! #[repr(C)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21447,"byte_end":21461,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"! pub struct Foo;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21462,"byte_end":21481,"line_start":92,"line_end":92,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21482,"byte_end":21485,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21486,"byte_end":21502,"line_start":94,"line_end":94,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn foo_new() -> Box<Foo> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21503,"byte_end":21548,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"!     Box::new(Foo)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21549,"byte_end":21570,"line_start":96,"line_end":96,"column_start":1,"column_end":22}},{"value":"! }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21571,"byte_end":21576,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21577,"byte_end":21580,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21581,"byte_end":21597,"line_start":99,"line_end":99,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21598,"byte_end":21654,"line_start":100,"line_end":100,"column_start":1,"column_end":57}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21655,"byte_end":21662,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21663,"byte_end":21666,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"! Even though `Box<T>` has the same representation and C ABI as a C pointer,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21667,"byte_end":21745,"line_start":103,"line_end":103,"column_start":1,"column_end":79}},{"value":"! this does not mean that you can convert an arbitrary `T*` into a `Box<T>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21746,"byte_end":21823,"line_start":104,"line_end":104,"column_start":1,"column_end":78}},{"value":"! and expect things to work. `Box<T>` values will always be fully aligned,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21824,"byte_end":21900,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! non-null pointers. Moreover, the destructor for `Box<T>` will attempt to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21901,"byte_end":21977,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"! free the value with the global allocator. In general, the best practice","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21978,"byte_end":22053,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"! is to only use `Box<T>` for pointers that originated from the global","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22054,"byte_end":22126,"line_start":108,"line_end":108,"column_start":1,"column_end":73}},{"value":"! allocator.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22127,"byte_end":22141,"line_start":109,"line_end":109,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22142,"byte_end":22145,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"! **Important.** At least at present, you should avoid using","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22146,"byte_end":22208,"line_start":111,"line_end":111,"column_start":1,"column_end":63}},{"value":"! `Box<T>` types for functions that are defined in C but invoked","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22209,"byte_end":22275,"line_start":112,"line_end":112,"column_start":1,"column_end":67}},{"value":"! from Rust. In those cases, you should directly mirror the C types","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22276,"byte_end":22345,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"! as closely as possible. Using types like `Box<T>` where the C","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22346,"byte_end":22411,"line_start":114,"line_end":114,"column_start":1,"column_end":66}},{"value":"! definition is just using `T*` can lead to undefined behavior, as","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22412,"byte_end":22480,"line_start":115,"line_end":115,"column_start":1,"column_end":69}},{"value":"! described in [rust-lang/unsafe-code-guidelines#198][ucg#198].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22481,"byte_end":22546,"line_start":116,"line_end":116,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22547,"byte_end":22550,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22551,"byte_end":22628,"line_start":118,"line_end":118,"column_start":1,"column_end":78}},{"value":"! [dereferencing]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22629,"byte_end":22680,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"! [`Box`]: struct.Box.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22681,"byte_end":22709,"line_start":120,"line_end":120,"column_start":1,"column_end":29}},{"value":"! [`Box<T>`]: struct.Box.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22710,"byte_end":22741,"line_start":121,"line_end":121,"column_start":1,"column_end":32}},{"value":"! [`Box::<T>::from_raw(value)`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22742,"byte_end":22808,"line_start":122,"line_end":122,"column_start":1,"column_end":67}},{"value":"! [`Box::<T>::into_raw`]: struct.Box.html#method.into_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22809,"byte_end":22868,"line_start":123,"line_end":123,"column_start":1,"column_end":60}},{"value":"! [`Global`]: ../alloc/struct.Global.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22869,"byte_end":22912,"line_start":124,"line_end":124,"column_start":1,"column_end":44}},{"value":"! [`Layout`]: ../alloc/struct.Layout.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22913,"byte_end":22956,"line_start":125,"line_end":125,"column_start":1,"column_end":44}},{"value":"! [`Layout::for_value(&*value)`]: ../alloc/struct.Layout.html#method.for_value","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22957,"byte_end":23037,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23039,"byte_end":23085,"line_start":128,"line_end":128,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":84},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":23974,"byte_end":23977,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"Box","qualname":"::boxed::Box","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pointer type for heap allocation.","sig":null,"attributes":[{"value":"/ A pointer type for heap allocation.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23757,"byte_end":23796,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23797,"byte_end":23800,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](../../std/boxed/index.html) for more.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23801,"byte_end":23879,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"lang = \"owned_box\"","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23880,"byte_end":23901,"line_start":157,"line_end":157,"column_start":1,"column_end":22}},{"value":"fundamental","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23902,"byte_end":23916,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23917,"byte_end":23962,"line_start":159,"line_end":159,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24328,"byte_end":24331,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Box<T>>::new","value":"fn (x: T) -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and then places `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and then places `x` into it.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24023,"byte_end":24084,"line_start":163,"line_end":163,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24089,"byte_end":24092,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This doesn't actually allocate if `T` is zero-sized.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24097,"byte_end":24153,"line_start":165,"line_end":165,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24158,"byte_end":24161,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24166,"byte_end":24180,"line_start":167,"line_end":167,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24185,"byte_end":24188,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24193,"byte_end":24200,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"/ let five = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24205,"byte_end":24232,"line_start":170,"line_end":170,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24237,"byte_end":24244,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24249,"byte_end":24294,"line_start":172,"line_end":172,"column_start":5,"column_end":50}},{"value":"inline(always)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24299,"byte_end":24316,"line_start":173,"line_end":173,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24848,"byte_end":24858,"line_start":197,"line_end":197,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Box<T>>::new_uninit","value":"fn () -> Box<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new box with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new box with uninitialized contents.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24375,"byte_end":24428,"line_start":178,"line_end":178,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24433,"byte_end":24436,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24441,"byte_end":24455,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24460,"byte_end":24463,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24468,"byte_end":24475,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24480,"byte_end":24507,"line_start":183,"line_end":183,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24512,"byte_end":24515,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut five = Box::<u32>::new_uninit();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24520,"byte_end":24564,"line_start":185,"line_end":185,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24569,"byte_end":24572,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24577,"byte_end":24600,"line_start":187,"line_end":187,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24605,"byte_end":24640,"line_start":188,"line_end":188,"column_start":5,"column_end":40}},{"value":"/     five.as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24645,"byte_end":24680,"line_start":189,"line_end":189,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24685,"byte_end":24688,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24693,"byte_end":24719,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24724,"byte_end":24730,"line_start":192,"line_end":192,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24735,"byte_end":24738,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24743,"byte_end":24767,"line_start":194,"line_end":194,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24772,"byte_end":24779,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24784,"byte_end":24836,"line_start":196,"line_end":196,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":25858,"byte_end":25868,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Box<T>>::new_zeroed","value":"fn () -> Box<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Box` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Box` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25253,"byte_end":25324,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25329,"byte_end":25361,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25366,"byte_end":25369,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25374,"byte_end":25457,"line_start":212,"line_end":212,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25462,"byte_end":25481,"line_start":213,"line_end":213,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25486,"byte_end":25489,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25494,"byte_end":25508,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25513,"byte_end":25516,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25521,"byte_end":25528,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25533,"byte_end":25560,"line_start":218,"line_end":218,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25565,"byte_end":25568,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let zero = Box::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25573,"byte_end":25613,"line_start":220,"line_end":220,"column_start":5,"column_end":45}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25618,"byte_end":25663,"line_start":221,"line_end":221,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25668,"byte_end":25671,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25676,"byte_end":25700,"line_start":223,"line_end":223,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25705,"byte_end":25712,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25717,"byte_end":25720,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25725,"byte_end":25789,"line_start":226,"line_end":226,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25794,"byte_end":25846,"line_start":227,"line_end":227,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":26288,"byte_end":26291,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"pin","qualname":"<Box<T>>::pin","value":"fn (x: T) -> Pin<Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n `x` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26069,"byte_end":26144,"line_start":236,"line_end":236,"column_start":5,"column_end":80}},{"value":"/ `x` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26149,"byte_end":26205,"line_start":237,"line_end":237,"column_start":5,"column_end":61}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26210,"byte_end":26254,"line_start":238,"line_end":238,"column_start":5,"column_end":49}},{"value":"inline(always)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26259,"byte_end":26276,"line_start":239,"line_end":239,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":26971,"byte_end":26987,"line_start":267,"line_end":267,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Box<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Box<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new boxed slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new boxed slice with uninitialized contents.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26370,"byte_end":26431,"line_start":246,"line_end":246,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26436,"byte_end":26439,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26444,"byte_end":26458,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26463,"byte_end":26466,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26471,"byte_end":26478,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26483,"byte_end":26510,"line_start":251,"line_end":251,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26515,"byte_end":26518,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let mut values = Box::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26523,"byte_end":26578,"line_start":253,"line_end":253,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26583,"byte_end":26586,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26591,"byte_end":26616,"line_start":255,"line_end":255,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26621,"byte_end":26656,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/     values[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26661,"byte_end":26701,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/     values[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26706,"byte_end":26746,"line_start":258,"line_end":258,"column_start":5,"column_end":45}},{"value":"/     values[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26751,"byte_end":26791,"line_start":259,"line_end":259,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26796,"byte_end":26799,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26804,"byte_end":26832,"line_start":261,"line_end":261,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26837,"byte_end":26843,"line_start":262,"line_end":262,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26848,"byte_end":26851,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26856,"byte_end":26890,"line_start":264,"line_end":264,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26895,"byte_end":26902,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26907,"byte_end":26959,"line_start":266,"line_end":266,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":28348,"byte_end":28359,"line_start":311,"line_end":311,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Box<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Box<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Box<T>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27477,"byte_end":27502,"line_start":281,"line_end":281,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27507,"byte_end":27510,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27515,"byte_end":27527,"line_start":283,"line_end":283,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27532,"byte_end":27535,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27540,"byte_end":27581,"line_start":285,"line_end":285,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the value","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27586,"byte_end":27640,"line_start":286,"line_end":286,"column_start":5,"column_end":59}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27645,"byte_end":27683,"line_start":287,"line_end":287,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27688,"byte_end":27750,"line_start":288,"line_end":288,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27755,"byte_end":27795,"line_start":289,"line_end":289,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27800,"byte_end":27803,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27808,"byte_end":27897,"line_start":291,"line_end":291,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27902,"byte_end":27905,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27910,"byte_end":27924,"line_start":293,"line_end":293,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27929,"byte_end":27932,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27937,"byte_end":27944,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27949,"byte_end":27976,"line_start":296,"line_end":296,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27981,"byte_end":27984,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let mut five = Box::<u32>::new_uninit();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27989,"byte_end":28033,"line_start":298,"line_end":298,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28038,"byte_end":28041,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let five: Box<u32> = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28046,"byte_end":28079,"line_start":300,"line_end":300,"column_start":5,"column_end":38}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28084,"byte_end":28119,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/     five.as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28124,"byte_end":28159,"line_start":302,"line_end":302,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28164,"byte_end":28167,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28172,"byte_end":28198,"line_start":304,"line_end":304,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28203,"byte_end":28209,"line_start":305,"line_end":305,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28214,"byte_end":28217,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28222,"byte_end":28246,"line_start":307,"line_end":307,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28251,"byte_end":28258,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28263,"byte_end":28315,"line_start":309,"line_end":309,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28320,"byte_end":28329,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":29466,"byte_end":29477,"line_start":349,"line_end":349,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Box<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Box<[T]>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28481,"byte_end":28508,"line_start":317,"line_end":317,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28513,"byte_end":28516,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28521,"byte_end":28533,"line_start":319,"line_end":319,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28538,"byte_end":28541,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28546,"byte_end":28587,"line_start":321,"line_end":321,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the values","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28592,"byte_end":28647,"line_start":322,"line_end":322,"column_start":5,"column_end":60}},{"value":"/ really are in an initialized state.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28652,"byte_end":28691,"line_start":323,"line_end":323,"column_start":5,"column_end":44}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28696,"byte_end":28758,"line_start":324,"line_end":324,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28763,"byte_end":28803,"line_start":325,"line_end":325,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28808,"byte_end":28811,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28816,"byte_end":28905,"line_start":327,"line_end":327,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28910,"byte_end":28913,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28918,"byte_end":28932,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28937,"byte_end":28940,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28945,"byte_end":28952,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28957,"byte_end":28984,"line_start":332,"line_end":332,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28989,"byte_end":28992,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ let mut values = Box::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28997,"byte_end":29052,"line_start":334,"line_end":334,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29057,"byte_end":29060,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29065,"byte_end":29090,"line_start":336,"line_end":336,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29095,"byte_end":29130,"line_start":337,"line_end":337,"column_start":5,"column_end":40}},{"value":"/     values[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29135,"byte_end":29175,"line_start":338,"line_end":338,"column_start":5,"column_end":45}},{"value":"/     values[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29180,"byte_end":29220,"line_start":339,"line_end":339,"column_start":5,"column_end":45}},{"value":"/     values[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29225,"byte_end":29265,"line_start":340,"line_end":340,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29270,"byte_end":29273,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29278,"byte_end":29306,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29311,"byte_end":29317,"line_start":343,"line_end":343,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29322,"byte_end":29325,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29330,"byte_end":29364,"line_start":345,"line_end":345,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29369,"byte_end":29376,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29381,"byte_end":29433,"line_start":347,"line_end":347,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29438,"byte_end":29447,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":31012,"byte_end":31020,"line_start":393,"line_end":393,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Box<T>>::from_raw","value":"fn (raw: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a box from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs a box from a raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29591,"byte_end":29631,"line_start":355,"line_end":355,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29636,"byte_end":29639,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the raw pointer is owned by the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29644,"byte_end":29708,"line_start":357,"line_end":357,"column_start":5,"column_end":69}},{"value":"/ resulting `Box`. Specifically, the `Box` destructor will call","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29713,"byte_end":29778,"line_start":358,"line_end":358,"column_start":5,"column_end":70}},{"value":"/ the destructor of `T` and free the allocated memory. For this","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29783,"byte_end":29848,"line_start":359,"line_end":359,"column_start":5,"column_end":70}},{"value":"/ to be safe, the memory must have been allocated in accordance","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29853,"byte_end":29918,"line_start":360,"line_end":360,"column_start":5,"column_end":70}},{"value":"/ with the [memory layout] used by `Box` .","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29923,"byte_end":29967,"line_start":361,"line_end":361,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29972,"byte_end":29975,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29980,"byte_end":29992,"line_start":363,"line_end":363,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29997,"byte_end":30000,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30005,"byte_end":30065,"line_start":365,"line_end":365,"column_start":5,"column_end":65}},{"value":"/ memory problems. For example, a double-free may occur if the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30070,"byte_end":30134,"line_start":366,"line_end":366,"column_start":5,"column_end":69}},{"value":"/ function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30139,"byte_end":30192,"line_start":367,"line_end":367,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30197,"byte_end":30200,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30205,"byte_end":30219,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/ Recreate a `Box` which was previously converted to a raw pointer","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30224,"byte_end":30292,"line_start":370,"line_end":370,"column_start":5,"column_end":73}},{"value":"/ using [`Box::into_raw`]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30297,"byte_end":30325,"line_start":371,"line_end":371,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30330,"byte_end":30337,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30342,"byte_end":30366,"line_start":373,"line_end":373,"column_start":5,"column_end":29}},{"value":"/ let ptr = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30371,"byte_end":30402,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/ let x = unsafe { Box::from_raw(ptr) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30407,"byte_end":30449,"line_start":375,"line_end":375,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30454,"byte_end":30461,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ Manually create a `Box` from scratch by using the global allocator:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30466,"byte_end":30537,"line_start":377,"line_end":377,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30542,"byte_end":30549,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use std::alloc::{alloc, Layout};","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30554,"byte_end":30590,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30595,"byte_end":30598,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30603,"byte_end":30615,"line_start":381,"line_end":381,"column_start":5,"column_end":17}},{"value":"/     let ptr = alloc(Layout::new::<i32>()) as *mut i32;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30620,"byte_end":30678,"line_start":382,"line_end":382,"column_start":5,"column_end":63}},{"value":"/     *ptr = 5;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30683,"byte_end":30700,"line_start":383,"line_end":383,"column_start":5,"column_end":22}},{"value":"/     let x = Box::from_raw(ptr);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30705,"byte_end":30740,"line_start":384,"line_end":384,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30745,"byte_end":30750,"line_start":385,"line_end":385,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30755,"byte_end":30762,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30767,"byte_end":30770,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [memory layout]: index.html#memory-layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30775,"byte_end":30820,"line_start":388,"line_end":388,"column_start":5,"column_end":50}},{"value":"/ [`Layout`]: ../alloc/struct.Layout.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30825,"byte_end":30868,"line_start":389,"line_end":389,"column_start":5,"column_end":48}},{"value":"/ [`Box::into_raw`]: struct.Box.html#method.into_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30873,"byte_end":30927,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"stable(feature = \"box_raw\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30932,"byte_end":30979,"line_start":391,"line_end":391,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30984,"byte_end":30993,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":32794,"byte_end":32802,"line_start":439,"line_end":439,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Box<T>>::into_raw","value":"fn (b: Box<T>) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Box`, returning a wrapped raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Box`, returning a wrapped raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31095,"byte_end":31151,"line_start":397,"line_end":397,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31156,"byte_end":31159,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The pointer will be properly aligned and non-null.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31164,"byte_end":31218,"line_start":399,"line_end":399,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31223,"byte_end":31226,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31231,"byte_end":31297,"line_start":401,"line_end":401,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Box`. In particular, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31302,"byte_end":31364,"line_start":402,"line_end":402,"column_start":5,"column_end":67}},{"value":"/ caller should properly destroy `T` and release the memory, taking","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31369,"byte_end":31438,"line_start":403,"line_end":403,"column_start":5,"column_end":74}},{"value":"/ into account the [memory layout] used by `Box`. The easiest way to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31443,"byte_end":31513,"line_start":404,"line_end":404,"column_start":5,"column_end":75}},{"value":"/ do this is to convert the raw pointer back into a `Box` with the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31518,"byte_end":31586,"line_start":405,"line_end":405,"column_start":5,"column_end":73}},{"value":"/ [`Box::from_raw`] function, allowing the `Box` destructor to perform","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31591,"byte_end":31663,"line_start":406,"line_end":406,"column_start":5,"column_end":77}},{"value":"/ the cleanup.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31668,"byte_end":31684,"line_start":407,"line_end":407,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31689,"byte_end":31692,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31697,"byte_end":31764,"line_start":409,"line_end":409,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31769,"byte_end":31837,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31842,"byte_end":31910,"line_start":411,"line_end":411,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31915,"byte_end":31918,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31923,"byte_end":31937,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/ Converting the raw pointer back into a `Box` with [`Box::from_raw`]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31942,"byte_end":32013,"line_start":414,"line_end":414,"column_start":5,"column_end":76}},{"value":"/ for automatic cleanup:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32018,"byte_end":32044,"line_start":415,"line_end":415,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32049,"byte_end":32056,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(String::from(\"Hello\"));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32061,"byte_end":32105,"line_start":417,"line_end":417,"column_start":5,"column_end":49}},{"value":"/ let ptr = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32110,"byte_end":32141,"line_start":418,"line_end":418,"column_start":5,"column_end":36}},{"value":"/ let x = unsafe { Box::from_raw(ptr) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32146,"byte_end":32188,"line_start":419,"line_end":419,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32193,"byte_end":32200,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ Manual cleanup by explicitly running the destructor and deallocating","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32205,"byte_end":32277,"line_start":421,"line_end":421,"column_start":5,"column_end":77}},{"value":"/ the memory:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32282,"byte_end":32297,"line_start":422,"line_end":422,"column_start":5,"column_end":20}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32302,"byte_end":32309,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"/ use std::alloc::{dealloc, Layout};","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32314,"byte_end":32352,"line_start":424,"line_end":424,"column_start":5,"column_end":43}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32357,"byte_end":32374,"line_start":425,"line_end":425,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32379,"byte_end":32382,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let x = Box::new(String::from(\"Hello\"));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32387,"byte_end":32431,"line_start":427,"line_end":427,"column_start":5,"column_end":49}},{"value":"/ let p = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32436,"byte_end":32465,"line_start":428,"line_end":428,"column_start":5,"column_end":34}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32470,"byte_end":32482,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/     ptr::drop_in_place(p);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32487,"byte_end":32517,"line_start":430,"line_end":430,"column_start":5,"column_end":35}},{"value":"/     dealloc(p as *mut u8, Layout::new::<String>());","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32522,"byte_end":32577,"line_start":431,"line_end":431,"column_start":5,"column_end":60}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32582,"byte_end":32587,"line_start":432,"line_end":432,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32592,"byte_end":32599,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32604,"byte_end":32607,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ [memory layout]: index.html#memory-layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32612,"byte_end":32657,"line_start":435,"line_end":435,"column_start":5,"column_end":50}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32662,"byte_end":32716,"line_start":436,"line_end":436,"column_start":5,"column_end":59}},{"value":"stable(feature = \"box_raw\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32721,"byte_end":32768,"line_start":437,"line_end":437,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32773,"byte_end":32782,"line_start":438,"line_end":438,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":34114,"byte_end":34131,"line_start":473,"line_end":473,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Box<T>>::into_raw_non_null","value":"fn (b: Box<T>) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32880,"byte_end":32950,"line_start":443,"line_end":443,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32955,"byte_end":32958,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32963,"byte_end":33029,"line_start":445,"line_end":445,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Box`. In particular, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33034,"byte_end":33096,"line_start":446,"line_end":446,"column_start":5,"column_end":67}},{"value":"/ caller should properly destroy `T` and release the memory. The","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33101,"byte_end":33167,"line_start":447,"line_end":447,"column_start":5,"column_end":71}},{"value":"/ easiest way to do so is to convert the `NonNull<T>` pointer","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33172,"byte_end":33235,"line_start":448,"line_end":448,"column_start":5,"column_end":68}},{"value":"/ into a raw pointer and back into a `Box` with the [`Box::from_raw`]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33240,"byte_end":33311,"line_start":449,"line_end":449,"column_start":5,"column_end":76}},{"value":"/ function.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33316,"byte_end":33329,"line_start":450,"line_end":450,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33334,"byte_end":33337,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33342,"byte_end":33409,"line_start":452,"line_end":452,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::into_raw_non_null(b)`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33414,"byte_end":33459,"line_start":453,"line_end":453,"column_start":5,"column_end":50}},{"value":"/ instead of `b.into_raw_non_null()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33464,"byte_end":33508,"line_start":454,"line_end":454,"column_start":5,"column_end":49}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33513,"byte_end":33581,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33586,"byte_end":33589,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33594,"byte_end":33648,"line_start":457,"line_end":457,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33653,"byte_end":33656,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33661,"byte_end":33675,"line_start":459,"line_end":459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33680,"byte_end":33683,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33688,"byte_end":33695,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ #![feature(box_into_raw_non_null)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33700,"byte_end":33738,"line_start":462,"line_end":462,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33743,"byte_end":33746,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ let x = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33751,"byte_end":33775,"line_start":464,"line_end":464,"column_start":5,"column_end":29}},{"value":"/ let ptr = Box::into_raw_non_null(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33780,"byte_end":33820,"line_start":465,"line_end":465,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33825,"byte_end":33828,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ // Clean up the memory by converting the NonNull pointer back","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33833,"byte_end":33898,"line_start":467,"line_end":467,"column_start":5,"column_end":70}},{"value":"/ // into a Box and letting the Box be dropped.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33903,"byte_end":33952,"line_start":468,"line_end":468,"column_start":5,"column_end":54}},{"value":"/ let x = unsafe { Box::from_raw(ptr.as_ptr()) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33957,"byte_end":34008,"line_start":469,"line_end":469,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34013,"byte_end":34020,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34025,"byte_end":34088,"line_start":471,"line_end":471,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34093,"byte_end":34102,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":34346,"byte_end":34357,"line_start":480,"line_end":480,"column_start":12,"column_end":23},"name":"into_unique","qualname":"<Box<T>>::into_unique","value":"fn (b: Box<T>) -> Unique<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"none\", reason =\n           \"use into_raw_non_null instead\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34205,"byte_end":34301,"line_start":477,"line_end":477,"column_start":5,"column_end":101}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34306,"byte_end":34315,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36458,"byte_end":36462,"line_start":531,"line_end":531,"column_start":12,"column_end":16},"name":"leak","qualname":"<Box<T>>::leak","value":"fn <'a> (b: Box<T>) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `Box`, returning a mutable reference,\n `&'a mut T`. Note that the type `T` must outlive the chosen lifetime\n `'a`. If the type has only static references, or none at all, then this\n may be chosen to be `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `Box`, returning a mutable reference,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34947,"byte_end":35011,"line_start":492,"line_end":492,"column_start":5,"column_end":69}},{"value":"/ `&'a mut T`. Note that the type `T` must outlive the chosen lifetime","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35016,"byte_end":35088,"line_start":493,"line_end":493,"column_start":5,"column_end":77}},{"value":"/ `'a`. If the type has only static references, or none at all, then this","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35093,"byte_end":35168,"line_start":494,"line_end":494,"column_start":5,"column_end":80}},{"value":"/ may be chosen to be `'static`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35173,"byte_end":35207,"line_start":495,"line_end":495,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35212,"byte_end":35215,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35220,"byte_end":35295,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ the program's life. Dropping the returned reference will cause a memory","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35300,"byte_end":35375,"line_start":498,"line_end":498,"column_start":5,"column_end":80}},{"value":"/ leak. If this is not acceptable, the reference should first be wrapped","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35380,"byte_end":35454,"line_start":499,"line_end":499,"column_start":5,"column_end":79}},{"value":"/ with the [`Box::from_raw`] function producing a `Box`. This `Box` can","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35459,"byte_end":35532,"line_start":500,"line_end":500,"column_start":5,"column_end":78}},{"value":"/ then be dropped which will properly destroy `T` and release the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35537,"byte_end":35604,"line_start":501,"line_end":501,"column_start":5,"column_end":72}},{"value":"/ allocated memory.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35609,"byte_end":35630,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35635,"byte_end":35638,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35643,"byte_end":35710,"line_start":504,"line_end":504,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::leak(b)` instead of `b.leak()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35715,"byte_end":35775,"line_start":505,"line_end":505,"column_start":5,"column_end":65}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35780,"byte_end":35848,"line_start":506,"line_end":506,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35853,"byte_end":35856,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35861,"byte_end":35915,"line_start":508,"line_end":508,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35920,"byte_end":35923,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35928,"byte_end":35942,"line_start":510,"line_end":510,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35947,"byte_end":35950,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Simple usage:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35955,"byte_end":35972,"line_start":512,"line_end":512,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35977,"byte_end":35980,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35985,"byte_end":35992,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(41);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35997,"byte_end":36022,"line_start":515,"line_end":515,"column_start":5,"column_end":30}},{"value":"/ let static_ref: &'static mut usize = Box::leak(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36027,"byte_end":36081,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/ *static_ref += 1;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36086,"byte_end":36107,"line_start":517,"line_end":517,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(*static_ref, 42);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36112,"byte_end":36144,"line_start":518,"line_end":518,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36149,"byte_end":36156,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36161,"byte_end":36164,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Unsized data:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36169,"byte_end":36186,"line_start":521,"line_end":521,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36191,"byte_end":36194,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36199,"byte_end":36206,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ let x = vec![1, 2, 3].into_boxed_slice();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36211,"byte_end":36256,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/ let static_ref = Box::leak(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36261,"byte_end":36295,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/ static_ref[0] = 4;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36300,"byte_end":36322,"line_start":526,"line_end":526,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*static_ref, [4, 2, 3]);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36327,"byte_end":36366,"line_start":527,"line_end":527,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36371,"byte_end":36378,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_leak\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36383,"byte_end":36432,"line_start":529,"line_end":529,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36437,"byte_end":36446,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36879,"byte_end":36887,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"into_pin","qualname":"<Box<T>>::into_pin","value":"fn (boxed: Box<T>) -> Pin<Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<T>` into a `Pin<Box<T>>`","sig":null,"attributes":[{"value":"/ Converts a `Box<T>` into a `Pin<Box<T>>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36627,"byte_end":36671,"line_start":538,"line_end":538,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36676,"byte_end":36679,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ This conversion does not allocate on the heap and happens in place.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36684,"byte_end":36755,"line_start":540,"line_end":540,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36760,"byte_end":36763,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This is also available via [`From`].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36768,"byte_end":36808,"line_start":542,"line_end":542,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"box_into_pin\", issue = \"62370\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36813,"byte_end":36867,"line_start":543,"line_end":543,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45642,"byte_end":45650,"line_start":864,"line_end":864,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Box<Any>>::downcast","value":"fn <T> (self) -> Result<Box<T>, Box<dyn Any>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the box to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45074,"byte_end":45083,"line_start":845,"line_end":845,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45088,"byte_end":45133,"line_start":846,"line_end":846,"column_start":5,"column_end":50}},{"value":"/ Attempt to downcast the box to a concrete type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45138,"byte_end":45189,"line_start":847,"line_end":847,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45194,"byte_end":45197,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45202,"byte_end":45216,"line_start":849,"line_end":849,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45221,"byte_end":45224,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45229,"byte_end":45236,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45241,"byte_end":45263,"line_start":852,"line_end":852,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45268,"byte_end":45271,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Box<dyn Any>) {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45276,"byte_end":45321,"line_start":854,"line_end":854,"column_start":5,"column_end":50}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45326,"byte_end":45382,"line_start":855,"line_end":855,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45387,"byte_end":45449,"line_start":856,"line_end":856,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45454,"byte_end":45463,"line_start":857,"line_end":857,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45468,"byte_end":45473,"line_start":858,"line_end":858,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45478,"byte_end":45481,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45486,"byte_end":45532,"line_start":860,"line_end":860,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Box::new(my_string));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45537,"byte_end":45578,"line_start":861,"line_end":861,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Box::new(0i8));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45583,"byte_end":45618,"line_start":862,"line_end":862,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45623,"byte_end":45630,"line_start":863,"line_end":863,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46536,"byte_end":46544,"line_start":896,"line_end":896,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Box<Any + Send>>::downcast","value":"fn <T> (self) -> Result<Box<T>, Box<dyn Any + Send>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the box to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45961,"byte_end":45970,"line_start":877,"line_end":877,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45975,"byte_end":46020,"line_start":878,"line_end":878,"column_start":5,"column_end":50}},{"value":"/ Attempt to downcast the box to a concrete type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46025,"byte_end":46076,"line_start":879,"line_end":879,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46081,"byte_end":46084,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46089,"byte_end":46103,"line_start":881,"line_end":881,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46108,"byte_end":46111,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46116,"byte_end":46123,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46128,"byte_end":46150,"line_start":884,"line_end":884,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46155,"byte_end":46158,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Box<dyn Any + Send>) {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46163,"byte_end":46215,"line_start":886,"line_end":886,"column_start":5,"column_end":57}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46220,"byte_end":46276,"line_start":887,"line_end":887,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46281,"byte_end":46343,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46348,"byte_end":46357,"line_start":889,"line_end":889,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46362,"byte_end":46367,"line_start":890,"line_end":890,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46372,"byte_end":46375,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46380,"byte_end":46426,"line_start":892,"line_end":892,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Box::new(my_string));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46431,"byte_end":46472,"line_start":893,"line_end":893,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Box::new(0i8));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46477,"byte_end":46512,"line_start":894,"line_end":894,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46517,"byte_end":46524,"line_start":895,"line_end":895,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":221},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48455,"byte_end":48459,"line_start":965,"line_end":965,"column_start":10,"column_end":14},"name":"Item","qualname":"::boxed::BoxIter::Item","value":"type Item;","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48468,"byte_end":48472,"line_start":966,"line_end":966,"column_start":8,"column_end":12},"name":"last","qualname":"::boxed::BoxIter::last","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":298},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"borrow","qualname":"::borrow","value":"src/liballoc/borrow.rs","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":326},{"krate":0,"index":335},{"krate":0,"index":339},{"krate":0,"index":345},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":391}],"decl_id":null,"docs":" A module for working with borrowed data.\n","sig":null,"attributes":[{"value":"! A module for working with borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54528,"byte_end":54572,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54574,"byte_end":54620,"line_start":3,"line_end":3,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":55442,"byte_end":55449,"line_start":35,"line_end":35,"column_start":11,"column_end":18},"name":"ToOwned","qualname":"::borrow::ToOwned","value":"ToOwned","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"decl_id":null,"docs":" A generalization of `Clone` to borrowed data.","sig":null,"attributes":[{"value":"/ A generalization of `Clone` to borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55067,"byte_end":55116,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55117,"byte_end":55120,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Some types make it possible to go from borrowed to owned, usually by","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55121,"byte_end":55193,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ implementing the `Clone` trait. But `Clone` works only for going from `&T`","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55194,"byte_end":55272,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55273,"byte_end":55348,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ from any borrow of a given type.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55349,"byte_end":55385,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55386,"byte_end":55431,"line_start":34,"line_end":34,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":55565,"byte_end":55570,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"Owned","qualname":"::borrow::ToOwned::Owned","value":"type Owned: Borrow<Self>;","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" The resulting type after obtaining ownership.\n","sig":null,"attributes":[{"value":"/ The resulting type after obtaining ownership.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55456,"byte_end":55505,"line_start":36,"line_end":36,"column_start":5,"column_end":54}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55510,"byte_end":55555,"line_start":37,"line_end":37,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":56035,"byte_end":56043,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"to_owned","qualname":"::borrow::ToOwned::to_owned","value":"fn (&self) -> Self::Owned","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Creates owned data from borrowed data, usually by cloning.","sig":null,"attributes":[{"value":"/ Creates owned data from borrowed data, usually by cloning.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55591,"byte_end":55653,"line_start":40,"line_end":40,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55658,"byte_end":55661,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55666,"byte_end":55680,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55685,"byte_end":55688,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55693,"byte_end":55709,"line_start":44,"line_end":44,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55714,"byte_end":55717,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55722,"byte_end":55729,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/ let s: &str = \"a\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55734,"byte_end":55756,"line_start":47,"line_end":47,"column_start":5,"column_end":27}},{"value":"/ let ss: String = s.to_owned();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55761,"byte_end":55795,"line_start":48,"line_end":48,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55800,"byte_end":55803,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ let v: &[i32] = &[1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55808,"byte_end":55836,"line_start":50,"line_end":50,"column_start":5,"column_end":33}},{"value":"/ let vv: Vec<i32> = v.to_owned();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55841,"byte_end":55877,"line_start":51,"line_end":51,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55882,"byte_end":55889,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55894,"byte_end":55939,"line_start":53,"line_end":53,"column_start":5,"column_end":50}},{"value":"must_use =\n  \"cloning is often expensive and is not expected to have side effects\"","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55944,"byte_end":56027,"line_start":54,"line_end":54,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":56610,"byte_end":56620,"line_start":74,"line_end":74,"column_start":8,"column_end":18},"name":"clone_into","qualname":"::borrow::ToOwned::clone_into","value":"fn (&self, target: &mut Self::Owned) -> ()","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Uses borrowed data to replace owned data, usually by cloning.","sig":null,"attributes":[{"value":"/ Uses borrowed data to replace owned data, usually by cloning.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56072,"byte_end":56137,"line_start":57,"line_end":57,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56142,"byte_end":56145,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This is borrow-generalized version of `Clone::clone_from`.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56150,"byte_end":56212,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56217,"byte_end":56220,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56225,"byte_end":56239,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56244,"byte_end":56247,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56252,"byte_end":56268,"line_start":63,"line_end":63,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56273,"byte_end":56276,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56281,"byte_end":56288,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"/ # #![feature(toowned_clone_into)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56293,"byte_end":56330,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/ let mut s: String = String::new();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56335,"byte_end":56373,"line_start":67,"line_end":67,"column_start":5,"column_end":43}},{"value":"/ \"hello\".clone_into(&mut s);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56378,"byte_end":56409,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56414,"byte_end":56417,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56422,"byte_end":56459,"line_start":70,"line_end":70,"column_start":5,"column_end":42}},{"value":"/ [1, 2][..].clone_into(&mut v);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56464,"byte_end":56498,"line_start":71,"line_end":71,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56503,"byte_end":56510,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"toowned_clone_into\", reason = \"recently added\", issue =\n           \"41263\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56515,"byte_end":56602,"line_start":73,"line_end":73,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59619,"byte_end":59627,"line_start":177,"line_end":177,"column_start":5,"column_end":13},"name":"Borrowed","qualname":"::borrow::Cow::Borrowed","value":"Cow::Borrowed(&'a B)","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Borrowed data.\n","sig":null,"attributes":[{"value":"/ Borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59546,"byte_end":59564,"line_start":175,"line_end":175,"column_start":5,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59569,"byte_end":59614,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":332},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59757,"byte_end":59762,"line_start":181,"line_end":181,"column_start":5,"column_end":10},"name":"Owned","qualname":"::borrow::Cow::Owned","value":"Cow::Owned(<B as ToOwned>::Owned)","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Owned data.\n","sig":null,"attributes":[{"value":"/ Owned data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59687,"byte_end":59702,"line_start":179,"line_end":179,"column_start":5,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59707,"byte_end":59752,"line_start":180,"line_end":180,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":326},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59494,"byte_end":59497,"line_start":171,"line_end":171,"column_start":10,"column_end":13},"name":"Cow","qualname":"::borrow::Cow","value":"Cow::{Borrowed, Owned}","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":332}],"decl_id":null,"docs":" A clone-on-write smart pointer.","sig":null,"attributes":[{"value":"/ A clone-on-write smart pointer.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56953,"byte_end":56988,"line_start":94,"line_end":94,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56989,"byte_end":56992,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ The type `Cow` is a smart pointer providing clone-on-write functionality: it","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56993,"byte_end":57073,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ can enclose and provide immutable access to borrowed data, and clone the","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57074,"byte_end":57150,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ data lazily when mutation or ownership is required. The type is designed to","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57151,"byte_end":57230,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ work with general borrowed data via the `Borrow` trait.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57231,"byte_end":57290,"line_start":99,"line_end":99,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57291,"byte_end":57294,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Cow` implements `Deref`, which means that you can call","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57295,"byte_end":57354,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/ non-mutating methods directly on the data it encloses. If mutation","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57355,"byte_end":57425,"line_start":102,"line_end":102,"column_start":1,"column_end":71}},{"value":"/ is desired, `to_mut` will obtain a mutable reference to an owned","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57426,"byte_end":57494,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/ value, cloning if necessary.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57495,"byte_end":57527,"line_start":104,"line_end":104,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57528,"byte_end":57531,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57532,"byte_end":57546,"line_start":106,"line_end":106,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57547,"byte_end":57550,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57551,"byte_end":57558,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57559,"byte_end":57584,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57585,"byte_end":57588,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ fn abs_all(input: &mut Cow<[i32]>) {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57589,"byte_end":57629,"line_start":111,"line_end":111,"column_start":1,"column_end":41}},{"value":"/     for i in 0..input.len() {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57630,"byte_end":57663,"line_start":112,"line_end":112,"column_start":1,"column_end":34}},{"value":"/         let v = input[i];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57664,"byte_end":57693,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/         if v < 0 {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57694,"byte_end":57716,"line_start":114,"line_end":114,"column_start":1,"column_end":23}},{"value":"/             // Clones into a vector if not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57717,"byte_end":57778,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/             input.to_mut()[i] = -v;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57779,"byte_end":57818,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57819,"byte_end":57832,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57833,"byte_end":57842,"line_start":118,"line_end":118,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57843,"byte_end":57848,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57849,"byte_end":57852,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // No clone occurs because `input` doesn't need to be mutated.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57853,"byte_end":57919,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"/ let slice = [0, 1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57920,"byte_end":57946,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/ let mut input = Cow::from(&slice[..]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57947,"byte_end":57989,"line_start":123,"line_end":123,"column_start":1,"column_end":43}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57990,"byte_end":58014,"line_start":124,"line_end":124,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58015,"byte_end":58018,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // Clone occurs because `input` needs to be mutated.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58019,"byte_end":58075,"line_start":126,"line_end":126,"column_start":1,"column_end":57}},{"value":"/ let slice = [-1, 0, 1];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58076,"byte_end":58103,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"/ let mut input = Cow::from(&slice[..]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58104,"byte_end":58146,"line_start":128,"line_end":128,"column_start":1,"column_end":43}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58147,"byte_end":58171,"line_start":129,"line_end":129,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58172,"byte_end":58175,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // No clone occurs because `input` is already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58176,"byte_end":58232,"line_start":131,"line_end":131,"column_start":1,"column_end":57}},{"value":"/ let mut input = Cow::from(vec![-1, 0, 1]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58233,"byte_end":58279,"line_start":132,"line_end":132,"column_start":1,"column_end":47}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58280,"byte_end":58304,"line_start":133,"line_end":133,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58305,"byte_end":58312,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58313,"byte_end":58316,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Another example showing how to keep `Cow` in a struct:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58317,"byte_end":58375,"line_start":136,"line_end":136,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58376,"byte_end":58379,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58380,"byte_end":58387,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58388,"byte_end":58413,"line_start":139,"line_end":139,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58414,"byte_end":58417,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58418,"byte_end":58482,"line_start":141,"line_end":141,"column_start":1,"column_end":65}},{"value":"/     values: Cow<'a, [X]>,","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58483,"byte_end":58512,"line_start":142,"line_end":142,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58513,"byte_end":58518,"line_start":143,"line_end":143,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58519,"byte_end":58522,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58523,"byte_end":58600,"line_start":145,"line_end":145,"column_start":1,"column_end":78}},{"value":"/     fn new(v: Cow<'a, [X]>) -> Self {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58601,"byte_end":58642,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/         Items { values: v }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58643,"byte_end":58674,"line_start":147,"line_end":147,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58675,"byte_end":58684,"line_start":148,"line_end":148,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58685,"byte_end":58690,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58691,"byte_end":58694,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ // Creates a container from borrowed values of a slice","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58695,"byte_end":58753,"line_start":151,"line_end":151,"column_start":1,"column_end":59}},{"value":"/ let readonly = [1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58754,"byte_end":58780,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"/ let borrowed = Items::new((&readonly[..]).into());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58781,"byte_end":58835,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ match borrowed {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58836,"byte_end":58856,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58857,"byte_end":58932,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/     _ => panic!(\"expect borrowed value\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58933,"byte_end":58978,"line_start":156,"line_end":156,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58979,"byte_end":58984,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58985,"byte_end":58988,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ let mut clone_on_write = borrowed;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58989,"byte_end":59027,"line_start":159,"line_end":159,"column_start":1,"column_end":39}},{"value":"/ // Mutates the data from slice into owned vec and pushes a new value on top","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59028,"byte_end":59107,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ clone_on_write.values.to_mut().push(3);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59108,"byte_end":59151,"line_start":161,"line_end":161,"column_start":1,"column_end":44}},{"value":"/ println!(\"clone_on_write = {:?}\", clone_on_write.values);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59152,"byte_end":59213,"line_start":162,"line_end":162,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59214,"byte_end":59217,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ // The data was mutated. Let check it out.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59218,"byte_end":59264,"line_start":164,"line_end":164,"column_start":1,"column_end":47}},{"value":"/ match clone_on_write {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59265,"byte_end":59291,"line_start":165,"line_end":165,"column_start":1,"column_end":27}},{"value":"/     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59292,"byte_end":59382,"line_start":166,"line_end":166,"column_start":1,"column_end":91}},{"value":"/     _ => panic!(\"expect owned data\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59383,"byte_end":59424,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59425,"byte_end":59430,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59431,"byte_end":59438,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59439,"byte_end":59484,"line_start":170,"line_end":170,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":60910,"byte_end":60921,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"is_borrowed","qualname":"<Cow>::is_borrowed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.","sig":null,"attributes":[{"value":"/ Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60423,"byte_end":60512,"line_start":205,"line_end":205,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60517,"byte_end":60520,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60525,"byte_end":60539,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60544,"byte_end":60547,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60552,"byte_end":60559,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ #![feature(cow_is_borrowed)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60564,"byte_end":60596,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60601,"byte_end":60626,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60631,"byte_end":60634,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let cow = Cow::Borrowed(\"moo\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60639,"byte_end":60674,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ assert!(cow.is_borrowed());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60679,"byte_end":60710,"line_start":214,"line_end":214,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60715,"byte_end":60718,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let bull: Cow<'_, str> = Cow::Owned(\"...moo?\".to_string());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60723,"byte_end":60786,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/ assert!(!bull.is_borrowed());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60791,"byte_end":60824,"line_start":217,"line_end":217,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60829,"byte_end":60836,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"cow_is_borrowed\", issue = \"65143\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60841,"byte_end":60898,"line_start":219,"line_end":219,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":61511,"byte_end":61519,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"is_owned","qualname":"<Cow>::is_owned","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the data is owned, i.e. if `to_mut` would be a no-op.","sig":null,"attributes":[{"value":"/ Returns true if the data is owned, i.e. if `to_mut` would be a no-op.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61046,"byte_end":61119,"line_start":227,"line_end":227,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61124,"byte_end":61127,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61132,"byte_end":61146,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61151,"byte_end":61154,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61159,"byte_end":61166,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ #![feature(cow_is_borrowed)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61171,"byte_end":61203,"line_start":232,"line_end":232,"column_start":5,"column_end":37}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61208,"byte_end":61233,"line_start":233,"line_end":233,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61238,"byte_end":61241,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ let cow: Cow<'_, str> = Cow::Owned(\"moo\".to_string());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61246,"byte_end":61304,"line_start":235,"line_end":235,"column_start":5,"column_end":63}},{"value":"/ assert!(cow.is_owned());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61309,"byte_end":61337,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61342,"byte_end":61345,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let bull = Cow::Borrowed(\"...moo?\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61350,"byte_end":61390,"line_start":238,"line_end":238,"column_start":5,"column_end":45}},{"value":"/ assert!(!bull.is_owned());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61395,"byte_end":61425,"line_start":239,"line_end":239,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61430,"byte_end":61437,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"cow_is_borrowed\", issue = \"65143\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61442,"byte_end":61499,"line_start":241,"line_end":241,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":62055,"byte_end":62061,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"to_mut","qualname":"<Cow>::to_mut","value":"fn (&mut self) -> &mut <B as ToOwned>::Owned","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the owned form of the data.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the owned form of the data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61576,"byte_end":61639,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61644,"byte_end":61647,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Clones the data if it is not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61652,"byte_end":61699,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61704,"byte_end":61707,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61712,"byte_end":61726,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61731,"byte_end":61734,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61739,"byte_end":61746,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61751,"byte_end":61776,"line_start":253,"line_end":253,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61781,"byte_end":61784,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let mut cow = Cow::Borrowed(\"foo\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61789,"byte_end":61828,"line_start":255,"line_end":255,"column_start":5,"column_end":44}},{"value":"/ cow.to_mut().make_ascii_uppercase();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61833,"byte_end":61873,"line_start":256,"line_end":256,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61878,"byte_end":61881,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61886,"byte_end":61901,"line_start":258,"line_end":258,"column_start":5,"column_end":20}},{"value":"/   cow,","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61906,"byte_end":61916,"line_start":259,"line_end":259,"column_start":5,"column_end":15}},{"value":"/   Cow::Owned(String::from(\"FOO\")) as Cow<str>","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61921,"byte_end":61970,"line_start":260,"line_end":260,"column_start":5,"column_end":54}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61975,"byte_end":61981,"line_start":261,"line_end":261,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61986,"byte_end":61993,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61998,"byte_end":62043,"line_start":263,"line_end":263,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63292,"byte_end":63302,"line_start":312,"line_end":312,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Cow>::into_owned","value":"fn (self) -> <B as ToOwned>::Owned","parent":null,"children":[],"decl_id":null,"docs":" Extracts the owned data.","sig":null,"attributes":[{"value":"/ Extracts the owned data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62444,"byte_end":62472,"line_start":277,"line_end":277,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62477,"byte_end":62480,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Clones the data if it is not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62485,"byte_end":62532,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62537,"byte_end":62540,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62545,"byte_end":62559,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62564,"byte_end":62567,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Calling `into_owned` on a `Cow::Borrowed` clones the underlying data","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62572,"byte_end":62644,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ and becomes a `Cow::Owned`:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62649,"byte_end":62680,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62685,"byte_end":62688,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62693,"byte_end":62700,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62705,"byte_end":62730,"line_start":287,"line_end":287,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62735,"byte_end":62738,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let s = \"Hello world!\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62743,"byte_end":62770,"line_start":289,"line_end":289,"column_start":5,"column_end":32}},{"value":"/ let cow = Cow::Borrowed(s);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62775,"byte_end":62806,"line_start":290,"line_end":290,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62811,"byte_end":62814,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62819,"byte_end":62834,"line_start":292,"line_end":292,"column_start":5,"column_end":20}},{"value":"/   cow.into_owned(),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62839,"byte_end":62862,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"/   String::from(s)","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62867,"byte_end":62888,"line_start":294,"line_end":294,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62893,"byte_end":62899,"line_start":295,"line_end":295,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62904,"byte_end":62911,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62916,"byte_end":62919,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Calling `into_owned` on a `Cow::Owned` is a no-op:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62924,"byte_end":62978,"line_start":298,"line_end":298,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62983,"byte_end":62986,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62991,"byte_end":62998,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63003,"byte_end":63028,"line_start":301,"line_end":301,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63033,"byte_end":63036,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let s = \"Hello world!\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63041,"byte_end":63068,"line_start":303,"line_end":303,"column_start":5,"column_end":32}},{"value":"/ let cow: Cow<str> = Cow::Owned(String::from(s));","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63073,"byte_end":63125,"line_start":304,"line_end":304,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63130,"byte_end":63133,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63138,"byte_end":63153,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"/   cow.into_owned(),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63158,"byte_end":63181,"line_start":307,"line_end":307,"column_start":5,"column_end":28}},{"value":"/   String::from(s)","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63186,"byte_end":63207,"line_start":308,"line_end":308,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63212,"byte_end":63218,"line_start":309,"line_end":309,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63223,"byte_end":63230,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63235,"byte_end":63280,"line_start":311,"line_end":311,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":634},{"krate":0,"index":1989},{"krate":0,"index":2328},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":4705},{"krate":0,"index":4720},{"krate":0,"index":4716},{"krate":0,"index":4717},{"krate":0,"index":4713},{"krate":0,"index":4714},{"krate":0,"index":4711},{"krate":0,"index":2725},{"krate":0,"index":2727}],"decl_id":null,"docs":" Collection types.\n","sig":null,"attributes":[{"value":"! Collection types.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67504,"byte_end":67525,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67527,"byte_end":67573,"line_start":3,"line_end":3,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":395},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"src/liballoc/collections/binary_heap.rs","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":401},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":440},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":468},{"krate":0,"index":483},{"krate":0,"index":489},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":4501},{"krate":0,"index":4504},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":4507},{"krate":0,"index":4513},{"krate":0,"index":4510},{"krate":0,"index":542},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":4516},{"krate":0,"index":4520},{"krate":0,"index":553},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":4524},{"krate":0,"index":4528},{"krate":0,"index":566},{"krate":0,"index":581},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":602},{"krate":0,"index":607},{"krate":0,"index":613},{"krate":0,"index":617},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":629}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"! A priority queue implemented with a binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69827,"byte_end":69879,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69880,"byte_end":69883,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Insertion and popping the largest element have `O(log n)` time complexity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69884,"byte_end":69962,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! Checking the largest element is `O(1)`. Converting a vector to a binary heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69963,"byte_end":70043,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! can be done in-place, and has `O(n)` complexity. A binary heap can also be","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70044,"byte_end":70122,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"! converted to a sorted vector in-place, allowing it to be used for an `O(n","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70123,"byte_end":70200,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"! log n)` in-place heapsort.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70201,"byte_end":70231,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70232,"byte_end":70235,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70236,"byte_end":70250,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70251,"byte_end":70254,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This is a larger example that implements [Dijkstra's algorithm][dijkstra]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70255,"byte_end":70332,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70333,"byte_end":70413,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"! It shows how to use [`BinaryHeap`] with custom types.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70414,"byte_end":70471,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70472,"byte_end":70475,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! [dijkstra]: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70476,"byte_end":70543,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"! [sssp]: http://en.wikipedia.org/wiki/Shortest_path_problem","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70544,"byte_end":70606,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70607,"byte_end":70667,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"! [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70668,"byte_end":70710,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70711,"byte_end":70714,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70715,"byte_end":70722,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"! use std::cmp::Ordering;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70723,"byte_end":70750,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"! use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70751,"byte_end":70788,"line_start":22,"line_end":22,"column_start":1,"column_end":38}},{"value":"! use std::usize;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70789,"byte_end":70808,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70809,"byte_end":70812,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! #[derive(Copy, Clone, Eq, PartialEq)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70813,"byte_end":70854,"line_start":25,"line_end":25,"column_start":1,"column_end":42}},{"value":"! struct State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70855,"byte_end":70873,"line_start":26,"line_end":26,"column_start":1,"column_end":19}},{"value":"!     cost: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70874,"byte_end":70894,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!     position: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70895,"byte_end":70919,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70920,"byte_end":70925,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70926,"byte_end":70929,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! // The priority queue depends on `Ord`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70930,"byte_end":70973,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"! // Explicitly implement the trait so the queue becomes a min-heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70974,"byte_end":71043,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"! // instead of a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71044,"byte_end":71073,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"! impl Ord for State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71074,"byte_end":71098,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"!     fn cmp(&self, other: &State) -> Ordering {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71099,"byte_end":71149,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"!         // Notice that the we flip the ordering on costs.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71150,"byte_end":71211,"line_start":36,"line_end":36,"column_start":1,"column_end":62}},{"value":"!         // In case of a tie we compare positions - this step is necessary","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71212,"byte_end":71289,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"!         // to make implementations of `PartialEq` and `Ord` consistent.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71290,"byte_end":71365,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"!         other.cost.cmp(&self.cost)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71366,"byte_end":71404,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"!             .then_with(|| self.position.cmp(&other.position))","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71405,"byte_end":71470,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71471,"byte_end":71480,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71481,"byte_end":71486,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71487,"byte_end":71490,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! // `PartialOrd` needs to be implemented as well.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71491,"byte_end":71543,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"! impl PartialOrd for State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71544,"byte_end":71575,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"!     fn partial_cmp(&self, other: &State) -> Option<Ordering> {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71576,"byte_end":71642,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"!         Some(self.cmp(other))","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71643,"byte_end":71676,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71677,"byte_end":71686,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71687,"byte_end":71692,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71693,"byte_end":71696,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! // Each node is represented as an `usize`, for a shorter implementation.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71697,"byte_end":71773,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"! struct Edge {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71774,"byte_end":71791,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"!     node: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71792,"byte_end":71812,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"!     cost: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71813,"byte_end":71833,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71834,"byte_end":71839,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71840,"byte_end":71843,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! // Dijkstra's shortest path algorithm.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71844,"byte_end":71886,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71887,"byte_end":71890,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! // Start at `start` and use `dist` to track the current shortest distance","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71891,"byte_end":71968,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"! // to each node. This implementation isn't memory-efficient as it may leave duplicate","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71969,"byte_end":72058,"line_start":60,"line_end":60,"column_start":1,"column_end":90}},{"value":"! // nodes in the queue. It also uses `usize::MAX` as a sentinel value,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72059,"byte_end":72132,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"! // for a simpler implementation.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72133,"byte_end":72169,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"! fn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, goal: usize) -> Option<usize> {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72170,"byte_end":72263,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"!     // dist[node] = current shortest distance from `start` to `node`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72264,"byte_end":72336,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"!     let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72337,"byte_end":72418,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72419,"byte_end":72422,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"!     let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72423,"byte_end":72464,"line_start":67,"line_end":67,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72465,"byte_end":72468,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"!     // We're at `start`, with a zero cost","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72469,"byte_end":72514,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"!     dist[start] = 0;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72515,"byte_end":72539,"line_start":70,"line_end":70,"column_start":1,"column_end":25}},{"value":"!     heap.push(State { cost: 0, position: start });","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72540,"byte_end":72594,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72595,"byte_end":72598,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"!     // Examine the frontier with lower cost nodes first (min-heap)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72599,"byte_end":72669,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"!     while let Some(State { cost, position }) = heap.pop() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72670,"byte_end":72733,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"!         // Alternatively we could have continued to find all shortest paths","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72734,"byte_end":72813,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"!         if position == goal { return Some(cost); }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72814,"byte_end":72868,"line_start":76,"line_end":76,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72869,"byte_end":72872,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"!         // Important as we may have already found a better way","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72873,"byte_end":72939,"line_start":78,"line_end":78,"column_start":1,"column_end":67}},{"value":"!         if cost > dist[position] { continue; }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72940,"byte_end":72990,"line_start":79,"line_end":79,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72991,"byte_end":72994,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"!         // For each node we can reach, see if we can find a way with","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72995,"byte_end":73067,"line_start":81,"line_end":81,"column_start":1,"column_end":73}},{"value":"!         // a lower cost going through this node","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73068,"byte_end":73119,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"!         for edge in &adj_list[position] {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73120,"byte_end":73165,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"!             let next = State { cost: cost + edge.cost, position: edge.node };","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73166,"byte_end":73247,"line_start":84,"line_end":84,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73248,"byte_end":73251,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"!             // If so, add it to the frontier and continue","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73252,"byte_end":73313,"line_start":86,"line_end":86,"column_start":1,"column_end":62}},{"value":"!             if next.cost < dist[next.position] {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73314,"byte_end":73366,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"!                 heap.push(next);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73367,"byte_end":73403,"line_start":88,"line_end":88,"column_start":1,"column_end":37}},{"value":"!                 // Relaxation, we have now found a better way","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73404,"byte_end":73469,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"!                 dist[next.position] = next.cost;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73470,"byte_end":73522,"line_start":90,"line_end":90,"column_start":1,"column_end":53}},{"value":"!             }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73523,"byte_end":73540,"line_start":91,"line_end":91,"column_start":1,"column_end":18}},{"value":"!         }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73541,"byte_end":73554,"line_start":92,"line_end":92,"column_start":1,"column_end":14}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73555,"byte_end":73564,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73565,"byte_end":73568,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"!     // Goal not reachable","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73569,"byte_end":73598,"line_start":95,"line_end":95,"column_start":1,"column_end":30}},{"value":"!     None","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73599,"byte_end":73611,"line_start":96,"line_end":96,"column_start":1,"column_end":13}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73612,"byte_end":73617,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73618,"byte_end":73621,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73622,"byte_end":73637,"line_start":99,"line_end":99,"column_start":1,"column_end":16}},{"value":"!     // This is the directed graph we're going to use.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73638,"byte_end":73695,"line_start":100,"line_end":100,"column_start":1,"column_end":58}},{"value":"!     // The node numbers correspond to the different states,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73696,"byte_end":73759,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!     // and the edge weights symbolize the cost of moving","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73760,"byte_end":73820,"line_start":102,"line_end":102,"column_start":1,"column_end":61}},{"value":"!     // from one node to another.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73821,"byte_end":73857,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"!     // Note that the edges are one-way.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73858,"byte_end":73901,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"!     //","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73902,"byte_end":73912,"line_start":105,"line_end":105,"column_start":1,"column_end":11}},{"value":"!     //                  7","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73913,"byte_end":73942,"line_start":106,"line_end":106,"column_start":1,"column_end":30}},{"value":"!     //          +-----------------+","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73943,"byte_end":73982,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"!     //          |                 |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73983,"byte_end":74022,"line_start":108,"line_end":108,"column_start":1,"column_end":40}},{"value":"!     //          v   1        2    |  2","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74023,"byte_end":74065,"line_start":109,"line_end":109,"column_start":1,"column_end":43}},{"value":"!     //          0 -----> 1 -----> 3 ---> 4","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74066,"byte_end":74112,"line_start":110,"line_end":110,"column_start":1,"column_end":47}},{"value":"!     //          |        ^        ^      ^","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74113,"byte_end":74159,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"!     //          |        | 1      |      |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74160,"byte_end":74206,"line_start":112,"line_end":112,"column_start":1,"column_end":47}},{"value":"!     //          |        |        | 3    | 1","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74207,"byte_end":74255,"line_start":113,"line_end":113,"column_start":1,"column_end":49}},{"value":"!     //          +------> 2 -------+      |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74256,"byte_end":74302,"line_start":114,"line_end":114,"column_start":1,"column_end":47}},{"value":"!     //           10      |               |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74303,"byte_end":74349,"line_start":115,"line_end":115,"column_start":1,"column_end":47}},{"value":"!     //                   +---------------+","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74350,"byte_end":74396,"line_start":116,"line_end":116,"column_start":1,"column_end":47}},{"value":"!     //","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74397,"byte_end":74407,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"!     // The graph is represented as an adjacency list where each index,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74408,"byte_end":74482,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"!     // corresponding to a node value, has a list of outgoing edges.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74483,"byte_end":74554,"line_start":119,"line_end":119,"column_start":1,"column_end":72}},{"value":"!     // Chosen for its efficiency.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74555,"byte_end":74592,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"!     let graph = vec![","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74593,"byte_end":74618,"line_start":121,"line_end":121,"column_start":1,"column_end":26}},{"value":"!         // Node 0","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74619,"byte_end":74640,"line_start":122,"line_end":122,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 2, cost: 10 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74641,"byte_end":74685,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"!              Edge { node: 1, cost: 1 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74686,"byte_end":74730,"line_start":124,"line_end":124,"column_start":1,"column_end":45}},{"value":"!         // Node 1","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74731,"byte_end":74752,"line_start":125,"line_end":125,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 3, cost: 2 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74753,"byte_end":74797,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"!         // Node 2","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74798,"byte_end":74819,"line_start":127,"line_end":127,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 1, cost: 1 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74820,"byte_end":74863,"line_start":128,"line_end":128,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 3, cost: 3 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74864,"byte_end":74907,"line_start":129,"line_end":129,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 4, cost: 1 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74908,"byte_end":74952,"line_start":130,"line_end":130,"column_start":1,"column_end":45}},{"value":"!         // Node 3","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74953,"byte_end":74974,"line_start":131,"line_end":131,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 0, cost: 7 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74975,"byte_end":75018,"line_start":132,"line_end":132,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 4, cost: 2 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75019,"byte_end":75063,"line_start":133,"line_end":133,"column_start":1,"column_end":45}},{"value":"!         // Node 4","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75064,"byte_end":75085,"line_start":134,"line_end":134,"column_start":1,"column_end":22}},{"value":"!         vec![]];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75086,"byte_end":75106,"line_start":135,"line_end":135,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75107,"byte_end":75110,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 1), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75111,"byte_end":75168,"line_start":137,"line_end":137,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 3), Some(3));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75169,"byte_end":75226,"line_start":138,"line_end":138,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 3, 0), Some(7));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75227,"byte_end":75284,"line_start":139,"line_end":139,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 4), Some(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75285,"byte_end":75342,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 4, 0), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75343,"byte_end":75397,"line_start":141,"line_end":141,"column_start":1,"column_end":55}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75398,"byte_end":75403,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75404,"byte_end":75411,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"allow(missing_docs)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75413,"byte_end":75436,"line_start":145,"line_end":145,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75437,"byte_end":75483,"line_start":146,"line_end":146,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78484,"byte_end":78494,"line_start":249,"line_end":249,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::collections::binary_heap::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":417}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75733,"byte_end":75785,"line_start":159,"line_end":159,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75786,"byte_end":75789,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ This will be a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75790,"byte_end":75818,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75819,"byte_end":75822,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75823,"byte_end":75896,"line_start":163,"line_end":163,"column_start":1,"column_end":74}},{"value":"/ item's ordering relative to any other item, as determined by the `Ord`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75897,"byte_end":75971,"line_start":164,"line_end":164,"column_start":1,"column_end":75}},{"value":"/ trait, changes while it is in the heap. This is normally only possible","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75972,"byte_end":76046,"line_start":165,"line_end":165,"column_start":1,"column_end":75}},{"value":"/ through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76047,"byte_end":76112,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76113,"byte_end":76116,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76117,"byte_end":76131,"line_start":168,"line_end":168,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76132,"byte_end":76135,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76136,"byte_end":76143,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76144,"byte_end":76181,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76182,"byte_end":76185,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76186,"byte_end":76254,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/ // would be `BinaryHeap<i32>` in this example).","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76255,"byte_end":76306,"line_start":174,"line_end":174,"column_start":1,"column_end":52}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76307,"byte_end":76344,"line_start":175,"line_end":175,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76345,"byte_end":76348,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76349,"byte_end":76423,"line_start":177,"line_end":177,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76424,"byte_end":76476,"line_start":178,"line_end":178,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76477,"byte_end":76511,"line_start":179,"line_end":179,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76512,"byte_end":76515,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76516,"byte_end":76547,"line_start":181,"line_end":181,"column_start":1,"column_end":32}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76548,"byte_end":76565,"line_start":182,"line_end":182,"column_start":1,"column_end":18}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76566,"byte_end":76583,"line_start":183,"line_end":183,"column_start":1,"column_end":18}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76584,"byte_end":76601,"line_start":184,"line_end":184,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76602,"byte_end":76605,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76606,"byte_end":76664,"line_start":186,"line_end":186,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76665,"byte_end":76703,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76704,"byte_end":76707,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76708,"byte_end":76749,"line_start":189,"line_end":189,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76750,"byte_end":76780,"line_start":190,"line_end":190,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76781,"byte_end":76784,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76785,"byte_end":76864,"line_start":192,"line_end":192,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76865,"byte_end":76887,"line_start":193,"line_end":193,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76888,"byte_end":76908,"line_start":194,"line_end":194,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76909,"byte_end":76935,"line_start":195,"line_end":195,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76936,"byte_end":76941,"line_start":196,"line_end":196,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76942,"byte_end":76945,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76946,"byte_end":77016,"line_start":198,"line_end":198,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77017,"byte_end":77053,"line_start":199,"line_end":199,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77054,"byte_end":77090,"line_start":200,"line_end":200,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77091,"byte_end":77127,"line_start":201,"line_end":201,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77128,"byte_end":77161,"line_start":202,"line_end":202,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77162,"byte_end":77165,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77166,"byte_end":77218,"line_start":204,"line_end":204,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77219,"byte_end":77236,"line_start":205,"line_end":205,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77237,"byte_end":77240,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77241,"byte_end":77277,"line_start":207,"line_end":207,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77278,"byte_end":77306,"line_start":208,"line_end":208,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77307,"byte_end":77314,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77315,"byte_end":77318,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Min-heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77319,"byte_end":77334,"line_start":211,"line_end":211,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77335,"byte_end":77338,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Either `std::cmp::Reverse` or a custom `Ord` implementation can be used to","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77339,"byte_end":77417,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ make `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77418,"byte_end":77495,"line_start":214,"line_end":214,"column_start":1,"column_end":78}},{"value":"/ value instead of the greatest one.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77496,"byte_end":77534,"line_start":215,"line_end":215,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77535,"byte_end":77538,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77539,"byte_end":77546,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77547,"byte_end":77584,"line_start":218,"line_end":218,"column_start":1,"column_end":38}},{"value":"/ use std::cmp::Reverse;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77585,"byte_end":77611,"line_start":219,"line_end":219,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77612,"byte_end":77615,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77616,"byte_end":77653,"line_start":221,"line_end":221,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77654,"byte_end":77657,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ // Wrap values in `Reverse`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77658,"byte_end":77689,"line_start":223,"line_end":223,"column_start":1,"column_end":32}},{"value":"/ heap.push(Reverse(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77690,"byte_end":77716,"line_start":224,"line_end":224,"column_start":1,"column_end":27}},{"value":"/ heap.push(Reverse(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77717,"byte_end":77743,"line_start":225,"line_end":225,"column_start":1,"column_end":27}},{"value":"/ heap.push(Reverse(2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77744,"byte_end":77770,"line_start":226,"line_end":226,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77771,"byte_end":77774,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ // If we pop these scores now, they should come back in the reverse order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77775,"byte_end":77853,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(1)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77854,"byte_end":77899,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(2)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77900,"byte_end":77945,"line_start":230,"line_end":230,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(5)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77946,"byte_end":77991,"line_start":231,"line_end":231,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77992,"byte_end":78025,"line_start":232,"line_end":232,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78026,"byte_end":78033,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78034,"byte_end":78037,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78038,"byte_end":78059,"line_start":235,"line_end":235,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78060,"byte_end":78063,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ | [push] | [pop]    | [peek]/[peek\\_mut] |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78064,"byte_end":78110,"line_start":237,"line_end":237,"column_start":1,"column_end":47}},{"value":"/ |--------|----------|--------------------|","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78111,"byte_end":78157,"line_start":238,"line_end":238,"column_start":1,"column_end":47}},{"value":"/ | O(1)~  | O(log n) | O(1)               |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78158,"byte_end":78204,"line_start":239,"line_end":239,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78205,"byte_end":78208,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ The value for `push` is an expected cost; the method documentation gives a","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78209,"byte_end":78287,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ more detailed analysis.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78288,"byte_end":78315,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78316,"byte_end":78319,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ [push]: #method.push","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78320,"byte_end":78344,"line_start":244,"line_end":244,"column_start":1,"column_end":25}},{"value":"/ [pop]: #method.pop","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78345,"byte_end":78367,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/ [peek]: #method.peek","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78368,"byte_end":78392,"line_start":246,"line_end":246,"column_start":1,"column_end":25}},{"value":"/ [peek\\_mut]: #method.peek_mut","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78393,"byte_end":78426,"line_start":247,"line_end":247,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78427,"byte_end":78472,"line_start":248,"line_end":248,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":418},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78900,"byte_end":78907,"line_start":262,"line_end":262,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::collections::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[{"value":"/ Structure wrapping a mutable reference to the greatest item on a","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78521,"byte_end":78589,"line_start":253,"line_end":253,"column_start":1,"column_end":69}},{"value":"/ `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78590,"byte_end":78607,"line_start":254,"line_end":254,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78608,"byte_end":78611,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78612,"byte_end":78690,"line_start":256,"line_end":256,"column_start":1,"column_end":79}},{"value":"/ its documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78691,"byte_end":78722,"line_start":257,"line_end":257,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78723,"byte_end":78726,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78727,"byte_end":78783,"line_start":259,"line_end":259,"column_start":1,"column_end":57}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78784,"byte_end":78826,"line_start":260,"line_end":260,"column_start":1,"column_end":43}},{"value":"stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78827,"byte_end":78888,"line_start":261,"line_end":261,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80261,"byte_end":80264,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"fn (mut this: PeekMut<'a, T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[{"value":"/ Removes the peeked value from the heap and returns it.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80121,"byte_end":80179,"line_start":303,"line_end":303,"column_start":5,"column_end":63}},{"value":"stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80184,"byte_end":80249,"line_start":304,"line_end":304,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81448,"byte_end":81451,"line_start":352,"line_end":352,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryHeap<T>>::new","value":"fn () -> BinaryHeap<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BinaryHeap` as a max-heap.","sig":null,"attributes":[{"value":"/ Creates an empty `BinaryHeap` as a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81144,"byte_end":81192,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81197,"byte_end":81200,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81205,"byte_end":81219,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81224,"byte_end":81227,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81232,"byte_end":81248,"line_start":344,"line_end":344,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81253,"byte_end":81256,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81261,"byte_end":81268,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81273,"byte_end":81310,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81315,"byte_end":81352,"line_start":348,"line_end":348,"column_start":5,"column_end":42}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81357,"byte_end":81374,"line_start":349,"line_end":349,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81379,"byte_end":81386,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81391,"byte_end":81436,"line_start":351,"line_end":351,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82030,"byte_end":82043,"line_start":371,"line_end":371,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BinaryHeap<T>>::with_capacity","value":"fn (capacity: usize) -> BinaryHeap<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BinaryHeap` with a specific capacity.\n This preallocates enough memory for `capacity` elements,\n so that the `BinaryHeap` does not have to be reallocated\n until it contains at least that many values.","sig":null,"attributes":[{"value":"/ Creates an empty `BinaryHeap` with a specific capacity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81520,"byte_end":81579,"line_start":356,"line_end":356,"column_start":5,"column_end":64}},{"value":"/ This preallocates enough memory for `capacity` elements,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81584,"byte_end":81644,"line_start":357,"line_end":357,"column_start":5,"column_end":65}},{"value":"/ so that the `BinaryHeap` does not have to be reallocated","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81649,"byte_end":81709,"line_start":358,"line_end":358,"column_start":5,"column_end":65}},{"value":"/ until it contains at least that many values.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81714,"byte_end":81762,"line_start":359,"line_end":359,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81767,"byte_end":81770,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81775,"byte_end":81789,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81794,"byte_end":81797,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81802,"byte_end":81818,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81823,"byte_end":81826,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81831,"byte_end":81838,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81843,"byte_end":81880,"line_start":366,"line_end":366,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::with_capacity(10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81885,"byte_end":81934,"line_start":367,"line_end":367,"column_start":5,"column_end":54}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81939,"byte_end":81956,"line_start":368,"line_end":368,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81961,"byte_end":81968,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81973,"byte_end":82018,"line_start":370,"line_end":370,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82948,"byte_end":82956,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T>>::peek_mut","value":"fn (&mut self) -> Option<PeekMut<'_, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the greatest item in the binary heap, or","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82149,"byte_end":82224,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/ `None` if it is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82229,"byte_end":82255,"line_start":376,"line_end":376,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82260,"byte_end":82263,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Note: If the `PeekMut` value is leaked, the heap may be in an","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82268,"byte_end":82333,"line_start":378,"line_end":378,"column_start":5,"column_end":70}},{"value":"/ inconsistent state.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82338,"byte_end":82361,"line_start":379,"line_end":379,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82366,"byte_end":82369,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82374,"byte_end":82388,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82393,"byte_end":82396,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82401,"byte_end":82417,"line_start":383,"line_end":383,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82422,"byte_end":82425,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82430,"byte_end":82437,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82442,"byte_end":82479,"line_start":386,"line_end":386,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82484,"byte_end":82521,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ assert!(heap.peek_mut().is_none());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82526,"byte_end":82565,"line_start":388,"line_end":388,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82570,"byte_end":82573,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82578,"byte_end":82595,"line_start":390,"line_end":390,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82600,"byte_end":82617,"line_start":391,"line_end":391,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82622,"byte_end":82639,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82644,"byte_end":82649,"line_start":393,"line_end":393,"column_start":5,"column_end":10}},{"value":"/     let mut val = heap.peek_mut().unwrap();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82654,"byte_end":82701,"line_start":394,"line_end":394,"column_start":5,"column_end":52}},{"value":"/     *val = 0;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82706,"byte_end":82723,"line_start":395,"line_end":395,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82728,"byte_end":82733,"line_start":396,"line_end":396,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(heap.peek(), Some(&2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82738,"byte_end":82776,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82781,"byte_end":82788,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82793,"byte_end":82796,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82801,"byte_end":82822,"line_start":400,"line_end":400,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82827,"byte_end":82830,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Cost is O(1) in the worst case.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82835,"byte_end":82870,"line_start":402,"line_end":402,"column_start":5,"column_end":40}},{"value":"stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82875,"byte_end":82936,"line_start":403,"line_end":403,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83700,"byte_end":83703,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the greatest item from the binary heap and returns it, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the greatest item from the binary heap and returns it, or `None` if it","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83093,"byte_end":83175,"line_start":408,"line_end":408,"column_start":5,"column_end":87}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83180,"byte_end":83193,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83198,"byte_end":83201,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83206,"byte_end":83220,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83225,"byte_end":83228,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83233,"byte_end":83249,"line_start":413,"line_end":413,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83254,"byte_end":83257,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83262,"byte_end":83269,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83274,"byte_end":83311,"line_start":416,"line_end":416,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83316,"byte_end":83364,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83369,"byte_end":83372,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83377,"byte_end":83413,"line_start":419,"line_end":419,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83418,"byte_end":83454,"line_start":420,"line_end":420,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83459,"byte_end":83492,"line_start":421,"line_end":421,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83497,"byte_end":83504,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83509,"byte_end":83512,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83517,"byte_end":83538,"line_start":424,"line_end":424,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83543,"byte_end":83546,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ The worst case cost of `pop` on a heap containing *n* elements is O(log","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83551,"byte_end":83626,"line_start":426,"line_end":426,"column_start":5,"column_end":80}},{"value":"/ n).","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83631,"byte_end":83638,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83643,"byte_end":83688,"line_start":428,"line_end":428,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85211,"byte_end":85215,"line_start":472,"line_end":472,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T>>::push","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83955,"byte_end":83995,"line_start":439,"line_end":439,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84000,"byte_end":84003,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84008,"byte_end":84022,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84027,"byte_end":84030,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84035,"byte_end":84051,"line_start":443,"line_end":443,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84056,"byte_end":84059,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84064,"byte_end":84071,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84076,"byte_end":84113,"line_start":446,"line_end":446,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84118,"byte_end":84155,"line_start":447,"line_end":447,"column_start":5,"column_end":42}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84160,"byte_end":84177,"line_start":448,"line_end":448,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84182,"byte_end":84199,"line_start":449,"line_end":449,"column_start":5,"column_end":22}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84204,"byte_end":84221,"line_start":450,"line_end":450,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84226,"byte_end":84229,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84234,"byte_end":84264,"line_start":452,"line_end":452,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84269,"byte_end":84307,"line_start":453,"line_end":453,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84312,"byte_end":84319,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84324,"byte_end":84327,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84332,"byte_end":84353,"line_start":456,"line_end":456,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84358,"byte_end":84361,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The expected cost of `push`, averaged over every possible ordering of","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84366,"byte_end":84439,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ the elements being pushed, and over a sufficiently large number of","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84444,"byte_end":84514,"line_start":459,"line_end":459,"column_start":5,"column_end":75}},{"value":"/ pushes, is O(1). This is the most meaningful cost metric when pushing","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84519,"byte_end":84592,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ elements that are *not* already in any sorted pattern.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84597,"byte_end":84655,"line_start":461,"line_end":461,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84660,"byte_end":84663,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The time complexity degrades if elements are pushed in predominantly","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84668,"byte_end":84740,"line_start":463,"line_end":463,"column_start":5,"column_end":77}},{"value":"/ ascending order. In the worst case, elements are pushed in ascending","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84745,"byte_end":84817,"line_start":464,"line_end":464,"column_start":5,"column_end":77}},{"value":"/ sorted order and the amortized cost per push is O(log n) against a heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84822,"byte_end":84897,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ containing *n* elements.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84902,"byte_end":84930,"line_start":466,"line_end":466,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84935,"byte_end":84938,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ The worst case cost of a *single* call to `push` is O(n). The worst case","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":84943,"byte_end":85019,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ occurs when capacity is exhausted and needs a resize. The resize cost","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85024,"byte_end":85097,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ has been amortized in the previous figures.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85102,"byte_end":85149,"line_start":470,"line_end":470,"column_start":5,"column_end":52}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85154,"byte_end":85199,"line_start":471,"line_end":471,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85854,"byte_end":85869,"line_start":496,"line_end":496,"column_start":12,"column_end":27},"name":"into_sorted_vec","qualname":"<BinaryHeap<T>>::into_sorted_vec","value":"fn (mut self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BinaryHeap` and returns a vector in sorted\n (ascending) order.","sig":null,"attributes":[{"value":"/ Consumes the `BinaryHeap` and returns a vector in sorted","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85347,"byte_end":85407,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ (ascending) order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85412,"byte_end":85434,"line_start":479,"line_end":479,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85439,"byte_end":85442,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85447,"byte_end":85461,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85466,"byte_end":85469,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85474,"byte_end":85490,"line_start":483,"line_end":483,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85495,"byte_end":85498,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85503,"byte_end":85510,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85515,"byte_end":85552,"line_start":486,"line_end":486,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85557,"byte_end":85560,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 2, 4, 5, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85565,"byte_end":85622,"line_start":488,"line_end":488,"column_start":5,"column_end":62}},{"value":"/ heap.push(6);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85627,"byte_end":85644,"line_start":489,"line_end":489,"column_start":5,"column_end":22}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85649,"byte_end":85666,"line_start":490,"line_end":490,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85671,"byte_end":85674,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let vec = heap.into_sorted_vec();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85679,"byte_end":85716,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85721,"byte_end":85764,"line_start":493,"line_end":493,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85769,"byte_end":85776,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":85781,"byte_end":85842,"line_start":495,"line_end":495,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89660,"byte_end":89666,"line_start":611,"line_end":611,"column_start":12,"column_end":18},"name":"append","qualname":"<BinaryHeap<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89065,"byte_end":89138,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89143,"byte_end":89146,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89151,"byte_end":89165,"line_start":592,"line_end":592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89170,"byte_end":89173,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89178,"byte_end":89194,"line_start":594,"line_end":594,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89199,"byte_end":89202,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89207,"byte_end":89214,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89219,"byte_end":89256,"line_start":597,"line_end":597,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89261,"byte_end":89264,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let v = vec![-10, 1, 2, 3, 3];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89269,"byte_end":89303,"line_start":599,"line_end":599,"column_start":5,"column_end":39}},{"value":"/ let mut a = BinaryHeap::from(v);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89308,"byte_end":89344,"line_start":600,"line_end":600,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89349,"byte_end":89352,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let v = vec![-20, 5, 43];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89357,"byte_end":89386,"line_start":602,"line_end":602,"column_start":5,"column_end":34}},{"value":"/ let mut b = BinaryHeap::from(v);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89391,"byte_end":89427,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89432,"byte_end":89435,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89440,"byte_end":89461,"line_start":605,"line_end":605,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89466,"byte_end":89469,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.into_sorted_vec(), [-20, -10, 1, 2, 3, 3, 5, 43]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89474,"byte_end":89541,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ assert!(b.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89546,"byte_end":89572,"line_start":608,"line_end":608,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89577,"byte_end":89584,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89589,"byte_end":89648,"line_start":610,"line_end":610,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91481,"byte_end":91493,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"drain_sorted","qualname":"<BinaryHeap<T>>::drain_sorted","value":"fn (&mut self) -> DrainSorted<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which retrieves elements in heap order.\n The retrieved elements are removed from the original heap.\n The remaining elements will be removed on drop in heap order.","sig":null,"attributes":[{"value":"/ Returns an iterator which retrieves elements in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90642,"byte_end":90705,"line_start":643,"line_end":643,"column_start":5,"column_end":68}},{"value":"/ The retrieved elements are removed from the original heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90710,"byte_end":90772,"line_start":644,"line_end":644,"column_start":5,"column_end":67}},{"value":"/ The remaining elements will be removed on drop in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90777,"byte_end":90842,"line_start":645,"line_end":645,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90847,"byte_end":90850,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Note:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90855,"byte_end":90864,"line_start":647,"line_end":647,"column_start":5,"column_end":14}},{"value":"/ * `.drain_sorted()` is O(n lg n); much slower than `.drain()`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90869,"byte_end":90935,"line_start":648,"line_end":648,"column_start":5,"column_end":71}},{"value":"/   You should use the latter for most cases.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90940,"byte_end":90987,"line_start":649,"line_end":649,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90992,"byte_end":90995,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91000,"byte_end":91014,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91019,"byte_end":91022,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91027,"byte_end":91043,"line_start":653,"line_end":653,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91048,"byte_end":91051,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91056,"byte_end":91063,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ #![feature(binary_heap_drain_sorted)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91068,"byte_end":91109,"line_start":656,"line_end":656,"column_start":5,"column_end":46}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91114,"byte_end":91151,"line_start":657,"line_end":657,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91156,"byte_end":91159,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91164,"byte_end":91221,"line_start":659,"line_end":659,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(heap.len(), 5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91226,"byte_end":91256,"line_start":660,"line_end":660,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91261,"byte_end":91264,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ drop(heap.drain_sorted()); // removes all elements in heap order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91269,"byte_end":91337,"line_start":662,"line_end":662,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(heap.len(), 0);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91342,"byte_end":91372,"line_start":663,"line_end":663,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91377,"byte_end":91384,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91389,"byte_end":91398,"line_start":665,"line_end":665,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91403,"byte_end":91469,"line_start":666,"line_end":666,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92073,"byte_end":92077,"line_start":690,"line_end":690,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in\n arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91602,"byte_end":91674,"line_start":673,"line_end":673,"column_start":5,"column_end":77}},{"value":"/ arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91679,"byte_end":91699,"line_start":674,"line_end":674,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91704,"byte_end":91707,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91712,"byte_end":91726,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91731,"byte_end":91734,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91739,"byte_end":91755,"line_start":678,"line_end":678,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91760,"byte_end":91763,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91768,"byte_end":91775,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91780,"byte_end":91817,"line_start":681,"line_end":681,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91822,"byte_end":91872,"line_start":682,"line_end":682,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91877,"byte_end":91880,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91885,"byte_end":91927,"line_start":684,"line_end":684,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91932,"byte_end":91958,"line_start":685,"line_end":685,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91963,"byte_end":91989,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91994,"byte_end":91999,"line_start":687,"line_end":687,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92004,"byte_end":92011,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92016,"byte_end":92061,"line_start":689,"line_end":689,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92682,"byte_end":92698,"line_start":709,"line_end":709,"column_start":12,"column_end":28},"name":"into_iter_sorted","qualname":"<BinaryHeap<T>>::into_iter_sorted","value":"fn (self) -> IntoIterSorted<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which retrieves elements in heap order.\n This method consumes the original heap.","sig":null,"attributes":[{"value":"/ Returns an iterator which retrieves elements in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92153,"byte_end":92216,"line_start":694,"line_end":694,"column_start":5,"column_end":68}},{"value":"/ This method consumes the original heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92221,"byte_end":92264,"line_start":695,"line_end":695,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92269,"byte_end":92272,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92277,"byte_end":92291,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92296,"byte_end":92299,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92304,"byte_end":92320,"line_start":699,"line_end":699,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92325,"byte_end":92328,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92333,"byte_end":92340,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"/ #![feature(binary_heap_into_iter_sorted)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92345,"byte_end":92390,"line_start":702,"line_end":702,"column_start":5,"column_end":50}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92395,"byte_end":92432,"line_start":703,"line_end":703,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92437,"byte_end":92490,"line_start":704,"line_end":704,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92495,"byte_end":92498,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), vec![5, 4]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92503,"byte_end":92583,"line_start":706,"line_end":706,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92588,"byte_end":92595,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92600,"byte_end":92670,"line_start":708,"line_end":708,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93333,"byte_end":93337,"line_start":735,"line_end":735,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T>>::peek","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the greatest item in the binary heap, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the greatest item in the binary heap, or `None` if it is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92778,"byte_end":92853,"line_start":713,"line_end":713,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92858,"byte_end":92861,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92866,"byte_end":92880,"line_start":715,"line_end":715,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92885,"byte_end":92888,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92893,"byte_end":92909,"line_start":717,"line_end":717,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92914,"byte_end":92917,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92922,"byte_end":92929,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92934,"byte_end":92971,"line_start":720,"line_end":720,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92976,"byte_end":93013,"line_start":721,"line_end":721,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93018,"byte_end":93052,"line_start":722,"line_end":722,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93057,"byte_end":93060,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93065,"byte_end":93082,"line_start":724,"line_end":724,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93087,"byte_end":93104,"line_start":725,"line_end":725,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93109,"byte_end":93126,"line_start":726,"line_end":726,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93131,"byte_end":93169,"line_start":727,"line_end":727,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93174,"byte_end":93177,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93182,"byte_end":93189,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93194,"byte_end":93197,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93202,"byte_end":93223,"line_start":731,"line_end":731,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93228,"byte_end":93231,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Cost is O(1) in the worst case.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93236,"byte_end":93271,"line_start":733,"line_end":733,"column_start":5,"column_end":40}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93276,"byte_end":93321,"line_start":734,"line_end":734,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93788,"byte_end":93796,"line_start":752,"line_end":752,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the binary heap can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the binary heap can hold without reallocating.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93397,"byte_end":93478,"line_start":739,"line_end":739,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93483,"byte_end":93486,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93491,"byte_end":93505,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93510,"byte_end":93513,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93518,"byte_end":93534,"line_start":743,"line_end":743,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93539,"byte_end":93542,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93547,"byte_end":93554,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93559,"byte_end":93596,"line_start":746,"line_end":746,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93601,"byte_end":93651,"line_start":747,"line_end":747,"column_start":5,"column_end":55}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93656,"byte_end":93692,"line_start":748,"line_end":748,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93697,"byte_end":93714,"line_start":749,"line_end":749,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93719,"byte_end":93726,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93731,"byte_end":93776,"line_start":751,"line_end":751,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94721,"byte_end":94734,"line_start":781,"line_end":781,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<BinaryHeap<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n given `BinaryHeap`. Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93855,"byte_end":93949,"line_start":756,"line_end":756,"column_start":5,"column_end":99}},{"value":"/ given `BinaryHeap`. Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93954,"byte_end":94029,"line_start":757,"line_end":757,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94034,"byte_end":94037,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it requests. Therefore","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94042,"byte_end":94132,"line_start":759,"line_end":759,"column_start":5,"column_end":95}},{"value":"/ capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94137,"byte_end":94226,"line_start":760,"line_end":760,"column_start":5,"column_end":94}},{"value":"/ insertions are expected.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94231,"byte_end":94259,"line_start":761,"line_end":761,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94264,"byte_end":94267,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94272,"byte_end":94284,"line_start":763,"line_end":763,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94289,"byte_end":94292,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94297,"byte_end":94346,"line_start":765,"line_end":765,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94351,"byte_end":94354,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94359,"byte_end":94373,"line_start":767,"line_end":767,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94378,"byte_end":94381,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94386,"byte_end":94402,"line_start":769,"line_end":769,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94407,"byte_end":94410,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94415,"byte_end":94422,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94427,"byte_end":94464,"line_start":772,"line_end":772,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94469,"byte_end":94506,"line_start":773,"line_end":773,"column_start":5,"column_end":42}},{"value":"/ heap.reserve_exact(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94511,"byte_end":94539,"line_start":774,"line_end":774,"column_start":5,"column_end":33}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94544,"byte_end":94580,"line_start":775,"line_end":775,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94585,"byte_end":94602,"line_start":776,"line_end":776,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94607,"byte_end":94614,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94619,"byte_end":94622,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94627,"byte_end":94659,"line_start":779,"line_end":779,"column_start":5,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94664,"byte_end":94709,"line_start":780,"line_end":780,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95410,"byte_end":95417,"line_start":804,"line_end":804,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BinaryHeap<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted in the\n `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94823,"byte_end":94906,"line_start":785,"line_end":785,"column_start":5,"column_end":88}},{"value":"/ `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94911,"byte_end":94999,"line_start":786,"line_end":786,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95004,"byte_end":95007,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95012,"byte_end":95024,"line_start":788,"line_end":788,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95029,"byte_end":95032,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95037,"byte_end":95086,"line_start":790,"line_end":790,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95091,"byte_end":95094,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95099,"byte_end":95113,"line_start":792,"line_end":792,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95118,"byte_end":95121,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95126,"byte_end":95142,"line_start":794,"line_end":794,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95147,"byte_end":95150,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95155,"byte_end":95162,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95167,"byte_end":95204,"line_start":797,"line_end":797,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95209,"byte_end":95246,"line_start":798,"line_end":798,"column_start":5,"column_end":42}},{"value":"/ heap.reserve(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95251,"byte_end":95273,"line_start":799,"line_end":799,"column_start":5,"column_end":27}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95278,"byte_end":95314,"line_start":800,"line_end":800,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95319,"byte_end":95336,"line_start":801,"line_end":801,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95341,"byte_end":95348,"line_start":802,"line_end":802,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95353,"byte_end":95398,"line_start":803,"line_end":803,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95935,"byte_end":95948,"line_start":823,"line_end":823,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<BinaryHeap<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Discards as much additional capacity as possible.","sig":null,"attributes":[{"value":"/ Discards as much additional capacity as possible.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95500,"byte_end":95553,"line_start":808,"line_end":808,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95558,"byte_end":95561,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95566,"byte_end":95580,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95585,"byte_end":95588,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95593,"byte_end":95609,"line_start":812,"line_end":812,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95614,"byte_end":95617,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95622,"byte_end":95629,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95634,"byte_end":95671,"line_start":815,"line_end":815,"column_start":5,"column_end":42}},{"value":"/ let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95676,"byte_end":95743,"line_start":816,"line_end":816,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95748,"byte_end":95751,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95756,"byte_end":95792,"line_start":818,"line_end":818,"column_start":5,"column_end":41}},{"value":"/ heap.shrink_to_fit();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95797,"byte_end":95822,"line_start":819,"line_end":819,"column_start":5,"column_end":30}},{"value":"/ assert!(heap.capacity() == 0);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95827,"byte_end":95861,"line_start":820,"line_end":820,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95866,"byte_end":95873,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95878,"byte_end":95923,"line_start":822,"line_end":822,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96684,"byte_end":96693,"line_start":848,"line_end":848,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<BinaryHeap<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Discards capacity with a lower bound.","sig":null,"attributes":[{"value":"/ Discards capacity with a lower bound.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96008,"byte_end":96049,"line_start":827,"line_end":827,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96054,"byte_end":96057,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96062,"byte_end":96127,"line_start":829,"line_end":829,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96132,"byte_end":96159,"line_start":830,"line_end":830,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96164,"byte_end":96167,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96172,"byte_end":96235,"line_start":832,"line_end":832,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96240,"byte_end":96261,"line_start":833,"line_end":833,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96266,"byte_end":96269,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96274,"byte_end":96288,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96293,"byte_end":96296,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96301,"byte_end":96308,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96313,"byte_end":96339,"line_start":838,"line_end":838,"column_start":5,"column_end":31}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96344,"byte_end":96381,"line_start":839,"line_end":839,"column_start":5,"column_end":42}},{"value":"/ let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96386,"byte_end":96453,"line_start":840,"line_end":840,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96458,"byte_end":96461,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96466,"byte_end":96502,"line_start":842,"line_end":842,"column_start":5,"column_end":41}},{"value":"/ heap.shrink_to(10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96507,"byte_end":96530,"line_start":843,"line_end":843,"column_start":5,"column_end":28}},{"value":"/ assert!(heap.capacity() >= 10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96535,"byte_end":96570,"line_start":844,"line_end":844,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96575,"byte_end":96582,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96587,"byte_end":96596,"line_start":846,"line_end":846,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96601,"byte_end":96672,"line_start":847,"line_end":847,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97287,"byte_end":97295,"line_start":870,"line_end":870,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<BinaryHeap<T>>::into_vec","value":"fn (self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BinaryHeap` and returns the underlying vector\n in arbitrary order.","sig":null,"attributes":[{"value":"/ Consumes the `BinaryHeap` and returns the underlying vector","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96781,"byte_end":96844,"line_start":852,"line_end":852,"column_start":5,"column_end":68}},{"value":"/ in arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96849,"byte_end":96872,"line_start":853,"line_end":853,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96877,"byte_end":96880,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96885,"byte_end":96899,"line_start":855,"line_end":855,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96904,"byte_end":96907,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96912,"byte_end":96928,"line_start":857,"line_end":857,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96933,"byte_end":96936,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96941,"byte_end":96948,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96953,"byte_end":96990,"line_start":860,"line_end":860,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96995,"byte_end":97054,"line_start":861,"line_end":861,"column_start":5,"column_end":64}},{"value":"/ let vec = heap.into_vec();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97059,"byte_end":97089,"line_start":862,"line_end":862,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97094,"byte_end":97097,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ // Will print in some order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97102,"byte_end":97133,"line_start":864,"line_end":864,"column_start":5,"column_end":36}},{"value":"/ for x in vec {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97138,"byte_end":97156,"line_start":865,"line_end":865,"column_start":5,"column_end":23}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97161,"byte_end":97187,"line_start":866,"line_end":866,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97192,"byte_end":97197,"line_start":867,"line_end":867,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97202,"byte_end":97209,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97214,"byte_end":97275,"line_start":869,"line_end":869,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97671,"byte_end":97674,"line_start":887,"line_end":887,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97345,"byte_end":97387,"line_start":874,"line_end":874,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97392,"byte_end":97395,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97400,"byte_end":97414,"line_start":876,"line_end":876,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97419,"byte_end":97422,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97427,"byte_end":97443,"line_start":878,"line_end":878,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97448,"byte_end":97451,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97456,"byte_end":97463,"line_start":880,"line_end":880,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97468,"byte_end":97505,"line_start":881,"line_end":881,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97510,"byte_end":97554,"line_start":882,"line_end":882,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97559,"byte_end":97562,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97567,"byte_end":97597,"line_start":884,"line_end":884,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97602,"byte_end":97609,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97614,"byte_end":97659,"line_start":886,"line_end":886,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98160,"byte_end":98168,"line_start":910,"line_end":910,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97728,"byte_end":97767,"line_start":891,"line_end":891,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97772,"byte_end":97775,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97780,"byte_end":97794,"line_start":893,"line_end":893,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97799,"byte_end":97802,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97807,"byte_end":97823,"line_start":895,"line_end":895,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97828,"byte_end":97831,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97836,"byte_end":97843,"line_start":897,"line_end":897,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97848,"byte_end":97885,"line_start":898,"line_end":898,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97890,"byte_end":97927,"line_start":899,"line_end":899,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97932,"byte_end":97935,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97940,"byte_end":97969,"line_start":901,"line_end":901,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97974,"byte_end":97977,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97982,"byte_end":97999,"line_start":903,"line_end":903,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98004,"byte_end":98021,"line_start":904,"line_end":904,"column_start":5,"column_end":22}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98026,"byte_end":98043,"line_start":905,"line_end":905,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98048,"byte_end":98051,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98056,"byte_end":98086,"line_start":907,"line_end":907,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98091,"byte_end":98098,"line_start":908,"line_end":908,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98103,"byte_end":98148,"line_start":909,"line_end":909,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98783,"byte_end":98788,"line_start":936,"line_end":936,"column_start":12,"column_end":17},"name":"drain","qualname":"<BinaryHeap<T>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the binary heap, returning an iterator over the removed elements.","sig":null,"attributes":[{"value":"/ Clears the binary heap, returning an iterator over the removed elements.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98221,"byte_end":98297,"line_start":914,"line_end":914,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98302,"byte_end":98305,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ The elements are removed in arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98310,"byte_end":98358,"line_start":916,"line_end":916,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98363,"byte_end":98366,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98371,"byte_end":98385,"line_start":918,"line_end":918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98390,"byte_end":98393,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98398,"byte_end":98414,"line_start":920,"line_end":920,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98419,"byte_end":98422,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98427,"byte_end":98434,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98439,"byte_end":98476,"line_start":923,"line_end":923,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98481,"byte_end":98529,"line_start":924,"line_end":924,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98534,"byte_end":98537,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98542,"byte_end":98572,"line_start":926,"line_end":926,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98577,"byte_end":98580,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ for x in heap.drain() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98585,"byte_end":98612,"line_start":928,"line_end":928,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98617,"byte_end":98643,"line_start":929,"line_end":929,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98648,"byte_end":98653,"line_start":930,"line_end":930,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98658,"byte_end":98661,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98666,"byte_end":98695,"line_start":932,"line_end":932,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98700,"byte_end":98707,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98712,"byte_end":98721,"line_start":934,"line_end":934,"column_start":5,"column_end":14}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98726,"byte_end":98771,"line_start":935,"line_end":935,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99274,"byte_end":99279,"line_start":957,"line_end":957,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98873,"byte_end":98914,"line_start":940,"line_end":940,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98919,"byte_end":98922,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98927,"byte_end":98941,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98946,"byte_end":98949,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98954,"byte_end":98970,"line_start":944,"line_end":944,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98975,"byte_end":98978,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98983,"byte_end":98990,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98995,"byte_end":99032,"line_start":947,"line_end":947,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99037,"byte_end":99085,"line_start":948,"line_end":948,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99090,"byte_end":99093,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99098,"byte_end":99128,"line_start":950,"line_end":950,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99133,"byte_end":99136,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99141,"byte_end":99158,"line_start":952,"line_end":952,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99163,"byte_end":99166,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99171,"byte_end":99200,"line_start":954,"line_end":954,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99205,"byte_end":99212,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99217,"byte_end":99262,"line_start":956,"line_end":956,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101671,"byte_end":101675,"line_start":1038,"line_end":1038,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":503}],"decl_id":null,"docs":" An iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101354,"byte_end":101406,"line_start":1030,"line_end":1030,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101407,"byte_end":101410,"line_start":1031,"line_end":1031,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101411,"byte_end":101489,"line_start":1032,"line_end":1032,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101490,"byte_end":101517,"line_start":1033,"line_end":1033,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101518,"byte_end":101521,"line_start":1034,"line_end":1034,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.BinaryHeap.html#method.iter","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101522,"byte_end":101570,"line_start":1035,"line_end":1035,"column_start":1,"column_end":49}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101571,"byte_end":101613,"line_start":1036,"line_end":1036,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101614,"byte_end":101659,"line_start":1037,"line_end":1037,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4501},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103408,"byte_end":103416,"line_start":1104,"line_end":1104,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4503}],"decl_id":null,"docs":" An owning iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103013,"byte_end":103072,"line_start":1095,"line_end":1095,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103073,"byte_end":103076,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103077,"byte_end":103151,"line_start":1097,"line_end":1097,"column_start":1,"column_end":75}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103152,"byte_end":103227,"line_start":1098,"line_end":1098,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103228,"byte_end":103231,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.BinaryHeap.html#method.into_iter","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103232,"byte_end":103290,"line_start":1100,"line_end":1100,"column_start":1,"column_end":59}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103291,"byte_end":103333,"line_start":1101,"line_end":1101,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103334,"byte_end":103379,"line_start":1102,"line_end":1102,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4507},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104538,"byte_end":104552,"line_start":1150,"line_end":1150,"column_start":12,"column_end":26},"name":"IntoIterSorted","qualname":"::collections::binary_heap::IntoIterSorted","value":"IntoIterSorted {  }","parent":null,"children":[{"krate":0,"index":4509}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104432,"byte_end":104502,"line_start":1148,"line_end":1148,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":4516},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105658,"byte_end":105663,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::binary_heap::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4519}],"decl_id":null,"docs":" A draining iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105313,"byte_end":105373,"line_start":1179,"line_end":1179,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105374,"byte_end":105377,"line_start":1180,"line_end":1180,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105378,"byte_end":105457,"line_start":1181,"line_end":1181,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105458,"byte_end":105485,"line_start":1182,"line_end":1182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105486,"byte_end":105489,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.BinaryHeap.html#method.drain","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105490,"byte_end":105540,"line_start":1184,"line_end":1184,"column_start":1,"column_end":51}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105541,"byte_end":105583,"line_start":1185,"line_end":1185,"column_start":1,"column_end":43}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105584,"byte_end":105629,"line_start":1186,"line_end":1186,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4524},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106828,"byte_end":106839,"line_start":1234,"line_end":1234,"column_start":12,"column_end":23},"name":"DrainSorted","qualname":"::collections::binary_heap::DrainSorted","value":"DrainSorted {  }","parent":null,"children":[{"krate":0,"index":4527}],"decl_id":null,"docs":" A draining iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106441,"byte_end":106501,"line_start":1225,"line_end":1225,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106502,"byte_end":106505,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_sorted`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106506,"byte_end":106592,"line_start":1227,"line_end":1227,"column_start":1,"column_end":87}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106593,"byte_end":106620,"line_start":1228,"line_end":1228,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106621,"byte_end":106624,"line_start":1229,"line_end":1229,"column_start":1,"column_end":4}},{"value":"/ [`drain_sorted`]: struct.BinaryHeap.html#method.drain_sorted","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106625,"byte_end":106689,"line_start":1230,"line_end":1230,"column_start":1,"column_end":65}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106690,"byte_end":106732,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106733,"byte_end":106799,"line_start":1232,"line_end":1232,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":635},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::collections::btree::map","value":"src/liballoc/collections/btree/map.rs","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":658},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":695},{"krate":0,"index":702},{"krate":0,"index":709},{"krate":0,"index":715},{"krate":0,"index":4532},{"krate":0,"index":4538},{"krate":0,"index":719},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":734},{"krate":0,"index":738},{"krate":0,"index":743},{"krate":0,"index":4543},{"krate":0,"index":4548},{"krate":0,"index":747},{"krate":0,"index":753},{"krate":0,"index":757},{"krate":0,"index":764},{"krate":0,"index":768},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":790},{"krate":0,"index":794},{"krate":0,"index":801},{"krate":0,"index":805},{"krate":0,"index":811},{"krate":0,"index":860},{"krate":0,"index":867},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":883},{"krate":0,"index":887},{"krate":0,"index":891},{"krate":0,"index":898},{"krate":0,"index":906},{"krate":0,"index":911},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":924},{"krate":0,"index":939},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":965},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":982},{"krate":0,"index":991},{"krate":0,"index":997},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1008},{"krate":0,"index":1015},{"krate":0,"index":1024},{"krate":0,"index":1030},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1043},{"krate":0,"index":1048},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1060},{"krate":0,"index":1067},{"krate":0,"index":1073},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1086},{"krate":0,"index":1091},{"krate":0,"index":1097},{"krate":0,"index":1104},{"krate":0,"index":1109},{"krate":0,"index":1113},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1125},{"krate":0,"index":1129},{"krate":0,"index":1133},{"krate":0,"index":1139},{"krate":0,"index":1145},{"krate":0,"index":1155},{"krate":0,"index":1165},{"krate":0,"index":1170},{"krate":0,"index":1179},{"krate":0,"index":1191},{"krate":0,"index":1206},{"krate":0,"index":1209}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":671},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117212,"byte_end":117220,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"BTreeMap","qualname":"::collections::btree::map::BTreeMap","value":"BTreeMap {  }","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675}],"decl_id":null,"docs":" A map based on a B-Tree.","sig":null,"attributes":[{"value":"/ A map based on a B-Tree.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112180,"byte_end":112208,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112209,"byte_end":112212,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112213,"byte_end":112308,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112309,"byte_end":112407,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ choice for a sorted map, as a perfectly balanced BST performs the theoretical minimum amount of","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112408,"byte_end":112507,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ comparisons necessary to find an element (log<sub>2</sub>n). However, in practice the way this","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112508,"byte_end":112606,"line_start":23,"line_end":23,"column_start":1,"column_end":99}},{"value":"/ is done is *very* inefficient for modern computer architectures. In particular, every element","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112607,"byte_end":112704,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ is stored in its own individually heap-allocated node. This means that every single insertion","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112705,"byte_end":112802,"line_start":25,"line_end":25,"column_start":1,"column_end":98}},{"value":"/ triggers a heap-allocation, and every single comparison should be a cache-miss. Since these","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112803,"byte_end":112898,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ are both notably expensive things to do in practice, we are forced to at very least reconsider","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112899,"byte_end":112997,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ the BST strategy.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112998,"byte_end":113019,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113020,"byte_end":113023,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113024,"byte_end":113121,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ this, we reduce the number of allocations by a factor of B, and improve cache efficiency in","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113122,"byte_end":113217,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ searches. However, this does mean that searches will have to do *more* comparisons on average.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113218,"byte_end":113316,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ The precise number of comparisons depends on the node search strategy used. For optimal cache","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113317,"byte_end":113414,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ efficiency, one could search the nodes linearly. For optimal comparisons, one could search","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113415,"byte_end":113509,"line_start":34,"line_end":34,"column_start":1,"column_end":95}},{"value":"/ the node using binary search. As a compromise, one could also perform a linear search","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113510,"byte_end":113599,"line_start":35,"line_end":35,"column_start":1,"column_end":90}},{"value":"/ that initially only checks every i<sup>th</sup> element for some choice of i.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113600,"byte_end":113681,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113682,"byte_end":113685,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Currently, our implementation simply performs naive linear search. This provides excellent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113686,"byte_end":113780,"line_start":38,"line_end":38,"column_start":1,"column_end":95}},{"value":"/ performance on *small* nodes of elements which are cheap to compare. However in the future we","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113781,"byte_end":113878,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"/ would like to further explore choosing the optimal search strategy based on the choice of B,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113879,"byte_end":113975,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ and possibly other factors. Using linear search, searching for a random element is expected","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113976,"byte_end":114071,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ to take O(B log<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114072,"byte_end":114168,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ however, performance is excellent.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114169,"byte_end":114207,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114208,"byte_end":114211,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's ordering relative to","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114212,"byte_end":114310,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/ any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114311,"byte_end":114405,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114406,"byte_end":114498,"line_start":47,"line_end":47,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114499,"byte_end":114502,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114503,"byte_end":114544,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114545,"byte_end":114590,"line_start":50,"line_end":50,"column_start":1,"column_end":46}},{"value":"/ [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114591,"byte_end":114642,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114643,"byte_end":114646,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114647,"byte_end":114661,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114662,"byte_end":114665,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114666,"byte_end":114673,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114674,"byte_end":114709,"line_start":56,"line_end":56,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114710,"byte_end":114713,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114714,"byte_end":114782,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeMap<&str, &str>` in this example).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114783,"byte_end":114839,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut movie_reviews = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114840,"byte_end":114884,"line_start":60,"line_end":60,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114885,"byte_end":114888,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // review some movies.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114889,"byte_end":114915,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/ movie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114916,"byte_end":115007,"line_start":63,"line_end":63,"column_start":1,"column_end":92}},{"value":"/ movie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115008,"byte_end":115071,"line_start":64,"line_end":64,"column_start":1,"column_end":64}},{"value":"/ movie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115072,"byte_end":115138,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"/ movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it a lot.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115139,"byte_end":115209,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115210,"byte_end":115213,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115214,"byte_end":115246,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/ if !movie_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115247,"byte_end":115302,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115303,"byte_end":115375,"line_start":70,"line_end":70,"column_start":1,"column_end":72}},{"value":"/              movie_reviews.len());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115376,"byte_end":115414,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115415,"byte_end":115420,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115421,"byte_end":115424,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115425,"byte_end":115498,"line_start":74,"line_end":74,"column_start":1,"column_end":74}},{"value":"/ movie_reviews.remove(\"The Blues Brothers\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115499,"byte_end":115546,"line_start":75,"line_end":75,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115547,"byte_end":115550,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115551,"byte_end":115603,"line_start":77,"line_end":77,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Up!\", \"Office Space\"];","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115604,"byte_end":115646,"line_start":78,"line_end":78,"column_start":1,"column_end":43}},{"value":"/ for movie in &to_find {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115647,"byte_end":115674,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/     match movie_reviews.get(movie) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115675,"byte_end":115715,"line_start":80,"line_end":80,"column_start":1,"column_end":41}},{"value":"/        Some(review) => println!(\"{}: {}\", movie, review),","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115716,"byte_end":115777,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/        None => println!(\"{} is unreviewed.\", movie)","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115778,"byte_end":115833,"line_start":82,"line_end":82,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115834,"byte_end":115843,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115844,"byte_end":115849,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115850,"byte_end":115853,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115854,"byte_end":115926,"line_start":86,"line_end":86,"column_start":1,"column_end":73}},{"value":"/ println!(\"Movie review: {}\", movie_reviews[\"Office Space\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115927,"byte_end":115991,"line_start":87,"line_end":87,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115992,"byte_end":115995,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":115996,"byte_end":116027,"line_start":89,"line_end":89,"column_start":1,"column_end":32}},{"value":"/ for (movie, review) in &movie_reviews {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116028,"byte_end":116071,"line_start":90,"line_end":90,"column_start":1,"column_end":44}},{"value":"/     println!(\"{}: \\\"{}\\\"\", movie, review);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116072,"byte_end":116118,"line_start":91,"line_end":91,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116119,"byte_end":116124,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116125,"byte_end":116132,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116133,"byte_end":116136,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ `BTreeMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116137,"byte_end":116213,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116214,"byte_end":116294,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116295,"byte_end":116312,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116313,"byte_end":116316,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116317,"byte_end":116324,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116325,"byte_end":116360,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116361,"byte_end":116364,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116365,"byte_end":116433,"line_start":102,"line_end":102,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeMap<&str, u8>` in this example).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116434,"byte_end":116488,"line_start":103,"line_end":103,"column_start":1,"column_end":55}},{"value":"/ let mut player_stats = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116489,"byte_end":116532,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116533,"byte_end":116536,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116537,"byte_end":116570,"line_start":106,"line_end":106,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116571,"byte_end":116646,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116647,"byte_end":116682,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116683,"byte_end":116693,"line_start":109,"line_end":109,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116694,"byte_end":116699,"line_start":110,"line_end":110,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116700,"byte_end":116703,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116704,"byte_end":116756,"line_start":112,"line_end":112,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116757,"byte_end":116805,"line_start":113,"line_end":113,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116806,"byte_end":116809,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116810,"byte_end":116883,"line_start":115,"line_end":115,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116884,"byte_end":116912,"line_start":116,"line_end":116,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116913,"byte_end":116980,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116981,"byte_end":116984,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":116985,"byte_end":117053,"line_start":119,"line_end":119,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117054,"byte_end":117113,"line_start":120,"line_end":120,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117114,"byte_end":117146,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117147,"byte_end":117154,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117155,"byte_end":117200,"line_start":123,"line_end":123,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120495,"byte_end":120505,"line_start":218,"line_end":218,"column_start":8,"column_end":18},"name":"clone_from","qualname":"::collections::btree::map::BTreeClone::clone_from","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":709},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123752,"byte_end":123756,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"decl_id":null,"docs":" An iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123446,"byte_end":123495,"line_start":304,"line_end":304,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123496,"byte_end":123499,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123500,"byte_end":123576,"line_start":306,"line_end":306,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123577,"byte_end":123604,"line_start":307,"line_end":307,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123605,"byte_end":123608,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.BTreeMap.html#method.iter","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123609,"byte_end":123655,"line_start":309,"line_end":309,"column_start":1,"column_end":47}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123656,"byte_end":123694,"line_start":310,"line_end":310,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123695,"byte_end":123740,"line_start":311,"line_end":311,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4532},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124420,"byte_end":124427,"line_start":333,"line_end":333,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4536},{"krate":0,"index":4537}],"decl_id":null,"docs":" A mutable iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124078,"byte_end":124134,"line_start":324,"line_end":324,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124135,"byte_end":124138,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124139,"byte_end":124219,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124220,"byte_end":124247,"line_start":327,"line_end":327,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124248,"byte_end":124251,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.BTreeMap.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124252,"byte_end":124306,"line_start":329,"line_end":329,"column_start":1,"column_end":55}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124307,"byte_end":124345,"line_start":330,"line_end":330,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124346,"byte_end":124391,"line_start":331,"line_end":331,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":719},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124868,"byte_end":124876,"line_start":346,"line_end":346,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724}],"decl_id":null,"docs":" An owning iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124501,"byte_end":124557,"line_start":338,"line_end":338,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124558,"byte_end":124561,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BTreeMap`]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124562,"byte_end":124634,"line_start":340,"line_end":340,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124635,"byte_end":124710,"line_start":341,"line_end":341,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124711,"byte_end":124714,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.BTreeMap.html#method.into_iter","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124715,"byte_end":124771,"line_start":343,"line_end":343,"column_start":1,"column_end":57}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124772,"byte_end":124810,"line_start":344,"line_end":344,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124811,"byte_end":124856,"line_start":345,"line_end":345,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":729},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125695,"byte_end":125699,"line_start":368,"line_end":368,"column_start":12,"column_end":16},"name":"Keys","qualname":"::collections::btree::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":733}],"decl_id":null,"docs":" An iterator over the keys of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125392,"byte_end":125438,"line_start":360,"line_end":360,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125439,"byte_end":125442,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125443,"byte_end":125519,"line_start":362,"line_end":362,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125520,"byte_end":125547,"line_start":363,"line_end":363,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125548,"byte_end":125551,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.BTreeMap.html#method.keys","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125552,"byte_end":125598,"line_start":365,"line_end":365,"column_start":1,"column_end":47}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125599,"byte_end":125637,"line_start":366,"line_end":366,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125638,"byte_end":125683,"line_start":367,"line_end":367,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":738},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126300,"byte_end":126306,"line_start":387,"line_end":387,"column_start":12,"column_end":18},"name":"Values","qualname":"::collections::btree::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":742}],"decl_id":null,"docs":" An iterator over the values of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125989,"byte_end":126037,"line_start":379,"line_end":379,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126038,"byte_end":126041,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126042,"byte_end":126120,"line_start":381,"line_end":381,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126121,"byte_end":126148,"line_start":382,"line_end":382,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126149,"byte_end":126152,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.BTreeMap.html#method.values","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126153,"byte_end":126203,"line_start":384,"line_end":384,"column_start":1,"column_end":51}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126204,"byte_end":126242,"line_start":385,"line_end":385,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126243,"byte_end":126288,"line_start":386,"line_end":386,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4543},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126955,"byte_end":126964,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::collections::btree::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":4547}],"decl_id":null,"docs":" A mutable iterator over the values of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126598,"byte_end":126653,"line_start":398,"line_end":398,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126654,"byte_end":126657,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126658,"byte_end":126740,"line_start":400,"line_end":400,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126741,"byte_end":126768,"line_start":401,"line_end":401,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126769,"byte_end":126772,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.BTreeMap.html#method.values_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126773,"byte_end":126831,"line_start":403,"line_end":403,"column_start":1,"column_end":59}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126832,"byte_end":126870,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"stable(feature = \"map_values_mut\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126871,"byte_end":126926,"line_start":405,"line_end":405,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":747},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127345,"byte_end":127350,"line_start":419,"line_end":419,"column_start":12,"column_end":17},"name":"Range","qualname":"::collections::btree::map::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752}],"decl_id":null,"docs":" An iterator over a sub-range of entries in a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over a sub-range of entries in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127018,"byte_end":127078,"line_start":411,"line_end":411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127079,"byte_end":127082,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127083,"byte_end":127160,"line_start":413,"line_end":413,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127161,"byte_end":127188,"line_start":414,"line_end":414,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127189,"byte_end":127192,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ [`range`]: struct.BTreeMap.html#method.range","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127193,"byte_end":127241,"line_start":416,"line_end":416,"column_start":1,"column_end":49}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127242,"byte_end":127280,"line_start":417,"line_end":417,"column_start":1,"column_end":39}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127281,"byte_end":127333,"line_start":418,"line_end":418,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":757},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128133,"byte_end":128141,"line_start":439,"line_end":439,"column_start":12,"column_end":20},"name":"RangeMut","qualname":"::collections::btree::map::RangeMut","value":"RangeMut {  }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"decl_id":null,"docs":" A mutable iterator over a sub-range of entries in a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over a sub-range of entries in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127787,"byte_end":127854,"line_start":431,"line_end":431,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127855,"byte_end":127858,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127859,"byte_end":127940,"line_start":433,"line_end":433,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127941,"byte_end":127968,"line_start":434,"line_end":434,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127969,"byte_end":127972,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ [`range_mut`]: struct.BTreeMap.html#method.range_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127973,"byte_end":128029,"line_start":436,"line_end":436,"column_start":1,"column_end":57}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128030,"byte_end":128068,"line_start":437,"line_end":437,"column_start":1,"column_end":39}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128069,"byte_end":128121,"line_start":438,"line_end":438,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":772},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129146,"byte_end":129152,"line_start":465,"line_end":465,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::collections::btree::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129072,"byte_end":129091,"line_start":463,"line_end":463,"column_start":5,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129096,"byte_end":129141,"line_start":464,"line_end":464,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":775},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129305,"byte_end":129313,"line_start":469,"line_end":469,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::collections::btree::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129228,"byte_end":129250,"line_start":467,"line_end":467,"column_start":5,"column_end":27}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129255,"byte_end":129300,"line_start":468,"line_end":468,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":768},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129042,"byte_end":129047,"line_start":462,"line_end":462,"column_start":10,"column_end":15},"name":"Entry","qualname":"::collections::btree::map::Entry","value":"Entry::{Vacant, Occupied}","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":775}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128736,"byte_end":128816,"line_start":455,"line_end":455,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128817,"byte_end":128820,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`BTreeMap`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128821,"byte_end":128894,"line_start":457,"line_end":457,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128895,"byte_end":128898,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128899,"byte_end":128937,"line_start":459,"line_end":459,"column_start":1,"column_end":39}},{"value":"/ [`entry`]: struct.BTreeMap.html#method.entry","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128938,"byte_end":128986,"line_start":460,"line_end":460,"column_start":1,"column_end":49}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128987,"byte_end":129032,"line_start":461,"line_end":461,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129931,"byte_end":129942,"line_start":487,"line_end":487,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::collections::btree::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"decl_id":null,"docs":" A view into a vacant entry in a `BTreeMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129753,"byte_end":129800,"line_start":482,"line_end":482,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129801,"byte_end":129838,"line_start":483,"line_end":483,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129839,"byte_end":129842,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129843,"byte_end":129873,"line_start":485,"line_end":485,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129874,"byte_end":129919,"line_start":486,"line_end":486,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130595,"byte_end":130608,"line_start":508,"line_end":508,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::collections::btree::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" A view into an occupied entry in a `BTreeMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130414,"byte_end":130464,"line_start":503,"line_end":503,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130465,"byte_end":130502,"line_start":504,"line_end":504,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130503,"byte_end":130506,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130507,"byte_end":130537,"line_start":506,"line_end":506,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130538,"byte_end":130583,"line_start":507,"line_end":507,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131713,"byte_end":131716,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"new","qualname":"<BTreeMap<K, V>>::new","value":"fn () -> BTreeMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new empty BTreeMap with a reasonable choice for B.","sig":null,"attributes":[{"value":"/ Makes a new empty BTreeMap with a reasonable choice for B.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131320,"byte_end":131382,"line_start":531,"line_end":531,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131387,"byte_end":131390,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131395,"byte_end":131409,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131414,"byte_end":131417,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131422,"byte_end":131438,"line_start":535,"line_end":535,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131443,"byte_end":131446,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131451,"byte_end":131458,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131463,"byte_end":131498,"line_start":538,"line_end":538,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131503,"byte_end":131506,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131511,"byte_end":131545,"line_start":540,"line_end":540,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131550,"byte_end":131553,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ // entries can now be inserted into the empty map","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131558,"byte_end":131611,"line_start":542,"line_end":542,"column_start":5,"column_end":58}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131616,"byte_end":131639,"line_start":543,"line_end":543,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131644,"byte_end":131651,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131656,"byte_end":131701,"line_start":545,"line_end":545,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132173,"byte_end":132178,"line_start":565,"line_end":565,"column_start":12,"column_end":17},"name":"clear","qualname":"<BTreeMap<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131820,"byte_end":131862,"line_start":550,"line_end":550,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131867,"byte_end":131870,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131875,"byte_end":131889,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131894,"byte_end":131897,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131902,"byte_end":131918,"line_start":554,"line_end":554,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131923,"byte_end":131926,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131931,"byte_end":131938,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131943,"byte_end":131978,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131983,"byte_end":131986,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131991,"byte_end":132023,"line_start":559,"line_end":559,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132028,"byte_end":132049,"line_start":560,"line_end":560,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132054,"byte_end":132068,"line_start":561,"line_end":561,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132073,"byte_end":132099,"line_start":562,"line_end":562,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132104,"byte_end":132111,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132116,"byte_end":132161,"line_start":564,"line_end":564,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132808,"byte_end":132811,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"get","qualname":"<BTreeMap<K, V>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132236,"byte_end":132298,"line_start":569,"line_end":569,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132303,"byte_end":132306,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132311,"byte_end":132387,"line_start":571,"line_end":571,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132392,"byte_end":132459,"line_start":572,"line_end":572,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132464,"byte_end":132467,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132472,"byte_end":132486,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132491,"byte_end":132494,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132499,"byte_end":132515,"line_start":576,"line_end":576,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132520,"byte_end":132523,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132528,"byte_end":132535,"line_start":578,"line_end":578,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132540,"byte_end":132575,"line_start":579,"line_end":579,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132580,"byte_end":132583,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132588,"byte_end":132622,"line_start":581,"line_end":581,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132627,"byte_end":132650,"line_start":582,"line_end":582,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132655,"byte_end":132695,"line_start":583,"line_end":583,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132700,"byte_end":132734,"line_start":584,"line_end":584,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132739,"byte_end":132746,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132751,"byte_end":132796,"line_start":586,"line_end":586,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133669,"byte_end":133682,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<BTreeMap<K, V>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133075,"byte_end":133140,"line_start":598,"line_end":598,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133145,"byte_end":133148,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133153,"byte_end":133238,"line_start":600,"line_end":600,"column_start":5,"column_end":90}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133243,"byte_end":133310,"line_start":601,"line_end":601,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133315,"byte_end":133318,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133323,"byte_end":133337,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133342,"byte_end":133345,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133350,"byte_end":133357,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133362,"byte_end":133397,"line_start":606,"line_end":606,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133402,"byte_end":133405,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133410,"byte_end":133444,"line_start":608,"line_end":608,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133449,"byte_end":133472,"line_start":609,"line_end":609,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133477,"byte_end":133533,"line_start":610,"line_end":610,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133538,"byte_end":133582,"line_start":611,"line_end":611,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133587,"byte_end":133594,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_get_key_value\", since = \"1.40.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133599,"byte_end":133657,"line_start":613,"line_end":613,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134504,"byte_end":134519,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"first_key_value","qualname":"<BTreeMap<K, V>>::first_key_value","value":"fn <T> (&self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first key-value pair in the map.\n The key in this pair is the minimum key in the map.","sig":null,"attributes":[{"value":"/ Returns the first key-value pair in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133946,"byte_end":133994,"line_start":625,"line_end":625,"column_start":5,"column_end":53}},{"value":"/ The key in this pair is the minimum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133999,"byte_end":134054,"line_start":626,"line_end":626,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134059,"byte_end":134062,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134067,"byte_end":134081,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134086,"byte_end":134089,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134094,"byte_end":134110,"line_start":630,"line_end":630,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134115,"byte_end":134118,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134123,"byte_end":134130,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134135,"byte_end":134166,"line_start":633,"line_end":633,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134171,"byte_end":134206,"line_start":634,"line_end":634,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134211,"byte_end":134214,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134219,"byte_end":134253,"line_start":636,"line_end":636,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first_key_value(), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134258,"byte_end":134302,"line_start":637,"line_end":637,"column_start":5,"column_end":49}},{"value":"/ map.insert(1, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134307,"byte_end":134330,"line_start":638,"line_end":638,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134335,"byte_end":134358,"line_start":639,"line_end":639,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.first_key_value(), Some((&1, &\"b\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134363,"byte_end":134419,"line_start":640,"line_end":640,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134424,"byte_end":134431,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134436,"byte_end":134492,"line_start":642,"line_end":642,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135376,"byte_end":135387,"line_start":672,"line_end":672,"column_start":12,"column_end":23},"name":"first_entry","qualname":"<BTreeMap<K, V>>::first_entry","value":"fn <T> (&mut self) -> Option<OccupiedEntry<'_, K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first entry in the map for in-place manipulation.\n The key of this entry is the minimum key in the map.","sig":null,"attributes":[{"value":"/ Returns the first entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134732,"byte_end":134797,"line_start":652,"line_end":652,"column_start":5,"column_end":70}},{"value":"/ The key of this entry is the minimum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134802,"byte_end":134858,"line_start":653,"line_end":653,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134863,"byte_end":134866,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134871,"byte_end":134885,"line_start":655,"line_end":655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134890,"byte_end":134893,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ Contrived way to `clear` a map:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134898,"byte_end":134933,"line_start":657,"line_end":657,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134938,"byte_end":134941,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134946,"byte_end":134953,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134958,"byte_end":134989,"line_start":660,"line_end":660,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134994,"byte_end":135029,"line_start":661,"line_end":661,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135034,"byte_end":135037,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135042,"byte_end":135076,"line_start":663,"line_end":663,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135081,"byte_end":135104,"line_start":664,"line_end":664,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135109,"byte_end":135132,"line_start":665,"line_end":665,"column_start":5,"column_end":28}},{"value":"/ while let Some(entry) = map.first_entry() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135137,"byte_end":135184,"line_start":666,"line_end":666,"column_start":5,"column_end":52}},{"value":"/     let (key, val) = entry.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135189,"byte_end":135235,"line_start":667,"line_end":667,"column_start":5,"column_end":51}},{"value":"/     assert!(!map.contains_key(&key));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135240,"byte_end":135281,"line_start":668,"line_end":668,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135286,"byte_end":135291,"line_start":669,"line_end":669,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135296,"byte_end":135303,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135308,"byte_end":135364,"line_start":671,"line_end":671,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136337,"byte_end":136351,"line_start":706,"line_end":706,"column_start":12,"column_end":26},"name":"last_key_value","qualname":"<BTreeMap<K, V>>::last_key_value","value":"fn <T> (&self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last key-value pair in the map.\n The key in this pair is the maximum key in the map.","sig":null,"attributes":[{"value":"/ Returns the last key-value pair in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135830,"byte_end":135877,"line_start":689,"line_end":689,"column_start":5,"column_end":52}},{"value":"/ The key in this pair is the maximum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135882,"byte_end":135937,"line_start":690,"line_end":690,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135942,"byte_end":135945,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135950,"byte_end":135964,"line_start":692,"line_end":692,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135969,"byte_end":135972,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135977,"byte_end":135993,"line_start":694,"line_end":694,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135998,"byte_end":136001,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136006,"byte_end":136013,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136018,"byte_end":136049,"line_start":697,"line_end":697,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136054,"byte_end":136089,"line_start":698,"line_end":698,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136094,"byte_end":136097,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136102,"byte_end":136136,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136141,"byte_end":136164,"line_start":701,"line_end":701,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136169,"byte_end":136192,"line_start":702,"line_end":702,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.last_key_value(), Some((&2, &\"a\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136197,"byte_end":136252,"line_start":703,"line_end":703,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136257,"byte_end":136264,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136269,"byte_end":136325,"line_start":705,"line_end":705,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137202,"byte_end":137212,"line_start":735,"line_end":735,"column_start":12,"column_end":22},"name":"last_entry","qualname":"<BTreeMap<K, V>>::last_entry","value":"fn <T> (&mut self) -> Option<OccupiedEntry<'_, K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last entry in the map for in-place manipulation.\n The key of this entry is the maximum key in the map.","sig":null,"attributes":[{"value":"/ Returns the last entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136560,"byte_end":136624,"line_start":715,"line_end":715,"column_start":5,"column_end":69}},{"value":"/ The key of this entry is the maximum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136629,"byte_end":136685,"line_start":716,"line_end":716,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136690,"byte_end":136693,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136698,"byte_end":136712,"line_start":718,"line_end":718,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136717,"byte_end":136720,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Contrived way to `clear` a map:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136725,"byte_end":136760,"line_start":720,"line_end":720,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136765,"byte_end":136768,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136773,"byte_end":136780,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136785,"byte_end":136816,"line_start":723,"line_end":723,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136821,"byte_end":136856,"line_start":724,"line_end":724,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136861,"byte_end":136864,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136869,"byte_end":136903,"line_start":726,"line_end":726,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136908,"byte_end":136931,"line_start":727,"line_end":727,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136936,"byte_end":136959,"line_start":728,"line_end":728,"column_start":5,"column_end":28}},{"value":"/ while let Some(entry) = map.last_entry() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136964,"byte_end":137010,"line_start":729,"line_end":729,"column_start":5,"column_end":51}},{"value":"/     let (key, val) = entry.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137015,"byte_end":137061,"line_start":730,"line_end":730,"column_start":5,"column_end":51}},{"value":"/     assert!(!map.contains_key(&key));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137066,"byte_end":137107,"line_start":731,"line_end":731,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137112,"byte_end":137117,"line_start":732,"line_end":732,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137122,"byte_end":137129,"line_start":733,"line_end":733,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137134,"byte_end":137190,"line_start":734,"line_end":734,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138243,"byte_end":138255,"line_start":770,"line_end":770,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<BTreeMap<K, V>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137651,"byte_end":137720,"line_start":752,"line_end":752,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137725,"byte_end":137728,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137733,"byte_end":137809,"line_start":754,"line_end":754,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137814,"byte_end":137881,"line_start":755,"line_end":755,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137886,"byte_end":137889,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137894,"byte_end":137908,"line_start":757,"line_end":757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137913,"byte_end":137916,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137921,"byte_end":137937,"line_start":759,"line_end":759,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137942,"byte_end":137945,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137950,"byte_end":137957,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137962,"byte_end":137997,"line_start":762,"line_end":762,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138002,"byte_end":138005,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138010,"byte_end":138044,"line_start":764,"line_end":764,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138049,"byte_end":138072,"line_start":765,"line_end":765,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138077,"byte_end":138120,"line_start":766,"line_end":766,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138125,"byte_end":138169,"line_start":767,"line_end":767,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138174,"byte_end":138181,"line_start":768,"line_end":768,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138186,"byte_end":138231,"line_start":769,"line_end":769,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139084,"byte_end":139091,"line_start":799,"line_end":799,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BTreeMap<K, V>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138388,"byte_end":138458,"line_start":778,"line_end":778,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138463,"byte_end":138466,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138471,"byte_end":138547,"line_start":780,"line_end":780,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138552,"byte_end":138619,"line_start":781,"line_end":781,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138624,"byte_end":138627,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138632,"byte_end":138646,"line_start":783,"line_end":783,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138651,"byte_end":138654,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138659,"byte_end":138675,"line_start":785,"line_end":785,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138680,"byte_end":138683,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138688,"byte_end":138695,"line_start":787,"line_end":787,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138700,"byte_end":138735,"line_start":788,"line_end":788,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138740,"byte_end":138743,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138748,"byte_end":138782,"line_start":790,"line_end":790,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138787,"byte_end":138810,"line_start":791,"line_end":791,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138815,"byte_end":138853,"line_start":792,"line_end":792,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138858,"byte_end":138875,"line_start":793,"line_end":793,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138880,"byte_end":138885,"line_start":794,"line_end":794,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138890,"byte_end":138919,"line_start":795,"line_end":795,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138924,"byte_end":138931,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139027,"byte_end":139072,"line_start":798,"line_end":798,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140294,"byte_end":140300,"line_start":837,"line_end":837,"column_start":12,"column_end":18},"name":"insert","qualname":"<BTreeMap<K, V>>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139367,"byte_end":139409,"line_start":810,"line_end":810,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139414,"byte_end":139417,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139422,"byte_end":139487,"line_start":812,"line_end":812,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139492,"byte_end":139495,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139500,"byte_end":139575,"line_start":814,"line_end":814,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139580,"byte_end":139651,"line_start":815,"line_end":815,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139656,"byte_end":139729,"line_start":816,"line_end":816,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139734,"byte_end":139762,"line_start":817,"line_end":817,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139767,"byte_end":139770,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139775,"byte_end":139843,"line_start":819,"line_end":819,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139848,"byte_end":139851,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139856,"byte_end":139870,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139875,"byte_end":139878,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139883,"byte_end":139899,"line_start":823,"line_end":823,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139904,"byte_end":139907,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139912,"byte_end":139919,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139924,"byte_end":139959,"line_start":826,"line_end":826,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139964,"byte_end":139967,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139972,"byte_end":140006,"line_start":828,"line_end":828,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140011,"byte_end":140053,"line_start":829,"line_end":829,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140058,"byte_end":140096,"line_start":830,"line_end":830,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140101,"byte_end":140104,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140109,"byte_end":140133,"line_start":832,"line_end":832,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140138,"byte_end":140185,"line_start":833,"line_end":833,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140190,"byte_end":140220,"line_start":834,"line_end":834,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140225,"byte_end":140232,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140237,"byte_end":140282,"line_start":836,"line_end":836,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141186,"byte_end":141192,"line_start":866,"line_end":866,"column_start":12,"column_end":18},"name":"remove","qualname":"<BTreeMap<K, V>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140563,"byte_end":140636,"line_start":847,"line_end":847,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140641,"byte_end":140671,"line_start":848,"line_end":848,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140676,"byte_end":140679,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140684,"byte_end":140760,"line_start":850,"line_end":850,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140765,"byte_end":140832,"line_start":851,"line_end":851,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140837,"byte_end":140840,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140845,"byte_end":140859,"line_start":853,"line_end":853,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140864,"byte_end":140867,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140872,"byte_end":140888,"line_start":855,"line_end":855,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140893,"byte_end":140896,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140901,"byte_end":140908,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140913,"byte_end":140948,"line_start":858,"line_end":858,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140953,"byte_end":140956,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140961,"byte_end":140995,"line_start":860,"line_end":860,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141000,"byte_end":141023,"line_start":861,"line_end":861,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141028,"byte_end":141070,"line_start":862,"line_end":862,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141075,"byte_end":141112,"line_start":863,"line_end":863,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141117,"byte_end":141124,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141129,"byte_end":141174,"line_start":865,"line_end":865,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142054,"byte_end":142066,"line_start":894,"line_end":894,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<BTreeMap<K, V>>::remove_entry","value":"fn <Q> (&mut self, key: &Q) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the key","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141349,"byte_end":141426,"line_start":874,"line_end":874,"column_start":5,"column_end":82}},{"value":"/ was previously in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141431,"byte_end":141461,"line_start":875,"line_end":875,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141466,"byte_end":141469,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141474,"byte_end":141550,"line_start":877,"line_end":877,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141555,"byte_end":141622,"line_start":878,"line_end":878,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141627,"byte_end":141630,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141635,"byte_end":141649,"line_start":880,"line_end":880,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141654,"byte_end":141657,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141662,"byte_end":141678,"line_start":882,"line_end":882,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141683,"byte_end":141686,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141691,"byte_end":141698,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ #![feature(btreemap_remove_entry)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141703,"byte_end":141741,"line_start":885,"line_end":885,"column_start":5,"column_end":43}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141746,"byte_end":141781,"line_start":886,"line_end":886,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141786,"byte_end":141789,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141794,"byte_end":141828,"line_start":888,"line_end":888,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141833,"byte_end":141856,"line_start":889,"line_end":889,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141861,"byte_end":141914,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove_entry(&1), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141919,"byte_end":141962,"line_start":891,"line_end":891,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141967,"byte_end":141974,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"btreemap_remove_entry\", issue = \"66714\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141979,"byte_end":142042,"line_start":893,"line_end":893,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143219,"byte_end":143225,"line_start":937,"line_end":937,"column_start":12,"column_end":18},"name":"append","qualname":"<BTreeMap<K, V>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142459,"byte_end":142530,"line_start":908,"line_end":908,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142535,"byte_end":142538,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142543,"byte_end":142557,"line_start":910,"line_end":910,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142562,"byte_end":142565,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142570,"byte_end":142577,"line_start":912,"line_end":912,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142582,"byte_end":142617,"line_start":913,"line_end":913,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142622,"byte_end":142625,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142630,"byte_end":142662,"line_start":915,"line_end":915,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142667,"byte_end":142688,"line_start":916,"line_end":916,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142693,"byte_end":142714,"line_start":917,"line_end":917,"column_start":5,"column_end":26}},{"value":"/ a.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142719,"byte_end":142740,"line_start":918,"line_end":918,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142745,"byte_end":142748,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142753,"byte_end":142785,"line_start":920,"line_end":920,"column_start":5,"column_end":37}},{"value":"/ b.insert(3, \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142790,"byte_end":142811,"line_start":921,"line_end":921,"column_start":5,"column_end":26}},{"value":"/ b.insert(4, \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142816,"byte_end":142837,"line_start":922,"line_end":922,"column_start":5,"column_end":26}},{"value":"/ b.insert(5, \"f\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142842,"byte_end":142863,"line_start":923,"line_end":923,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142868,"byte_end":142871,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142876,"byte_end":142897,"line_start":925,"line_end":925,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142902,"byte_end":142905,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 5);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142910,"byte_end":142937,"line_start":927,"line_end":927,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142942,"byte_end":142969,"line_start":928,"line_end":928,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142974,"byte_end":142977,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a[&1], \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":142982,"byte_end":143009,"line_start":930,"line_end":930,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&2], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143014,"byte_end":143041,"line_start":931,"line_end":931,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&3], \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143046,"byte_end":143073,"line_start":932,"line_end":932,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&4], \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143078,"byte_end":143105,"line_start":933,"line_end":933,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&5], \"f\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143110,"byte_end":143137,"line_start":934,"line_end":934,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143142,"byte_end":143149,"line_start":935,"line_end":935,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143154,"byte_end":143207,"line_start":936,"line_end":936,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145100,"byte_end":145105,"line_start":989,"line_end":989,"column_start":12,"column_end":17},"name":"range","qualname":"<BTreeMap<K, V>>::range","value":"fn <T, R> (&self, range: R) -> Range<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a double-ended iterator over a sub-range of elements in the map.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a double-ended iterator over a sub-range of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":143970,"byte_end":144049,"line_start":959,"line_end":959,"column_start":5,"column_end":84}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144054,"byte_end":144141,"line_start":960,"line_end":960,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144146,"byte_end":144205,"line_start":961,"line_end":961,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144210,"byte_end":144285,"line_start":962,"line_end":962,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144290,"byte_end":144375,"line_start":963,"line_end":963,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144380,"byte_end":144403,"line_start":964,"line_end":964,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144408,"byte_end":144411,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144416,"byte_end":144428,"line_start":966,"line_end":966,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144433,"byte_end":144436,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ Panics if range `start > end`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144441,"byte_end":144475,"line_start":968,"line_end":968,"column_start":5,"column_end":39}},{"value":"/ Panics if range `start == end` and both bounds are `Excluded`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144480,"byte_end":144546,"line_start":969,"line_end":969,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144551,"byte_end":144554,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144559,"byte_end":144573,"line_start":971,"line_end":971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144578,"byte_end":144581,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144586,"byte_end":144602,"line_start":973,"line_end":973,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144607,"byte_end":144610,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144615,"byte_end":144622,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144627,"byte_end":144662,"line_start":976,"line_end":976,"column_start":5,"column_end":40}},{"value":"/ use std::ops::Bound::Included;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144667,"byte_end":144701,"line_start":977,"line_end":977,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144706,"byte_end":144709,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144714,"byte_end":144748,"line_start":979,"line_end":979,"column_start":5,"column_end":39}},{"value":"/ map.insert(3, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144753,"byte_end":144776,"line_start":980,"line_end":980,"column_start":5,"column_end":28}},{"value":"/ map.insert(5, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144781,"byte_end":144804,"line_start":981,"line_end":981,"column_start":5,"column_end":28}},{"value":"/ map.insert(8, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144809,"byte_end":144832,"line_start":982,"line_end":982,"column_start":5,"column_end":28}},{"value":"/ for (&key, &value) in map.range((Included(&4), Included(&8))) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144837,"byte_end":144904,"line_start":983,"line_end":983,"column_start":5,"column_end":72}},{"value":"/     println!(\"{}: {}\", key, value);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144909,"byte_end":144948,"line_start":984,"line_end":984,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144953,"byte_end":144958,"line_start":985,"line_end":985,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(Some((&5, &\"b\")), map.range(4..).next());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":144963,"byte_end":145019,"line_start":986,"line_end":986,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145024,"byte_end":145031,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145036,"byte_end":145088,"line_start":988,"line_end":988,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146558,"byte_end":146567,"line_start":1033,"line_end":1033,"column_start":12,"column_end":21},"name":"range_mut","qualname":"<BTreeMap<K, V>>::range_mut","value":"fn <T, R> (&mut self, range: R) -> RangeMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a mutable double-ended iterator over a sub-range of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145421,"byte_end":145508,"line_start":1002,"line_end":1002,"column_start":5,"column_end":92}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145513,"byte_end":145600,"line_start":1003,"line_end":1003,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145605,"byte_end":145664,"line_start":1004,"line_end":1004,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145669,"byte_end":145744,"line_start":1005,"line_end":1005,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145749,"byte_end":145834,"line_start":1006,"line_end":1006,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145839,"byte_end":145862,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145867,"byte_end":145870,"line_start":1008,"line_end":1008,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145875,"byte_end":145887,"line_start":1009,"line_end":1009,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145892,"byte_end":145895,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ Panics if range `start > end`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145900,"byte_end":145934,"line_start":1011,"line_end":1011,"column_start":5,"column_end":39}},{"value":"/ Panics if range `start == end` and both bounds are `Excluded`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145939,"byte_end":146005,"line_start":1012,"line_end":1012,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146010,"byte_end":146013,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146018,"byte_end":146032,"line_start":1014,"line_end":1014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146037,"byte_end":146040,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146045,"byte_end":146061,"line_start":1016,"line_end":1016,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146066,"byte_end":146069,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146074,"byte_end":146081,"line_start":1018,"line_end":1018,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146086,"byte_end":146121,"line_start":1019,"line_end":1019,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146126,"byte_end":146129,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146134,"byte_end":146208,"line_start":1021,"line_end":1021,"column_start":5,"column_end":79}},{"value":"/     .iter()","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146213,"byte_end":146228,"line_start":1022,"line_end":1022,"column_start":5,"column_end":20}},{"value":"/     .map(|&s| (s, 0))","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146233,"byte_end":146258,"line_start":1023,"line_end":1023,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146263,"byte_end":146282,"line_start":1024,"line_end":1024,"column_start":5,"column_end":24}},{"value":"/ for (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146287,"byte_end":146341,"line_start":1025,"line_end":1025,"column_start":5,"column_end":59}},{"value":"/     *balance += 100;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146346,"byte_end":146370,"line_start":1026,"line_end":1026,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146375,"byte_end":146380,"line_start":1027,"line_end":1027,"column_start":5,"column_end":10}},{"value":"/ for (name, balance) in &map {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146385,"byte_end":146418,"line_start":1028,"line_end":1028,"column_start":5,"column_end":38}},{"value":"/     println!(\"{} => {}\", name, balance);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146423,"byte_end":146467,"line_start":1029,"line_end":1029,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146472,"byte_end":146477,"line_start":1030,"line_end":1030,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146482,"byte_end":146489,"line_start":1031,"line_end":1031,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146494,"byte_end":146546,"line_start":1032,"line_end":1032,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147491,"byte_end":147496,"line_start":1065,"line_end":1065,"column_start":12,"column_end":17},"name":"entry","qualname":"<BTreeMap<K, V>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146925,"byte_end":147007,"line_start":1046,"line_end":1046,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147012,"byte_end":147015,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147020,"byte_end":147034,"line_start":1048,"line_end":1048,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147039,"byte_end":147042,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147047,"byte_end":147063,"line_start":1050,"line_end":1050,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147068,"byte_end":147071,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147076,"byte_end":147083,"line_start":1052,"line_end":1052,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147088,"byte_end":147123,"line_start":1053,"line_end":1053,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147128,"byte_end":147131,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ let mut count: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147136,"byte_end":147195,"line_start":1055,"line_end":1055,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147200,"byte_end":147203,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ // count the number of occurrences of letters in the vec","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147208,"byte_end":147268,"line_start":1057,"line_end":1057,"column_start":5,"column_end":65}},{"value":"/ for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147273,"byte_end":147317,"line_start":1058,"line_end":1058,"column_start":5,"column_end":49}},{"value":"/     *count.entry(x).or_insert(0) += 1;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147322,"byte_end":147364,"line_start":1059,"line_end":1059,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147369,"byte_end":147374,"line_start":1060,"line_end":1060,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147379,"byte_end":147382,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count[\"a\"], 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147387,"byte_end":147417,"line_start":1062,"line_end":1062,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147422,"byte_end":147429,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":147434,"byte_end":147479,"line_start":1064,"line_end":1064,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151764,"byte_end":151773,"line_start":1179,"line_end":1179,"column_start":12,"column_end":21},"name":"split_off","qualname":"<BTreeMap<K, V>>::split_off","value":"fn <Q> (&mut self, key: &Q) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given key. Returns everything after the given key,\n including the key.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given key. Returns everything after the given key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":150976,"byte_end":151068,"line_start":1149,"line_end":1149,"column_start":5,"column_end":97}},{"value":"/ including the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151073,"byte_end":151095,"line_start":1150,"line_end":1150,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151100,"byte_end":151103,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151108,"byte_end":151122,"line_start":1152,"line_end":1152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151127,"byte_end":151130,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151135,"byte_end":151151,"line_start":1154,"line_end":1154,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151156,"byte_end":151159,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151164,"byte_end":151171,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151176,"byte_end":151211,"line_start":1157,"line_end":1157,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151216,"byte_end":151219,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151224,"byte_end":151256,"line_start":1159,"line_end":1159,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151261,"byte_end":151282,"line_start":1160,"line_end":1160,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151287,"byte_end":151308,"line_start":1161,"line_end":1161,"column_start":5,"column_end":26}},{"value":"/ a.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151313,"byte_end":151334,"line_start":1162,"line_end":1162,"column_start":5,"column_end":26}},{"value":"/ a.insert(17, \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151339,"byte_end":151361,"line_start":1163,"line_end":1163,"column_start":5,"column_end":27}},{"value":"/ a.insert(41, \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151366,"byte_end":151388,"line_start":1164,"line_end":1164,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151393,"byte_end":151396,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ let b = a.split_off(&3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151401,"byte_end":151429,"line_start":1166,"line_end":1166,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151434,"byte_end":151437,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 2);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151442,"byte_end":151469,"line_start":1168,"line_end":1168,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151474,"byte_end":151501,"line_start":1169,"line_end":1169,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151506,"byte_end":151509,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a[&1], \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151514,"byte_end":151541,"line_start":1171,"line_end":1171,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&2], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151546,"byte_end":151573,"line_start":1172,"line_end":1172,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151578,"byte_end":151581,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b[&3], \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151586,"byte_end":151613,"line_start":1174,"line_end":1174,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b[&17], \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151618,"byte_end":151646,"line_start":1175,"line_end":1175,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(b[&41], \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151651,"byte_end":151679,"line_start":1176,"line_end":1176,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151684,"byte_end":151691,"line_start":1177,"line_end":1177,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_split_off\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151696,"byte_end":151752,"line_start":1178,"line_end":1178,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174492,"byte_end":174496,"line_start":1969,"line_end":1969,"column_start":12,"column_end":16},"name":"iter","qualname":"<BTreeMap<K, V>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the entries of the map, sorted by key.","sig":null,"attributes":[{"value":"/ Gets an iterator over the entries of the map, sorted by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173871,"byte_end":173935,"line_start":1947,"line_end":1947,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173940,"byte_end":173943,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173948,"byte_end":173962,"line_start":1949,"line_end":1949,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173967,"byte_end":173970,"line_start":1950,"line_end":1950,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173975,"byte_end":173991,"line_start":1951,"line_end":1951,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173996,"byte_end":173999,"line_start":1952,"line_end":1952,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174004,"byte_end":174011,"line_start":1953,"line_end":1953,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174016,"byte_end":174051,"line_start":1954,"line_end":1954,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174056,"byte_end":174059,"line_start":1955,"line_end":1955,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174064,"byte_end":174098,"line_start":1956,"line_end":1956,"column_start":5,"column_end":39}},{"value":"/ map.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174103,"byte_end":174126,"line_start":1957,"line_end":1957,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174131,"byte_end":174154,"line_start":1958,"line_end":1958,"column_start":5,"column_end":28}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174159,"byte_end":174182,"line_start":1959,"line_end":1959,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174187,"byte_end":174190,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ for (key, value) in map.iter() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174195,"byte_end":174231,"line_start":1961,"line_end":1961,"column_start":5,"column_end":41}},{"value":"/     println!(\"{}: {}\", key, value);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174236,"byte_end":174275,"line_start":1962,"line_end":1962,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174280,"byte_end":174285,"line_start":1963,"line_end":1963,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174290,"byte_end":174293,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ let (first_key, first_value) = map.iter().next().unwrap();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174298,"byte_end":174360,"line_start":1965,"line_end":1965,"column_start":5,"column_end":67}},{"value":"/ assert_eq!((*first_key, *first_value), (1, \"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174365,"byte_end":174418,"line_start":1966,"line_end":1966,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174423,"byte_end":174430,"line_start":1967,"line_end":1967,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174435,"byte_end":174480,"line_start":1968,"line_end":1968,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175335,"byte_end":175343,"line_start":2001,"line_end":2001,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BTreeMap<K, V>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable iterator over the entries of the map, sorted by key.","sig":null,"attributes":[{"value":"/ Gets a mutable iterator over the entries of the map, sorted by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174755,"byte_end":174826,"line_start":1979,"line_end":1979,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174831,"byte_end":174834,"line_start":1980,"line_end":1980,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174839,"byte_end":174853,"line_start":1981,"line_end":1981,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174858,"byte_end":174861,"line_start":1982,"line_end":1982,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174866,"byte_end":174882,"line_start":1983,"line_end":1983,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174887,"byte_end":174890,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174895,"byte_end":174902,"line_start":1985,"line_end":1985,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174907,"byte_end":174942,"line_start":1986,"line_end":1986,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174947,"byte_end":174950,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174955,"byte_end":174989,"line_start":1988,"line_end":1988,"column_start":5,"column_end":39}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174994,"byte_end":175017,"line_start":1989,"line_end":1989,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175022,"byte_end":175045,"line_start":1990,"line_end":1990,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175050,"byte_end":175073,"line_start":1991,"line_end":1991,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175078,"byte_end":175081,"line_start":1992,"line_end":1992,"column_start":5,"column_end":8}},{"value":"/ // add 10 to the value if the key isn't \"a\"","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175086,"byte_end":175133,"line_start":1993,"line_end":1993,"column_start":5,"column_end":52}},{"value":"/ for (key, value) in map.iter_mut() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175138,"byte_end":175178,"line_start":1994,"line_end":1994,"column_start":5,"column_end":45}},{"value":"/     if key != &\"a\" {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175183,"byte_end":175207,"line_start":1995,"line_end":1995,"column_start":5,"column_end":29}},{"value":"/         *value += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175212,"byte_end":175237,"line_start":1996,"line_end":1996,"column_start":5,"column_end":30}},{"value":"/     }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175242,"byte_end":175251,"line_start":1997,"line_end":1997,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175256,"byte_end":175261,"line_start":1998,"line_end":1998,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175266,"byte_end":175273,"line_start":1999,"line_end":1999,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175278,"byte_end":175323,"line_start":2000,"line_end":2000,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176165,"byte_end":176169,"line_start":2031,"line_end":2031,"column_start":12,"column_end":16},"name":"keys","qualname":"<BTreeMap<K, V>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the keys of the map, in sorted order.","sig":null,"attributes":[{"value":"/ Gets an iterator over the keys of the map, in sorted order.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175717,"byte_end":175780,"line_start":2014,"line_end":2014,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175785,"byte_end":175788,"line_start":2015,"line_end":2015,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175793,"byte_end":175807,"line_start":2016,"line_end":2016,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175812,"byte_end":175815,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175820,"byte_end":175836,"line_start":2018,"line_end":2018,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175841,"byte_end":175844,"line_start":2019,"line_end":2019,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175849,"byte_end":175856,"line_start":2020,"line_end":2020,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175861,"byte_end":175896,"line_start":2021,"line_end":2021,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175901,"byte_end":175904,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175909,"byte_end":175941,"line_start":2023,"line_end":2023,"column_start":5,"column_end":37}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175946,"byte_end":175967,"line_start":2024,"line_end":2024,"column_start":5,"column_end":26}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175972,"byte_end":175993,"line_start":2025,"line_end":2025,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175998,"byte_end":176001,"line_start":2026,"line_end":2026,"column_start":5,"column_end":8}},{"value":"/ let keys: Vec<_> = a.keys().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176006,"byte_end":176057,"line_start":2027,"line_end":2027,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(keys, [1, 2]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176062,"byte_end":176091,"line_start":2028,"line_end":2028,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176096,"byte_end":176103,"line_start":2029,"line_end":2029,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176108,"byte_end":176153,"line_start":2030,"line_end":2030,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176727,"byte_end":176733,"line_start":2052,"line_end":2052,"column_start":12,"column_end":18},"name":"values","qualname":"<BTreeMap<K, V>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the values of the map, in order by key.","sig":null,"attributes":[{"value":"/ Gets an iterator over the values of the map, in order by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176244,"byte_end":176309,"line_start":2035,"line_end":2035,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176314,"byte_end":176317,"line_start":2036,"line_end":2036,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176322,"byte_end":176336,"line_start":2037,"line_end":2037,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176341,"byte_end":176344,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176349,"byte_end":176365,"line_start":2039,"line_end":2039,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176370,"byte_end":176373,"line_start":2040,"line_end":2040,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176378,"byte_end":176385,"line_start":2041,"line_end":2041,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176390,"byte_end":176425,"line_start":2042,"line_end":2042,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176430,"byte_end":176433,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176438,"byte_end":176470,"line_start":2044,"line_end":2044,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"hello\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176475,"byte_end":176500,"line_start":2045,"line_end":2045,"column_start":5,"column_end":30}},{"value":"/ a.insert(2, \"goodbye\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176505,"byte_end":176532,"line_start":2046,"line_end":2046,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176537,"byte_end":176540,"line_start":2047,"line_end":2047,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<&str> = a.values().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176545,"byte_end":176603,"line_start":2048,"line_end":2048,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(values, [\"hello\", \"goodbye\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176608,"byte_end":176653,"line_start":2049,"line_end":2049,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176658,"byte_end":176665,"line_start":2050,"line_end":2050,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176670,"byte_end":176715,"line_start":2051,"line_end":2051,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177489,"byte_end":177499,"line_start":2078,"line_end":2078,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<BTreeMap<K, V>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable iterator over the values of the map, in order by key.","sig":null,"attributes":[{"value":"/ Gets a mutable iterator over the values of the map, in order by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176812,"byte_end":176884,"line_start":2056,"line_end":2056,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176889,"byte_end":176892,"line_start":2057,"line_end":2057,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176897,"byte_end":176911,"line_start":2058,"line_end":2058,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176916,"byte_end":176919,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176924,"byte_end":176940,"line_start":2060,"line_end":2060,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176945,"byte_end":176948,"line_start":2061,"line_end":2061,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176953,"byte_end":176960,"line_start":2062,"line_end":2062,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176965,"byte_end":177000,"line_start":2063,"line_end":2063,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177005,"byte_end":177008,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177013,"byte_end":177045,"line_start":2065,"line_end":2065,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, String::from(\"hello\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177050,"byte_end":177089,"line_start":2066,"line_end":2066,"column_start":5,"column_end":44}},{"value":"/ a.insert(2, String::from(\"goodbye\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177094,"byte_end":177135,"line_start":2067,"line_end":2067,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177140,"byte_end":177143,"line_start":2068,"line_end":2068,"column_start":5,"column_end":8}},{"value":"/ for value in a.values_mut() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177148,"byte_end":177181,"line_start":2069,"line_end":2069,"column_start":5,"column_end":38}},{"value":"/     value.push_str(\"!\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177186,"byte_end":177214,"line_start":2070,"line_end":2070,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177219,"byte_end":177224,"line_start":2071,"line_end":2071,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177229,"byte_end":177232,"line_start":2072,"line_end":2072,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<String> = a.values().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177237,"byte_end":177297,"line_start":2073,"line_end":2073,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(values, [String::from(\"hello!\"),","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177302,"byte_end":177349,"line_start":2074,"line_end":2074,"column_start":5,"column_end":52}},{"value":"/                     String::from(\"goodbye!\")]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177354,"byte_end":177405,"line_start":2075,"line_end":2075,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177410,"byte_end":177417,"line_start":2076,"line_end":2076,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_values_mut\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177422,"byte_end":177477,"line_start":2077,"line_end":2077,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177963,"byte_end":177966,"line_start":2097,"line_end":2097,"column_start":12,"column_end":15},"name":"len","qualname":"<BTreeMap<K, V>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177592,"byte_end":177638,"line_start":2082,"line_end":2082,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177643,"byte_end":177646,"line_start":2083,"line_end":2083,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177651,"byte_end":177665,"line_start":2084,"line_end":2084,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177670,"byte_end":177673,"line_start":2085,"line_end":2085,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177678,"byte_end":177694,"line_start":2086,"line_end":2086,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177699,"byte_end":177702,"line_start":2087,"line_end":2087,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177707,"byte_end":177714,"line_start":2088,"line_end":2088,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177719,"byte_end":177754,"line_start":2089,"line_end":2089,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177759,"byte_end":177762,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177767,"byte_end":177799,"line_start":2091,"line_end":2091,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177804,"byte_end":177831,"line_start":2092,"line_end":2092,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177836,"byte_end":177857,"line_start":2093,"line_end":2093,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177862,"byte_end":177889,"line_start":2094,"line_end":2094,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177894,"byte_end":177901,"line_start":2095,"line_end":2095,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177906,"byte_end":177951,"line_start":2096,"line_end":2096,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178391,"byte_end":178399,"line_start":2116,"line_end":2116,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BTreeMap<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178016,"byte_end":178067,"line_start":2101,"line_end":2101,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178072,"byte_end":178075,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178080,"byte_end":178094,"line_start":2103,"line_end":2103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178099,"byte_end":178102,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178107,"byte_end":178123,"line_start":2105,"line_end":2105,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178128,"byte_end":178131,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178136,"byte_end":178143,"line_start":2107,"line_end":2107,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178148,"byte_end":178183,"line_start":2108,"line_end":2108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178188,"byte_end":178191,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178196,"byte_end":178228,"line_start":2110,"line_end":2110,"column_start":5,"column_end":37}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178233,"byte_end":178259,"line_start":2111,"line_end":2111,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178264,"byte_end":178285,"line_start":2112,"line_end":2112,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178290,"byte_end":178317,"line_start":2113,"line_end":2113,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178322,"byte_end":178329,"line_start":2114,"line_end":2114,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178334,"byte_end":178379,"line_start":2115,"line_end":2115,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178956,"byte_end":178965,"line_start":2136,"line_end":2136,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178492,"byte_end":178574,"line_start":2122,"line_end":2122,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178579,"byte_end":178629,"line_start":2123,"line_end":2123,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178634,"byte_end":178637,"line_start":2124,"line_end":2124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178642,"byte_end":178656,"line_start":2125,"line_end":2125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178661,"byte_end":178664,"line_start":2126,"line_end":2126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178669,"byte_end":178676,"line_start":2127,"line_end":2127,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178681,"byte_end":178716,"line_start":2128,"line_end":2128,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178721,"byte_end":178724,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178729,"byte_end":178786,"line_start":2130,"line_end":2130,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178791,"byte_end":178832,"line_start":2131,"line_end":2131,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178837,"byte_end":178840,"line_start":2132,"line_end":2132,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178845,"byte_end":178882,"line_start":2133,"line_end":2133,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178887,"byte_end":178894,"line_start":2134,"line_end":2134,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178899,"byte_end":178944,"line_start":2135,"line_end":2135,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179697,"byte_end":179711,"line_start":2159,"line_end":2159,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179142,"byte_end":179235,"line_start":2143,"line_end":2143,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179240,"byte_end":179302,"line_start":2144,"line_end":2144,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179307,"byte_end":179310,"line_start":2145,"line_end":2145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179315,"byte_end":179329,"line_start":2146,"line_end":2146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179334,"byte_end":179337,"line_start":2147,"line_end":2147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179342,"byte_end":179349,"line_start":2148,"line_end":2148,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179354,"byte_end":179389,"line_start":2149,"line_end":2149,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179394,"byte_end":179397,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, String> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179402,"byte_end":179460,"line_start":2151,"line_end":2151,"column_start":5,"column_end":63}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179465,"byte_end":179496,"line_start":2152,"line_end":2152,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179501,"byte_end":179504,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179509,"byte_end":179557,"line_start":2154,"line_end":2154,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179562,"byte_end":179565,"line_start":2155,"line_end":2155,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179570,"byte_end":179623,"line_start":2156,"line_end":2156,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179628,"byte_end":179635,"line_start":2157,"line_end":2157,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179640,"byte_end":179685,"line_start":2158,"line_end":2158,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180257,"byte_end":180260,"line_start":2177,"line_end":2177,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179908,"byte_end":179952,"line_start":2166,"line_end":2166,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179957,"byte_end":179960,"line_start":2167,"line_end":2167,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179965,"byte_end":179979,"line_start":2168,"line_end":2168,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179984,"byte_end":179987,"line_start":2169,"line_end":2169,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179992,"byte_end":179999,"line_start":2170,"line_end":2170,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180004,"byte_end":180039,"line_start":2171,"line_end":2171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180044,"byte_end":180047,"line_start":2172,"line_end":2172,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180052,"byte_end":180109,"line_start":2173,"line_end":2173,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180114,"byte_end":180173,"line_start":2174,"line_end":2174,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180178,"byte_end":180185,"line_start":2175,"line_end":2175,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180190,"byte_end":180245,"line_start":2176,"line_end":2176,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181060,"byte_end":181070,"line_start":2205,"line_end":2205,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180413,"byte_end":180481,"line_start":2184,"line_end":2184,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180486,"byte_end":180521,"line_start":2185,"line_end":2185,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180526,"byte_end":180529,"line_start":2186,"line_end":2186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180534,"byte_end":180548,"line_start":2187,"line_end":2187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180553,"byte_end":180556,"line_start":2188,"line_end":2188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180561,"byte_end":180568,"line_start":2189,"line_end":2189,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180573,"byte_end":180608,"line_start":2190,"line_end":2190,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180613,"byte_end":180616,"line_start":2191,"line_end":2191,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180621,"byte_end":180678,"line_start":2192,"line_end":2192,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180683,"byte_end":180686,"line_start":2193,"line_end":2193,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180691,"byte_end":180717,"line_start":2194,"line_end":2194,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180722,"byte_end":180757,"line_start":2195,"line_end":2195,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180762,"byte_end":180784,"line_start":2196,"line_end":2196,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180789,"byte_end":180826,"line_start":2197,"line_end":2197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180831,"byte_end":180834,"line_start":2198,"line_end":2198,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180839,"byte_end":180865,"line_start":2199,"line_end":2199,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180870,"byte_end":180905,"line_start":2200,"line_end":2200,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180910,"byte_end":180932,"line_start":2201,"line_end":2201,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180937,"byte_end":180974,"line_start":2202,"line_end":2202,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180979,"byte_end":180986,"line_start":2203,"line_end":2203,"column_start":5,"column_end":12}},{"value":"stable(feature = \"entry_and_modify\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180991,"byte_end":181048,"line_start":2204,"line_end":2204,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181882,"byte_end":181892,"line_start":2234,"line_end":2234,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"stable(feature = \"entry_or_default\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181391,"byte_end":181448,"line_start":2220,"line_end":2220,"column_start":5,"column_end":62}},{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181453,"byte_end":181529,"line_start":2221,"line_end":2221,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181534,"byte_end":181596,"line_start":2222,"line_end":2222,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181601,"byte_end":181604,"line_start":2223,"line_end":2223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181609,"byte_end":181623,"line_start":2224,"line_end":2224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181628,"byte_end":181631,"line_start":2225,"line_end":2225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181636,"byte_end":181643,"line_start":2226,"line_end":2226,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181648,"byte_end":181683,"line_start":2227,"line_end":2227,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181688,"byte_end":181691,"line_start":2228,"line_end":2228,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181696,"byte_end":181761,"line_start":2229,"line_end":2229,"column_start":5,"column_end":70}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181766,"byte_end":181806,"line_start":2230,"line_end":2230,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181811,"byte_end":181814,"line_start":2231,"line_end":2231,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181819,"byte_end":181858,"line_start":2232,"line_end":2232,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181863,"byte_end":181870,"line_start":2233,"line_end":2233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182525,"byte_end":182528,"line_start":2255,"line_end":2255,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the VacantEntry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182114,"byte_end":182187,"line_start":2243,"line_end":2243,"column_start":5,"column_end":78}},{"value":"/ through the VacantEntry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182192,"byte_end":182220,"line_start":2244,"line_end":2244,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182225,"byte_end":182228,"line_start":2245,"line_end":2245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182233,"byte_end":182247,"line_start":2246,"line_end":2246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182252,"byte_end":182255,"line_start":2247,"line_end":2247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182260,"byte_end":182267,"line_start":2248,"line_end":2248,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182272,"byte_end":182307,"line_start":2249,"line_end":2249,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182312,"byte_end":182315,"line_start":2250,"line_end":2250,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182320,"byte_end":182377,"line_start":2251,"line_end":2251,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182382,"byte_end":182441,"line_start":2252,"line_end":2252,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182446,"byte_end":182453,"line_start":2253,"line_end":2253,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182458,"byte_end":182513,"line_start":2254,"line_end":2254,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183004,"byte_end":183012,"line_start":2274,"line_end":2274,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182573,"byte_end":182603,"line_start":2259,"line_end":2259,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182608,"byte_end":182611,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182616,"byte_end":182630,"line_start":2261,"line_end":2261,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182635,"byte_end":182638,"line_start":2262,"line_end":2262,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182643,"byte_end":182650,"line_start":2263,"line_end":2263,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182655,"byte_end":182690,"line_start":2264,"line_end":2264,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182695,"byte_end":182738,"line_start":2265,"line_end":2265,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182743,"byte_end":182746,"line_start":2266,"line_end":2266,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182751,"byte_end":182808,"line_start":2267,"line_end":2267,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182813,"byte_end":182816,"line_start":2268,"line_end":2268,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182821,"byte_end":182875,"line_start":2269,"line_end":2269,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182880,"byte_end":182901,"line_start":2270,"line_end":2270,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182906,"byte_end":182911,"line_start":2271,"line_end":2271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182916,"byte_end":182923,"line_start":2272,"line_end":2272,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182928,"byte_end":182992,"line_start":2273,"line_end":2273,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183617,"byte_end":183623,"line_start":2296,"line_end":2296,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the `VacantEntry`'s key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the `VacantEntry`'s key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183054,"byte_end":183115,"line_start":2278,"line_end":2278,"column_start":5,"column_end":66}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183120,"byte_end":183162,"line_start":2279,"line_end":2279,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183167,"byte_end":183170,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183175,"byte_end":183189,"line_start":2281,"line_end":2281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183194,"byte_end":183197,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183202,"byte_end":183209,"line_start":2283,"line_end":2283,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183214,"byte_end":183249,"line_start":2284,"line_end":2284,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183254,"byte_end":183257,"line_start":2285,"line_end":2285,"column_start":5,"column_end":8}},{"value":"/ let mut count: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183262,"byte_end":183321,"line_start":2286,"line_end":2286,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183326,"byte_end":183329,"line_start":2287,"line_end":2287,"column_start":5,"column_end":8}},{"value":"/ // count the number of occurrences of letters in the vec","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183334,"byte_end":183394,"line_start":2288,"line_end":2288,"column_start":5,"column_end":65}},{"value":"/ for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183399,"byte_end":183443,"line_start":2289,"line_end":2289,"column_start":5,"column_end":49}},{"value":"/     *count.entry(x).or_insert(0) += 1;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183448,"byte_end":183490,"line_start":2290,"line_end":2290,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183495,"byte_end":183500,"line_start":2291,"line_end":2291,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183505,"byte_end":183508,"line_start":2292,"line_end":2292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count[\"a\"], 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183513,"byte_end":183543,"line_start":2293,"line_end":2293,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183548,"byte_end":183555,"line_start":2294,"line_end":2294,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183560,"byte_end":183605,"line_start":2295,"line_end":2295,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185289,"byte_end":185292,"line_start":2349,"line_end":2349,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184893,"byte_end":184938,"line_start":2337,"line_end":2337,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184943,"byte_end":184946,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184951,"byte_end":184965,"line_start":2339,"line_end":2339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184970,"byte_end":184973,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184978,"byte_end":184985,"line_start":2341,"line_end":2341,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184990,"byte_end":185025,"line_start":2342,"line_end":2342,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185030,"byte_end":185033,"line_start":2343,"line_end":2343,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185038,"byte_end":185095,"line_start":2344,"line_end":2344,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185100,"byte_end":185141,"line_start":2345,"line_end":2345,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185146,"byte_end":185205,"line_start":2346,"line_end":2346,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185210,"byte_end":185217,"line_start":2347,"line_end":2347,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185222,"byte_end":185277,"line_start":2348,"line_end":2348,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186025,"byte_end":186037,"line_start":2373,"line_end":2373,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take ownership of the key and value from the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185362,"byte_end":185415,"line_start":2353,"line_end":2353,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185420,"byte_end":185423,"line_start":2354,"line_end":2354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185428,"byte_end":185442,"line_start":2355,"line_end":2355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185447,"byte_end":185450,"line_start":2356,"line_end":2356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185455,"byte_end":185462,"line_start":2357,"line_end":2357,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185467,"byte_end":185502,"line_start":2358,"line_end":2358,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185507,"byte_end":185550,"line_start":2359,"line_end":2359,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185555,"byte_end":185558,"line_start":2360,"line_end":2360,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185563,"byte_end":185620,"line_start":2361,"line_end":2361,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185625,"byte_end":185666,"line_start":2362,"line_end":2362,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185671,"byte_end":185674,"line_start":2363,"line_end":2363,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185679,"byte_end":185735,"line_start":2364,"line_end":2364,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185740,"byte_end":185784,"line_start":2365,"line_end":2365,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185789,"byte_end":185814,"line_start":2366,"line_end":2366,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185819,"byte_end":185824,"line_start":2367,"line_end":2367,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185829,"byte_end":185832,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ // If now try to get the value, it will panic:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185837,"byte_end":185887,"line_start":2369,"line_end":2369,"column_start":5,"column_end":55}},{"value":"/ // println!(\"{}\", map[\"poneyland\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185892,"byte_end":185932,"line_start":2370,"line_end":2370,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185937,"byte_end":185944,"line_start":2371,"line_end":2371,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185949,"byte_end":186013,"line_start":2372,"line_end":2372,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186581,"byte_end":186584,"line_start":2393,"line_end":2393,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186092,"byte_end":186139,"line_start":2377,"line_end":2377,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186144,"byte_end":186147,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186152,"byte_end":186166,"line_start":2379,"line_end":2379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186171,"byte_end":186174,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186179,"byte_end":186186,"line_start":2381,"line_end":2381,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186191,"byte_end":186226,"line_start":2382,"line_end":2382,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186231,"byte_end":186274,"line_start":2383,"line_end":2383,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186279,"byte_end":186282,"line_start":2384,"line_end":2384,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186287,"byte_end":186344,"line_start":2385,"line_end":2385,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186349,"byte_end":186390,"line_start":2386,"line_end":2386,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186395,"byte_end":186398,"line_start":2387,"line_end":2387,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186403,"byte_end":186459,"line_start":2388,"line_end":2388,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186464,"byte_end":186497,"line_start":2389,"line_end":2389,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186502,"byte_end":186507,"line_start":2390,"line_end":2390,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186512,"byte_end":186519,"line_start":2391,"line_end":2391,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186524,"byte_end":186569,"line_start":2392,"line_end":2392,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187558,"byte_end":187565,"line_start":2424,"line_end":2424,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186654,"byte_end":186709,"line_start":2397,"line_end":2397,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186714,"byte_end":186717,"line_start":2398,"line_end":2398,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` that may outlive the","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186722,"byte_end":186793,"line_start":2399,"line_end":2399,"column_start":5,"column_end":76}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186798,"byte_end":186853,"line_start":2400,"line_end":2400,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186858,"byte_end":186861,"line_start":2401,"line_end":2401,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186866,"byte_end":186900,"line_start":2402,"line_end":2402,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186905,"byte_end":186908,"line_start":2403,"line_end":2403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186913,"byte_end":186927,"line_start":2404,"line_end":2404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186932,"byte_end":186935,"line_start":2405,"line_end":2405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186940,"byte_end":186947,"line_start":2406,"line_end":2406,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186952,"byte_end":186987,"line_start":2407,"line_end":2407,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186992,"byte_end":187035,"line_start":2408,"line_end":2408,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187040,"byte_end":187043,"line_start":2409,"line_end":2409,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187048,"byte_end":187105,"line_start":2410,"line_end":2410,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187110,"byte_end":187151,"line_start":2411,"line_end":2411,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187156,"byte_end":187159,"line_start":2412,"line_end":2412,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187164,"byte_end":187201,"line_start":2413,"line_end":2413,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187206,"byte_end":187266,"line_start":2414,"line_end":2414,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187271,"byte_end":187298,"line_start":2415,"line_end":2415,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187303,"byte_end":187336,"line_start":2416,"line_end":2416,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187341,"byte_end":187344,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187349,"byte_end":187401,"line_start":2418,"line_end":2418,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187406,"byte_end":187432,"line_start":2419,"line_end":2419,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187437,"byte_end":187442,"line_start":2420,"line_end":2420,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187447,"byte_end":187484,"line_start":2421,"line_end":2421,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187489,"byte_end":187496,"line_start":2422,"line_end":2422,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187501,"byte_end":187546,"line_start":2423,"line_end":2423,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188347,"byte_end":188355,"line_start":2450,"line_end":2450,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to its value.","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to its value.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187631,"byte_end":187692,"line_start":2428,"line_end":2428,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187697,"byte_end":187700,"line_start":2429,"line_end":2429,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187705,"byte_end":187781,"line_start":2430,"line_end":2430,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187786,"byte_end":187789,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187794,"byte_end":187826,"line_start":2432,"line_end":2432,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187831,"byte_end":187834,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187839,"byte_end":187853,"line_start":2434,"line_end":2434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187858,"byte_end":187861,"line_start":2435,"line_end":2435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187866,"byte_end":187873,"line_start":2436,"line_end":2436,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187878,"byte_end":187913,"line_start":2437,"line_end":2437,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187918,"byte_end":187961,"line_start":2438,"line_end":2438,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187966,"byte_end":187969,"line_start":2439,"line_end":2439,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187974,"byte_end":188031,"line_start":2440,"line_end":2440,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188036,"byte_end":188077,"line_start":2441,"line_end":2441,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188082,"byte_end":188085,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188090,"byte_end":188127,"line_start":2443,"line_end":2443,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188132,"byte_end":188188,"line_start":2444,"line_end":2444,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188193,"byte_end":188221,"line_start":2445,"line_end":2445,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188226,"byte_end":188231,"line_start":2446,"line_end":2446,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188236,"byte_end":188273,"line_start":2447,"line_end":2447,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188278,"byte_end":188285,"line_start":2448,"line_end":2448,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188290,"byte_end":188335,"line_start":2449,"line_end":2449,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189022,"byte_end":189028,"line_start":2472,"line_end":2472,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the `OccupiedEntry`'s key,\n and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the `OccupiedEntry`'s key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188424,"byte_end":188487,"line_start":2454,"line_end":2454,"column_start":5,"column_end":68}},{"value":"/ and returns the entry's old value.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188492,"byte_end":188530,"line_start":2455,"line_end":2455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188535,"byte_end":188538,"line_start":2456,"line_end":2456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188543,"byte_end":188557,"line_start":2457,"line_end":2457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188562,"byte_end":188565,"line_start":2458,"line_end":2458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188570,"byte_end":188577,"line_start":2459,"line_end":2459,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188582,"byte_end":188617,"line_start":2460,"line_end":2460,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188622,"byte_end":188665,"line_start":2461,"line_end":2461,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188670,"byte_end":188673,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188678,"byte_end":188735,"line_start":2463,"line_end":2463,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188740,"byte_end":188781,"line_start":2464,"line_end":2464,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188786,"byte_end":188789,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188794,"byte_end":188854,"line_start":2466,"line_end":2466,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188859,"byte_end":188896,"line_start":2467,"line_end":2467,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188901,"byte_end":188906,"line_start":2468,"line_end":2468,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188911,"byte_end":188948,"line_start":2469,"line_end":2469,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188953,"byte_end":188960,"line_start":2470,"line_end":2470,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188965,"byte_end":189010,"line_start":2471,"line_end":2471,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189727,"byte_end":189733,"line_start":2494,"line_end":2494,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value of the entry out of the map, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value of the entry out of the map, and returns it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189112,"byte_end":189176,"line_start":2476,"line_end":2476,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189181,"byte_end":189184,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189189,"byte_end":189203,"line_start":2478,"line_end":2478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189208,"byte_end":189211,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189216,"byte_end":189223,"line_start":2480,"line_end":2480,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189228,"byte_end":189263,"line_start":2481,"line_end":2481,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189268,"byte_end":189311,"line_start":2482,"line_end":2482,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189316,"byte_end":189319,"line_start":2483,"line_end":2483,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189324,"byte_end":189381,"line_start":2484,"line_end":2484,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189386,"byte_end":189427,"line_start":2485,"line_end":2485,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189432,"byte_end":189435,"line_start":2486,"line_end":2486,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189440,"byte_end":189496,"line_start":2487,"line_end":2487,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189501,"byte_end":189536,"line_start":2488,"line_end":2488,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189541,"byte_end":189546,"line_start":2489,"line_end":2489,"column_start":5,"column_end":10}},{"value":"/ // If we try to get \"poneyland\"'s value, it'll panic:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189551,"byte_end":189608,"line_start":2490,"line_end":2490,"column_start":5,"column_end":62}},{"value":"/ // println!(\"{}\", map[\"poneyland\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189613,"byte_end":189653,"line_start":2491,"line_end":2491,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189658,"byte_end":189665,"line_start":2492,"line_end":2492,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189670,"byte_end":189715,"line_start":2493,"line_end":2493,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193770,"byte_end":193777,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"next_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>>::next_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>,\n       NodeRef<BorrowType, K, V, marker::LeafOrInternal>>","parent":null,"children":[],"decl_id":null,"docs":" Given a leaf edge handle, returns [`Result::Ok`] with a handle to the neighboring KV\n on the right side, which is either in the same leaf node or in an ancestor node.\n If the leaf edge is the last one in the tree, returns [`Result::Err`] with the root node.\n","sig":null,"attributes":[{"value":"/ Given a leaf edge handle, returns [`Result::Ok`] with a handle to the neighboring KV","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193483,"byte_end":193571,"line_start":7,"line_end":7,"column_start":5,"column_end":93}},{"value":"/ on the right side, which is either in the same leaf node or in an ancestor node.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193576,"byte_end":193660,"line_start":8,"line_end":8,"column_start":5,"column_end":89}},{"value":"/ If the leaf edge is the last one in the tree, returns [`Result::Err`] with the root node.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193665,"byte_end":193758,"line_start":9,"line_end":9,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":194671,"byte_end":194683,"line_start":31,"line_end":31,"column_start":12,"column_end":24},"name":"next_back_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>>::next_back_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>,\n       NodeRef<BorrowType, K, V, marker::LeafOrInternal>>","parent":null,"children":[],"decl_id":null,"docs":" Given a leaf edge handle, returns [`Result::Ok`] with a handle to the neighboring KV\n on the left side, which is either in the same leaf node or in an ancestor node.\n If the leaf edge is the first one in the tree, returns [`Result::Err`] with the root node.\n","sig":null,"attributes":[{"value":"/ Given a leaf edge handle, returns [`Result::Ok`] with a handle to the neighboring KV","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":194384,"byte_end":194472,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ on the left side, which is either in the same leaf node or in an ancestor node.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":194477,"byte_end":194560,"line_start":29,"line_end":29,"column_start":5,"column_end":88}},{"value":"/ If the leaf edge is the first one in the tree, returns [`Result::Err`] with the root node.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":194565,"byte_end":194659,"line_start":30,"line_end":30,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197428,"byte_end":197442,"line_start":95,"line_end":95,"column_start":19,"column_end":33},"name":"next_unchecked","qualname":"<Handle<NodeRef<marker::Immut, K, V, marker::Leaf>, marker::Edge>>::next_unchecked","value":"fn (&mut self) -> (&'a K, &'a V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the next leaf edge and returns references to the\n key and value in between.\n Unsafe because the caller must ensure that the leaf edge is not the last one in the tree.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the next leaf edge and returns references to the","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197195,"byte_end":197277,"line_start":92,"line_end":92,"column_start":5,"column_end":87}},{"value":"/ key and value in between.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197282,"byte_end":197311,"line_start":93,"line_end":93,"column_start":5,"column_end":34}},{"value":"/ Unsafe because the caller must ensure that the leaf edge is not the last one in the tree.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197316,"byte_end":197409,"line_start":94,"line_end":94,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197908,"byte_end":197927,"line_start":106,"line_end":106,"column_start":19,"column_end":38},"name":"next_back_unchecked","qualname":"<Handle<NodeRef<marker::Immut, K, V, marker::Leaf>, marker::Edge>>::next_back_unchecked","value":"fn (&mut self) -> (&'a K, &'a V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the previous leaf edge and returns references to the\n key and value in between.\n Unsafe because the caller must ensure that the leaf edge is not the first one in the tree.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the previous leaf edge and returns references to the","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197670,"byte_end":197756,"line_start":103,"line_end":103,"column_start":5,"column_end":91}},{"value":"/ key and value in between.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197761,"byte_end":197790,"line_start":104,"line_end":104,"column_start":5,"column_end":34}},{"value":"/ Unsafe because the caller must ensure that the leaf edge is not the first one in the tree.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197795,"byte_end":197889,"line_start":105,"line_end":105,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198583,"byte_end":198597,"line_start":121,"line_end":121,"column_start":19,"column_end":33},"name":"next_unchecked","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::Edge>>::next_unchecked","value":"fn (&mut self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the next leaf edge and returns references to the\n key and value in between.\n Unsafe for two reasons:\n - The caller must ensure that the leaf edge is not the last one in the tree.\n - Using the updated handle may well invalidate the returned references.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the next leaf edge and returns references to the","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198251,"byte_end":198333,"line_start":116,"line_end":116,"column_start":5,"column_end":87}},{"value":"/ key and value in between.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198338,"byte_end":198367,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ Unsafe for two reasons:","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198372,"byte_end":198399,"line_start":118,"line_end":118,"column_start":5,"column_end":32}},{"value":"/ - The caller must ensure that the leaf edge is not the last one in the tree.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198404,"byte_end":198484,"line_start":119,"line_end":119,"column_start":5,"column_end":85}},{"value":"/ - Using the updated handle may well invalidate the returned references.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198489,"byte_end":198564,"line_start":120,"line_end":120,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199351,"byte_end":199370,"line_start":137,"line_end":137,"column_start":19,"column_end":38},"name":"next_back_unchecked","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::Edge>>::next_back_unchecked","value":"fn (&mut self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the previous leaf and returns references to the\n key and value in between.\n Unsafe for two reasons:\n - The caller must ensure that the leaf edge is not the first one in the tree.\n - Using the updated handle may well invalidate the returned references.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the previous leaf and returns references to the","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199019,"byte_end":199100,"line_start":132,"line_end":132,"column_start":5,"column_end":86}},{"value":"/ key and value in between.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199105,"byte_end":199134,"line_start":133,"line_end":133,"column_start":5,"column_end":34}},{"value":"/ Unsafe for two reasons:","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199139,"byte_end":199166,"line_start":134,"line_end":134,"column_start":5,"column_end":32}},{"value":"/ - The caller must ensure that the leaf edge is not the first one in the tree.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199171,"byte_end":199252,"line_start":135,"line_end":135,"column_start":5,"column_end":86}},{"value":"/ - Using the updated handle may well invalidate the returned references.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199257,"byte_end":199332,"line_start":136,"line_end":136,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200723,"byte_end":200737,"line_start":161,"line_end":161,"column_start":19,"column_end":33},"name":"next_unchecked","qualname":"<Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>>::next_unchecked","value":"fn (&mut self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the next leaf edge and returns the key and value\n in between, while deallocating any node left behind.\n Unsafe for three reasons:\n - The caller must ensure that the leaf edge is not the last one in the tree\n   and is not a handle previously resulting from counterpart `next_back_unchecked`.\n - If the leaf edge is the last edge of a node, that node and possibly ancestors\n   will be deallocated, while the reference to those nodes in the surviving ancestor\n   is left dangling; thus further use of the leaf edge handle is dangerous.\n   It is, however, safe to call this method again on the updated handle.\n   if the two preconditions above hold.\n - Using the updated handle may well invalidate the returned references.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the next leaf edge and returns the key and value","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199882,"byte_end":199964,"line_start":150,"line_end":150,"column_start":5,"column_end":87}},{"value":"/ in between, while deallocating any node left behind.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199969,"byte_end":200025,"line_start":151,"line_end":151,"column_start":5,"column_end":61}},{"value":"/ Unsafe for three reasons:","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200030,"byte_end":200059,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/ - The caller must ensure that the leaf edge is not the last one in the tree","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200064,"byte_end":200143,"line_start":153,"line_end":153,"column_start":5,"column_end":84}},{"value":"/   and is not a handle previously resulting from counterpart `next_back_unchecked`.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200148,"byte_end":200234,"line_start":154,"line_end":154,"column_start":5,"column_end":91}},{"value":"/ - If the leaf edge is the last edge of a node, that node and possibly ancestors","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200239,"byte_end":200322,"line_start":155,"line_end":155,"column_start":5,"column_end":88}},{"value":"/   will be deallocated, while the reference to those nodes in the surviving ancestor","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200327,"byte_end":200414,"line_start":156,"line_end":156,"column_start":5,"column_end":92}},{"value":"/   is left dangling; thus further use of the leaf edge handle is dangerous.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200419,"byte_end":200497,"line_start":157,"line_end":157,"column_start":5,"column_end":83}},{"value":"/   It is, however, safe to call this method again on the updated handle.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200502,"byte_end":200577,"line_start":158,"line_end":158,"column_start":5,"column_end":80}},{"value":"/   if the two preconditions above hold.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200582,"byte_end":200624,"line_start":159,"line_end":159,"column_start":5,"column_end":47}},{"value":"/ - Using the updated handle may well invalidate the returned references.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":200629,"byte_end":200704,"line_start":160,"line_end":160,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201878,"byte_end":201897,"line_start":181,"line_end":181,"column_start":19,"column_end":38},"name":"next_back_unchecked","qualname":"<Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>>::next_back_unchecked","value":"fn (&mut self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Moves the leaf edge handle to the previous leaf edge and returns the key\n and value in between, while deallocating any node left behind.\n Unsafe for three reasons:\n - The caller must ensure that the leaf edge is not the first one in the tree\n   and is not a handle previously resulting from counterpart `next_unchecked`.\n - If the lead edge is the first edge of a node, that node and possibly ancestors\n   will be deallocated, while the reference to those nodes in the surviving ancestor\n   is left dangling; thus further use of the leaf edge handle is dangerous.\n   It is, however, safe to call this method again on the updated handle.\n   if the two preconditions above hold.\n - Using the updated handle may well invalidate the returned references.\n","sig":null,"attributes":[{"value":"/ Moves the leaf edge handle to the previous leaf edge and returns the key","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201036,"byte_end":201112,"line_start":170,"line_end":170,"column_start":5,"column_end":81}},{"value":"/ and value in between, while deallocating any node left behind.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201117,"byte_end":201183,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/ Unsafe for three reasons:","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201188,"byte_end":201217,"line_start":172,"line_end":172,"column_start":5,"column_end":34}},{"value":"/ - The caller must ensure that the leaf edge is not the first one in the tree","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201222,"byte_end":201302,"line_start":173,"line_end":173,"column_start":5,"column_end":85}},{"value":"/   and is not a handle previously resulting from counterpart `next_unchecked`.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201307,"byte_end":201388,"line_start":174,"line_end":174,"column_start":5,"column_end":86}},{"value":"/ - If the lead edge is the first edge of a node, that node and possibly ancestors","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201393,"byte_end":201477,"line_start":175,"line_end":175,"column_start":5,"column_end":89}},{"value":"/   will be deallocated, while the reference to those nodes in the surviving ancestor","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201482,"byte_end":201569,"line_start":176,"line_end":176,"column_start":5,"column_end":92}},{"value":"/   is left dangling; thus further use of the leaf edge handle is dangerous.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201574,"byte_end":201652,"line_start":177,"line_end":177,"column_start":5,"column_end":83}},{"value":"/   It is, however, safe to call this method again on the updated handle.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201657,"byte_end":201732,"line_start":178,"line_end":178,"column_start":5,"column_end":80}},{"value":"/   if the two preconditions above hold.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201737,"byte_end":201779,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/ - Using the updated handle may well invalidate the returned references.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":201784,"byte_end":201859,"line_start":180,"line_end":180,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202477,"byte_end":202492,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"first_leaf_edge","qualname":"<NodeRef<BorrowType, K, V, marker::LeafOrInternal>>::first_leaf_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Returns the leftmost leaf edge in or underneath a node - in other words, the edge\n you need first when navigating forward (or last when navigating backward).\n","sig":null,"attributes":[{"value":"/ Returns the leftmost leaf edge in or underneath a node - in other words, the edge","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202283,"byte_end":202368,"line_start":192,"line_end":192,"column_start":5,"column_end":90}},{"value":"/ you need first when navigating forward (or last when navigating backward).","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202373,"byte_end":202451,"line_start":193,"line_end":193,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202456,"byte_end":202465,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203007,"byte_end":203021,"line_start":208,"line_end":208,"column_start":12,"column_end":26},"name":"last_leaf_edge","qualname":"<NodeRef<BorrowType, K, V, marker::LeafOrInternal>>::last_leaf_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Returns the rightmost leaf edge in or underneath a node - in other words, the edge\n you need last when navigating forward (or first when navigating backward).\n","sig":null,"attributes":[{"value":"/ Returns the rightmost leaf edge in or underneath a node - in other words, the edge","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202812,"byte_end":202898,"line_start":205,"line_end":205,"column_start":5,"column_end":91}},{"value":"/ you need last when navigating forward (or first when navigating backward).","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202903,"byte_end":202981,"line_start":206,"line_end":206,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202986,"byte_end":202995,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203513,"byte_end":203527,"line_start":221,"line_end":221,"column_start":12,"column_end":26},"name":"next_leaf_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>>::next_leaf_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Returns the leaf edge closest to a KV for forward navigation.\n","sig":null,"attributes":[{"value":"/ Returns the leaf edge closest to a KV for forward navigation.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203436,"byte_end":203501,"line_start":220,"line_end":220,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203963,"byte_end":203982,"line_start":232,"line_end":232,"column_start":12,"column_end":31},"name":"next_back_leaf_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>>::next_back_leaf_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Returns the leaf edge closest to a KV for backward navigation.\n","sig":null,"attributes":[{"value":"/ Returns the leaf edge closest to a KV for backward navigation.","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203885,"byte_end":203951,"line_start":231,"line_end":231,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":1286},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205849,"byte_end":205856,"line_start":44,"line_end":44,"column_start":11,"column_end":18},"name":"MIN_LEN","qualname":"::collections::btree::node::MIN_LEN","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1287},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205883,"byte_end":205891,"line_start":45,"line_end":45,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::collections::btree::node::CAPACITY","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212273,"byte_end":212277,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"Root","qualname":"::collections::btree::node::Root","value":"Root {  }","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"decl_id":null,"docs":" Either an owned tree or a shared, empty tree.  Note that this does not have a destructor,\n and must be cleaned up manually if it is an owned tree.\n","sig":null,"attributes":[{"value":"/ Either an owned tree or a shared, empty tree.  Note that this does not have a destructor,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212108,"byte_end":212201,"line_start":187,"line_end":187,"column_start":1,"column_end":94}},{"value":"/ and must be cleaned up manually if it is an owned tree.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212202,"byte_end":212261,"line_start":188,"line_end":188,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212686,"byte_end":212700,"line_start":201,"line_end":201,"column_start":12,"column_end":26},"name":"is_shared_root","qualname":"<Root<K, V>>::is_shared_root","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the instance of `Root` wraps a shared, empty root node. If not,\n the entire tree is uniquely owned by the owner of the `Root` instance.\n","sig":null,"attributes":[{"value":"/ Whether the instance of `Root` wraps a shared, empty root node. If not,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212520,"byte_end":212595,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ the entire tree is uniquely owned by the owner of the `Root` instance.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212600,"byte_end":212674,"line_start":200,"line_end":200,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212859,"byte_end":212876,"line_start":206,"line_end":206,"column_start":12,"column_end":29},"name":"shared_empty_root","qualname":"<Root<K, V>>::shared_empty_root","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared tree, wrapping a shared root node that is eternally empty.\n","sig":null,"attributes":[{"value":"/ Returns a shared tree, wrapping a shared root node that is eternally empty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212768,"byte_end":212847,"line_start":205,"line_end":205,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":213127,"byte_end":213135,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"new_leaf","qualname":"<Root<K, V>>::new_leaf","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new owned tree, with its own root node that is initially empty.\n","sig":null,"attributes":[{"value":"/ Returns a new owned tree, with its own root node that is initially empty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":213038,"byte_end":213115,"line_start":213,"line_end":213,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":213259,"byte_end":213265,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Root<K, V>>::as_ref","value":"fn (&self) -> NodeRef<marker::Immut<'_>, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":213532,"byte_end":213538,"line_start":227,"line_end":227,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Root<K, V>>::as_mut","value":"fn (&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":213795,"byte_end":213803,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"into_ref","qualname":"<Root<K, V>>::into_ref","value":"fn (self) -> NodeRef<marker::Owned, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214293,"byte_end":214303,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"push_level","qualname":"<Root<K, V>>::push_level","value":"fn (&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new internal node with a single edge, pointing to the previous root, and make that\n new node the root. This increases the height by 1 and is the opposite of `pop_level`.\n","sig":null,"attributes":[{"value":"/ Adds a new internal node with a single edge, pointing to the previous root, and make that","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214094,"byte_end":214187,"line_start":245,"line_end":245,"column_start":5,"column_end":98}},{"value":"/ new node the root. This increases the height by 1 and is the opposite of `pop_level`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214192,"byte_end":214281,"line_start":246,"line_end":246,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215320,"byte_end":215329,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"pop_level","qualname":"<Root<K, V>>::pop_level","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the root node, using its first child as the new root. This cannot be called when\n the tree consists only of a leaf node. As it is intended only to be called when the root\n has only one edge, no cleanup is done on any of the other children of the root.\n This decreases the height by 1 and is the opposite of `push_level`.\n","sig":null,"attributes":[{"value":"/ Removes the root node, using its first child as the new root. This cannot be called when","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214955,"byte_end":215047,"line_start":269,"line_end":269,"column_start":5,"column_end":97}},{"value":"/ the tree consists only of a leaf node. As it is intended only to be called when the root","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215052,"byte_end":215144,"line_start":270,"line_end":270,"column_start":5,"column_end":97}},{"value":"/ has only one edge, no cleanup is done on any of the other children of the root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215149,"byte_end":215232,"line_start":271,"line_end":271,"column_start":5,"column_end":88}},{"value":"/ This decreases the height by 1 and is the opposite of `push_level`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215237,"byte_end":215308,"line_start":272,"line_end":272,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217399,"byte_end":217406,"line_start":316,"line_end":316,"column_start":12,"column_end":19},"name":"NodeRef","qualname":"::collections::btree::node::NodeRef","value":"NodeRef {  }","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368}],"decl_id":null,"docs":" A reference to a node.","sig":null,"attributes":[{"value":"/ A reference to a node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216185,"byte_end":216211,"line_start":299,"line_end":299,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216212,"byte_end":216215,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ This type has a number of parameters that controls how it acts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216216,"byte_end":216283,"line_start":301,"line_end":301,"column_start":1,"column_end":68}},{"value":"/ - `BorrowType`: This can be `Immut<'a>` or `Mut<'a>` for some `'a` or `Owned`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216284,"byte_end":216366,"line_start":302,"line_end":302,"column_start":1,"column_end":83}},{"value":"/    When this is `Immut<'a>`, the `NodeRef` acts roughly like `&'a Node`,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216367,"byte_end":216443,"line_start":303,"line_end":303,"column_start":1,"column_end":77}},{"value":"/    when this is `Mut<'a>`, the `NodeRef` acts roughly like `&'a mut Node`,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216444,"byte_end":216522,"line_start":304,"line_end":304,"column_start":1,"column_end":79}},{"value":"/    and when this is `Owned`, the `NodeRef` acts roughly like `Box<Node>`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216523,"byte_end":216600,"line_start":305,"line_end":305,"column_start":1,"column_end":78}},{"value":"/ - `K` and `V`: These control what types of things are stored in the nodes.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216601,"byte_end":216679,"line_start":306,"line_end":306,"column_start":1,"column_end":79}},{"value":"/ - `Type`: This can be `Leaf`, `Internal`, or `LeafOrInternal`. When this is","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216680,"byte_end":216759,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216760,"byte_end":216838,"line_start":308,"line_end":308,"column_start":1,"column_end":79}},{"value":"/   `NodeRef` points to an internal node, and when this is `LeafOrInternal` the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216839,"byte_end":216920,"line_start":309,"line_end":309,"column_start":1,"column_end":82}},{"value":"/   `NodeRef` could be pointing to either type of node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216921,"byte_end":216978,"line_start":310,"line_end":310,"column_start":1,"column_end":58}},{"value":"/   Note that in case of a leaf node, this might still be the shared root!","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":216979,"byte_end":217055,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"/   Only turn this into a `LeafNode` reference if you know it is not the shared root!","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217056,"byte_end":217143,"line_start":312,"line_end":312,"column_start":1,"column_end":88}},{"value":"/   Shared references must be dereferenceable *for the entire size of their pointee*,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217144,"byte_end":217231,"line_start":313,"line_end":313,"column_start":1,"column_end":88}},{"value":"/   so '&LeafNode` or `&InternalNode` pointing to the shared root is undefined behavior.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217232,"byte_end":217322,"line_start":314,"line_end":314,"column_start":1,"column_end":91}},{"value":"/   Turning this into a `NodeHeader` reference is always safe.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217323,"byte_end":217387,"line_start":315,"line_end":315,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219116,"byte_end":219119,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"len","qualname":"<NodeRef<BorrowType, K, V, Type>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the length of the node. This is the number of keys or values. In an\n internal node, the number of edges is `len() + 1`.\n For any node, the number of possible edge handles is also `len() + 1`.\n Note that, despite being safe, calling this function can have the side effect\n of invalidating mutable references that unsafe code has created.\n","sig":null,"attributes":[{"value":"/ Finds the length of the node. This is the number of keys or values. In an","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218730,"byte_end":218807,"line_start":351,"line_end":351,"column_start":5,"column_end":82}},{"value":"/ internal node, the number of edges is `len() + 1`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218812,"byte_end":218866,"line_start":352,"line_end":352,"column_start":5,"column_end":59}},{"value":"/ For any node, the number of possible edge handles is also `len() + 1`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218871,"byte_end":218945,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"/ Note that, despite being safe, calling this function can have the side effect","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218950,"byte_end":219031,"line_start":354,"line_end":354,"column_start":5,"column_end":86}},{"value":"/ of invalidating mutable references that unsafe code has created.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219036,"byte_end":219104,"line_start":355,"line_end":355,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219297,"byte_end":219303,"line_start":362,"line_end":362,"column_start":12,"column_end":18},"name":"height","qualname":"<NodeRef<BorrowType, K, V, Type>>::height","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the height of this node in the whole tree. Zero height denotes the\n leaf level.\n","sig":null,"attributes":[{"value":"/ Returns the height of this node in the whole tree. Zero height denotes the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219187,"byte_end":219265,"line_start":360,"line_end":360,"column_start":5,"column_end":83}},{"value":"/ leaf level.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219270,"byte_end":219285,"line_start":361,"line_end":361,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219466,"byte_end":219477,"line_start":368,"line_end":368,"column_start":12,"column_end":23},"name":"forget_type","qualname":"<NodeRef<BorrowType, K, V, Type>>::forget_type","value":"fn (self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":" Removes any static information about whether this node is a `Leaf` or an\n `Internal` node.\n","sig":null,"attributes":[{"value":"/ Removes any static information about whether this node is a `Leaf` or an","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219353,"byte_end":219429,"line_start":366,"line_end":366,"column_start":5,"column_end":81}},{"value":"/ `Internal` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219434,"byte_end":219454,"line_start":367,"line_end":367,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220657,"byte_end":220671,"line_start":393,"line_end":393,"column_start":12,"column_end":26},"name":"is_shared_root","qualname":"<NodeRef<BorrowType, K, V, Type>>::is_shared_root","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the node is the shared, empty root.\n","sig":null,"attributes":[{"value":"/ Returns whether the node is the shared, empty root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220590,"byte_end":220645,"line_start":392,"line_end":392,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220897,"byte_end":220901,"line_start":399,"line_end":399,"column_start":19,"column_end":23},"name":"keys","qualname":"<NodeRef<BorrowType, K, V, Type>>::keys","value":"fn (&self) -> &[K]","parent":null,"children":[],"decl_id":null,"docs":" Borrows a view into the keys stored in the node.\n Unsafe because the caller must ensure that the node is not the shared root.\n","sig":null,"attributes":[{"value":"/ Borrows a view into the keys stored in the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220742,"byte_end":220794,"line_start":397,"line_end":397,"column_start":5,"column_end":57}},{"value":"/ Unsafe because the caller must ensure that the node is not the shared root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220799,"byte_end":220878,"line_start":398,"line_end":398,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221648,"byte_end":221654,"line_start":416,"line_end":416,"column_start":12,"column_end":18},"name":"ascend","qualname":"<NodeRef<BorrowType, K, V, Type>>::ascend","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>,\n       Self>","parent":null,"children":[],"decl_id":null,"docs":" Finds the parent of the current node. Returns `Ok(handle)` if the current\n node actually has a parent, where `handle` points to the edge of the parent\n that points to the current node. Returns `Err(self)` if the current node has\n no parent, giving back the original `NodeRef`.","sig":null,"attributes":[{"value":"/ Finds the parent of the current node. Returns `Ok(handle)` if the current","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221198,"byte_end":221275,"line_start":409,"line_end":409,"column_start":5,"column_end":82}},{"value":"/ node actually has a parent, where `handle` points to the edge of the parent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221280,"byte_end":221359,"line_start":410,"line_end":410,"column_start":5,"column_end":84}},{"value":"/ that points to the current node. Returns `Err(self)` if the current node has","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221364,"byte_end":221444,"line_start":411,"line_end":411,"column_start":5,"column_end":85}},{"value":"/ no parent, giving back the original `NodeRef`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221449,"byte_end":221499,"line_start":412,"line_end":412,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221504,"byte_end":221507,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221512,"byte_end":221596,"line_start":414,"line_end":414,"column_start":5,"column_end":89}},{"value":"/ both, upon success, do nothing.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221601,"byte_end":221636,"line_start":415,"line_end":415,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222352,"byte_end":222362,"line_start":436,"line_end":436,"column_start":12,"column_end":22},"name":"first_edge","qualname":"<NodeRef<BorrowType, K, V, Type>>::first_edge","value":"fn (self) -> Handle<Self, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222464,"byte_end":222473,"line_start":440,"line_end":440,"column_start":12,"column_end":21},"name":"last_edge","qualname":"<NodeRef<BorrowType, K, V, Type>>::last_edge","value":"fn (self) -> Handle<Self, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222650,"byte_end":222658,"line_start":446,"line_end":446,"column_start":12,"column_end":20},"name":"first_kv","qualname":"<NodeRef<BorrowType, K, V, Type>>::first_kv","value":"fn (self) -> Handle<Self, marker::KV>","parent":null,"children":[],"decl_id":null,"docs":" Note that `self` must be nonempty.\n","sig":null,"attributes":[{"value":"/ Note that `self` must be nonempty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222600,"byte_end":222638,"line_start":445,"line_end":445,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222855,"byte_end":222862,"line_start":453,"line_end":453,"column_start":12,"column_end":19},"name":"last_kv","qualname":"<NodeRef<BorrowType, K, V, Type>>::last_kv","value":"fn (self) -> Handle<Self, marker::KV>","parent":null,"children":[],"decl_id":null,"docs":" Note that `self` must be nonempty.\n","sig":null,"attributes":[{"value":"/ Note that `self` must be nonempty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222805,"byte_end":222843,"line_start":452,"line_end":452,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223329,"byte_end":223350,"line_start":464,"line_end":464,"column_start":19,"column_end":40},"name":"deallocate_and_ascend","qualname":"<NodeRef<marker::Owned, K, V, marker::LeafOrInternal>>::deallocate_and_ascend","value":"fn (self) -> Option<Handle<NodeRef<marker::Owned, K, V, marker::Internal>, marker::Edge>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `ascend`, gets a reference to a node's parent node, but also\n deallocate the current node in the process. This is unsafe because the\n current node will still be accessible despite being deallocated.\n","sig":null,"attributes":[{"value":"/ Similar to `ascend`, gets a reference to a node's parent node, but also","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223083,"byte_end":223158,"line_start":461,"line_end":461,"column_start":5,"column_end":80}},{"value":"/ deallocate the current node in the process. This is unsafe because the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223163,"byte_end":223237,"line_start":462,"line_end":462,"column_start":5,"column_end":79}},{"value":"/ current node will still be accessible despite being deallocated.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223242,"byte_end":223310,"line_start":463,"line_end":463,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227389,"byte_end":227402,"line_start":552,"line_end":552,"column_start":12,"column_end":25},"name":"into_root_mut","qualname":"<NodeRef<marker::Mut, K, V, Type>>::into_root_mut","value":"fn (self) -> &'a mut Root<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the root itself. This is useful primarily when the\n height of the tree needs to be adjusted. Never call this on a reborrowed pointer.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the root itself. This is useful primarily when the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227205,"byte_end":227287,"line_start":550,"line_end":550,"column_start":5,"column_end":87}},{"value":"/ height of the tree needs to be adjusted. Never call this on a reborrowed pointer.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227292,"byte_end":227377,"line_start":551,"line_end":551,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229219,"byte_end":229223,"line_start":593,"line_end":593,"column_start":12,"column_end":16},"name":"push","qualname":"<NodeRef<marker::Mut, K, V, marker::Leaf>>::push","value":"fn (&mut self, key: K, val: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair the end of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair the end of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229161,"byte_end":229207,"line_start":592,"line_end":592,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229660,"byte_end":229670,"line_start":608,"line_end":608,"column_start":12,"column_end":22},"name":"push_front","qualname":"<NodeRef<marker::Mut, K, V, marker::Leaf>>::push_front","value":"fn (&mut self, key: K, val: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair to the beginning of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair to the beginning of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229593,"byte_end":229648,"line_start":607,"line_end":607,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230154,"byte_end":230158,"line_start":624,"line_end":624,"column_start":12,"column_end":16},"name":"push","qualname":"<NodeRef<marker::Mut, K, V, marker::Internal>>::push","value":"fn (&mut self, key: K, val: V, edge: Root<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair and an edge to go to the right of that pair to\n the end of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair and an edge to go to the right of that pair to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230041,"byte_end":230113,"line_start":622,"line_end":622,"column_start":5,"column_end":77}},{"value":"/ the end of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230118,"byte_end":230142,"line_start":623,"line_end":623,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":231424,"byte_end":231434,"line_start":658,"line_end":658,"column_start":12,"column_end":22},"name":"push_front","qualname":"<NodeRef<marker::Mut, K, V, marker::Internal>>::push_front","value":"fn (&mut self, key: K, val: V, edge: Root<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair and an edge to go to the left of that pair to\n the beginning of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair and an edge to go to the left of that pair to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":231306,"byte_end":231377,"line_start":656,"line_end":656,"column_start":5,"column_end":76}},{"value":"/ the beginning of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":231382,"byte_end":231412,"line_start":657,"line_end":657,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":232364,"byte_end":232367,"line_start":685,"line_end":685,"column_start":12,"column_end":15},"name":"pop","qualname":"<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>>::pop","value":"fn (&mut self) -> (K, V, Option<Root<K, V>>)","parent":null,"children":[],"decl_id":null,"docs":" Removes a key/value pair from the end of this node. If this is an internal node,\n also removes the edge that was to the right of that pair.\n","sig":null,"attributes":[{"value":"/ Removes a key/value pair from the end of this node. If this is an internal node,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":232202,"byte_end":232286,"line_start":683,"line_end":683,"column_start":5,"column_end":89}},{"value":"/ also removes the edge that was to the right of that pair.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":232291,"byte_end":232352,"line_start":684,"line_end":684,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233409,"byte_end":233418,"line_start":711,"line_end":711,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>>::pop_front","value":"fn (&mut self) -> (K, V, Option<Root<K, V>>)","parent":null,"children":[],"decl_id":null,"docs":" Removes a key/value pair from the beginning of this node. If this is an internal node,\n also removes the edge that was to the left of that pair.\n","sig":null,"attributes":[{"value":"/ Removes a key/value pair from the beginning of this node. If this is an internal node,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233242,"byte_end":233332,"line_start":709,"line_end":709,"column_start":5,"column_end":95}},{"value":"/ also removes the edge that was to the left of that pair.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233337,"byte_end":233397,"line_start":710,"line_end":710,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235001,"byte_end":235006,"line_start":755,"line_end":755,"column_start":12,"column_end":17},"name":"force","qualname":"<NodeRef<BorrowType, K, V, marker::LeafOrInternal>>::force","value":"fn (self) -> ForceResult<NodeRef<BorrowType, K, V, marker::Leaf>,\n            NodeRef<BorrowType, K, V, marker::Internal>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether a node is an `Internal` node or a `Leaf` node.\n","sig":null,"attributes":[{"value":"/ Checks whether a node is an `Internal` node or a `Leaf` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234924,"byte_end":234989,"line_start":754,"line_end":754,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1486},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236248,"byte_end":236254,"line_start":787,"line_end":787,"column_start":12,"column_end":18},"name":"Handle","qualname":"::collections::btree::node::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"decl_id":null,"docs":" A reference to a specific key/value pair or edge within a node. The `Node` parameter\n must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key/value\n pair) or `Edge` (signifying a handle on an edge).","sig":null,"attributes":[{"value":"/ A reference to a specific key/value pair or edge within a node. The `Node` parameter","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235616,"byte_end":235704,"line_start":779,"line_end":779,"column_start":1,"column_end":89}},{"value":"/ must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key/value","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235705,"byte_end":235801,"line_start":780,"line_end":780,"column_start":1,"column_end":97}},{"value":"/ pair) or `Edge` (signifying a handle on an edge).","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235802,"byte_end":235855,"line_start":781,"line_end":781,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235856,"byte_end":235859,"line_start":782,"line_end":782,"column_start":1,"column_end":4}},{"value":"/ Note that even `Leaf` nodes can have `Edge` handles. Instead of representing a pointer to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235860,"byte_end":235953,"line_start":783,"line_end":783,"column_start":1,"column_end":94}},{"value":"/ a child node, these represent the spaces where child pointers would go between the key/value","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235954,"byte_end":236050,"line_start":784,"line_end":784,"column_start":1,"column_end":97}},{"value":"/ pairs. For example, in a node with length 2, there would be 3 possible edge locations - one","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236051,"byte_end":236146,"line_start":785,"line_end":785,"column_start":1,"column_end":96}},{"value":"/ to the left of the node, one between the two pairs, and one at the right of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236147,"byte_end":236236,"line_start":786,"line_end":786,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236803,"byte_end":236812,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"into_node","qualname":"<Handle<Node, Type>>::into_node","value":"fn (self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the node that contains the edge of key/value pair this handle points to.\n","sig":null,"attributes":[{"value":"/ Retrieves the node that contains the edge of key/value pair this handle points to.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236705,"byte_end":236791,"line_start":803,"line_end":803,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237096,"byte_end":237102,"line_start":812,"line_end":812,"column_start":19,"column_end":25},"name":"new_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::new_kv","value":"fn (node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new handle to a key/value pair in `node`.\n Unsafe because the caller must ensure that `idx < node.len()`.\n","sig":null,"attributes":[{"value":"/ Creates a new handle to a key/value pair in `node`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236951,"byte_end":237006,"line_start":810,"line_end":810,"column_start":5,"column_end":60}},{"value":"/ Unsafe because the caller must ensure that `idx < node.len()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237011,"byte_end":237077,"line_start":811,"line_end":811,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237279,"byte_end":237288,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"left_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::left_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237433,"byte_end":237443,"line_start":822,"line_end":822,"column_start":12,"column_end":22},"name":"right_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::right_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238304,"byte_end":238312,"line_start":847,"line_end":847,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>>::reborrow","value":"fn (&self) -> Handle<NodeRef<marker::Immut<'_>, K, V, NodeType>, HandleType>","parent":null,"children":[],"decl_id":null,"docs":" Temporarily takes out another, immutable handle on the same location.\n","sig":null,"attributes":[{"value":"/ Temporarily takes out another, immutable handle on the same location.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238219,"byte_end":238292,"line_start":846,"line_end":846,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239391,"byte_end":239403,"line_start":864,"line_end":864,"column_start":19,"column_end":31},"name":"reborrow_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType>>::reborrow_mut","value":"fn (&mut self) -> Handle<NodeRef<marker::Mut<'_>, K, V, NodeType>, HandleType>","parent":null,"children":[],"decl_id":null,"docs":" Temporarily takes out another, mutable handle on the same location. Beware, as\n this method is very dangerous, doubly so since it may not immediately appear\n dangerous.","sig":null,"attributes":[{"value":"/ Temporarily takes out another, mutable handle on the same location. Beware, as","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238674,"byte_end":238756,"line_start":854,"line_end":854,"column_start":5,"column_end":87}},{"value":"/ this method is very dangerous, doubly so since it may not immediately appear","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238761,"byte_end":238841,"line_start":855,"line_end":855,"column_start":5,"column_end":85}},{"value":"/ dangerous.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238846,"byte_end":238860,"line_start":856,"line_end":856,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238865,"byte_end":238868,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ Because mutable pointers can roam anywhere around the tree and can even (through","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238873,"byte_end":238957,"line_start":858,"line_end":858,"column_start":5,"column_end":89}},{"value":"/ `into_root_mut`) mess with the root of the tree, the result of `reborrow_mut`","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238962,"byte_end":239043,"line_start":859,"line_end":859,"column_start":5,"column_end":86}},{"value":"/ can easily be used to make the original mutable pointer dangling, or, in the case","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239048,"byte_end":239133,"line_start":860,"line_end":860,"column_start":5,"column_end":90}},{"value":"/ of a reborrowed handle, out of bounds.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239138,"byte_end":239180,"line_start":861,"line_end":861,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239916,"byte_end":239924,"line_start":875,"line_end":875,"column_start":19,"column_end":27},"name":"new_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::new_edge","value":"fn (node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new handle to an edge in `node`.\n Unsafe because the caller must ensure that `idx <= node.len()`.\n","sig":null,"attributes":[{"value":"/ Creates a new handle to an edge in `node`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239779,"byte_end":239825,"line_start":873,"line_end":873,"column_start":5,"column_end":51}},{"value":"/ Unsafe because the caller must ensure that `idx <= node.len()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239830,"byte_end":239897,"line_start":874,"line_end":874,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240102,"byte_end":240109,"line_start":881,"line_end":881,"column_start":12,"column_end":19},"name":"left_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::left_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240351,"byte_end":240359,"line_start":889,"line_end":889,"column_start":12,"column_end":20},"name":"right_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::right_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":241692,"byte_end":241698,"line_start":923,"line_end":923,"column_start":12,"column_end":18},"name":"insert","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::Edge>>::insert","value":"fn (mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new key/value pair between the key/value pairs to the right and left of\n this edge. This method splits the node if there isn't enough room.","sig":null,"attributes":[{"value":"/ Inserts a new key/value pair between the key/value pairs to the right and left of","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":241453,"byte_end":241538,"line_start":919,"line_end":919,"column_start":5,"column_end":90}},{"value":"/ this edge. This method splits the node if there isn't enough room.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":241543,"byte_end":241613,"line_start":920,"line_end":920,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":241618,"byte_end":241621,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ The returned pointer points to the inserted value.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":241626,"byte_end":241680,"line_start":922,"line_end":922,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244945,"byte_end":244951,"line_start":998,"line_end":998,"column_start":12,"column_end":18},"name":"insert","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::Edge>>::insert","value":"fn (mut self, key: K, val: V, edge: Root<K, V>) -> InsertResult<'a, K, V, marker::Internal>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new key/value pair and an edge that will go to the right of that new pair\n between this edge and the key/value pair to the right of this edge. This method splits\n the node if there isn't enough room.\n","sig":null,"attributes":[{"value":"/ Inserts a new key/value pair and an edge that will go to the right of that new pair","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244706,"byte_end":244793,"line_start":995,"line_end":995,"column_start":5,"column_end":92}},{"value":"/ between this edge and the key/value pair to the right of this edge. This method splits","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244798,"byte_end":244888,"line_start":996,"line_end":996,"column_start":5,"column_end":95}},{"value":"/ the node if there isn't enough room.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244893,"byte_end":244933,"line_start":997,"line_end":997,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246304,"byte_end":246311,"line_start":1036,"line_end":1036,"column_start":12,"column_end":19},"name":"descend","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>>::descend","value":"fn (self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":" Finds the node pointed to by this edge.","sig":null,"attributes":[{"value":"/ Finds the node pointed to by this edge.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246112,"byte_end":246155,"line_start":1032,"line_end":1032,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246160,"byte_end":246163,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246168,"byte_end":246252,"line_start":1034,"line_end":1034,"column_start":5,"column_end":89}},{"value":"/ both, upon success, do nothing.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246257,"byte_end":246292,"line_start":1035,"line_end":1035,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246763,"byte_end":246770,"line_start":1049,"line_end":1049,"column_start":12,"column_end":19},"name":"into_kv","qualname":"<Handle<NodeRef<marker::Immut, K, V, NodeType>, marker::KV>>::into_kv","value":"fn (self) -> (&'a K, &'a V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247069,"byte_end":247080,"line_start":1058,"line_end":1058,"column_start":12,"column_end":23},"name":"into_kv_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, marker::KV>>::into_kv_mut","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247391,"byte_end":247397,"line_start":1067,"line_end":1067,"column_start":12,"column_end":18},"name":"kv_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, marker::KV>>::kv_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":248062,"byte_end":248067,"line_start":1083,"line_end":1083,"column_start":12,"column_end":17},"name":"split","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::KV>>::split","value":"fn (mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, K, V, Root<K, V>)","parent":null,"children":[],"decl_id":null,"docs":" Splits the underlying node into three parts:","sig":null,"attributes":[{"value":"/ Splits the underlying node into three parts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247709,"byte_end":247757,"line_start":1076,"line_end":1076,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247762,"byte_end":247765,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ - The node is truncated to only contain the key/value pairs to the right of","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247770,"byte_end":247849,"line_start":1078,"line_end":1078,"column_start":5,"column_end":84}},{"value":"/   this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247854,"byte_end":247872,"line_start":1079,"line_end":1079,"column_start":5,"column_end":23}},{"value":"/ - The key and value pointed to by this handle and extracted.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247877,"byte_end":247941,"line_start":1080,"line_end":1080,"column_start":5,"column_end":69}},{"value":"/ - All the key/value pairs to the right of this handle are put into a newly","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247946,"byte_end":248024,"line_start":1081,"line_end":1081,"column_start":5,"column_end":83}},{"value":"/   allocated node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":248029,"byte_end":248050,"line_start":1082,"line_end":1082,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249278,"byte_end":249284,"line_start":1113,"line_end":1113,"column_start":12,"column_end":18},"name":"remove","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::KV>>::remove","value":"fn (mut self) -> (Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>, K, V)","parent":null,"children":[],"decl_id":null,"docs":" Removes the key/value pair pointed to by this handle and returns it, along with the edge\n between the now adjacent key/value pairs (if any) to the left and right of this handle.\n","sig":null,"attributes":[{"value":"/ Removes the key/value pair pointed to by this handle and returns it, along with the edge","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249078,"byte_end":249170,"line_start":1111,"line_end":1111,"column_start":5,"column_end":97}},{"value":"/ between the now adjacent key/value pairs (if any) to the left and right of this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249175,"byte_end":249266,"line_start":1112,"line_end":1112,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1595},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250153,"byte_end":250158,"line_start":1134,"line_end":1134,"column_start":12,"column_end":17},"name":"split","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::split","value":"fn (mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Internal>, K, V, Root<K, V>)","parent":null,"children":[],"decl_id":null,"docs":" Splits the underlying node into three parts:","sig":null,"attributes":[{"value":"/ Splits the underlying node into three parts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249780,"byte_end":249828,"line_start":1127,"line_end":1127,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249833,"byte_end":249836,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ - The node is truncated to only contain the edges and key/value pairs to the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249841,"byte_end":249921,"line_start":1129,"line_end":1129,"column_start":5,"column_end":85}},{"value":"/   right of this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249926,"byte_end":249953,"line_start":1130,"line_end":1130,"column_start":5,"column_end":32}},{"value":"/ - The key and value pointed to by this handle and extracted.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249958,"byte_end":250022,"line_start":1131,"line_end":1131,"column_start":5,"column_end":69}},{"value":"/ - All the edges and key/value pairs to the right of this handle are put into","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250027,"byte_end":250107,"line_start":1132,"line_end":1132,"column_start":5,"column_end":85}},{"value":"/   a newly allocated node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250112,"byte_end":250141,"line_start":1133,"line_end":1133,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251829,"byte_end":251838,"line_start":1176,"line_end":1176,"column_start":12,"column_end":21},"name":"can_merge","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::can_merge","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if it is valid to call `.merge()`, i.e., whether there is enough room in\n a node to hold the combination of the nodes to the left and right of this handle along\n with the key/value pair at this handle.\n","sig":null,"attributes":[{"value":"/ Returns `true` if it is valid to call `.merge()`, i.e., whether there is enough room in","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251583,"byte_end":251674,"line_start":1173,"line_end":1173,"column_start":5,"column_end":96}},{"value":"/ a node to hold the combination of the nodes to the left and right of this handle along","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251679,"byte_end":251769,"line_start":1174,"line_end":1174,"column_start":5,"column_end":95}},{"value":"/ with the key/value pair at this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251774,"byte_end":251817,"line_start":1175,"line_end":1175,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252352,"byte_end":252357,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"merge","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::merge","value":"fn (mut self) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Combines the node immediately to the left of this handle, the key/value pair pointed\n to by this handle, and the node immediately to the right of this handle into one new\n child of the underlying node, returning an edge referencing that new child.","sig":null,"attributes":[{"value":"/ Combines the node immediately to the left of this handle, the key/value pair pointed","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252020,"byte_end":252108,"line_start":1183,"line_end":1183,"column_start":5,"column_end":93}},{"value":"/ to by this handle, and the node immediately to the right of this handle into one new","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252113,"byte_end":252201,"line_start":1184,"line_end":1184,"column_start":5,"column_end":93}},{"value":"/ child of the underlying node, returning an edge referencing that new child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252206,"byte_end":252285,"line_start":1185,"line_end":1185,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252290,"byte_end":252293,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ Assumes that this edge `.can_merge()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":252298,"byte_end":252340,"line_start":1187,"line_end":1187,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255124,"byte_end":255134,"line_start":1258,"line_end":1258,"column_start":12,"column_end":22},"name":"steal_left","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::steal_left","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This removes a key/value pair from the left child and places it in the key/value storage\n pointed to by this handle while pushing the old key/value pair of this handle into the right\n child.\n","sig":null,"attributes":[{"value":"/ This removes a key/value pair from the left child and places it in the key/value storage","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":254904,"byte_end":254996,"line_start":1255,"line_end":1255,"column_start":5,"column_end":97}},{"value":"/ pointed to by this handle while pushing the old key/value pair of this handle into the right","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255001,"byte_end":255097,"line_start":1256,"line_end":1256,"column_start":5,"column_end":101}},{"value":"/ child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255102,"byte_end":255112,"line_start":1257,"line_end":1257,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255888,"byte_end":255899,"line_start":1275,"line_end":1275,"column_start":12,"column_end":23},"name":"steal_right","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::steal_right","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This removes a key/value pair from the right child and places it in the key/value storage\n pointed to by this handle while pushing the old key/value pair of this handle into the left\n child.\n","sig":null,"attributes":[{"value":"/ This removes a key/value pair from the right child and places it in the key/value storage","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255668,"byte_end":255761,"line_start":1272,"line_end":1272,"column_start":5,"column_end":98}},{"value":"/ pointed to by this handle while pushing the old key/value pair of this handle into the left","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255766,"byte_end":255861,"line_start":1273,"line_end":1273,"column_start":5,"column_end":100}},{"value":"/ child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":255866,"byte_end":255876,"line_start":1274,"line_end":1274,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":256523,"byte_end":256538,"line_start":1290,"line_end":1290,"column_start":12,"column_end":27},"name":"bulk_steal_left","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::bulk_steal_left","value":"fn (&mut self, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This does stealing similar to `steal_left` but steals multiple elements at once.\n","sig":null,"attributes":[{"value":"/ This does stealing similar to `steal_left` but steals multiple elements at once.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":256427,"byte_end":256511,"line_start":1289,"line_end":1289,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":258968,"byte_end":258984,"line_start":1347,"line_end":1347,"column_start":12,"column_end":28},"name":"bulk_steal_right","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::bulk_steal_right","value":"fn (&mut self, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The symmetric clone of `bulk_steal_left`.\n","sig":null,"attributes":[{"value":"/ The symmetric clone of `bulk_steal_left`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":258911,"byte_end":258956,"line_start":1346,"line_end":1346,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262347,"byte_end":262363,"line_start":1430,"line_end":1430,"column_start":12,"column_end":28},"name":"forget_node_type","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>>::forget_node_type","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1617},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262644,"byte_end":262660,"line_start":1438,"line_end":1438,"column_start":12,"column_end":28},"name":"forget_node_type","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>>::forget_node_type","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262935,"byte_end":262951,"line_start":1446,"line_end":1446,"column_start":12,"column_end":28},"name":"forget_node_type","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::KV>>::forget_node_type","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263331,"byte_end":263336,"line_start":1457,"line_end":1457,"column_start":12,"column_end":17},"name":"force","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, HandleType>>::force","value":"fn (self) -> ForceResult<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, HandleType>,\n            Handle<NodeRef<BorrowType, K, V, marker::Internal>, HandleType>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n","sig":null,"attributes":[{"value":"/ Checks whether the underlying node is an `Internal` node or a `Leaf` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263241,"byte_end":263319,"line_start":1456,"line_end":1456,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":264119,"byte_end":264130,"line_start":1477,"line_end":1477,"column_start":12,"column_end":23},"name":"move_suffix","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>, marker::Edge>>::move_suffix","value":"fn (&mut self, right: &mut NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the suffix after `self` from one node to another one. `right` must be empty.\n The first edge of `right` remains unchanged.\n","sig":null,"attributes":[{"value":"/ Move the suffix after `self` from one node to another one. `right` must be empty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263969,"byte_end":264054,"line_start":1475,"line_end":1475,"column_start":5,"column_end":90}},{"value":"/ The first edge of `right` remains unchanged.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":264059,"byte_end":264107,"line_start":1476,"line_end":1476,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1637},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265540,"byte_end":265544,"line_start":1515,"line_end":1515,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::collections::btree::node::ForceResult::Leaf","value":"ForceResult::Leaf(Leaf)","parent":{"krate":0,"index":1634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265556,"byte_end":265564,"line_start":1516,"line_end":1516,"column_start":5,"column_end":13},"name":"Internal","qualname":"::collections::btree::node::ForceResult::Internal","value":"ForceResult::Internal(Internal)","parent":{"krate":0,"index":1634},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1634},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265506,"byte_end":265517,"line_start":1514,"line_end":1514,"column_start":10,"column_end":21},"name":"ForceResult","qualname":"::collections::btree::node::ForceResult","value":"ForceResult::{Leaf, Internal}","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1640}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1648},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265623,"byte_end":265626,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8},"name":"Fit","qualname":"::collections::btree::node::InsertResult::Fit","value":"InsertResult::Fit(Handle<NodeRef<marker::Mut<'a>, K, V, Type>, marker::KV>)","parent":{"krate":0,"index":1643},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265690,"byte_end":265695,"line_start":1521,"line_end":1521,"column_start":5,"column_end":10},"name":"Split","qualname":"::collections::btree::node::InsertResult::Split","value":"InsertResult::Split(NodeRef<marker::Mut<'a>, K, V, Type>, K, V, Root<K, V>)","parent":{"krate":0,"index":1643},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1643},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265588,"byte_end":265600,"line_start":1519,"line_end":1519,"column_start":10,"column_end":22},"name":"InsertResult","qualname":"::collections::btree::node::InsertResult","value":"InsertResult::{Fit, Split}","parent":null,"children":[{"krate":0,"index":1648},{"krate":0,"index":1651}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1657},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265764,"byte_end":265770,"line_start":1524,"line_end":1524,"column_start":9,"column_end":15},"name":"marker","qualname":"::collections::btree::node::marker","value":"src/liballoc/collections/btree/node.rs","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1667},{"krate":0,"index":1671},{"krate":0,"index":1672}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1659},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265822,"byte_end":265826,"line_start":1527,"line_end":1527,"column_start":14,"column_end":18},"name":"Leaf","qualname":"::collections::btree::node::marker::Leaf","value":"Leaf::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1660},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265843,"byte_end":265851,"line_start":1528,"line_end":1528,"column_start":14,"column_end":22},"name":"Internal","qualname":"::collections::btree::node::marker::Internal","value":"Internal::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1661},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265868,"byte_end":265882,"line_start":1529,"line_end":1529,"column_start":14,"column_end":28},"name":"LeafOrInternal","qualname":"::collections::btree::node::marker::LeafOrInternal","value":"LeafOrInternal::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1662},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265900,"byte_end":265905,"line_start":1531,"line_end":1531,"column_start":14,"column_end":19},"name":"Owned","qualname":"::collections::btree::node::marker::Owned","value":"Owned::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1663},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265924,"byte_end":265929,"line_start":1532,"line_end":1532,"column_start":16,"column_end":21},"name":"Immut","qualname":"::collections::btree::node::marker::Immut","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1667},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":265971,"byte_end":265974,"line_start":1533,"line_end":1533,"column_start":16,"column_end":19},"name":"Mut","qualname":"::collections::btree::node::marker::Mut","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1671},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":266019,"byte_end":266021,"line_start":1535,"line_end":1535,"column_start":14,"column_end":16},"name":"KV","qualname":"::collections::btree::node::marker::KV","value":"KV::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1672},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":266038,"byte_end":266042,"line_start":1536,"line_end":1536,"column_start":14,"column_end":18},"name":"Edge","qualname":"::collections::btree::node::marker::Edge","value":"Edge::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1692},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266684,"byte_end":266689,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Found","qualname":"::collections::btree::search::SearchResult::Found","value":"SearchResult::Found(Handle<NodeRef<BorrowType, K, V, FoundType>, marker::KV>)","parent":{"krate":0,"index":1686},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1695},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266753,"byte_end":266759,"line_start":10,"line_end":10,"column_start":5,"column_end":11},"name":"GoDown","qualname":"::collections::btree::search::SearchResult::GoDown","value":"SearchResult::GoDown(Handle<NodeRef<BorrowType, K, V, GoDownType>, marker::Edge>)","parent":{"krate":0,"index":1686},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1686},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266624,"byte_end":266636,"line_start":8,"line_end":8,"column_start":10,"column_end":22},"name":"SearchResult","qualname":"::collections::btree::search::SearchResult","value":"SearchResult::{Found, GoDown}","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1695}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1698},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267080,"byte_end":267091,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"search_tree","qualname":"::collections::btree::search::search_tree","value":"fn <BorrowType, K, V, Q> (mut node: NodeRef<BorrowType, K, V, marker::LeafOrInternal>, key: &Q) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>","parent":null,"children":[],"decl_id":null,"docs":" Looks up a given key in a (sub)tree headed by the given node, recursively.\n Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n returns a `GoDown` with the handle of the possible leaf edge where the key\n belongs.\n","sig":null,"attributes":[{"value":"/ Looks up a given key in a (sub)tree headed by the given node, recursively.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266825,"byte_end":266903,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ Returns a `Found` with the handle of the matching KV, if any. Otherwise,","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266904,"byte_end":266980,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ returns a `GoDown` with the handle of the possible leaf edge where the key","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":266981,"byte_end":267059,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ belongs.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267060,"byte_end":267072,"line_start":16,"line_end":16,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":1703},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267998,"byte_end":268009,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"search_node","qualname":"::collections::btree::search::search_node","value":"fn <BorrowType, K, V, Type, Q> (node: NodeRef<BorrowType, K, V, Type>, key: &Q) -> SearchResult<BorrowType, K, V, Type, Type>","parent":null,"children":[],"decl_id":null,"docs":" Looks up a given key in a given node, without recursion.\n Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n returns a `GoDown` with the handle of the edge where the key might be found.\n If the node is a leaf, a `GoDown` edge is not an actual edge but a possible edge.\n","sig":null,"attributes":[{"value":"/ Looks up a given key in a given node, without recursion.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267686,"byte_end":267746,"line_start":39,"line_end":39,"column_start":1,"column_end":61}},{"value":"/ Returns a `Found` with the handle of the matching KV, if any. Otherwise,","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267747,"byte_end":267823,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ returns a `GoDown` with the handle of the edge where the key might be found.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267824,"byte_end":267904,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ If the node is a leaf, a `GoDown` edge is not an actual edge but a possible edge.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":267905,"byte_end":267990,"line_start":42,"line_end":42,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":1715},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::collections::btree::set","value":"src/liballoc/collections/btree/set.rs","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1721},{"krate":0,"index":1724},{"krate":0,"index":1727},{"krate":0,"index":1731},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":4559},{"krate":0,"index":4583},{"krate":0,"index":4577},{"krate":0,"index":4579},{"krate":0,"index":4572},{"krate":0,"index":4574},{"krate":0,"index":4569},{"krate":0,"index":4562},{"krate":0,"index":1742},{"krate":0,"index":1746},{"krate":0,"index":1750},{"krate":0,"index":4587},{"krate":0,"index":4590},{"krate":0,"index":4593},{"krate":0,"index":4597},{"krate":0,"index":4601},{"krate":0,"index":4606},{"krate":0,"index":4609},{"krate":0,"index":4623},{"krate":0,"index":4620},{"krate":0,"index":4617},{"krate":0,"index":1753},{"krate":0,"index":1758},{"krate":0,"index":1761},{"krate":0,"index":4625},{"krate":0,"index":4637},{"krate":0,"index":1765},{"krate":0,"index":1768},{"krate":0,"index":1773},{"krate":0,"index":1776},{"krate":0,"index":4641},{"krate":0,"index":4653},{"krate":0,"index":1780},{"krate":0,"index":1783},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1832},{"krate":0,"index":1837},{"krate":0,"index":1841},{"krate":0,"index":1846},{"krate":0,"index":1852},{"krate":0,"index":1857},{"krate":0,"index":1862},{"krate":0,"index":1865},{"krate":0,"index":1869},{"krate":0,"index":1873},{"krate":0,"index":1877},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1894},{"krate":0,"index":1898},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1909},{"krate":0,"index":1913},{"krate":0,"index":1916},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1928},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1978}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4559},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271625,"byte_end":271633,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"BTreeSet","qualname":"::collections::btree::set::BTreeSet","value":"BTreeSet {  }","parent":null,"children":[{"krate":0,"index":4561}],"decl_id":null,"docs":" A set based on a B-Tree.","sig":null,"attributes":[{"value":"/ A set based on a B-Tree.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270115,"byte_end":270143,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270144,"byte_end":270147,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270148,"byte_end":270243,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ benefits and drawbacks.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270244,"byte_end":270271,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270272,"byte_end":270275,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270276,"byte_end":270374,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270375,"byte_end":270473,"line_start":22,"line_end":22,"column_start":1,"column_end":99}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270474,"byte_end":270566,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270567,"byte_end":270570,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270571,"byte_end":270609,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270610,"byte_end":270651,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270652,"byte_end":270697,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"/ [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270698,"byte_end":270749,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270750,"byte_end":270753,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270754,"byte_end":270768,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270769,"byte_end":270772,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270773,"byte_end":270780,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270781,"byte_end":270816,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270817,"byte_end":270820,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270821,"byte_end":270889,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeSet<&str>` in this example).","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270890,"byte_end":270940,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/ let mut books = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270941,"byte_end":270977,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270978,"byte_end":270981,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270982,"byte_end":271004,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271005,"byte_end":271046,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"To Kill a Mockingbird\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271047,"byte_end":271089,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/ books.insert(\"The Odyssey\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271090,"byte_end":271122,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/ books.insert(\"The Great Gatsby\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271123,"byte_end":271160,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271161,"byte_end":271164,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271165,"byte_end":271197,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271198,"byte_end":271245,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271246,"byte_end":271318,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271319,"byte_end":271349,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271350,"byte_end":271355,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271356,"byte_end":271359,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271360,"byte_end":271381,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271382,"byte_end":271414,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271415,"byte_end":271418,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271419,"byte_end":271450,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271451,"byte_end":271475,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271476,"byte_end":271505,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271506,"byte_end":271511,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271512,"byte_end":271519,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271568,"byte_end":271613,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1746},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272232,"byte_end":272236,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1749}],"decl_id":null,"docs":" An iterator over the items of a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271928,"byte_end":271975,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271976,"byte_end":271979,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271980,"byte_end":272048,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272049,"byte_end":272084,"line_start":79,"line_end":79,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272085,"byte_end":272088,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272089,"byte_end":272127,"line_start":81,"line_end":81,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.BTreeSet.html#method.iter","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272128,"byte_end":272174,"line_start":82,"line_end":82,"column_start":1,"column_end":47}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272175,"byte_end":272220,"line_start":83,"line_end":83,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4587},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272906,"byte_end":272914,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4589}],"decl_id":null,"docs":" An owning iterator over the items of a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272524,"byte_end":272578,"line_start":95,"line_end":95,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272579,"byte_end":272582,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BTreeSet`]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272583,"byte_end":272655,"line_start":97,"line_end":97,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272656,"byte_end":272731,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272732,"byte_end":272735,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272736,"byte_end":272774,"line_start":100,"line_end":100,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.BTreeSet.html#method.into_iter","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272775,"byte_end":272831,"line_start":101,"line_end":101,"column_start":1,"column_end":57}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272832,"byte_end":272877,"line_start":102,"line_end":102,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4593},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273303,"byte_end":273308,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"name":"Range","qualname":"::collections::btree::set::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":4596}],"decl_id":null,"docs":" An iterator over a sub-range of items in a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An iterator over a sub-range of items in a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272961,"byte_end":273019,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273020,"byte_end":273023,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273024,"byte_end":273093,"line_start":110,"line_end":110,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273094,"byte_end":273129,"line_start":111,"line_end":111,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273130,"byte_end":273133,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273134,"byte_end":273172,"line_start":113,"line_end":113,"column_start":1,"column_end":39}},{"value":"/ [`range`]: struct.BTreeSet.html#method.range","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273173,"byte_end":273221,"line_start":114,"line_end":114,"column_start":1,"column_end":49}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273239,"byte_end":273291,"line_start":116,"line_end":116,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1761},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275628,"byte_end":275638,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"Difference","qualname":"::collections::btree::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1764}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275281,"byte_end":275353,"line_start":192,"line_end":192,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275354,"byte_end":275357,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275358,"byte_end":275432,"line_start":194,"line_end":194,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275433,"byte_end":275468,"line_start":195,"line_end":195,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275469,"byte_end":275472,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275473,"byte_end":275511,"line_start":197,"line_end":197,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.BTreeSet.html#method.difference","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275512,"byte_end":275570,"line_start":198,"line_end":198,"column_start":1,"column_end":59}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275571,"byte_end":275616,"line_start":199,"line_end":199,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1768},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276758,"byte_end":276777,"line_start":233,"line_end":233,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::collections::btree::set::SymmetricDifference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276371,"byte_end":276453,"line_start":225,"line_end":225,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276454,"byte_end":276457,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276458,"byte_end":276528,"line_start":227,"line_end":227,"column_start":1,"column_end":71}},{"value":"/ [`BTreeSet`]. See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276529,"byte_end":276578,"line_start":228,"line_end":228,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276579,"byte_end":276582,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276583,"byte_end":276621,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276622,"byte_end":276700,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276701,"byte_end":276746,"line_start":232,"line_end":232,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1776},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277438,"byte_end":277450,"line_start":250,"line_end":250,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::collections::btree::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1779}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277083,"byte_end":277157,"line_start":242,"line_end":242,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277158,"byte_end":277161,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277162,"byte_end":277238,"line_start":244,"line_end":244,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277239,"byte_end":277274,"line_start":245,"line_end":245,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277275,"byte_end":277278,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277279,"byte_end":277317,"line_start":247,"line_end":247,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.BTreeSet.html#method.intersection","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277318,"byte_end":277380,"line_start":248,"line_end":248,"column_start":1,"column_end":63}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":277381,"byte_end":277426,"line_start":249,"line_end":249,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1783},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278500,"byte_end":278505,"line_start":283,"line_end":283,"column_start":12,"column_end":17},"name":"Union","qualname":"::collections::btree::set::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278173,"byte_end":278240,"line_start":275,"line_end":275,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278241,"byte_end":278244,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278245,"byte_end":278314,"line_start":277,"line_end":277,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278315,"byte_end":278350,"line_start":278,"line_end":278,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278351,"byte_end":278354,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278355,"byte_end":278393,"line_start":280,"line_end":280,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.BTreeSet.html#method.union","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278394,"byte_end":278442,"line_start":281,"line_end":281,"column_start":1,"column_end":49}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278443,"byte_end":278488,"line_start":282,"line_end":282,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279550,"byte_end":279553,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"new","qualname":"<BTreeSet<T>>::new","value":"fn () -> BTreeSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `BTreeSet` with a reasonable choice of B.","sig":null,"attributes":[{"value":"/ Makes a new `BTreeSet` with a reasonable choice of B.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279238,"byte_end":279295,"line_start":301,"line_end":301,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279300,"byte_end":279303,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279308,"byte_end":279322,"line_start":303,"line_end":303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279327,"byte_end":279330,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279335,"byte_end":279342,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ # #![allow(unused_mut)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279347,"byte_end":279374,"line_start":306,"line_end":306,"column_start":5,"column_end":32}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279379,"byte_end":279414,"line_start":307,"line_end":307,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279419,"byte_end":279422,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut set: BTreeSet<i32> = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279427,"byte_end":279476,"line_start":309,"line_end":309,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279481,"byte_end":279488,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279493,"byte_end":279538,"line_start":311,"line_end":311,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280542,"byte_end":280547,"line_start":339,"line_end":339,"column_start":12,"column_end":17},"name":"range","qualname":"<BTreeSet<T>>::range","value":"fn <K, R> (&self, range: R) -> Range<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a double-ended iterator over a sub-range of elements in the set.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a double-ended iterator over a sub-range of elements in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279626,"byte_end":279705,"line_start":316,"line_end":316,"column_start":5,"column_end":84}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279710,"byte_end":279797,"line_start":317,"line_end":317,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279802,"byte_end":279861,"line_start":318,"line_end":318,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279866,"byte_end":279941,"line_start":319,"line_end":319,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279946,"byte_end":280031,"line_start":320,"line_end":320,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280036,"byte_end":280059,"line_start":321,"line_end":321,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280064,"byte_end":280067,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280072,"byte_end":280086,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280091,"byte_end":280094,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280099,"byte_end":280106,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280111,"byte_end":280146,"line_start":326,"line_end":326,"column_start":5,"column_end":40}},{"value":"/ use std::ops::Bound::Included;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280151,"byte_end":280185,"line_start":327,"line_end":327,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280190,"byte_end":280193,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280198,"byte_end":280232,"line_start":329,"line_end":329,"column_start":5,"column_end":39}},{"value":"/ set.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280237,"byte_end":280255,"line_start":330,"line_end":330,"column_start":5,"column_end":23}},{"value":"/ set.insert(5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280260,"byte_end":280278,"line_start":331,"line_end":331,"column_start":5,"column_end":23}},{"value":"/ set.insert(8);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280283,"byte_end":280301,"line_start":332,"line_end":332,"column_start":5,"column_end":23}},{"value":"/ for &elem in set.range((Included(&4), Included(&8))) {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280306,"byte_end":280364,"line_start":333,"line_end":333,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", elem);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280369,"byte_end":280398,"line_start":334,"line_end":334,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280403,"byte_end":280408,"line_start":335,"line_end":335,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(Some(&5), set.range(4..).next());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280413,"byte_end":280461,"line_start":336,"line_end":336,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280466,"byte_end":280473,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280478,"byte_end":280530,"line_start":338,"line_end":338,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281313,"byte_end":281323,"line_start":369,"line_end":369,"column_start":12,"column_end":22},"name":"difference","qualname":"<BTreeSet<T>>::difference","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280733,"byte_end":280783,"line_start":348,"line_end":348,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280788,"byte_end":280847,"line_start":349,"line_end":349,"column_start":5,"column_end":64}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280852,"byte_end":280875,"line_start":350,"line_end":350,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280880,"byte_end":280883,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280888,"byte_end":280902,"line_start":352,"line_end":352,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280907,"byte_end":280910,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280915,"byte_end":280922,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280927,"byte_end":280962,"line_start":355,"line_end":355,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280967,"byte_end":280970,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280975,"byte_end":281007,"line_start":357,"line_end":357,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281012,"byte_end":281028,"line_start":358,"line_end":358,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281033,"byte_end":281049,"line_start":359,"line_end":359,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281054,"byte_end":281057,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281062,"byte_end":281094,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281099,"byte_end":281115,"line_start":362,"line_end":362,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281120,"byte_end":281136,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281141,"byte_end":281144,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let diff: Vec<_> = a.difference(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281149,"byte_end":281208,"line_start":365,"line_end":365,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(diff, [1]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281213,"byte_end":281239,"line_start":366,"line_end":366,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281244,"byte_end":281251,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281256,"byte_end":281301,"line_start":368,"line_end":368,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283547,"byte_end":283567,"line_start":427,"line_end":427,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<BTreeSet<T>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> SymmetricDifference<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282925,"byte_end":282985,"line_start":406,"line_end":406,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282990,"byte_end":283060,"line_start":407,"line_end":407,"column_start":5,"column_end":75}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283065,"byte_end":283088,"line_start":408,"line_end":408,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283093,"byte_end":283096,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283101,"byte_end":283115,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283120,"byte_end":283123,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283128,"byte_end":283135,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283140,"byte_end":283175,"line_start":413,"line_end":413,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283180,"byte_end":283183,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283188,"byte_end":283220,"line_start":415,"line_end":415,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283225,"byte_end":283241,"line_start":416,"line_end":416,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283246,"byte_end":283262,"line_start":417,"line_end":417,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283267,"byte_end":283270,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283275,"byte_end":283307,"line_start":419,"line_end":419,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283312,"byte_end":283328,"line_start":420,"line_end":420,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283333,"byte_end":283349,"line_start":421,"line_end":421,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283354,"byte_end":283357,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ let sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283362,"byte_end":283435,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(sym_diff, [1, 3]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283440,"byte_end":283473,"line_start":424,"line_end":424,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283478,"byte_end":283485,"line_start":425,"line_end":425,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283490,"byte_end":283535,"line_start":426,"line_end":426,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284346,"byte_end":284358,"line_start":455,"line_end":455,"column_start":12,"column_end":24},"name":"intersection","qualname":"<BTreeSet<T>>::intersection","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283748,"byte_end":283800,"line_start":434,"line_end":434,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283805,"byte_end":283862,"line_start":435,"line_end":435,"column_start":5,"column_end":62}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283867,"byte_end":283890,"line_start":436,"line_end":436,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283895,"byte_end":283898,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283903,"byte_end":283917,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283922,"byte_end":283925,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283930,"byte_end":283937,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283942,"byte_end":283977,"line_start":441,"line_end":441,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283982,"byte_end":283985,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283990,"byte_end":284022,"line_start":443,"line_end":443,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284027,"byte_end":284043,"line_start":444,"line_end":444,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284048,"byte_end":284064,"line_start":445,"line_end":445,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284069,"byte_end":284072,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284077,"byte_end":284109,"line_start":447,"line_end":447,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284114,"byte_end":284130,"line_start":448,"line_end":448,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284135,"byte_end":284151,"line_start":449,"line_end":449,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284156,"byte_end":284159,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let intersection: Vec<_> = a.intersection(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284164,"byte_end":284233,"line_start":451,"line_end":451,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(intersection, [2]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284238,"byte_end":284272,"line_start":452,"line_end":452,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284277,"byte_end":284284,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284289,"byte_end":284334,"line_start":454,"line_end":454,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286356,"byte_end":286361,"line_start":503,"line_end":503,"column_start":12,"column_end":17},"name":"union","qualname":"<BTreeSet<T>>::union","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Union<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285816,"byte_end":285861,"line_start":484,"line_end":484,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285866,"byte_end":285932,"line_start":485,"line_end":485,"column_start":5,"column_end":71}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285937,"byte_end":285960,"line_start":486,"line_end":486,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285965,"byte_end":285968,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285973,"byte_end":285987,"line_start":488,"line_end":488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285992,"byte_end":285995,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286000,"byte_end":286007,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286012,"byte_end":286047,"line_start":491,"line_end":491,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286052,"byte_end":286055,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286060,"byte_end":286092,"line_start":493,"line_end":493,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286097,"byte_end":286113,"line_start":494,"line_end":494,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286118,"byte_end":286121,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286126,"byte_end":286158,"line_start":496,"line_end":496,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286163,"byte_end":286179,"line_start":497,"line_end":497,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286184,"byte_end":286187,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ let union: Vec<_> = a.union(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286192,"byte_end":286247,"line_start":499,"line_end":499,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(union, [1, 2]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286252,"byte_end":286282,"line_start":500,"line_end":500,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286287,"byte_end":286294,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286299,"byte_end":286344,"line_start":502,"line_end":502,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286808,"byte_end":286813,"line_start":520,"line_end":520,"column_start":12,"column_end":17},"name":"clear","qualname":"<BTreeSet<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286491,"byte_end":286531,"line_start":507,"line_end":507,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286536,"byte_end":286539,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286544,"byte_end":286558,"line_start":509,"line_end":509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286563,"byte_end":286566,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286571,"byte_end":286578,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286583,"byte_end":286618,"line_start":512,"line_end":512,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286623,"byte_end":286626,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286631,"byte_end":286663,"line_start":514,"line_end":514,"column_start":5,"column_end":37}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286668,"byte_end":286684,"line_start":515,"line_end":515,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286689,"byte_end":286703,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286708,"byte_end":286734,"line_start":517,"line_end":517,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286739,"byte_end":286746,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286751,"byte_end":286796,"line_start":519,"line_end":519,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287411,"byte_end":287419,"line_start":540,"line_end":540,"column_start":12,"column_end":20},"name":"contains","qualname":"<BTreeSet<T>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286863,"byte_end":286910,"line_start":524,"line_end":524,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286915,"byte_end":286918,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286923,"byte_end":286986,"line_start":526,"line_end":526,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286991,"byte_end":287049,"line_start":527,"line_end":527,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287054,"byte_end":287085,"line_start":528,"line_end":528,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287090,"byte_end":287093,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287098,"byte_end":287112,"line_start":530,"line_end":530,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287117,"byte_end":287120,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287125,"byte_end":287132,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287137,"byte_end":287172,"line_start":533,"line_end":533,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287177,"byte_end":287180,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287185,"byte_end":287248,"line_start":535,"line_end":535,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287253,"byte_end":287292,"line_start":536,"line_end":536,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287297,"byte_end":287337,"line_start":537,"line_end":537,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287342,"byte_end":287349,"line_start":538,"line_end":538,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287354,"byte_end":287399,"line_start":539,"line_end":539,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288150,"byte_end":288153,"line_start":564,"line_end":564,"column_start":12,"column_end":15},"name":"get","qualname":"<BTreeSet<T>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287559,"byte_end":287649,"line_start":548,"line_end":548,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287654,"byte_end":287657,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287662,"byte_end":287725,"line_start":550,"line_end":550,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287730,"byte_end":287788,"line_start":551,"line_end":551,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287793,"byte_end":287824,"line_start":552,"line_end":552,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287829,"byte_end":287832,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287837,"byte_end":287851,"line_start":554,"line_end":554,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287856,"byte_end":287859,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287864,"byte_end":287871,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287876,"byte_end":287911,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287916,"byte_end":287919,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287924,"byte_end":287987,"line_start":559,"line_end":559,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287992,"byte_end":288030,"line_start":560,"line_end":560,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288035,"byte_end":288069,"line_start":561,"line_end":561,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288074,"byte_end":288081,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288086,"byte_end":288138,"line_start":563,"line_end":563,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288893,"byte_end":288904,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<BTreeSet<T>>::is_disjoint","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288301,"byte_end":288369,"line_start":572,"line_end":572,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288374,"byte_end":288435,"line_start":573,"line_end":573,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288440,"byte_end":288443,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288448,"byte_end":288462,"line_start":575,"line_end":575,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288467,"byte_end":288470,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288475,"byte_end":288482,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288487,"byte_end":288522,"line_start":578,"line_end":578,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288527,"byte_end":288530,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288535,"byte_end":288596,"line_start":580,"line_end":580,"column_start":5,"column_end":66}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288601,"byte_end":288633,"line_start":581,"line_end":581,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288638,"byte_end":288641,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288646,"byte_end":288686,"line_start":583,"line_end":583,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288691,"byte_end":288707,"line_start":584,"line_end":584,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288712,"byte_end":288752,"line_start":585,"line_end":585,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288757,"byte_end":288773,"line_start":586,"line_end":586,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288778,"byte_end":288819,"line_start":587,"line_end":587,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288824,"byte_end":288831,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288836,"byte_end":288881,"line_start":589,"line_end":589,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289595,"byte_end":289604,"line_start":612,"line_end":612,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<BTreeSet<T>>::is_subset","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289004,"byte_end":289057,"line_start":594,"line_end":594,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289062,"byte_end":289123,"line_start":595,"line_end":595,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289128,"byte_end":289131,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289136,"byte_end":289150,"line_start":597,"line_end":597,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289155,"byte_end":289158,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289163,"byte_end":289170,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289175,"byte_end":289210,"line_start":600,"line_end":600,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289215,"byte_end":289218,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289223,"byte_end":289286,"line_start":602,"line_end":602,"column_start":5,"column_end":68}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289291,"byte_end":289325,"line_start":603,"line_end":603,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289330,"byte_end":289333,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289338,"byte_end":289380,"line_start":605,"line_end":605,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289385,"byte_end":289403,"line_start":606,"line_end":606,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289408,"byte_end":289450,"line_start":607,"line_end":607,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289455,"byte_end":289473,"line_start":608,"line_end":608,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289478,"byte_end":289521,"line_start":609,"line_end":609,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289526,"byte_end":289533,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289538,"byte_end":289583,"line_start":611,"line_end":611,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292119,"byte_end":292130,"line_start":688,"line_end":688,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<BTreeSet<T>>::is_superset","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291483,"byte_end":291538,"line_start":667,"line_end":667,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291543,"byte_end":291604,"line_start":668,"line_end":668,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291609,"byte_end":291612,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291617,"byte_end":291631,"line_start":670,"line_end":670,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291636,"byte_end":291639,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291644,"byte_end":291651,"line_start":672,"line_end":672,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291656,"byte_end":291691,"line_start":673,"line_end":673,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291696,"byte_end":291699,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291704,"byte_end":291764,"line_start":675,"line_end":675,"column_start":5,"column_end":65}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291769,"byte_end":291803,"line_start":676,"line_end":676,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291808,"byte_end":291811,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291816,"byte_end":291861,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291866,"byte_end":291869,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291874,"byte_end":291892,"line_start":680,"line_end":680,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291897,"byte_end":291915,"line_start":681,"line_end":681,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291920,"byte_end":291965,"line_start":682,"line_end":682,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291970,"byte_end":291973,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":291978,"byte_end":291996,"line_start":684,"line_end":684,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292001,"byte_end":292045,"line_start":685,"line_end":685,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292050,"byte_end":292057,"line_start":686,"line_end":686,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292062,"byte_end":292107,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292794,"byte_end":292799,"line_start":711,"line_end":711,"column_start":12,"column_end":17},"name":"first","qualname":"<BTreeSet<T>>::first","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first value in the set, if any.\n This value is always the minimum of all values in the set.","sig":null,"attributes":[{"value":"/ Returns a reference to the first value in the set, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292210,"byte_end":292272,"line_start":692,"line_end":692,"column_start":5,"column_end":67}},{"value":"/ This value is always the minimum of all values in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292277,"byte_end":292339,"line_start":693,"line_end":693,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292344,"byte_end":292347,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292352,"byte_end":292366,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292371,"byte_end":292374,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292379,"byte_end":292395,"line_start":697,"line_end":697,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292400,"byte_end":292403,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292408,"byte_end":292415,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292420,"byte_end":292451,"line_start":700,"line_end":700,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292456,"byte_end":292491,"line_start":701,"line_end":701,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292496,"byte_end":292499,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292504,"byte_end":292538,"line_start":703,"line_end":703,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292543,"byte_end":292577,"line_start":704,"line_end":704,"column_start":5,"column_end":39}},{"value":"/ map.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292582,"byte_end":292600,"line_start":705,"line_end":705,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.first(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292605,"byte_end":292643,"line_start":706,"line_end":706,"column_start":5,"column_end":43}},{"value":"/ map.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292648,"byte_end":292666,"line_start":707,"line_end":707,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.first(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292671,"byte_end":292709,"line_start":708,"line_end":708,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292714,"byte_end":292721,"line_start":709,"line_end":709,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292726,"byte_end":292782,"line_start":710,"line_end":710,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293466,"byte_end":293470,"line_start":734,"line_end":734,"column_start":12,"column_end":16},"name":"last","qualname":"<BTreeSet<T>>::last","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the last value in the set, if any.\n This value is always the maximum of all values in the set.","sig":null,"attributes":[{"value":"/ Returns a reference to the last value in the set, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292885,"byte_end":292946,"line_start":715,"line_end":715,"column_start":5,"column_end":66}},{"value":"/ This value is always the maximum of all values in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292951,"byte_end":293013,"line_start":716,"line_end":716,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293018,"byte_end":293021,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293026,"byte_end":293040,"line_start":718,"line_end":718,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293045,"byte_end":293048,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293053,"byte_end":293069,"line_start":720,"line_end":720,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293074,"byte_end":293077,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293082,"byte_end":293089,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293094,"byte_end":293125,"line_start":723,"line_end":723,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293130,"byte_end":293165,"line_start":724,"line_end":724,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293170,"byte_end":293173,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293178,"byte_end":293212,"line_start":726,"line_end":726,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293217,"byte_end":293251,"line_start":727,"line_end":727,"column_start":5,"column_end":39}},{"value":"/ map.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293256,"byte_end":293274,"line_start":728,"line_end":728,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.last(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293279,"byte_end":293316,"line_start":729,"line_end":729,"column_start":5,"column_end":42}},{"value":"/ map.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293321,"byte_end":293339,"line_start":730,"line_end":730,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.last(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293344,"byte_end":293381,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293386,"byte_end":293393,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293398,"byte_end":293454,"line_start":733,"line_end":733,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294088,"byte_end":294097,"line_start":756,"line_end":756,"column_start":12,"column_end":21},"name":"pop_first","qualname":"<BTreeSet<T>>::pop_first","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first value from the set and returns it, if any.\n The first value is always the minimum value in the set.","sig":null,"attributes":[{"value":"/ Removes the first value from the set and returns it, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293555,"byte_end":293619,"line_start":738,"line_end":738,"column_start":5,"column_end":69}},{"value":"/ The first value is always the minimum value in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293624,"byte_end":293683,"line_start":739,"line_end":739,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293688,"byte_end":293691,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293696,"byte_end":293710,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293715,"byte_end":293718,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293723,"byte_end":293730,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293735,"byte_end":293766,"line_start":744,"line_end":744,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293771,"byte_end":293806,"line_start":745,"line_end":745,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293811,"byte_end":293814,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293819,"byte_end":293853,"line_start":747,"line_end":747,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293858,"byte_end":293861,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293866,"byte_end":293884,"line_start":749,"line_end":749,"column_start":5,"column_end":23}},{"value":"/ while let Some(n) = set.pop_first() {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293889,"byte_end":293930,"line_start":750,"line_end":750,"column_start":5,"column_end":46}},{"value":"/     assert_eq!(n, 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293935,"byte_end":293960,"line_start":751,"line_end":751,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293965,"byte_end":293970,"line_start":752,"line_end":752,"column_start":5,"column_end":10}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293975,"byte_end":294003,"line_start":753,"line_end":753,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294008,"byte_end":294015,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294020,"byte_end":294076,"line_start":755,"line_end":755,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294732,"byte_end":294740,"line_start":778,"line_end":778,"column_start":12,"column_end":20},"name":"pop_last","qualname":"<BTreeSet<T>>::pop_last","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last value from the set and returns it, if any.\n The last value is always the maximum value in the set.","sig":null,"attributes":[{"value":"/ Removes the last value from the set and returns it, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294202,"byte_end":294265,"line_start":760,"line_end":760,"column_start":5,"column_end":68}},{"value":"/ The last value is always the maximum value in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294270,"byte_end":294328,"line_start":761,"line_end":761,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294333,"byte_end":294336,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294341,"byte_end":294355,"line_start":763,"line_end":763,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294360,"byte_end":294363,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294368,"byte_end":294375,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294380,"byte_end":294411,"line_start":766,"line_end":766,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294416,"byte_end":294451,"line_start":767,"line_end":767,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294456,"byte_end":294459,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294464,"byte_end":294498,"line_start":769,"line_end":769,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294503,"byte_end":294506,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294511,"byte_end":294529,"line_start":771,"line_end":771,"column_start":5,"column_end":23}},{"value":"/ while let Some(n) = set.pop_last() {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294534,"byte_end":294574,"line_start":772,"line_end":772,"column_start":5,"column_end":45}},{"value":"/     assert_eq!(n, 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294579,"byte_end":294604,"line_start":773,"line_end":773,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294609,"byte_end":294614,"line_start":774,"line_end":774,"column_start":5,"column_end":10}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294619,"byte_end":294647,"line_start":775,"line_end":775,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294652,"byte_end":294659,"line_start":776,"line_end":776,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294664,"byte_end":294720,"line_start":777,"line_end":777,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295528,"byte_end":295534,"line_start":803,"line_end":803,"column_start":12,"column_end":18},"name":"insert","qualname":"<BTreeSet<T>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294844,"byte_end":294872,"line_start":782,"line_end":782,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294877,"byte_end":294880,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294885,"byte_end":294952,"line_start":784,"line_end":784,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294957,"byte_end":294960,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned, and the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294965,"byte_end":295037,"line_start":786,"line_end":786,"column_start":5,"column_end":77}},{"value":"/ entry is not updated. See the [module-level documentation] for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295042,"byte_end":295114,"line_start":787,"line_end":787,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295119,"byte_end":295122,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295127,"byte_end":295195,"line_start":789,"line_end":789,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295200,"byte_end":295203,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295208,"byte_end":295222,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295227,"byte_end":295230,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295235,"byte_end":295242,"line_start":793,"line_end":793,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295247,"byte_end":295282,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295287,"byte_end":295290,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295295,"byte_end":295329,"line_start":796,"line_end":796,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295334,"byte_end":295337,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295342,"byte_end":295378,"line_start":798,"line_end":798,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295383,"byte_end":295420,"line_start":799,"line_end":799,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295425,"byte_end":295454,"line_start":800,"line_end":800,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295459,"byte_end":295466,"line_start":801,"line_end":801,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295471,"byte_end":295516,"line_start":802,"line_end":802,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296186,"byte_end":296193,"line_start":823,"line_end":823,"column_start":12,"column_end":19},"name":"replace","qualname":"<BTreeSet<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295622,"byte_end":295715,"line_start":807,"line_end":807,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295720,"byte_end":295756,"line_start":808,"line_end":808,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295761,"byte_end":295764,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295769,"byte_end":295783,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295788,"byte_end":295791,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295796,"byte_end":295803,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295808,"byte_end":295843,"line_start":813,"line_end":813,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295848,"byte_end":295851,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295856,"byte_end":295890,"line_start":815,"line_end":815,"column_start":5,"column_end":39}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295895,"byte_end":295929,"line_start":816,"line_end":816,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295934,"byte_end":295937,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295942,"byte_end":295998,"line_start":818,"line_end":818,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296003,"byte_end":296043,"line_start":819,"line_end":819,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296048,"byte_end":296105,"line_start":820,"line_end":820,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296110,"byte_end":296117,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296122,"byte_end":296174,"line_start":822,"line_end":822,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296878,"byte_end":296884,"line_start":846,"line_end":846,"column_start":12,"column_end":18},"name":"remove","qualname":"<BTreeSet<T>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296288,"byte_end":296351,"line_start":827,"line_end":827,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296356,"byte_end":296379,"line_start":828,"line_end":828,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296384,"byte_end":296387,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296392,"byte_end":296455,"line_start":830,"line_end":830,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296460,"byte_end":296518,"line_start":831,"line_end":831,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296523,"byte_end":296554,"line_start":832,"line_end":832,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296559,"byte_end":296562,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296567,"byte_end":296581,"line_start":834,"line_end":834,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296586,"byte_end":296589,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296594,"byte_end":296601,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296606,"byte_end":296641,"line_start":837,"line_end":837,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296646,"byte_end":296649,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296654,"byte_end":296688,"line_start":839,"line_end":839,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296693,"byte_end":296696,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296701,"byte_end":296719,"line_start":841,"line_end":841,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296724,"byte_end":296761,"line_start":842,"line_end":842,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296766,"byte_end":296804,"line_start":843,"line_end":843,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296809,"byte_end":296816,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296821,"byte_end":296866,"line_start":845,"line_end":845,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297623,"byte_end":297627,"line_start":870,"line_end":870,"column_start":12,"column_end":16},"name":"take","qualname":"<BTreeSet<T>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297032,"byte_end":297117,"line_start":854,"line_end":854,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297122,"byte_end":297125,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297130,"byte_end":297193,"line_start":856,"line_end":856,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297198,"byte_end":297256,"line_start":857,"line_end":857,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297261,"byte_end":297292,"line_start":858,"line_end":858,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297297,"byte_end":297300,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297305,"byte_end":297319,"line_start":860,"line_end":860,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297324,"byte_end":297327,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297332,"byte_end":297339,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297344,"byte_end":297379,"line_start":863,"line_end":863,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297384,"byte_end":297387,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297392,"byte_end":297459,"line_start":865,"line_end":865,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297464,"byte_end":297502,"line_start":866,"line_end":866,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297507,"byte_end":297542,"line_start":867,"line_end":867,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297547,"byte_end":297554,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297559,"byte_end":297611,"line_start":869,"line_end":869,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298518,"byte_end":298524,"line_start":907,"line_end":907,"column_start":12,"column_end":18},"name":"append","qualname":"<BTreeSet<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297783,"byte_end":297854,"line_start":878,"line_end":878,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297859,"byte_end":297862,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297867,"byte_end":297881,"line_start":880,"line_end":880,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297886,"byte_end":297889,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297894,"byte_end":297901,"line_start":882,"line_end":882,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297906,"byte_end":297941,"line_start":883,"line_end":883,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297946,"byte_end":297949,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297954,"byte_end":297986,"line_start":885,"line_end":885,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297991,"byte_end":298007,"line_start":886,"line_end":886,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298012,"byte_end":298028,"line_start":887,"line_end":887,"column_start":5,"column_end":21}},{"value":"/ a.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298033,"byte_end":298049,"line_start":888,"line_end":888,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298054,"byte_end":298057,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298062,"byte_end":298094,"line_start":890,"line_end":890,"column_start":5,"column_end":37}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298099,"byte_end":298115,"line_start":891,"line_end":891,"column_start":5,"column_end":21}},{"value":"/ b.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298120,"byte_end":298136,"line_start":892,"line_end":892,"column_start":5,"column_end":21}},{"value":"/ b.insert(5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298141,"byte_end":298157,"line_start":893,"line_end":893,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298162,"byte_end":298165,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298170,"byte_end":298191,"line_start":895,"line_end":895,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298196,"byte_end":298199,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298204,"byte_end":298231,"line_start":897,"line_end":897,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298236,"byte_end":298263,"line_start":898,"line_end":898,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298268,"byte_end":298271,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ assert!(a.contains(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298276,"byte_end":298304,"line_start":900,"line_end":900,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298309,"byte_end":298337,"line_start":901,"line_end":901,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298342,"byte_end":298370,"line_start":902,"line_end":902,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&4));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298375,"byte_end":298403,"line_start":903,"line_end":903,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&5));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298408,"byte_end":298436,"line_start":904,"line_end":904,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298441,"byte_end":298448,"line_start":905,"line_end":905,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298453,"byte_end":298506,"line_start":906,"line_end":906,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299376,"byte_end":299385,"line_start":941,"line_end":941,"column_start":12,"column_end":21},"name":"split_off","qualname":"<BTreeSet<T>>::split_off","value":"fn <Q> (&mut self, key: &Q) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given key. Returns everything after the given key,\n including the key.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given key. Returns everything after the given key,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298608,"byte_end":298700,"line_start":911,"line_end":911,"column_start":5,"column_end":97}},{"value":"/ including the key.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298705,"byte_end":298727,"line_start":912,"line_end":912,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298732,"byte_end":298735,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298740,"byte_end":298754,"line_start":914,"line_end":914,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298759,"byte_end":298762,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298767,"byte_end":298783,"line_start":916,"line_end":916,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298788,"byte_end":298791,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298796,"byte_end":298803,"line_start":918,"line_end":918,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298808,"byte_end":298843,"line_start":919,"line_end":919,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298848,"byte_end":298851,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298856,"byte_end":298888,"line_start":921,"line_end":921,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298893,"byte_end":298909,"line_start":922,"line_end":922,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298914,"byte_end":298930,"line_start":923,"line_end":923,"column_start":5,"column_end":21}},{"value":"/ a.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298935,"byte_end":298951,"line_start":924,"line_end":924,"column_start":5,"column_end":21}},{"value":"/ a.insert(17);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298956,"byte_end":298973,"line_start":925,"line_end":925,"column_start":5,"column_end":22}},{"value":"/ a.insert(41);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298978,"byte_end":298995,"line_start":926,"line_end":926,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299000,"byte_end":299003,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let b = a.split_off(&3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299008,"byte_end":299036,"line_start":928,"line_end":928,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299041,"byte_end":299044,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299049,"byte_end":299076,"line_start":930,"line_end":930,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299081,"byte_end":299108,"line_start":931,"line_end":931,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299113,"byte_end":299116,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ assert!(a.contains(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299121,"byte_end":299149,"line_start":933,"line_end":933,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299154,"byte_end":299182,"line_start":934,"line_end":934,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299187,"byte_end":299190,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ assert!(b.contains(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299195,"byte_end":299223,"line_start":936,"line_end":936,"column_start":5,"column_end":33}},{"value":"/ assert!(b.contains(&17));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299228,"byte_end":299257,"line_start":937,"line_end":937,"column_start":5,"column_end":34}},{"value":"/ assert!(b.contains(&41));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299262,"byte_end":299291,"line_start":938,"line_end":938,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299296,"byte_end":299303,"line_start":939,"line_end":939,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_split_off\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299308,"byte_end":299364,"line_start":940,"line_end":940,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300555,"byte_end":300559,"line_start":978,"line_end":978,"column_start":12,"column_end":16},"name":"iter","qualname":"<BTreeSet<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator that visits the values in the `BTreeSet` in ascending order.","sig":null,"attributes":[{"value":"/ Gets an iterator that visits the values in the `BTreeSet` in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299554,"byte_end":299635,"line_start":950,"line_end":950,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299640,"byte_end":299643,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299648,"byte_end":299662,"line_start":952,"line_end":952,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299667,"byte_end":299670,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299675,"byte_end":299682,"line_start":954,"line_end":954,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299687,"byte_end":299722,"line_start":955,"line_end":955,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299727,"byte_end":299730,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299735,"byte_end":299802,"line_start":957,"line_end":957,"column_start":5,"column_end":72}},{"value":"/ let mut set_iter = set.iter();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299807,"byte_end":299841,"line_start":958,"line_end":958,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(set_iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299846,"byte_end":299888,"line_start":959,"line_end":959,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299893,"byte_end":299935,"line_start":960,"line_end":960,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299940,"byte_end":299982,"line_start":961,"line_end":961,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299987,"byte_end":300025,"line_start":962,"line_end":962,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300030,"byte_end":300037,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300042,"byte_end":300045,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ Values returned by the iterator are returned in ascending order:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300050,"byte_end":300118,"line_start":965,"line_end":965,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300123,"byte_end":300126,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300131,"byte_end":300138,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300143,"byte_end":300178,"line_start":968,"line_end":968,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300183,"byte_end":300186,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300191,"byte_end":300258,"line_start":970,"line_end":970,"column_start":5,"column_end":72}},{"value":"/ let mut set_iter = set.iter();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300263,"byte_end":300297,"line_start":971,"line_end":971,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(set_iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300302,"byte_end":300344,"line_start":972,"line_end":972,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300349,"byte_end":300391,"line_start":973,"line_end":973,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300396,"byte_end":300438,"line_start":974,"line_end":974,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300443,"byte_end":300481,"line_start":975,"line_end":975,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300486,"byte_end":300493,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300498,"byte_end":300543,"line_start":977,"line_end":977,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300971,"byte_end":300974,"line_start":995,"line_end":995,"column_start":12,"column_end":15},"name":"len","qualname":"<BTreeSet<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300634,"byte_end":300680,"line_start":982,"line_end":982,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300685,"byte_end":300688,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300693,"byte_end":300707,"line_start":984,"line_end":984,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300712,"byte_end":300715,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300720,"byte_end":300727,"line_start":986,"line_end":986,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300732,"byte_end":300767,"line_start":987,"line_end":987,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300772,"byte_end":300775,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300780,"byte_end":300812,"line_start":989,"line_end":989,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300817,"byte_end":300844,"line_start":990,"line_end":990,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300849,"byte_end":300865,"line_start":991,"line_end":991,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300870,"byte_end":300897,"line_start":992,"line_end":992,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300902,"byte_end":300909,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300914,"byte_end":300959,"line_start":994,"line_end":994,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301368,"byte_end":301376,"line_start":1012,"line_end":1012,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BTreeSet<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301027,"byte_end":301078,"line_start":999,"line_end":999,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301083,"byte_end":301086,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301091,"byte_end":301105,"line_start":1001,"line_end":1001,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301110,"byte_end":301113,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301118,"byte_end":301125,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301130,"byte_end":301165,"line_start":1004,"line_end":1004,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301170,"byte_end":301173,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301178,"byte_end":301210,"line_start":1006,"line_end":1006,"column_start":5,"column_end":37}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301215,"byte_end":301241,"line_start":1007,"line_end":1007,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301246,"byte_end":301262,"line_start":1008,"line_end":1008,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301267,"byte_end":301294,"line_start":1009,"line_end":1009,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301299,"byte_end":301306,"line_start":1010,"line_end":1010,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301311,"byte_end":301356,"line_start":1011,"line_end":1011,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1982},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111211,"byte_end":111214,"line_start":9,"line_end":9,"column_start":10,"column_end":13},"name":"Key","qualname":"::collections::btree::Recover::Key","value":"type Key;","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111224,"byte_end":111227,"line_start":11,"line_end":11,"column_start":8,"column_end":11},"name":"get","qualname":"::collections::btree::Recover::get","value":"fn (&self, key: &Q) -> Option<&Self::Key>","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111274,"byte_end":111278,"line_start":12,"line_end":12,"column_start":8,"column_end":12},"name":"take","qualname":"::collections::btree::Recover::take","value":"fn (&mut self, key: &Q) -> Option<Self::Key>","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111328,"byte_end":111335,"line_start":13,"line_end":13,"column_start":8,"column_end":15},"name":"replace","qualname":"::collections::btree::Recover::replace","value":"fn (&mut self, key: Self::Key) -> Option<Self::Key>","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1986},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111420,"byte_end":111436,"line_start":17,"line_end":17,"column_start":15,"column_end":31},"name":"unwrap_unchecked","qualname":"::collections::btree::unwrap_unchecked","value":"fn <T> (val: Option<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111388,"byte_end":111405,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1989},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"src/liballoc/collections/linked_list.rs","parent":null,"children":[{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1995},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2009},{"krate":0,"index":2014},{"krate":0,"index":2021},{"krate":0,"index":2024},{"krate":0,"index":2027},{"krate":0,"index":2034},{"krate":0,"index":4657},{"krate":0,"index":4660},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2044},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2093},{"krate":0,"index":2105},{"krate":0,"index":2113},{"krate":0,"index":2118},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2130},{"krate":0,"index":2135},{"krate":0,"index":2137},{"krate":0,"index":2139},{"krate":0,"index":2144},{"krate":0,"index":2150},{"krate":0,"index":2153},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2175},{"krate":0,"index":2190},{"krate":0,"index":2200},{"krate":0,"index":2209},{"krate":0,"index":2215},{"krate":0,"index":2232},{"krate":0,"index":2236},{"krate":0,"index":2241},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2252},{"krate":0,"index":2257},{"krate":0,"index":2263},{"krate":0,"index":2269},{"krate":0,"index":2273},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2285},{"krate":0,"index":2289},{"krate":0,"index":2291},{"krate":0,"index":2294},{"krate":0,"index":2297},{"krate":0,"index":2301},{"krate":0,"index":2304},{"krate":0,"index":2308},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2324},{"krate":0,"index":2326}],"decl_id":null,"docs":" A doubly-linked list with owned nodes.","sig":null,"attributes":[{"value":"! A doubly-linked list with owned nodes.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314839,"byte_end":314881,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314882,"byte_end":314885,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The `LinkedList` allows pushing and popping elements at either end","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314886,"byte_end":314956,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"! in constant time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314957,"byte_end":314978,"line_start":4,"line_end":4,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314979,"byte_end":314982,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! NOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314983,"byte_end":315058,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"! array-based containers are generally faster,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315059,"byte_end":315107,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"! more memory efficient, and make better use of CPU cache.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315108,"byte_end":315168,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315169,"byte_end":315172,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! [`Vec`]: ../../vec/struct.Vec.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315173,"byte_end":315211,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"! [`VecDeque`]: ../vec_deque/struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315212,"byte_end":315263,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315265,"byte_end":315311,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2003},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315958,"byte_end":315968,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"LinkedList","qualname":"::collections::linked_list::LinkedList","value":"LinkedList {  }","parent":null,"children":[{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008}],"decl_id":null,"docs":" A doubly-linked list with owned nodes.","sig":null,"attributes":[{"value":"/ A doubly-linked list with owned nodes.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315575,"byte_end":315617,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315618,"byte_end":315621,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The `LinkedList` allows pushing and popping elements at either end","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315622,"byte_end":315692,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ in constant time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315693,"byte_end":315714,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315715,"byte_end":315718,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ NOTE: It is almost always better to use `Vec` or `VecDeque` because","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315719,"byte_end":315790,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ array-based containers are generally faster,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315791,"byte_end":315839,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ more memory efficient, and make better use of CPU cache.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315840,"byte_end":315900,"line_start":36,"line_end":36,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315901,"byte_end":315946,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316529,"byte_end":316533,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020}],"decl_id":null,"docs":" An iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316212,"byte_end":316264,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316265,"byte_end":316268,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`LinkedList`]. See its","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316269,"byte_end":316347,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316348,"byte_end":316375,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316376,"byte_end":316379,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.LinkedList.html#method.iter","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316380,"byte_end":316428,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316429,"byte_end":316471,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316472,"byte_end":316517,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2027},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317444,"byte_end":317451,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033}],"decl_id":null,"docs":" A mutable iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317108,"byte_end":317167,"line_start":81,"line_end":81,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317168,"byte_end":317171,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`LinkedList`]. See its","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317172,"byte_end":317254,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317255,"byte_end":317282,"line_start":84,"line_end":84,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317283,"byte_end":317286,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.LinkedList.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317287,"byte_end":317343,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317344,"byte_end":317386,"line_start":87,"line_end":87,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317387,"byte_end":317432,"line_start":88,"line_end":88,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4657},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318497,"byte_end":318505,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4659}],"decl_id":null,"docs":" An owning iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318102,"byte_end":318161,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318162,"byte_end":318165,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`LinkedList`]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318166,"byte_end":318240,"line_start":108,"line_end":108,"column_start":1,"column_end":75}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318241,"byte_end":318316,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318317,"byte_end":318320,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.LinkedList.html#method.into_iter","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318321,"byte_end":318379,"line_start":111,"line_end":111,"column_start":1,"column_end":59}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318380,"byte_end":318422,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318440,"byte_end":318485,"line_start":114,"line_end":114,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327223,"byte_end":327226,"line_start":384,"line_end":384,"column_start":18,"column_end":21},"name":"new","qualname":"<LinkedList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinkedList`.","sig":null,"attributes":[{"value":"/ Creates an empty `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326864,"byte_end":326898,"line_start":372,"line_end":372,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326903,"byte_end":326906,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326911,"byte_end":326925,"line_start":374,"line_end":374,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326930,"byte_end":326933,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326938,"byte_end":326945,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326950,"byte_end":326987,"line_start":377,"line_end":377,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326992,"byte_end":326995,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327000,"byte_end":327050,"line_start":379,"line_end":379,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327055,"byte_end":327062,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327067,"byte_end":327076,"line_start":381,"line_end":381,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327081,"byte_end":327155,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327160,"byte_end":327205,"line_start":383,"line_end":383,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328256,"byte_end":328262,"line_start":418,"line_end":418,"column_start":12,"column_end":18},"name":"append","qualname":"<LinkedList<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` to the end of the list.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` to the end of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327325,"byte_end":327384,"line_start":388,"line_end":388,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327389,"byte_end":327392,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This reuses all the nodes from `other` and moves them into `self`. After","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327397,"byte_end":327473,"line_start":390,"line_end":390,"column_start":5,"column_end":81}},{"value":"/ this operation, `other` becomes empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327478,"byte_end":327520,"line_start":391,"line_end":391,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327525,"byte_end":327528,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time and O(1) memory.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327533,"byte_end":327596,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327601,"byte_end":327604,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327609,"byte_end":327623,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327628,"byte_end":327631,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327636,"byte_end":327643,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327648,"byte_end":327685,"line_start":398,"line_end":398,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327690,"byte_end":327693,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let mut list1 = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327698,"byte_end":327736,"line_start":400,"line_end":400,"column_start":5,"column_end":43}},{"value":"/ list1.push_back('a');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327741,"byte_end":327766,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327771,"byte_end":327774,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let mut list2 = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327779,"byte_end":327817,"line_start":403,"line_end":403,"column_start":5,"column_end":43}},{"value":"/ list2.push_back('b');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327822,"byte_end":327847,"line_start":404,"line_end":404,"column_start":5,"column_end":30}},{"value":"/ list2.push_back('c');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327852,"byte_end":327877,"line_start":405,"line_end":405,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327882,"byte_end":327885,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ list1.append(&mut list2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327890,"byte_end":327919,"line_start":407,"line_end":407,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327924,"byte_end":327927,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list1.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327932,"byte_end":327964,"line_start":409,"line_end":409,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(iter.next(), Some(&'a'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327969,"byte_end":328009,"line_start":410,"line_end":410,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(iter.next(), Some(&'b'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328014,"byte_end":328054,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(iter.next(), Some(&'c'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328059,"byte_end":328099,"line_start":412,"line_end":412,"column_start":5,"column_end":45}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328104,"byte_end":328139,"line_start":413,"line_end":413,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328144,"byte_end":328147,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ assert!(list2.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328152,"byte_end":328182,"line_start":415,"line_end":415,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328187,"byte_end":328194,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328199,"byte_end":328244,"line_start":417,"line_end":417,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329071,"byte_end":329078,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"prepend","qualname":"<LinkedList<T>>::prepend","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` to the begin of the list.\n","sig":null,"attributes":[{"value":"/ Moves all elements from `other` to the begin of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328933,"byte_end":328994,"line_start":437,"line_end":437,"column_start":5,"column_end":66}},{"value":"unstable(feature = \"linked_list_prepend\", issue = \"none\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328999,"byte_end":329059,"line_start":438,"line_end":438,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330326,"byte_end":330330,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinkedList<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a forward iterator.","sig":null,"attributes":[{"value":"/ Provides a forward iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329749,"byte_end":329781,"line_start":458,"line_end":458,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329786,"byte_end":329789,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329794,"byte_end":329808,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329813,"byte_end":329816,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329821,"byte_end":329828,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329833,"byte_end":329870,"line_start":463,"line_end":463,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329875,"byte_end":329878,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329883,"byte_end":329937,"line_start":465,"line_end":465,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329942,"byte_end":329945,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329950,"byte_end":329972,"line_start":467,"line_end":467,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329977,"byte_end":329999,"line_start":468,"line_end":468,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330004,"byte_end":330026,"line_start":469,"line_end":469,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330031,"byte_end":330034,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330039,"byte_end":330070,"line_start":471,"line_end":471,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(iter.next(), Some(&0));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330075,"byte_end":330113,"line_start":472,"line_end":472,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330118,"byte_end":330156,"line_start":473,"line_end":473,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330161,"byte_end":330199,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330204,"byte_end":330238,"line_start":475,"line_end":475,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330243,"byte_end":330250,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330255,"byte_end":330264,"line_start":477,"line_end":477,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330269,"byte_end":330314,"line_start":478,"line_end":478,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331143,"byte_end":331151,"line_start":508,"line_end":508,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinkedList<T>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a forward iterator with mutable references.","sig":null,"attributes":[{"value":"/ Provides a forward iterator with mutable references.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330452,"byte_end":330508,"line_start":483,"line_end":483,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330513,"byte_end":330516,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330521,"byte_end":330535,"line_start":485,"line_end":485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330540,"byte_end":330543,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330548,"byte_end":330555,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330560,"byte_end":330597,"line_start":488,"line_end":488,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330602,"byte_end":330605,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330610,"byte_end":330664,"line_start":490,"line_end":490,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330669,"byte_end":330672,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330677,"byte_end":330699,"line_start":492,"line_end":492,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330704,"byte_end":330726,"line_start":493,"line_end":493,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330731,"byte_end":330753,"line_start":494,"line_end":494,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330758,"byte_end":330761,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ for element in list.iter_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330766,"byte_end":330802,"line_start":496,"line_end":496,"column_start":5,"column_end":41}},{"value":"/     *element += 10;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330807,"byte_end":330830,"line_start":497,"line_end":497,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330835,"byte_end":330840,"line_start":498,"line_end":498,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330845,"byte_end":330848,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330853,"byte_end":330884,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(iter.next(), Some(&10));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330889,"byte_end":330928,"line_start":501,"line_end":501,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&11));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330933,"byte_end":330972,"line_start":502,"line_end":502,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&12));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330977,"byte_end":331016,"line_start":503,"line_end":503,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331021,"byte_end":331055,"line_start":504,"line_end":504,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331060,"byte_end":331067,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331072,"byte_end":331081,"line_start":506,"line_end":506,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331086,"byte_end":331131,"line_start":507,"line_end":507,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331497,"byte_end":331509,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"cursor_front","qualname":"<LinkedList<T>>::cursor_front","value":"fn (&self) -> Cursor<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor at the front element.","sig":null,"attributes":[{"value":"/ Provides a cursor at the front element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331274,"byte_end":331317,"line_start":512,"line_end":512,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331322,"byte_end":331325,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331330,"byte_end":331405,"line_start":514,"line_end":514,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331410,"byte_end":331419,"line_start":515,"line_end":515,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331424,"byte_end":331485,"line_start":516,"line_end":516,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331854,"byte_end":331870,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"cursor_front_mut","qualname":"<LinkedList<T>>::cursor_front_mut","value":"fn (&mut self) -> CursorMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor with editing operations at the front element.","sig":null,"attributes":[{"value":"/ Provides a cursor with editing operations at the front element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331607,"byte_end":331674,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331679,"byte_end":331682,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331687,"byte_end":331762,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331767,"byte_end":331776,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331781,"byte_end":331842,"line_start":525,"line_end":525,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332200,"byte_end":332211,"line_start":535,"line_end":535,"column_start":12,"column_end":23},"name":"cursor_back","qualname":"<LinkedList<T>>::cursor_back","value":"fn (&self) -> Cursor<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor at the back element.","sig":null,"attributes":[{"value":"/ Provides a cursor at the back element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331978,"byte_end":332020,"line_start":530,"line_end":530,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332025,"byte_end":332028,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332033,"byte_end":332108,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332113,"byte_end":332122,"line_start":533,"line_end":533,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332127,"byte_end":332188,"line_start":534,"line_end":534,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332590,"byte_end":332605,"line_start":544,"line_end":544,"column_start":12,"column_end":27},"name":"cursor_back_mut","qualname":"<LinkedList<T>>::cursor_back_mut","value":"fn (&mut self) -> CursorMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor with editing operations at the back element.","sig":null,"attributes":[{"value":"/ Provides a cursor with editing operations at the back element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332344,"byte_end":332410,"line_start":539,"line_end":539,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332415,"byte_end":332418,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332423,"byte_end":332498,"line_start":541,"line_end":541,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332503,"byte_end":332512,"line_start":542,"line_end":542,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332517,"byte_end":332578,"line_start":543,"line_end":543,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333184,"byte_end":333192,"line_start":565,"line_end":565,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinkedList<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `LinkedList` is empty.","sig":null,"attributes":[{"value":"/ Returns `true` if the `LinkedList` is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332748,"byte_end":332796,"line_start":548,"line_end":548,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332801,"byte_end":332804,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332809,"byte_end":332856,"line_start":550,"line_end":550,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332861,"byte_end":332864,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332869,"byte_end":332883,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332888,"byte_end":332891,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332896,"byte_end":332903,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332908,"byte_end":332945,"line_start":555,"line_end":555,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332950,"byte_end":332953,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332958,"byte_end":332993,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/ assert!(dl.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332998,"byte_end":333025,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333030,"byte_end":333033,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(\"foo\");","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333038,"byte_end":333063,"line_start":560,"line_end":560,"column_start":5,"column_end":30}},{"value":"/ assert!(!dl.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333068,"byte_end":333096,"line_start":561,"line_end":561,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333101,"byte_end":333108,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333113,"byte_end":333122,"line_start":563,"line_end":563,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333127,"byte_end":333172,"line_start":564,"line_end":564,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333777,"byte_end":333780,"line_start":591,"line_end":591,"column_start":12,"column_end":15},"name":"len","qualname":"<LinkedList<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the length of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333249,"byte_end":333292,"line_start":569,"line_end":569,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333297,"byte_end":333300,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333305,"byte_end":333352,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333357,"byte_end":333360,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333365,"byte_end":333379,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333384,"byte_end":333387,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333392,"byte_end":333399,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333404,"byte_end":333441,"line_start":576,"line_end":576,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333446,"byte_end":333449,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333454,"byte_end":333489,"line_start":578,"line_end":578,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333494,"byte_end":333497,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333502,"byte_end":333523,"line_start":580,"line_end":580,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333528,"byte_end":333556,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333561,"byte_end":333564,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333569,"byte_end":333590,"line_start":583,"line_end":583,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333595,"byte_end":333623,"line_start":584,"line_end":584,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333628,"byte_end":333631,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333636,"byte_end":333656,"line_start":586,"line_end":586,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.len(), 3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333661,"byte_end":333689,"line_start":587,"line_end":587,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333694,"byte_end":333701,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333706,"byte_end":333715,"line_start":589,"line_end":589,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333720,"byte_end":333765,"line_start":590,"line_end":590,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334393,"byte_end":334398,"line_start":617,"line_end":617,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinkedList<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the `LinkedList`.","sig":null,"attributes":[{"value":"/ Removes all elements from the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333827,"byte_end":333874,"line_start":595,"line_end":595,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333879,"byte_end":333882,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(n) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333887,"byte_end":333934,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333939,"byte_end":333942,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333947,"byte_end":333961,"line_start":599,"line_end":599,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333966,"byte_end":333969,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333974,"byte_end":333981,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333986,"byte_end":334023,"line_start":602,"line_end":602,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334028,"byte_end":334031,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334036,"byte_end":334071,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334076,"byte_end":334079,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334084,"byte_end":334105,"line_start":606,"line_end":606,"column_start":5,"column_end":26}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334110,"byte_end":334131,"line_start":607,"line_end":607,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334136,"byte_end":334164,"line_start":608,"line_end":608,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334169,"byte_end":334206,"line_start":609,"line_end":609,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334211,"byte_end":334214,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ dl.clear();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334219,"byte_end":334234,"line_start":611,"line_end":611,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(dl.len(), 0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334239,"byte_end":334267,"line_start":612,"line_end":612,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334272,"byte_end":334305,"line_start":613,"line_end":613,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334310,"byte_end":334317,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334322,"byte_end":334331,"line_start":615,"line_end":615,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334336,"byte_end":334381,"line_start":616,"line_end":616,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334979,"byte_end":334987,"line_start":639,"line_end":639,"column_start":12,"column_end":20},"name":"contains","qualname":"<LinkedList<T>>::contains","value":"fn (&self, x: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `LinkedList` contains an element equal to the\n given value.","sig":null,"attributes":[{"value":"/ Returns `true` if the `LinkedList` contains an element equal to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334452,"byte_end":334523,"line_start":621,"line_end":621,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334528,"byte_end":334544,"line_start":622,"line_end":622,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334549,"byte_end":334552,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334557,"byte_end":334571,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334576,"byte_end":334579,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334584,"byte_end":334591,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334596,"byte_end":334633,"line_start":627,"line_end":627,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334638,"byte_end":334641,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334646,"byte_end":334700,"line_start":629,"line_end":629,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334705,"byte_end":334708,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334713,"byte_end":334735,"line_start":631,"line_end":631,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334740,"byte_end":334762,"line_start":632,"line_end":632,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334767,"byte_end":334789,"line_start":633,"line_end":633,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334794,"byte_end":334797,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(list.contains(&0), true);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334802,"byte_end":334842,"line_start":635,"line_end":635,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(list.contains(&10), false);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334847,"byte_end":334889,"line_start":636,"line_end":636,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334894,"byte_end":334901,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"stable(feature = \"linked_list_contains\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334906,"byte_end":334967,"line_start":638,"line_end":638,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335523,"byte_end":335528,"line_start":662,"line_end":662,"column_start":12,"column_end":17},"name":"front","qualname":"<LinkedList<T>>::front","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the front element, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the front element, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335098,"byte_end":335169,"line_start":646,"line_end":646,"column_start":5,"column_end":76}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335174,"byte_end":335184,"line_start":647,"line_end":647,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335189,"byte_end":335192,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335197,"byte_end":335211,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335216,"byte_end":335219,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335224,"byte_end":335231,"line_start":651,"line_end":651,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335236,"byte_end":335273,"line_start":652,"line_end":652,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335278,"byte_end":335281,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335286,"byte_end":335321,"line_start":654,"line_end":654,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335326,"byte_end":335359,"line_start":655,"line_end":655,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335364,"byte_end":335367,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335372,"byte_end":335393,"line_start":657,"line_end":657,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335398,"byte_end":335435,"line_start":658,"line_end":658,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335440,"byte_end":335447,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335452,"byte_end":335461,"line_start":660,"line_end":660,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335466,"byte_end":335511,"line_start":661,"line_end":661,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336215,"byte_end":336224,"line_start":688,"line_end":688,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<LinkedList<T>>::front_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the front element, or `None` if the list\n is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the front element, or `None` if the list","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335636,"byte_end":335712,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335717,"byte_end":335730,"line_start":667,"line_end":667,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335735,"byte_end":335738,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335743,"byte_end":335757,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335762,"byte_end":335765,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335770,"byte_end":335777,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335782,"byte_end":335819,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335824,"byte_end":335827,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335832,"byte_end":335867,"line_start":674,"line_end":674,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335872,"byte_end":335905,"line_start":675,"line_end":675,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335910,"byte_end":335913,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335918,"byte_end":335939,"line_start":677,"line_end":677,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335944,"byte_end":335981,"line_start":678,"line_end":678,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335986,"byte_end":335989,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ match dl.front_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335994,"byte_end":336020,"line_start":680,"line_end":680,"column_start":5,"column_end":31}},{"value":"/     None => {},","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336025,"byte_end":336044,"line_start":681,"line_end":681,"column_start":5,"column_end":24}},{"value":"/     Some(x) => *x = 5,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336049,"byte_end":336075,"line_start":682,"line_end":682,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336080,"byte_end":336085,"line_start":683,"line_end":683,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(dl.front(), Some(&5));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336090,"byte_end":336127,"line_start":684,"line_end":684,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336132,"byte_end":336139,"line_start":685,"line_end":685,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336144,"byte_end":336153,"line_start":686,"line_end":686,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336158,"byte_end":336203,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336765,"byte_end":336769,"line_start":708,"line_end":708,"column_start":12,"column_end":16},"name":"back","qualname":"<LinkedList<T>>::back","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the back element, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the back element, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336344,"byte_end":336414,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336419,"byte_end":336429,"line_start":693,"line_end":693,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336434,"byte_end":336437,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336442,"byte_end":336456,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336461,"byte_end":336464,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336469,"byte_end":336476,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336481,"byte_end":336518,"line_start":698,"line_end":698,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336523,"byte_end":336526,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336531,"byte_end":336566,"line_start":700,"line_end":700,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336571,"byte_end":336603,"line_start":701,"line_end":701,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336608,"byte_end":336611,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336616,"byte_end":336636,"line_start":703,"line_end":703,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.back(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336641,"byte_end":336677,"line_start":704,"line_end":704,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336682,"byte_end":336689,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336694,"byte_end":336703,"line_start":706,"line_end":706,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336708,"byte_end":336753,"line_start":707,"line_end":707,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337450,"byte_end":337458,"line_start":734,"line_end":734,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<LinkedList<T>>::back_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the back element, or `None` if the list\n is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the back element, or `None` if the list","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336877,"byte_end":336952,"line_start":712,"line_end":712,"column_start":5,"column_end":80}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336957,"byte_end":336970,"line_start":713,"line_end":713,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336975,"byte_end":336978,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336983,"byte_end":336997,"line_start":715,"line_end":715,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337002,"byte_end":337005,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337010,"byte_end":337017,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337022,"byte_end":337059,"line_start":718,"line_end":718,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337064,"byte_end":337067,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337072,"byte_end":337107,"line_start":720,"line_end":720,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337112,"byte_end":337144,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337149,"byte_end":337152,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337157,"byte_end":337177,"line_start":723,"line_end":723,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.back(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337182,"byte_end":337218,"line_start":724,"line_end":724,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337223,"byte_end":337226,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ match dl.back_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337231,"byte_end":337256,"line_start":726,"line_end":726,"column_start":5,"column_end":30}},{"value":"/     None => {},","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337261,"byte_end":337280,"line_start":727,"line_end":727,"column_start":5,"column_end":24}},{"value":"/     Some(x) => *x = 5,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337285,"byte_end":337311,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337316,"byte_end":337321,"line_start":729,"line_end":729,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(dl.back(), Some(&5));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337326,"byte_end":337362,"line_start":730,"line_end":730,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337367,"byte_end":337374,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337379,"byte_end":337388,"line_start":732,"line_end":732,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337393,"byte_end":337438,"line_start":733,"line_end":733,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338045,"byte_end":338055,"line_start":756,"line_end":756,"column_start":12,"column_end":22},"name":"push_front","qualname":"<LinkedList<T>>::push_front","value":"fn (&mut self, elt: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an element first in the list.","sig":null,"attributes":[{"value":"/ Adds an element first in the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337578,"byte_end":337616,"line_start":738,"line_end":738,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337621,"byte_end":337624,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337629,"byte_end":337676,"line_start":740,"line_end":740,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337681,"byte_end":337684,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337689,"byte_end":337703,"line_start":742,"line_end":742,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337708,"byte_end":337711,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337716,"byte_end":337723,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337728,"byte_end":337765,"line_start":745,"line_end":745,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337770,"byte_end":337773,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337778,"byte_end":337813,"line_start":747,"line_end":747,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337818,"byte_end":337821,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337826,"byte_end":337847,"line_start":749,"line_end":749,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337852,"byte_end":337892,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337897,"byte_end":337900,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337905,"byte_end":337926,"line_start":752,"line_end":752,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337931,"byte_end":337971,"line_start":753,"line_end":753,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337976,"byte_end":337983,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337988,"byte_end":338033,"line_start":755,"line_end":755,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338721,"byte_end":338730,"line_start":780,"line_end":780,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<LinkedList<T>>::pop_front","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element and returns it, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Removes the first element and returns it, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338138,"byte_end":338208,"line_start":760,"line_end":760,"column_start":5,"column_end":75}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338213,"byte_end":338223,"line_start":761,"line_end":761,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338228,"byte_end":338231,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338236,"byte_end":338283,"line_start":763,"line_end":763,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338288,"byte_end":338291,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338296,"byte_end":338310,"line_start":765,"line_end":765,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338315,"byte_end":338318,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338323,"byte_end":338330,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338335,"byte_end":338372,"line_start":768,"line_end":768,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338377,"byte_end":338380,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338385,"byte_end":338419,"line_start":770,"line_end":770,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338424,"byte_end":338460,"line_start":771,"line_end":771,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338465,"byte_end":338468,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338473,"byte_end":338493,"line_start":773,"line_end":773,"column_start":5,"column_end":25}},{"value":"/ d.push_front(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338498,"byte_end":338518,"line_start":774,"line_end":774,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(d.pop_front(), Some(3));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338523,"byte_end":338562,"line_start":775,"line_end":775,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338567,"byte_end":338606,"line_start":776,"line_end":776,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338611,"byte_end":338647,"line_start":777,"line_end":777,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338652,"byte_end":338659,"line_start":778,"line_end":778,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338664,"byte_end":338709,"line_start":779,"line_end":779,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339228,"byte_end":339237,"line_start":799,"line_end":799,"column_start":12,"column_end":21},"name":"push_back","qualname":"<LinkedList<T>>::push_back","value":"fn (&mut self, elt: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of a list.","sig":null,"attributes":[{"value":"/ Appends an element to the back of a list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338822,"byte_end":338867,"line_start":784,"line_end":784,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338872,"byte_end":338875,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338880,"byte_end":338927,"line_start":786,"line_end":786,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338932,"byte_end":338935,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338940,"byte_end":338954,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338959,"byte_end":338962,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338967,"byte_end":338974,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338979,"byte_end":339016,"line_start":791,"line_end":791,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339021,"byte_end":339024,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339029,"byte_end":339063,"line_start":793,"line_end":793,"column_start":5,"column_end":39}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339068,"byte_end":339087,"line_start":794,"line_end":794,"column_start":5,"column_end":24}},{"value":"/ d.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339092,"byte_end":339111,"line_start":795,"line_end":795,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(3, *d.back().unwrap());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339116,"byte_end":339154,"line_start":796,"line_end":796,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339159,"byte_end":339166,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339171,"byte_end":339216,"line_start":798,"line_end":798,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339810,"byte_end":339818,"line_start":820,"line_end":820,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<LinkedList<T>>::pop_back","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a list and returns it, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from a list and returns it, or `None` if","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339319,"byte_end":339388,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ it is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339393,"byte_end":339409,"line_start":804,"line_end":804,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339414,"byte_end":339417,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339422,"byte_end":339469,"line_start":806,"line_end":806,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339474,"byte_end":339477,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339482,"byte_end":339496,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339501,"byte_end":339504,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339509,"byte_end":339516,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339521,"byte_end":339558,"line_start":811,"line_end":811,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339563,"byte_end":339566,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339571,"byte_end":339605,"line_start":813,"line_end":813,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.pop_back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339610,"byte_end":339645,"line_start":814,"line_end":814,"column_start":5,"column_end":40}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339650,"byte_end":339669,"line_start":815,"line_end":815,"column_start":5,"column_end":24}},{"value":"/ d.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339674,"byte_end":339693,"line_start":816,"line_end":816,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.pop_back(), Some(3));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339698,"byte_end":339736,"line_start":817,"line_end":817,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339741,"byte_end":339748,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339753,"byte_end":339798,"line_start":819,"line_end":819,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340593,"byte_end":340602,"line_start":850,"line_end":850,"column_start":12,"column_end":21},"name":"split_off","qualname":"<LinkedList<T>>::split_off","value":"fn (&mut self, at: usize) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two at the given index. Returns everything after the given index,\n including the index.","sig":null,"attributes":[{"value":"/ Splits the list into two at the given index. Returns everything after the given index,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339909,"byte_end":339999,"line_start":824,"line_end":824,"column_start":5,"column_end":95}},{"value":"/ including the index.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340004,"byte_end":340028,"line_start":825,"line_end":825,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340033,"byte_end":340036,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(n) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340041,"byte_end":340088,"line_start":827,"line_end":827,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340093,"byte_end":340096,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340101,"byte_end":340113,"line_start":829,"line_end":829,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340118,"byte_end":340121,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340126,"byte_end":340151,"line_start":831,"line_end":831,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340156,"byte_end":340159,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340164,"byte_end":340178,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340183,"byte_end":340186,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340191,"byte_end":340198,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340203,"byte_end":340240,"line_start":836,"line_end":836,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340245,"byte_end":340248,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340253,"byte_end":340287,"line_start":838,"line_end":838,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340292,"byte_end":340295,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340300,"byte_end":340320,"line_start":840,"line_end":840,"column_start":5,"column_end":25}},{"value":"/ d.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340325,"byte_end":340345,"line_start":841,"line_end":841,"column_start":5,"column_end":25}},{"value":"/ d.push_front(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340350,"byte_end":340370,"line_start":842,"line_end":842,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340375,"byte_end":340378,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ let mut split = d.split_off(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340383,"byte_end":340418,"line_start":844,"line_end":844,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340423,"byte_end":340426,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(split.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340431,"byte_end":340474,"line_start":846,"line_end":846,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(split.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340479,"byte_end":340519,"line_start":847,"line_end":847,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340524,"byte_end":340531,"line_start":848,"line_end":848,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340536,"byte_end":340581,"line_start":849,"line_end":849,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342364,"byte_end":342370,"line_start":905,"line_end":905,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinkedList<T>>::remove","value":"fn (&mut self, at: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the element at the given index and returns it.","sig":null,"attributes":[{"value":"/ Removes the element at the given index and returns it.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341729,"byte_end":341787,"line_start":881,"line_end":881,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341792,"byte_end":341795,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(n) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341800,"byte_end":341847,"line_start":883,"line_end":883,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341852,"byte_end":341855,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341860,"byte_end":341872,"line_start":885,"line_end":885,"column_start":5,"column_end":17}},{"value":"/ Panics if at >= len","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341877,"byte_end":341900,"line_start":886,"line_end":886,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341905,"byte_end":341908,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341913,"byte_end":341927,"line_start":888,"line_end":888,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341932,"byte_end":341935,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341940,"byte_end":341947,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ #![feature(linked_list_remove)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341952,"byte_end":341987,"line_start":891,"line_end":891,"column_start":5,"column_end":40}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341992,"byte_end":342029,"line_start":892,"line_end":892,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342034,"byte_end":342037,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342042,"byte_end":342076,"line_start":894,"line_end":894,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342081,"byte_end":342084,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342089,"byte_end":342109,"line_start":896,"line_end":896,"column_start":5,"column_end":25}},{"value":"/ d.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342114,"byte_end":342134,"line_start":897,"line_end":897,"column_start":5,"column_end":25}},{"value":"/ d.push_front(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342139,"byte_end":342159,"line_start":898,"line_end":898,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342164,"byte_end":342167,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(d.remove(1), 2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342172,"byte_end":342203,"line_start":900,"line_end":900,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.remove(0), 3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342208,"byte_end":342239,"line_start":901,"line_end":901,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.remove(0), 1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342244,"byte_end":342275,"line_start":902,"line_end":902,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342280,"byte_end":342287,"line_start":903,"line_end":903,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"linked_list_remove\", issue = \"69210\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342292,"byte_end":342352,"line_start":904,"line_end":904,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344352,"byte_end":344364,"line_start":954,"line_end":954,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<LinkedList<T>>::drain_filter","value":"fn <F> (&mut self, filter: F) -> DrainFilter<'_, T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator which uses a closure to determine if an element should be removed.","sig":null,"attributes":[{"value":"/ Creates an iterator which uses a closure to determine if an element should be removed.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343146,"byte_end":343236,"line_start":927,"line_end":927,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343241,"byte_end":343244,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ If the closure returns true, then the element is removed and yielded.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343249,"byte_end":343322,"line_start":929,"line_end":929,"column_start":5,"column_end":78}},{"value":"/ If the closure returns false, the element will remain in the list and will not be yielded","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343327,"byte_end":343420,"line_start":930,"line_end":930,"column_start":5,"column_end":98}},{"value":"/ by the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343425,"byte_end":343445,"line_start":931,"line_end":931,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343450,"byte_end":343453,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ Note that `drain_filter` lets you mutate every element in the filter closure, regardless of","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343458,"byte_end":343553,"line_start":933,"line_end":933,"column_start":5,"column_end":100}},{"value":"/ whether you choose to keep or remove it.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343558,"byte_end":343602,"line_start":934,"line_end":934,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343607,"byte_end":343610,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343615,"byte_end":343629,"line_start":936,"line_end":936,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343634,"byte_end":343637,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Splitting a list into evens and odds, reusing the original list:","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343642,"byte_end":343710,"line_start":938,"line_end":938,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343715,"byte_end":343718,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343723,"byte_end":343730,"line_start":940,"line_end":940,"column_start":5,"column_end":12}},{"value":"/ #![feature(drain_filter)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343735,"byte_end":343764,"line_start":941,"line_end":941,"column_start":5,"column_end":34}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343769,"byte_end":343806,"line_start":942,"line_end":942,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343811,"byte_end":343814,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ let mut numbers: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343819,"byte_end":343876,"line_start":944,"line_end":944,"column_start":5,"column_end":62}},{"value":"/ numbers.extend(&[1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343881,"byte_end":343943,"line_start":945,"line_end":945,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343948,"byte_end":343951,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ let evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<LinkedList<_>>();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343956,"byte_end":344037,"line_start":947,"line_end":947,"column_start":5,"column_end":86}},{"value":"/ let odds = numbers;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344042,"byte_end":344065,"line_start":948,"line_end":948,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344070,"byte_end":344073,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![2, 4, 6, 8, 14]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344078,"byte_end":344154,"line_start":950,"line_end":950,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344159,"byte_end":344242,"line_start":951,"line_end":951,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344247,"byte_end":344254,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344259,"byte_end":344340,"line_start":953,"line_end":953,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349013,"byte_end":349024,"line_start":1125,"line_end":1125,"column_start":12,"column_end":23},"name":"insert_next","qualname":"<IterMut>::insert_next","value":"fn (&mut self, element: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given element just after the element most recently returned by `.next()`.\n The inserted element does not appear in the iteration.","sig":null,"attributes":[{"value":"/ Inserts the given element just after the element most recently returned by `.next()`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348128,"byte_end":348217,"line_start":1096,"line_end":1096,"column_start":5,"column_end":94}},{"value":"/ The inserted element does not appear in the iteration.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348222,"byte_end":348280,"line_start":1097,"line_end":1097,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348285,"byte_end":348288,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348293,"byte_end":348307,"line_start":1099,"line_end":1099,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348312,"byte_end":348315,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348320,"byte_end":348327,"line_start":1101,"line_end":1101,"column_start":5,"column_end":12}},{"value":"/ #![feature(linked_list_extras)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348332,"byte_end":348367,"line_start":1102,"line_end":1102,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348372,"byte_end":348375,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348380,"byte_end":348417,"line_start":1104,"line_end":1104,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348422,"byte_end":348425,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348430,"byte_end":348500,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348505,"byte_end":348508,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348513,"byte_end":348518,"line_start":1108,"line_end":1108,"column_start":5,"column_end":10}},{"value":"/     let mut it = list.iter_mut();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348523,"byte_end":348560,"line_start":1109,"line_end":1109,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(it.next().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348565,"byte_end":348608,"line_start":1110,"line_end":1110,"column_start":5,"column_end":48}},{"value":"/     // insert `2` after `1`","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348613,"byte_end":348644,"line_start":1111,"line_end":1111,"column_start":5,"column_end":36}},{"value":"/     it.insert_next(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348649,"byte_end":348675,"line_start":1112,"line_end":1112,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348680,"byte_end":348685,"line_start":1113,"line_end":1113,"column_start":5,"column_end":10}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348690,"byte_end":348695,"line_start":1114,"line_end":1114,"column_start":5,"column_end":10}},{"value":"/     let vec: Vec<_> = list.into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348700,"byte_end":348753,"line_start":1115,"line_end":1115,"column_start":5,"column_end":58}},{"value":"/     assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348758,"byte_end":348796,"line_start":1116,"line_end":1116,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348801,"byte_end":348806,"line_start":1117,"line_end":1117,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348811,"byte_end":348818,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348823,"byte_end":348832,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_extras\", reason =\n           \"this is probably better handled by a cursor type -- we'll see\",\n           issue = \"27794\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348837,"byte_end":349001,"line_start":1120,"line_end":1124,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350739,"byte_end":350748,"line_start":1175,"line_end":1175,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<IterMut>::peek_next","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the next element, without changing the iterator.","sig":null,"attributes":[{"value":"/ Provides a reference to the next element, without changing the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349979,"byte_end":350055,"line_start":1152,"line_end":1152,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350060,"byte_end":350063,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350068,"byte_end":350082,"line_start":1154,"line_end":1154,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350087,"byte_end":350090,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350095,"byte_end":350102,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"/ #![feature(linked_list_extras)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350107,"byte_end":350142,"line_start":1157,"line_end":1157,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350147,"byte_end":350150,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350155,"byte_end":350192,"line_start":1159,"line_end":1159,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350197,"byte_end":350200,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350205,"byte_end":350275,"line_start":1161,"line_end":1161,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350280,"byte_end":350283,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ let mut it = list.iter_mut();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350288,"byte_end":350321,"line_start":1163,"line_end":1163,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(it.next().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350326,"byte_end":350365,"line_start":1164,"line_end":1164,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(it.peek_next().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350370,"byte_end":350414,"line_start":1165,"line_end":1165,"column_start":5,"column_end":49}},{"value":"/ // We just peeked at 2, so it was not consumed from the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350419,"byte_end":350488,"line_start":1166,"line_end":1166,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(it.next().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350493,"byte_end":350532,"line_start":1167,"line_end":1167,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350537,"byte_end":350544,"line_start":1168,"line_end":1168,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350549,"byte_end":350558,"line_start":1169,"line_end":1169,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_extras\", reason =\n           \"this is probably better handled by a cursor type -- we'll see\",\n           issue = \"27794\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350563,"byte_end":350727,"line_start":1170,"line_end":1174,"column_start":5,"column_end":7}}]},{"kind":"Struct","id":{"krate":0,"index":2144},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351465,"byte_end":351471,"line_start":1194,"line_end":1194,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::collections::linked_list::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149}],"decl_id":null,"docs":" A cursor over a `LinkedList`.","sig":null,"attributes":[{"value":"/ A cursor over a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350941,"byte_end":350974,"line_start":1184,"line_end":1184,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350975,"byte_end":350978,"line_start":1185,"line_end":1185,"column_start":1,"column_end":4}},{"value":"/ A `Cursor` is like an iterator, except that it can freely seek back-and-forth.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350979,"byte_end":351061,"line_start":1186,"line_end":1186,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351062,"byte_end":351065,"line_start":1187,"line_end":1187,"column_start":1,"column_end":4}},{"value":"/ Cursors always rest between two elements in the list, and index in a logically circular way.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351066,"byte_end":351162,"line_start":1188,"line_end":1188,"column_start":1,"column_end":97}},{"value":"/ To accommodate this, there is a \"ghost\" non-element that yields `None` between the head and","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351163,"byte_end":351258,"line_start":1189,"line_end":1189,"column_start":1,"column_end":96}},{"value":"/ tail of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351259,"byte_end":351280,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351281,"byte_end":351284,"line_start":1191,"line_end":1191,"column_start":1,"column_end":4}},{"value":"/ When created, cursors start at the front of the list, or the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351285,"byte_end":351391,"line_start":1192,"line_end":1192,"column_start":1,"column_end":107}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351392,"byte_end":351453,"line_start":1193,"line_end":1193,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2153},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352517,"byte_end":352526,"line_start":1218,"line_end":1218,"column_start":12,"column_end":21},"name":"CursorMut","qualname":"::collections::linked_list::CursorMut","value":"CursorMut {  }","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2158}],"decl_id":null,"docs":" A cursor over a `LinkedList` with editing operations.","sig":null,"attributes":[{"value":"/ A cursor over a `LinkedList` with editing operations.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351839,"byte_end":351896,"line_start":1207,"line_end":1207,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351897,"byte_end":351900,"line_start":1208,"line_end":1208,"column_start":1,"column_end":4}},{"value":"/ A `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351901,"byte_end":351991,"line_start":1209,"line_end":1209,"column_start":1,"column_end":91}},{"value":"/ safely mutate the list during iteration. This is because the lifetime of its yielded","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351992,"byte_end":352080,"line_start":1210,"line_end":1210,"column_start":1,"column_end":89}},{"value":"/ references is tied to its own lifetime, instead of just the underlying list. This means","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352081,"byte_end":352172,"line_start":1211,"line_end":1211,"column_start":1,"column_end":92}},{"value":"/ cursors cannot yield multiple elements at once.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352173,"byte_end":352224,"line_start":1212,"line_end":1212,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352225,"byte_end":352228,"line_start":1213,"line_end":1213,"column_start":1,"column_end":4}},{"value":"/ Cursors always rest between two elements in the list, and index in a logically circular way.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352229,"byte_end":352325,"line_start":1214,"line_end":1214,"column_start":1,"column_end":97}},{"value":"/ To accommodate this, there is a \"ghost\" non-element that yields `None` between the head and","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352326,"byte_end":352421,"line_start":1215,"line_end":1215,"column_start":1,"column_end":96}},{"value":"/ tail of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352422,"byte_end":352443,"line_start":1216,"line_end":1216,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352444,"byte_end":352505,"line_start":1217,"line_end":1217,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353184,"byte_end":353189,"line_start":1237,"line_end":1237,"column_start":12,"column_end":17},"name":"index","qualname":"<Cursor>::index","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the cursor position index within the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the cursor position index within the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352936,"byte_end":352998,"line_start":1232,"line_end":1232,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353003,"byte_end":353006,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353011,"byte_end":353077,"line_start":1234,"line_end":1234,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353082,"byte_end":353106,"line_start":1235,"line_end":1235,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353111,"byte_end":353172,"line_start":1236,"line_end":1236,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353681,"byte_end":353690,"line_start":1248,"line_end":1248,"column_start":12,"column_end":21},"name":"move_next","qualname":"<Cursor>::move_next","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the next element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the next element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353283,"byte_end":353344,"line_start":1242,"line_end":1242,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353349,"byte_end":353352,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353357,"byte_end":353439,"line_start":1244,"line_end":1244,"column_start":5,"column_end":87}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353444,"byte_end":353516,"line_start":1245,"line_end":1245,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353521,"byte_end":353603,"line_start":1246,"line_end":1246,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353608,"byte_end":353669,"line_start":1247,"line_end":1247,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354630,"byte_end":354639,"line_start":1270,"line_end":1270,"column_start":12,"column_end":21},"name":"move_prev","qualname":"<Cursor>::move_prev","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the previous element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the previous element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354228,"byte_end":354293,"line_start":1264,"line_end":1264,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354298,"byte_end":354301,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354306,"byte_end":354388,"line_start":1266,"line_end":1266,"column_start":5,"column_end":87}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354393,"byte_end":354465,"line_start":1267,"line_end":1267,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354470,"byte_end":354552,"line_start":1268,"line_end":1268,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354557,"byte_end":354618,"line_start":1269,"line_end":1269,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355499,"byte_end":355506,"line_start":1291,"line_end":1291,"column_start":12,"column_end":19},"name":"current","qualname":"<Cursor>::current","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the element that the cursor is currently\n pointing to.","sig":null,"attributes":[{"value":"/ Returns a reference to the element that the cursor is currently","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355225,"byte_end":355292,"line_start":1285,"line_end":1285,"column_start":5,"column_end":72}},{"value":"/ pointing to.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355297,"byte_end":355313,"line_start":1286,"line_end":1286,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355318,"byte_end":355321,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355326,"byte_end":355392,"line_start":1288,"line_end":1288,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355397,"byte_end":355421,"line_start":1289,"line_end":1289,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355426,"byte_end":355487,"line_start":1290,"line_end":1290,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2171},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355968,"byte_end":355977,"line_start":1301,"line_end":1301,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<Cursor>::peek_next","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next element.","sig":null,"attributes":[{"value":"/ Returns a reference to the next element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355620,"byte_end":355664,"line_start":1295,"line_end":1295,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355669,"byte_end":355672,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355677,"byte_end":355751,"line_start":1297,"line_end":1297,"column_start":5,"column_end":79}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355756,"byte_end":355828,"line_start":1298,"line_end":1298,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355833,"byte_end":355890,"line_start":1299,"line_end":1299,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355895,"byte_end":355956,"line_start":1300,"line_end":1300,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356604,"byte_end":356613,"line_start":1317,"line_end":1317,"column_start":12,"column_end":21},"name":"peek_prev","qualname":"<Cursor>::peek_prev","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the previous element.","sig":null,"attributes":[{"value":"/ Returns a reference to the previous element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356252,"byte_end":356300,"line_start":1311,"line_end":1311,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356305,"byte_end":356308,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356313,"byte_end":356387,"line_start":1313,"line_end":1313,"column_start":5,"column_end":79}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356392,"byte_end":356464,"line_start":1314,"line_end":1314,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356469,"byte_end":356526,"line_start":1315,"line_end":1315,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356531,"byte_end":356592,"line_start":1316,"line_end":1316,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357169,"byte_end":357174,"line_start":1334,"line_end":1334,"column_start":12,"column_end":17},"name":"index","qualname":"<CursorMut>::index","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the cursor position index within the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the cursor position index within the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356921,"byte_end":356983,"line_start":1329,"line_end":1329,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356988,"byte_end":356991,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356996,"byte_end":357062,"line_start":1331,"line_end":1331,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357067,"byte_end":357091,"line_start":1332,"line_end":1332,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357096,"byte_end":357157,"line_start":1333,"line_end":1333,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357666,"byte_end":357675,"line_start":1345,"line_end":1345,"column_start":12,"column_end":21},"name":"move_next","qualname":"<CursorMut>::move_next","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the next element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the next element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357268,"byte_end":357329,"line_start":1339,"line_end":1339,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357334,"byte_end":357337,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357342,"byte_end":357424,"line_start":1341,"line_end":1341,"column_start":5,"column_end":87}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357429,"byte_end":357501,"line_start":1342,"line_end":1342,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357506,"byte_end":357588,"line_start":1343,"line_end":1343,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357593,"byte_end":357654,"line_start":1344,"line_end":1344,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358615,"byte_end":358624,"line_start":1367,"line_end":1367,"column_start":12,"column_end":21},"name":"move_prev","qualname":"<CursorMut>::move_prev","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the previous element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the previous element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358213,"byte_end":358278,"line_start":1361,"line_end":1361,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358283,"byte_end":358286,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358291,"byte_end":358373,"line_start":1363,"line_end":1363,"column_start":5,"column_end":87}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358378,"byte_end":358450,"line_start":1364,"line_end":1364,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358455,"byte_end":358537,"line_start":1365,"line_end":1365,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358542,"byte_end":358603,"line_start":1366,"line_end":1366,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359484,"byte_end":359491,"line_start":1388,"line_end":1388,"column_start":12,"column_end":19},"name":"current","qualname":"<CursorMut>::current","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the element that the cursor is currently\n pointing to.","sig":null,"attributes":[{"value":"/ Returns a reference to the element that the cursor is currently","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359210,"byte_end":359277,"line_start":1382,"line_end":1382,"column_start":5,"column_end":72}},{"value":"/ pointing to.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359282,"byte_end":359298,"line_start":1383,"line_end":1383,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359303,"byte_end":359306,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359311,"byte_end":359377,"line_start":1385,"line_end":1385,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359382,"byte_end":359406,"line_start":1386,"line_end":1386,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359411,"byte_end":359472,"line_start":1387,"line_end":1387,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359962,"byte_end":359971,"line_start":1398,"line_end":1398,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<CursorMut>::peek_next","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next element.","sig":null,"attributes":[{"value":"/ Returns a reference to the next element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359614,"byte_end":359658,"line_start":1392,"line_end":1392,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359663,"byte_end":359666,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359671,"byte_end":359745,"line_start":1394,"line_end":1394,"column_start":5,"column_end":79}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359750,"byte_end":359822,"line_start":1395,"line_end":1395,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359827,"byte_end":359884,"line_start":1396,"line_end":1396,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359889,"byte_end":359950,"line_start":1397,"line_end":1397,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360607,"byte_end":360616,"line_start":1414,"line_end":1414,"column_start":12,"column_end":21},"name":"peek_prev","qualname":"<CursorMut>::peek_prev","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the previous element.","sig":null,"attributes":[{"value":"/ Returns a reference to the previous element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360255,"byte_end":360303,"line_start":1408,"line_end":1408,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360308,"byte_end":360311,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360316,"byte_end":360390,"line_start":1410,"line_end":1410,"column_start":5,"column_end":79}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360395,"byte_end":360467,"line_start":1411,"line_end":1411,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360472,"byte_end":360529,"line_start":1412,"line_end":1412,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360534,"byte_end":360595,"line_start":1413,"line_end":1413,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361263,"byte_end":361272,"line_start":1430,"line_end":1430,"column_start":12,"column_end":21},"name":"as_cursor","qualname":"<CursorMut>::as_cursor","value":"fn <'cm> (&'cm self) -> Cursor<'cm, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a read-only cursor pointing to the current element.","sig":null,"attributes":[{"value":"/ Returns a read-only cursor pointing to the current element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360900,"byte_end":360963,"line_start":1424,"line_end":1424,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360968,"byte_end":360971,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/ The lifetime of the returned `Cursor` is bound to that of the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":360976,"byte_end":361041,"line_start":1426,"line_end":1426,"column_start":5,"column_end":70}},{"value":"/ `CursorMut`, which means it cannot outlive the `CursorMut` and that the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361046,"byte_end":361121,"line_start":1427,"line_end":1427,"column_start":5,"column_end":80}},{"value":"/ `CursorMut` is frozen for the lifetime of the `Cursor`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361126,"byte_end":361185,"line_start":1428,"line_end":1428,"column_start":5,"column_end":64}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361190,"byte_end":361251,"line_start":1429,"line_end":1429,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361758,"byte_end":361770,"line_start":1443,"line_end":1443,"column_start":12,"column_end":24},"name":"insert_after","qualname":"<CursorMut>::insert_after","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the `LinkedList` after the current one.","sig":null,"attributes":[{"value":"/ Inserts a new element into the `LinkedList` after the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361466,"byte_end":361536,"line_start":1438,"line_end":1438,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361541,"byte_end":361544,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new element is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361549,"byte_end":361629,"line_start":1440,"line_end":1440,"column_start":5,"column_end":85}},{"value":"/ inserted at the front of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361634,"byte_end":361680,"line_start":1441,"line_end":1441,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361685,"byte_end":361746,"line_start":1442,"line_end":1442,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362612,"byte_end":362625,"line_start":1463,"line_end":1463,"column_start":12,"column_end":25},"name":"insert_before","qualname":"<CursorMut>::insert_before","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the `LinkedList` before the current one.","sig":null,"attributes":[{"value":"/ Inserts a new element into the `LinkedList` before the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362321,"byte_end":362392,"line_start":1458,"line_end":1458,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362397,"byte_end":362400,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new element is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362405,"byte_end":362485,"line_start":1460,"line_end":1460,"column_start":5,"column_end":85}},{"value":"/ inserted at the end of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362490,"byte_end":362534,"line_start":1461,"line_end":1461,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":362539,"byte_end":362600,"line_start":1462,"line_end":1462,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363453,"byte_end":363467,"line_start":1483,"line_end":1483,"column_start":12,"column_end":26},"name":"remove_current","qualname":"<CursorMut>::remove_current","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the current element from the `LinkedList`.","sig":null,"attributes":[{"value":"/ Removes the current element from the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363043,"byte_end":363097,"line_start":1475,"line_end":1475,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363102,"byte_end":363105,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ The element that was removed is returned, and the cursor is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363110,"byte_end":363173,"line_start":1477,"line_end":1477,"column_start":5,"column_end":68}},{"value":"/ moved to point to the next element in the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363178,"byte_end":363237,"line_start":1478,"line_end":1478,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363242,"byte_end":363245,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ If the cursor is currently pointing to the \"ghost\" non-element then no element","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363250,"byte_end":363332,"line_start":1480,"line_end":1480,"column_start":5,"column_end":87}},{"value":"/ is removed and `None` is returned.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363337,"byte_end":363375,"line_start":1481,"line_end":1481,"column_start":5,"column_end":43}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363380,"byte_end":363441,"line_start":1482,"line_end":1482,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364091,"byte_end":364103,"line_start":1498,"line_end":1498,"column_start":12,"column_end":24},"name":"splice_after","qualname":"<CursorMut>::splice_after","value":"fn (&mut self, list: LinkedList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the elements from the given `LinkedList` after the current one.","sig":null,"attributes":[{"value":"/ Inserts the elements from the given `LinkedList` after the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363792,"byte_end":363867,"line_start":1493,"line_end":1493,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363872,"byte_end":363875,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new elements are","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363880,"byte_end":363962,"line_start":1495,"line_end":1495,"column_start":5,"column_end":87}},{"value":"/ inserted at the start of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":363967,"byte_end":364013,"line_start":1496,"line_end":1496,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364018,"byte_end":364079,"line_start":1497,"line_end":1497,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365060,"byte_end":365073,"line_start":1521,"line_end":1521,"column_start":12,"column_end":25},"name":"splice_before","qualname":"<CursorMut>::splice_before","value":"fn (&mut self, list: LinkedList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the elements from the given `LinkedList` before the current one.","sig":null,"attributes":[{"value":"/ Inserts the elements from the given `LinkedList` before the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364762,"byte_end":364838,"line_start":1516,"line_end":1516,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364843,"byte_end":364846,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new elements are","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364851,"byte_end":364933,"line_start":1518,"line_end":1518,"column_start":5,"column_end":87}},{"value":"/ inserted at the end of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364938,"byte_end":364982,"line_start":1519,"line_end":1519,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":364987,"byte_end":365048,"line_start":1520,"line_end":1520,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366013,"byte_end":366024,"line_start":1543,"line_end":1543,"column_start":12,"column_end":23},"name":"split_after","qualname":"<CursorMut>::split_after","value":"fn (&mut self) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two after the current element. This will return a\n new list consisting of everything after the cursor, with the original\n list retaining everything before.","sig":null,"attributes":[{"value":"/ Splits the list into two after the current element. This will return a","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365608,"byte_end":365682,"line_start":1536,"line_end":1536,"column_start":5,"column_end":79}},{"value":"/ new list consisting of everything after the cursor, with the original","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365687,"byte_end":365760,"line_start":1537,"line_end":1537,"column_start":5,"column_end":78}},{"value":"/ list retaining everything before.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365765,"byte_end":365802,"line_start":1538,"line_end":1538,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365807,"byte_end":365810,"line_start":1539,"line_end":1539,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the entire contents","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365815,"byte_end":365896,"line_start":1540,"line_end":1540,"column_start":5,"column_end":86}},{"value":"/ of the `LinkedList` are moved.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365901,"byte_end":365935,"line_start":1541,"line_end":1541,"column_start":5,"column_end":39}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":365940,"byte_end":366001,"line_start":1542,"line_end":1542,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366785,"byte_end":366797,"line_start":1559,"line_end":1559,"column_start":12,"column_end":24},"name":"split_before","qualname":"<CursorMut>::split_before","value":"fn (&mut self) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two before the current element. This will return a\n new list consisting of everything before the cursor, with the original\n list retaining everything after.","sig":null,"attributes":[{"value":"/ Splits the list into two before the current element. This will return a","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366379,"byte_end":366454,"line_start":1552,"line_end":1552,"column_start":5,"column_end":80}},{"value":"/ new list consisting of everything before the cursor, with the original","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366459,"byte_end":366533,"line_start":1553,"line_end":1553,"column_start":5,"column_end":79}},{"value":"/ list retaining everything after.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366538,"byte_end":366574,"line_start":1554,"line_end":1554,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366579,"byte_end":366582,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the entire contents","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366587,"byte_end":366668,"line_start":1556,"line_end":1556,"column_start":5,"column_end":86}},{"value":"/ of the `LinkedList` are moved.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366673,"byte_end":366707,"line_start":1557,"line_end":1557,"column_start":5,"column_end":39}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366712,"byte_end":366773,"line_start":1558,"line_end":1558,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2200},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":367140,"byte_end":367151,"line_start":1568,"line_end":1568,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::collections::linked_list::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208}],"decl_id":null,"docs":" An iterator produced by calling `drain_filter` on LinkedList.\n","sig":null,"attributes":[{"value":"/ An iterator produced by calling `drain_filter` on LinkedList.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":366981,"byte_end":367046,"line_start":1566,"line_end":1566,"column_start":1,"column_end":66}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":367047,"byte_end":367128,"line_start":1567,"line_end":1567,"column_start":1,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":2328},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"src/liballoc/collections/vec_deque.rs","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2349},{"krate":0,"index":2354},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2424},{"krate":0,"index":2432},{"krate":0,"index":2440},{"krate":0,"index":2446},{"krate":0,"index":2450},{"krate":0,"index":2462},{"krate":0,"index":2465},{"krate":0,"index":2482},{"krate":0,"index":2542},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2551},{"krate":0,"index":2555},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2566},{"krate":0,"index":2569},{"krate":0,"index":2572},{"krate":0,"index":2587},{"krate":0,"index":2598},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2609},{"krate":0,"index":2612},{"krate":0,"index":2623},{"krate":0,"index":2630},{"krate":0,"index":2633},{"krate":0,"index":4663},{"krate":0,"index":4666},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2643},{"krate":0,"index":2646},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":4669},{"krate":0,"index":4673},{"krate":0,"index":4677},{"krate":0,"index":4681},{"krate":0,"index":4689},{"krate":0,"index":4697},{"krate":0,"index":2657},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2667},{"krate":0,"index":2671},{"krate":0,"index":2674},{"krate":0,"index":2678},{"krate":0,"index":2683},{"krate":0,"index":2689},{"krate":0,"index":2695},{"krate":0,"index":2699},{"krate":0,"index":2704},{"krate":0,"index":2707},{"krate":0,"index":2710}],"decl_id":null,"docs":" A double-ended queue implemented with a growable ring buffer.","sig":null,"attributes":[{"value":"! A double-ended queue implemented with a growable ring buffer.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374351,"byte_end":374416,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374417,"byte_end":374420,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This queue has `O(1)` amortized inserts and removals from both ends of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374421,"byte_end":374499,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! container. It also has `O(1)` indexing like a vector. The contained elements","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374500,"byte_end":374580,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! are not required to be copyable, and the queue will be sendable if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374581,"byte_end":374655,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"! contained type is sendable.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374656,"byte_end":374687,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374689,"byte_end":374735,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2374},"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469530,"byte_end":469535,"line_start":15,"line_end":15,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::vec_deque::drain::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2380}],"decl_id":null,"docs":" A draining iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469212,"byte_end":469270,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469271,"byte_end":469274,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469275,"byte_end":469352,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469353,"byte_end":469380,"line_start":10,"line_end":10,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469381,"byte_end":469384,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.VecDeque.html#method.drain","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469385,"byte_end":469433,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469434,"byte_end":469472,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469473,"byte_end":469518,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2419},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376286,"byte_end":376294,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"VecDeque","qualname":"::collections::vec_deque::VecDeque","value":"VecDeque {  }","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423}],"decl_id":null,"docs":" A double-ended queue implemented with a growable ring buffer.","sig":null,"attributes":[{"value":"/ A double-ended queue implemented with a growable ring buffer.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375759,"byte_end":375824,"line_start":42,"line_end":42,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375825,"byte_end":375828,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The \"default\" usage of this type as a queue is to use [`push_back`] to add to","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375829,"byte_end":375910,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ the queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375911,"byte_end":375995,"line_start":45,"line_end":45,"column_start":1,"column_end":85}},{"value":"/ push onto the back in this manner, and iterating over `VecDeque` goes front","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375996,"byte_end":376075,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ to back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376076,"byte_end":376088,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376089,"byte_end":376092,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ [`push_back`]: #method.push_back","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376093,"byte_end":376129,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/ [`pop_front`]: #method.pop_front","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376130,"byte_end":376166,"line_start":50,"line_end":50,"column_start":1,"column_end":37}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376167,"byte_end":376197,"line_start":51,"line_end":51,"column_start":1,"column_end":31}},{"value":"/ [`append`]: #method.append","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376198,"byte_end":376228,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376229,"byte_end":376274,"line_start":53,"line_end":53,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389503,"byte_end":389506,"line_start":469,"line_end":469,"column_start":12,"column_end":15},"name":"new","qualname":"<VecDeque<T>>::new","value":"fn () -> VecDeque<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `VecDeque`.","sig":null,"attributes":[{"value":"/ Creates an empty `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389249,"byte_end":389281,"line_start":459,"line_end":459,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389286,"byte_end":389289,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389294,"byte_end":389308,"line_start":461,"line_end":461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389313,"byte_end":389316,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389321,"byte_end":389328,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389333,"byte_end":389368,"line_start":464,"line_end":464,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389373,"byte_end":389376,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ let vector: VecDeque<u32> = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389381,"byte_end":389429,"line_start":466,"line_end":466,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389434,"byte_end":389441,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389446,"byte_end":389491,"line_start":468,"line_end":468,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389897,"byte_end":389910,"line_start":483,"line_end":483,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<VecDeque<T>>::with_capacity","value":"fn (capacity: usize) -> VecDeque<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `VecDeque` with space for at least `capacity` elements.","sig":null,"attributes":[{"value":"/ Creates an empty `VecDeque` with space for at least `capacity` elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389587,"byte_end":389663,"line_start":473,"line_end":473,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389668,"byte_end":389671,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389676,"byte_end":389690,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389695,"byte_end":389698,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389703,"byte_end":389710,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389715,"byte_end":389750,"line_start":478,"line_end":478,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389755,"byte_end":389758,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ let vector: VecDeque<u32> = VecDeque::with_capacity(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389763,"byte_end":389823,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389828,"byte_end":389835,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389840,"byte_end":389885,"line_start":482,"line_end":482,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390673,"byte_end":390676,"line_start":507,"line_end":507,"column_start":12,"column_end":15},"name":"get","qualname":"<VecDeque<T>>::get","value":"fn (&self, index: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an element in the `VecDeque` by index.","sig":null,"attributes":[{"value":"/ Retrieves an element in the `VecDeque` by index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390231,"byte_end":390283,"line_start":491,"line_end":491,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390288,"byte_end":390291,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390296,"byte_end":390345,"line_start":493,"line_end":493,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390350,"byte_end":390353,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390358,"byte_end":390372,"line_start":495,"line_end":495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390377,"byte_end":390380,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390385,"byte_end":390392,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390397,"byte_end":390432,"line_start":498,"line_end":498,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390437,"byte_end":390440,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390445,"byte_end":390479,"line_start":500,"line_end":500,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390484,"byte_end":390505,"line_start":501,"line_end":501,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390510,"byte_end":390531,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390536,"byte_end":390557,"line_start":503,"line_end":503,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.get(1), Some(&4));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390562,"byte_end":390599,"line_start":504,"line_end":504,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390604,"byte_end":390611,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390616,"byte_end":390661,"line_start":506,"line_end":506,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391432,"byte_end":391439,"line_start":536,"line_end":536,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<VecDeque<T>>::get_mut","value":"fn (&mut self, index: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an element in the `VecDeque` mutably by index.","sig":null,"attributes":[{"value":"/ Retrieves an element in the `VecDeque` mutably by index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390907,"byte_end":390967,"line_start":516,"line_end":516,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390972,"byte_end":390975,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390980,"byte_end":391029,"line_start":518,"line_end":518,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391034,"byte_end":391037,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391042,"byte_end":391056,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391061,"byte_end":391064,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391069,"byte_end":391076,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391081,"byte_end":391116,"line_start":523,"line_end":523,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391121,"byte_end":391124,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391129,"byte_end":391163,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391168,"byte_end":391189,"line_start":526,"line_end":526,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391194,"byte_end":391215,"line_start":527,"line_end":527,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391220,"byte_end":391241,"line_start":528,"line_end":528,"column_start":5,"column_end":26}},{"value":"/ if let Some(elem) = buf.get_mut(1) {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391246,"byte_end":391286,"line_start":529,"line_end":529,"column_start":5,"column_end":45}},{"value":"/     *elem = 7;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391291,"byte_end":391309,"line_start":530,"line_end":530,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391314,"byte_end":391319,"line_start":531,"line_end":531,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391324,"byte_end":391327,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf[1], 7);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391332,"byte_end":391358,"line_start":533,"line_end":533,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391363,"byte_end":391370,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391375,"byte_end":391420,"line_start":535,"line_end":535,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392292,"byte_end":392296,"line_start":569,"line_end":569,"column_start":12,"column_end":16},"name":"swap","qualname":"<VecDeque<T>>::swap","value":"fn (&mut self, i: usize, j: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps elements at indices `i` and `j`.","sig":null,"attributes":[{"value":"/ Swaps elements at indices `i` and `j`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391682,"byte_end":391724,"line_start":545,"line_end":545,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391729,"byte_end":391732,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ `i` and `j` may be equal.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391737,"byte_end":391766,"line_start":547,"line_end":547,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391771,"byte_end":391774,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391779,"byte_end":391828,"line_start":549,"line_end":549,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391833,"byte_end":391836,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391841,"byte_end":391853,"line_start":551,"line_end":551,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391858,"byte_end":391861,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics if either index is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391866,"byte_end":391910,"line_start":553,"line_end":553,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391915,"byte_end":391918,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391923,"byte_end":391937,"line_start":555,"line_end":555,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391942,"byte_end":391945,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391950,"byte_end":391957,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391962,"byte_end":391997,"line_start":558,"line_end":558,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392002,"byte_end":392005,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392010,"byte_end":392044,"line_start":560,"line_end":560,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392049,"byte_end":392070,"line_start":561,"line_end":561,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392075,"byte_end":392096,"line_start":562,"line_end":562,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392101,"byte_end":392122,"line_start":563,"line_end":563,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [3, 4, 5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392127,"byte_end":392158,"line_start":564,"line_end":564,"column_start":5,"column_end":36}},{"value":"/ buf.swap(0, 2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392163,"byte_end":392182,"line_start":565,"line_end":565,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(buf, [5, 4, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392187,"byte_end":392218,"line_start":566,"line_end":566,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392223,"byte_end":392230,"line_start":567,"line_end":567,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392235,"byte_end":392280,"line_start":568,"line_end":568,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392940,"byte_end":392948,"line_start":590,"line_end":590,"column_start":12,"column_end":20},"name":"capacity","qualname":"<VecDeque<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the `VecDeque` can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the `VecDeque` can hold without","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392568,"byte_end":392634,"line_start":577,"line_end":577,"column_start":5,"column_end":71}},{"value":"/ reallocating.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392639,"byte_end":392656,"line_start":578,"line_end":578,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392661,"byte_end":392664,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392669,"byte_end":392683,"line_start":580,"line_end":580,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392688,"byte_end":392691,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392696,"byte_end":392703,"line_start":582,"line_end":582,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392708,"byte_end":392743,"line_start":583,"line_end":583,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392748,"byte_end":392751,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ let buf: VecDeque<i32> = VecDeque::with_capacity(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392756,"byte_end":392813,"line_start":585,"line_end":585,"column_start":5,"column_end":62}},{"value":"/ assert!(buf.capacity() >= 10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392818,"byte_end":392852,"line_start":586,"line_end":586,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392857,"byte_end":392864,"line_start":587,"line_end":587,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392869,"byte_end":392878,"line_start":588,"line_end":588,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392883,"byte_end":392928,"line_start":589,"line_end":589,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2490},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393842,"byte_end":393855,"line_start":617,"line_end":617,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<VecDeque<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n given `VecDeque`. Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393001,"byte_end":393095,"line_start":594,"line_end":594,"column_start":5,"column_end":99}},{"value":"/ given `VecDeque`. Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393100,"byte_end":393173,"line_start":595,"line_end":595,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393178,"byte_end":393181,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it requests. Therefore","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393186,"byte_end":393276,"line_start":597,"line_end":597,"column_start":5,"column_end":95}},{"value":"/ capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393281,"byte_end":393370,"line_start":598,"line_end":598,"column_start":5,"column_end":94}},{"value":"/ insertions are expected.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393375,"byte_end":393403,"line_start":599,"line_end":599,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393408,"byte_end":393411,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393416,"byte_end":393428,"line_start":601,"line_end":601,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393433,"byte_end":393436,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393441,"byte_end":393490,"line_start":603,"line_end":603,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393495,"byte_end":393498,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393503,"byte_end":393517,"line_start":605,"line_end":605,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393522,"byte_end":393525,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393530,"byte_end":393537,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393542,"byte_end":393577,"line_start":608,"line_end":608,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393582,"byte_end":393585,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<i32> = vec![1].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393590,"byte_end":393653,"line_start":610,"line_end":610,"column_start":5,"column_end":68}},{"value":"/ buf.reserve_exact(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393658,"byte_end":393684,"line_start":611,"line_end":611,"column_start":5,"column_end":31}},{"value":"/ assert!(buf.capacity() >= 11);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393689,"byte_end":393723,"line_start":612,"line_end":612,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393728,"byte_end":393735,"line_start":613,"line_end":613,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393740,"byte_end":393743,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393748,"byte_end":393780,"line_start":615,"line_end":615,"column_start":5,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393785,"byte_end":393830,"line_start":616,"line_end":616,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394501,"byte_end":394508,"line_start":638,"line_end":638,"column_start":12,"column_end":19},"name":"reserve","qualname":"<VecDeque<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted in the given\n `VecDeque`. The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted in the given","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393933,"byte_end":394022,"line_start":621,"line_end":621,"column_start":5,"column_end":94}},{"value":"/ `VecDeque`. The collection may reserve more space to avoid frequent reallocations.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394027,"byte_end":394113,"line_start":622,"line_end":622,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394118,"byte_end":394121,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394126,"byte_end":394138,"line_start":624,"line_end":624,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394143,"byte_end":394146,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394151,"byte_end":394200,"line_start":626,"line_end":626,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394205,"byte_end":394208,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394213,"byte_end":394227,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394232,"byte_end":394235,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394240,"byte_end":394247,"line_start":630,"line_end":630,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394252,"byte_end":394287,"line_start":631,"line_end":631,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394292,"byte_end":394295,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<i32> = vec![1].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394300,"byte_end":394363,"line_start":633,"line_end":633,"column_start":5,"column_end":68}},{"value":"/ buf.reserve(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394368,"byte_end":394388,"line_start":634,"line_end":634,"column_start":5,"column_end":25}},{"value":"/ assert!(buf.capacity() >= 11);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394393,"byte_end":394427,"line_start":635,"line_end":635,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394432,"byte_end":394439,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394444,"byte_end":394489,"line_start":637,"line_end":637,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396531,"byte_end":396548,"line_start":691,"line_end":691,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<VecDeque<T>>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395009,"byte_end":395093,"line_start":654,"line_end":654,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395098,"byte_end":395172,"line_start":655,"line_end":655,"column_start":5,"column_end":79}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395177,"byte_end":395249,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395254,"byte_end":395309,"line_start":657,"line_end":657,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395314,"byte_end":395317,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395322,"byte_end":395392,"line_start":659,"line_end":659,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395397,"byte_end":395469,"line_start":660,"line_end":660,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395474,"byte_end":395538,"line_start":661,"line_end":661,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395543,"byte_end":395546,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395551,"byte_end":395563,"line_start":663,"line_end":663,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395568,"byte_end":395571,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395576,"byte_end":395656,"line_start":665,"line_end":665,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395661,"byte_end":395677,"line_start":666,"line_end":666,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395682,"byte_end":395685,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395690,"byte_end":395704,"line_start":668,"line_end":668,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395709,"byte_end":395712,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395717,"byte_end":395724,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395729,"byte_end":395757,"line_start":671,"line_end":671,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395762,"byte_end":395804,"line_start":672,"line_end":672,"column_start":5,"column_end":47}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395809,"byte_end":395844,"line_start":673,"line_end":673,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395849,"byte_end":395852,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395857,"byte_end":395934,"line_start":675,"line_end":675,"column_start":5,"column_end":82}},{"value":"/     let mut output = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395939,"byte_end":395980,"line_start":676,"line_end":676,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395985,"byte_end":395988,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":395993,"byte_end":396047,"line_start":678,"line_end":678,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve_exact(data.len())?;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396052,"byte_end":396098,"line_start":679,"line_end":679,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396103,"byte_end":396106,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396111,"byte_end":396182,"line_start":681,"line_end":681,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396187,"byte_end":396233,"line_start":682,"line_end":682,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396238,"byte_end":396281,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396286,"byte_end":396298,"line_start":684,"line_end":684,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396303,"byte_end":396306,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396311,"byte_end":396329,"line_start":686,"line_end":686,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396334,"byte_end":396339,"line_start":687,"line_end":687,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396344,"byte_end":396429,"line_start":688,"line_end":688,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396434,"byte_end":396441,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396446,"byte_end":396519,"line_start":690,"line_end":690,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398004,"byte_end":398015,"line_start":729,"line_end":729,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<VecDeque<T>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `VecDeque<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396660,"byte_end":396744,"line_start":695,"line_end":695,"column_start":5,"column_end":89}},{"value":"/ in the given `VecDeque<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396749,"byte_end":396827,"line_start":696,"line_end":696,"column_start":5,"column_end":83}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396832,"byte_end":396901,"line_start":697,"line_end":697,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396906,"byte_end":396977,"line_start":698,"line_end":698,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396982,"byte_end":397017,"line_start":699,"line_end":699,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397022,"byte_end":397025,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397030,"byte_end":397042,"line_start":701,"line_end":701,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397047,"byte_end":397050,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397055,"byte_end":397135,"line_start":703,"line_end":703,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397140,"byte_end":397156,"line_start":704,"line_end":704,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397161,"byte_end":397164,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397169,"byte_end":397183,"line_start":706,"line_end":706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397188,"byte_end":397191,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397196,"byte_end":397203,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397208,"byte_end":397236,"line_start":709,"line_end":709,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397241,"byte_end":397283,"line_start":710,"line_end":710,"column_start":5,"column_end":47}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397288,"byte_end":397323,"line_start":711,"line_end":711,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397328,"byte_end":397331,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397336,"byte_end":397413,"line_start":713,"line_end":713,"column_start":5,"column_end":82}},{"value":"/     let mut output = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397418,"byte_end":397459,"line_start":714,"line_end":714,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397464,"byte_end":397467,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397472,"byte_end":397526,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397531,"byte_end":397571,"line_start":717,"line_end":717,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397576,"byte_end":397579,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397584,"byte_end":397655,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397660,"byte_end":397706,"line_start":720,"line_end":720,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397711,"byte_end":397754,"line_start":721,"line_end":721,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397759,"byte_end":397771,"line_start":722,"line_end":722,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397776,"byte_end":397779,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397784,"byte_end":397802,"line_start":724,"line_end":724,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397807,"byte_end":397812,"line_start":725,"line_end":725,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397817,"byte_end":397902,"line_start":726,"line_end":726,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397907,"byte_end":397914,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397919,"byte_end":397992,"line_start":728,"line_end":728,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399179,"byte_end":399192,"line_start":763,"line_end":763,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<VecDeque<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `VecDeque` as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `VecDeque` as much as possible.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398581,"byte_end":398644,"line_start":746,"line_end":746,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398649,"byte_end":398652,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ It will drop down as close as possible to the length but the allocator may still inform the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398657,"byte_end":398752,"line_start":748,"line_end":748,"column_start":5,"column_end":100}},{"value":"/ `VecDeque` that there is space for a few more elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398757,"byte_end":398816,"line_start":749,"line_end":749,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398821,"byte_end":398824,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398829,"byte_end":398843,"line_start":751,"line_end":751,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398848,"byte_end":398851,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398856,"byte_end":398863,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398868,"byte_end":398903,"line_start":754,"line_end":754,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398908,"byte_end":398911,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::with_capacity(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398916,"byte_end":398962,"line_start":756,"line_end":756,"column_start":5,"column_end":51}},{"value":"/ buf.extend(0..4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398967,"byte_end":398988,"line_start":757,"line_end":757,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.capacity(), 15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398993,"byte_end":399028,"line_start":758,"line_end":758,"column_start":5,"column_end":40}},{"value":"/ buf.shrink_to_fit();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399033,"byte_end":399057,"line_start":759,"line_end":759,"column_start":5,"column_end":29}},{"value":"/ assert!(buf.capacity() >= 4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399062,"byte_end":399095,"line_start":760,"line_end":760,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399100,"byte_end":399107,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399112,"byte_end":399167,"line_start":762,"line_end":762,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399989,"byte_end":399998,"line_start":790,"line_end":790,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<VecDeque<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `VecDeque` with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `VecDeque` with a lower bound.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399244,"byte_end":399306,"line_start":767,"line_end":767,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399311,"byte_end":399314,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399319,"byte_end":399384,"line_start":769,"line_end":769,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399389,"byte_end":399416,"line_start":770,"line_end":770,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399421,"byte_end":399424,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399429,"byte_end":399492,"line_start":772,"line_end":772,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399497,"byte_end":399518,"line_start":773,"line_end":773,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399523,"byte_end":399526,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399531,"byte_end":399545,"line_start":775,"line_end":775,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399550,"byte_end":399553,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399558,"byte_end":399565,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399570,"byte_end":399596,"line_start":778,"line_end":778,"column_start":5,"column_end":31}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399601,"byte_end":399636,"line_start":779,"line_end":779,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399641,"byte_end":399644,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::with_capacity(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399649,"byte_end":399695,"line_start":781,"line_end":781,"column_start":5,"column_end":51}},{"value":"/ buf.extend(0..4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399700,"byte_end":399721,"line_start":782,"line_end":782,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.capacity(), 15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399726,"byte_end":399761,"line_start":783,"line_end":783,"column_start":5,"column_end":40}},{"value":"/ buf.shrink_to(6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399766,"byte_end":399787,"line_start":784,"line_end":784,"column_start":5,"column_end":26}},{"value":"/ assert!(buf.capacity() >= 6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399792,"byte_end":399825,"line_start":785,"line_end":785,"column_start":5,"column_end":38}},{"value":"/ buf.shrink_to(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399830,"byte_end":399851,"line_start":786,"line_end":786,"column_start":5,"column_end":26}},{"value":"/ assert!(buf.capacity() >= 4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399856,"byte_end":399889,"line_start":787,"line_end":787,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399894,"byte_end":399901,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399906,"byte_end":399977,"line_start":789,"line_end":789,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403399,"byte_end":403407,"line_start":873,"line_end":873,"column_start":12,"column_end":20},"name":"truncate","qualname":"<VecDeque<T>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the `VecDeque`, keeping the first `len` elements and dropping\n the rest.","sig":null,"attributes":[{"value":"/ Shortens the `VecDeque`, keeping the first `len` elements and dropping","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402816,"byte_end":402890,"line_start":853,"line_end":853,"column_start":5,"column_end":79}},{"value":"/ the rest.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402895,"byte_end":402908,"line_start":854,"line_end":854,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402913,"byte_end":402916,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the `VecDeque`'s current length, this has no","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402921,"byte_end":402994,"line_start":856,"line_end":856,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402999,"byte_end":403010,"line_start":857,"line_end":857,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403015,"byte_end":403018,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403023,"byte_end":403037,"line_start":859,"line_end":859,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403042,"byte_end":403045,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403050,"byte_end":403057,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403062,"byte_end":403097,"line_start":862,"line_end":862,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403102,"byte_end":403105,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403110,"byte_end":403144,"line_start":864,"line_end":864,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403149,"byte_end":403170,"line_start":865,"line_end":865,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403175,"byte_end":403197,"line_start":866,"line_end":866,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403202,"byte_end":403224,"line_start":867,"line_end":867,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403229,"byte_end":403262,"line_start":868,"line_end":868,"column_start":5,"column_end":38}},{"value":"/ buf.truncate(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403267,"byte_end":403287,"line_start":869,"line_end":869,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(buf, [5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403292,"byte_end":403317,"line_start":870,"line_end":870,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403322,"byte_end":403329,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403334,"byte_end":403387,"line_start":872,"line_end":872,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405572,"byte_end":405576,"line_start":933,"line_end":933,"column_start":12,"column_end":16},"name":"iter","qualname":"<VecDeque<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405132,"byte_end":405169,"line_start":917,"line_end":917,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405174,"byte_end":405177,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405182,"byte_end":405196,"line_start":919,"line_end":919,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405201,"byte_end":405204,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405209,"byte_end":405216,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405221,"byte_end":405256,"line_start":922,"line_end":922,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405261,"byte_end":405264,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405269,"byte_end":405303,"line_start":924,"line_end":924,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405308,"byte_end":405329,"line_start":925,"line_end":925,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405334,"byte_end":405355,"line_start":926,"line_end":926,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405360,"byte_end":405381,"line_start":927,"line_end":927,"column_start":5,"column_end":26}},{"value":"/ let b: &[_] = &[&5, &3, &4];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405386,"byte_end":405418,"line_start":928,"line_end":928,"column_start":5,"column_end":37}},{"value":"/ let c: Vec<&i32> = buf.iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405423,"byte_end":405467,"line_start":929,"line_end":929,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(&c[..], b);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405472,"byte_end":405498,"line_start":930,"line_end":930,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405503,"byte_end":405510,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405515,"byte_end":405560,"line_start":932,"line_end":932,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406253,"byte_end":406261,"line_start":955,"line_end":955,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<VecDeque<T>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator that returns mutable references.","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator that returns mutable references.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405703,"byte_end":405772,"line_start":937,"line_end":937,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405777,"byte_end":405780,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405785,"byte_end":405799,"line_start":939,"line_end":939,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405804,"byte_end":405807,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405812,"byte_end":405819,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405824,"byte_end":405859,"line_start":942,"line_end":942,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405864,"byte_end":405867,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405872,"byte_end":405906,"line_start":944,"line_end":944,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405911,"byte_end":405932,"line_start":945,"line_end":945,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405937,"byte_end":405958,"line_start":946,"line_end":946,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405963,"byte_end":405984,"line_start":947,"line_end":947,"column_start":5,"column_end":26}},{"value":"/ for num in buf.iter_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405989,"byte_end":406020,"line_start":948,"line_end":948,"column_start":5,"column_end":36}},{"value":"/     *num = *num - 2;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406025,"byte_end":406049,"line_start":949,"line_end":949,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406054,"byte_end":406059,"line_start":950,"line_end":950,"column_start":5,"column_end":10}},{"value":"/ let b: &[_] = &[&mut 3, &mut 1, &mut 2];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406064,"byte_end":406108,"line_start":951,"line_end":951,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406113,"byte_end":406179,"line_start":952,"line_end":952,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406184,"byte_end":406191,"line_start":953,"line_end":953,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406196,"byte_end":406241,"line_start":954,"line_end":954,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407049,"byte_end":407058,"line_start":982,"line_end":982,"column_start":12,"column_end":21},"name":"as_slices","qualname":"<VecDeque<T>>::as_slices","value":"fn (&self) -> (&[T], &[T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of slices which contain, in order, the contents of the\n `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns a pair of slices which contain, in order, the contents of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406402,"byte_end":406475,"line_start":959,"line_end":959,"column_start":5,"column_end":78}},{"value":"/ `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406480,"byte_end":406495,"line_start":960,"line_end":960,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406500,"byte_end":406503,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406508,"byte_end":406522,"line_start":962,"line_end":962,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406527,"byte_end":406530,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406535,"byte_end":406542,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406547,"byte_end":406582,"line_start":965,"line_end":965,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406587,"byte_end":406590,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ let mut vector = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406595,"byte_end":406632,"line_start":967,"line_end":967,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406637,"byte_end":406640,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406645,"byte_end":406669,"line_start":969,"line_end":969,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406674,"byte_end":406698,"line_start":970,"line_end":970,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406703,"byte_end":406727,"line_start":971,"line_end":971,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406732,"byte_end":406735,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406740,"byte_end":406802,"line_start":973,"line_end":973,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406807,"byte_end":406810,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ vector.push_front(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406815,"byte_end":406841,"line_start":975,"line_end":975,"column_start":5,"column_end":31}},{"value":"/ vector.push_front(9);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406846,"byte_end":406871,"line_start":976,"line_end":976,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406876,"byte_end":406879,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406884,"byte_end":406951,"line_start":978,"line_end":978,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406956,"byte_end":406963,"line_start":979,"line_end":979,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406968,"byte_end":406977,"line_start":980,"line_end":980,"column_start":5,"column_end":14}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":406982,"byte_end":407037,"line_start":981,"line_end":981,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407857,"byte_end":407870,"line_start":1011,"line_end":1011,"column_start":12,"column_end":25},"name":"as_mut_slices","qualname":"<VecDeque<T>>::as_mut_slices","value":"fn (&mut self) -> (&mut [T], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of slices which contain, in order, the contents of the\n `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns a pair of slices which contain, in order, the contents of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407231,"byte_end":407304,"line_start":989,"line_end":989,"column_start":5,"column_end":78}},{"value":"/ `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407309,"byte_end":407324,"line_start":990,"line_end":990,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407329,"byte_end":407332,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407337,"byte_end":407351,"line_start":992,"line_end":992,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407356,"byte_end":407359,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407364,"byte_end":407371,"line_start":994,"line_end":994,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407376,"byte_end":407411,"line_start":995,"line_end":995,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407416,"byte_end":407419,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ let mut vector = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407424,"byte_end":407461,"line_start":997,"line_end":997,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407466,"byte_end":407469,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407474,"byte_end":407498,"line_start":999,"line_end":999,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407503,"byte_end":407527,"line_start":1000,"line_end":1000,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407532,"byte_end":407535,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ vector.push_front(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407540,"byte_end":407566,"line_start":1002,"line_end":1002,"column_start":5,"column_end":31}},{"value":"/ vector.push_front(9);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407571,"byte_end":407596,"line_start":1003,"line_end":1003,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407601,"byte_end":407604,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ vector.as_mut_slices().0[0] = 42;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407609,"byte_end":407646,"line_start":1005,"line_end":1005,"column_start":5,"column_end":42}},{"value":"/ vector.as_mut_slices().1[0] = 24;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407651,"byte_end":407688,"line_start":1006,"line_end":1006,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407693,"byte_end":407759,"line_start":1007,"line_end":1007,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407764,"byte_end":407771,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407776,"byte_end":407785,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":407790,"byte_end":407845,"line_start":1010,"line_end":1010,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408464,"byte_end":408467,"line_start":1033,"line_end":1033,"column_start":12,"column_end":15},"name":"len","qualname":"<VecDeque<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408117,"byte_end":408170,"line_start":1020,"line_end":1020,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408175,"byte_end":408178,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408183,"byte_end":408197,"line_start":1022,"line_end":1022,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408202,"byte_end":408205,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408210,"byte_end":408217,"line_start":1024,"line_end":1024,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408222,"byte_end":408257,"line_start":1025,"line_end":1025,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408262,"byte_end":408265,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408270,"byte_end":408302,"line_start":1027,"line_end":1027,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408307,"byte_end":408334,"line_start":1028,"line_end":1028,"column_start":5,"column_end":32}},{"value":"/ v.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408339,"byte_end":408358,"line_start":1029,"line_end":1029,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408363,"byte_end":408390,"line_start":1030,"line_end":1030,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408395,"byte_end":408402,"line_start":1031,"line_end":1031,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408407,"byte_end":408452,"line_start":1032,"line_end":1032,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408885,"byte_end":408893,"line_start":1050,"line_end":1050,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VecDeque<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Returns `true` if the `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408545,"byte_end":408591,"line_start":1037,"line_end":1037,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408596,"byte_end":408599,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408604,"byte_end":408618,"line_start":1039,"line_end":1039,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408623,"byte_end":408626,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408631,"byte_end":408638,"line_start":1041,"line_end":1041,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408643,"byte_end":408678,"line_start":1042,"line_end":1042,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408683,"byte_end":408686,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408691,"byte_end":408723,"line_start":1044,"line_end":1044,"column_start":5,"column_end":37}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408728,"byte_end":408754,"line_start":1045,"line_end":1045,"column_start":5,"column_end":31}},{"value":"/ v.push_front(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408759,"byte_end":408779,"line_start":1046,"line_end":1046,"column_start":5,"column_end":25}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408784,"byte_end":408811,"line_start":1047,"line_end":1047,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408816,"byte_end":408823,"line_start":1048,"line_end":1048,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408828,"byte_end":408873,"line_start":1049,"line_end":1049,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":410042,"byte_end":410047,"line_start":1085,"line_end":1085,"column_start":12,"column_end":17},"name":"drain","qualname":"<VecDeque<T>>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n `VecDeque` and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":408953,"byte_end":409024,"line_start":1054,"line_end":1054,"column_start":5,"column_end":76}},{"value":"/ `VecDeque` and yields the removed items.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409029,"byte_end":409073,"line_start":1055,"line_end":1055,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409078,"byte_end":409081,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ Note 1: The element range is removed even if the iterator is not","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409086,"byte_end":409154,"line_start":1057,"line_end":1057,"column_start":5,"column_end":73}},{"value":"/ consumed until the end.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409159,"byte_end":409186,"line_start":1058,"line_end":1058,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409191,"byte_end":409194,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ Note 2: It is unspecified how many elements are removed from the deque,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409199,"byte_end":409274,"line_start":1060,"line_end":1060,"column_start":5,"column_end":80}},{"value":"/ if the `Drain` value is not dropped, but the borrow it holds expires","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409279,"byte_end":409351,"line_start":1061,"line_end":1061,"column_start":5,"column_end":77}},{"value":"/ (e.g., due to `mem::forget`).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409356,"byte_end":409389,"line_start":1062,"line_end":1062,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409394,"byte_end":409397,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409402,"byte_end":409414,"line_start":1064,"line_end":1064,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409419,"byte_end":409422,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409427,"byte_end":409495,"line_start":1066,"line_end":1066,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409500,"byte_end":409559,"line_start":1067,"line_end":1067,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409564,"byte_end":409567,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409572,"byte_end":409586,"line_start":1069,"line_end":1069,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409591,"byte_end":409594,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409599,"byte_end":409606,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409611,"byte_end":409646,"line_start":1072,"line_end":1072,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409651,"byte_end":409654,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409659,"byte_end":409724,"line_start":1074,"line_end":1074,"column_start":5,"column_end":70}},{"value":"/ let drained = v.drain(2..).collect::<VecDeque<_>>();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409729,"byte_end":409785,"line_start":1075,"line_end":1075,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(drained, [3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409790,"byte_end":409819,"line_start":1076,"line_end":1076,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(v, [1, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409824,"byte_end":409850,"line_start":1077,"line_end":1077,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409855,"byte_end":409858,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ // A full range clears all contents","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409863,"byte_end":409902,"line_start":1079,"line_end":1079,"column_start":5,"column_end":44}},{"value":"/ v.drain(..);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409907,"byte_end":409923,"line_start":1080,"line_end":1080,"column_start":5,"column_end":21}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409928,"byte_end":409954,"line_start":1081,"line_end":1081,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409959,"byte_end":409966,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409971,"byte_end":409980,"line_start":1083,"line_end":1083,"column_start":5,"column_end":14}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":409985,"byte_end":410030,"line_start":1084,"line_end":1084,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413018,"byte_end":413023,"line_start":1166,"line_end":1166,"column_start":12,"column_end":17},"name":"clear","qualname":"<VecDeque<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the `VecDeque`, removing all values.","sig":null,"attributes":[{"value":"/ Clears the `VecDeque`, removing all values.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412677,"byte_end":412724,"line_start":1152,"line_end":1152,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412729,"byte_end":412732,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412737,"byte_end":412751,"line_start":1154,"line_end":1154,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412756,"byte_end":412759,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412764,"byte_end":412771,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412776,"byte_end":412811,"line_start":1157,"line_end":1157,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412816,"byte_end":412819,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412824,"byte_end":412856,"line_start":1159,"line_end":1159,"column_start":5,"column_end":37}},{"value":"/ v.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412861,"byte_end":412880,"line_start":1160,"line_end":1160,"column_start":5,"column_end":24}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412885,"byte_end":412899,"line_start":1161,"line_end":1161,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412904,"byte_end":412930,"line_start":1162,"line_end":1162,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412935,"byte_end":412942,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412947,"byte_end":412992,"line_start":1164,"line_end":1164,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":412997,"byte_end":413006,"line_start":1165,"line_end":1165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413574,"byte_end":413582,"line_start":1187,"line_end":1187,"column_start":12,"column_end":20},"name":"contains","qualname":"<VecDeque<T>>::contains","value":"fn (&self, x: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `VecDeque` contains an element equal to the\n given value.","sig":null,"attributes":[{"value":"/ Returns `true` if the `VecDeque` contains an element equal to the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413074,"byte_end":413143,"line_start":1170,"line_end":1170,"column_start":5,"column_end":74}},{"value":"/ given value.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413148,"byte_end":413164,"line_start":1171,"line_end":1171,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413169,"byte_end":413172,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413177,"byte_end":413191,"line_start":1173,"line_end":1173,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413196,"byte_end":413199,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413204,"byte_end":413211,"line_start":1175,"line_end":1175,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413216,"byte_end":413251,"line_start":1176,"line_end":1176,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413256,"byte_end":413259,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ let mut vector: VecDeque<u32> = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413264,"byte_end":413316,"line_start":1178,"line_end":1178,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413321,"byte_end":413324,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413329,"byte_end":413353,"line_start":1180,"line_end":1180,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413358,"byte_end":413382,"line_start":1181,"line_end":1181,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413387,"byte_end":413390,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.contains(&1), true);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413395,"byte_end":413437,"line_start":1183,"line_end":1183,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vector.contains(&10), false);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413442,"byte_end":413486,"line_start":1184,"line_end":1184,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413491,"byte_end":413498,"line_start":1185,"line_end":1185,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_deque_contains\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413503,"byte_end":413562,"line_start":1186,"line_end":1186,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414167,"byte_end":414172,"line_start":1211,"line_end":1211,"column_start":12,"column_end":17},"name":"front","qualname":"<VecDeque<T>>::front","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the front element, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the front element, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413735,"byte_end":413812,"line_start":1195,"line_end":1195,"column_start":5,"column_end":82}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413817,"byte_end":413827,"line_start":1196,"line_end":1196,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413832,"byte_end":413835,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413840,"byte_end":413854,"line_start":1198,"line_end":1198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413859,"byte_end":413862,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413867,"byte_end":413874,"line_start":1200,"line_end":1200,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413879,"byte_end":413914,"line_start":1201,"line_end":1201,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413919,"byte_end":413922,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413927,"byte_end":413959,"line_start":1203,"line_end":1203,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.front(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413964,"byte_end":413996,"line_start":1204,"line_end":1204,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414001,"byte_end":414004,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414009,"byte_end":414028,"line_start":1206,"line_end":1206,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414033,"byte_end":414052,"line_start":1207,"line_end":1207,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414057,"byte_end":414093,"line_start":1208,"line_end":1208,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414098,"byte_end":414105,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414110,"byte_end":414155,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414807,"byte_end":414816,"line_start":1235,"line_end":1235,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<VecDeque<T>>::front_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the front element, or `None` if the\n `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the front element, or `None` if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414268,"byte_end":414339,"line_start":1215,"line_end":1215,"column_start":5,"column_end":76}},{"value":"/ `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414344,"byte_end":414368,"line_start":1216,"line_end":1216,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414373,"byte_end":414376,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414381,"byte_end":414395,"line_start":1218,"line_end":1218,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414400,"byte_end":414403,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414408,"byte_end":414415,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414420,"byte_end":414455,"line_start":1221,"line_end":1221,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414460,"byte_end":414463,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414468,"byte_end":414500,"line_start":1223,"line_end":1223,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.front_mut(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414505,"byte_end":414541,"line_start":1224,"line_end":1224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414546,"byte_end":414549,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414554,"byte_end":414573,"line_start":1226,"line_end":1226,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414578,"byte_end":414597,"line_start":1227,"line_end":1227,"column_start":5,"column_end":24}},{"value":"/ match d.front_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414602,"byte_end":414627,"line_start":1228,"line_end":1228,"column_start":5,"column_end":30}},{"value":"/     Some(x) => *x = 9,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414632,"byte_end":414658,"line_start":1229,"line_end":1229,"column_start":5,"column_end":31}},{"value":"/     None => (),","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414663,"byte_end":414682,"line_start":1230,"line_end":1230,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414687,"byte_end":414692,"line_start":1231,"line_end":1231,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(d.front(), Some(&9));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414697,"byte_end":414733,"line_start":1232,"line_end":1232,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414738,"byte_end":414745,"line_start":1233,"line_end":1233,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414750,"byte_end":414795,"line_start":1234,"line_end":1234,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415353,"byte_end":415357,"line_start":1255,"line_end":1255,"column_start":12,"column_end":16},"name":"back","qualname":"<VecDeque<T>>::back","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the back element, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the back element, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414924,"byte_end":415000,"line_start":1239,"line_end":1239,"column_start":5,"column_end":81}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415005,"byte_end":415015,"line_start":1240,"line_end":1240,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415020,"byte_end":415023,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415028,"byte_end":415042,"line_start":1242,"line_end":1242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415047,"byte_end":415050,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415055,"byte_end":415062,"line_start":1244,"line_end":1244,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415067,"byte_end":415102,"line_start":1245,"line_end":1245,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415107,"byte_end":415110,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415115,"byte_end":415147,"line_start":1247,"line_end":1247,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415152,"byte_end":415183,"line_start":1248,"line_end":1248,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415188,"byte_end":415191,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415196,"byte_end":415215,"line_start":1250,"line_end":1250,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415220,"byte_end":415239,"line_start":1251,"line_end":1251,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.back(), Some(&2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415244,"byte_end":415279,"line_start":1252,"line_end":1252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415284,"byte_end":415291,"line_start":1253,"line_end":1253,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415296,"byte_end":415341,"line_start":1254,"line_end":1254,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415997,"byte_end":416005,"line_start":1279,"line_end":1279,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<VecDeque<T>>::back_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the back element, or `None` if the\n `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the back element, or `None` if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415466,"byte_end":415536,"line_start":1259,"line_end":1259,"column_start":5,"column_end":75}},{"value":"/ `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415541,"byte_end":415565,"line_start":1260,"line_end":1260,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415570,"byte_end":415573,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415578,"byte_end":415592,"line_start":1262,"line_end":1262,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415597,"byte_end":415600,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415605,"byte_end":415612,"line_start":1264,"line_end":1264,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415617,"byte_end":415652,"line_start":1265,"line_end":1265,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415657,"byte_end":415660,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415665,"byte_end":415697,"line_start":1267,"line_end":1267,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415702,"byte_end":415733,"line_start":1268,"line_end":1268,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415738,"byte_end":415741,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415746,"byte_end":415765,"line_start":1270,"line_end":1270,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415770,"byte_end":415789,"line_start":1271,"line_end":1271,"column_start":5,"column_end":24}},{"value":"/ match d.back_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415794,"byte_end":415818,"line_start":1272,"line_end":1272,"column_start":5,"column_end":29}},{"value":"/     Some(x) => *x = 9,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415823,"byte_end":415849,"line_start":1273,"line_end":1273,"column_start":5,"column_end":31}},{"value":"/     None => (),","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415854,"byte_end":415873,"line_start":1274,"line_end":1274,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415878,"byte_end":415883,"line_start":1275,"line_end":1275,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(d.back(), Some(&9));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415888,"byte_end":415923,"line_start":1276,"line_end":1276,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415928,"byte_end":415935,"line_start":1277,"line_end":1277,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":415940,"byte_end":415985,"line_start":1278,"line_end":1278,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416631,"byte_end":416640,"line_start":1301,"line_end":1301,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<VecDeque<T>>::pop_front","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element and returns it, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Removes the first element and returns it, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416149,"byte_end":416225,"line_start":1284,"line_end":1284,"column_start":5,"column_end":81}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416230,"byte_end":416240,"line_start":1285,"line_end":1285,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416245,"byte_end":416248,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416253,"byte_end":416267,"line_start":1287,"line_end":1287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416272,"byte_end":416275,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416280,"byte_end":416287,"line_start":1289,"line_end":1289,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416292,"byte_end":416327,"line_start":1290,"line_end":1290,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416332,"byte_end":416335,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416340,"byte_end":416372,"line_start":1292,"line_end":1292,"column_start":5,"column_end":37}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416377,"byte_end":416396,"line_start":1293,"line_end":1293,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416401,"byte_end":416420,"line_start":1294,"line_end":1294,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416425,"byte_end":416428,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(d.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416433,"byte_end":416472,"line_start":1296,"line_end":1296,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), Some(2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416477,"byte_end":416516,"line_start":1297,"line_end":1297,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416521,"byte_end":416557,"line_start":1298,"line_end":1298,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416562,"byte_end":416569,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416574,"byte_end":416619,"line_start":1300,"line_end":1300,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417335,"byte_end":417343,"line_start":1326,"line_end":1326,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<VecDeque<T>>::pop_back","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from the `VecDeque` and returns it, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from the `VecDeque` and returns it, or `None` if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416890,"byte_end":416967,"line_start":1311,"line_end":1311,"column_start":5,"column_end":82}},{"value":"/ it is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416972,"byte_end":416988,"line_start":1312,"line_end":1312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":416993,"byte_end":416996,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417001,"byte_end":417015,"line_start":1314,"line_end":1314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417020,"byte_end":417023,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417028,"byte_end":417035,"line_start":1316,"line_end":1316,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417040,"byte_end":417075,"line_start":1317,"line_end":1317,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417080,"byte_end":417083,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417088,"byte_end":417122,"line_start":1319,"line_end":1319,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.pop_back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417127,"byte_end":417164,"line_start":1320,"line_end":1320,"column_start":5,"column_end":42}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417169,"byte_end":417190,"line_start":1321,"line_end":1321,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417195,"byte_end":417216,"line_start":1322,"line_end":1322,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.pop_back(), Some(3));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417221,"byte_end":417261,"line_start":1323,"line_end":1323,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417266,"byte_end":417273,"line_start":1324,"line_end":1324,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417278,"byte_end":417323,"line_start":1325,"line_end":1325,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417932,"byte_end":417942,"line_start":1349,"line_end":1349,"column_start":12,"column_end":22},"name":"push_front","qualname":"<VecDeque<T>>::push_front","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Prepends an element to the `VecDeque`.","sig":null,"attributes":[{"value":"/ Prepends an element to the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417593,"byte_end":417635,"line_start":1336,"line_end":1336,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417640,"byte_end":417643,"line_start":1337,"line_end":1337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417648,"byte_end":417662,"line_start":1338,"line_end":1338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417667,"byte_end":417670,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417675,"byte_end":417682,"line_start":1340,"line_end":1340,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417687,"byte_end":417722,"line_start":1341,"line_end":1341,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417727,"byte_end":417730,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417735,"byte_end":417767,"line_start":1343,"line_end":1343,"column_start":5,"column_end":37}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417772,"byte_end":417792,"line_start":1344,"line_end":1344,"column_start":5,"column_end":25}},{"value":"/ d.push_front(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417797,"byte_end":417817,"line_start":1345,"line_end":1345,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(d.front(), Some(&2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417822,"byte_end":417858,"line_start":1346,"line_end":1346,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417863,"byte_end":417870,"line_start":1347,"line_end":1347,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":417875,"byte_end":417920,"line_start":1348,"line_end":1348,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418520,"byte_end":418529,"line_start":1372,"line_end":1372,"column_start":12,"column_end":21},"name":"push_back","qualname":"<VecDeque<T>>::push_back","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of the `VecDeque`.","sig":null,"attributes":[{"value":"/ Appends an element to the back of the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418162,"byte_end":418215,"line_start":1359,"line_end":1359,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418220,"byte_end":418223,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418228,"byte_end":418242,"line_start":1361,"line_end":1361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418247,"byte_end":418250,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418255,"byte_end":418262,"line_start":1363,"line_end":1363,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418267,"byte_end":418302,"line_start":1364,"line_end":1364,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418307,"byte_end":418310,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418315,"byte_end":418349,"line_start":1366,"line_end":1366,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418354,"byte_end":418375,"line_start":1367,"line_end":1367,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418380,"byte_end":418401,"line_start":1368,"line_end":1368,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(3, *buf.back().unwrap());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418406,"byte_end":418446,"line_start":1369,"line_end":1369,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418451,"byte_end":418458,"line_start":1370,"line_end":1370,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418463,"byte_end":418508,"line_start":1371,"line_end":1371,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419597,"byte_end":419614,"line_start":1410,"line_end":1410,"column_start":12,"column_end":29},"name":"swap_remove_front","qualname":"<VecDeque<T>>::swap_remove_front","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from anywhere in the `VecDeque` and returns it,\n replacing it with the first element.","sig":null,"attributes":[{"value":"/ Removes an element from anywhere in the `VecDeque` and returns it,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418818,"byte_end":418888,"line_start":1385,"line_end":1385,"column_start":5,"column_end":75}},{"value":"/ replacing it with the first element.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418893,"byte_end":418933,"line_start":1386,"line_end":1386,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418938,"byte_end":418941,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":418946,"byte_end":418995,"line_start":1388,"line_end":1388,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419000,"byte_end":419003,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419008,"byte_end":419055,"line_start":1390,"line_end":1390,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419060,"byte_end":419063,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419068,"byte_end":419117,"line_start":1392,"line_end":1392,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419122,"byte_end":419125,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419130,"byte_end":419144,"line_start":1394,"line_end":1394,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419149,"byte_end":419152,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419157,"byte_end":419164,"line_start":1396,"line_end":1396,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419169,"byte_end":419204,"line_start":1397,"line_end":1397,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419209,"byte_end":419212,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419217,"byte_end":419251,"line_start":1399,"line_end":1399,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.swap_remove_front(0), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419256,"byte_end":419303,"line_start":1400,"line_end":1400,"column_start":5,"column_end":52}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419308,"byte_end":419329,"line_start":1401,"line_end":1401,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419334,"byte_end":419355,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419360,"byte_end":419381,"line_start":1403,"line_end":1403,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419386,"byte_end":419417,"line_start":1404,"line_end":1404,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419422,"byte_end":419425,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.swap_remove_front(2), Some(3));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419430,"byte_end":419480,"line_start":1406,"line_end":1406,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(buf, [2, 1]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419485,"byte_end":419513,"line_start":1407,"line_end":1407,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419518,"byte_end":419525,"line_start":1408,"line_end":1408,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419530,"byte_end":419585,"line_start":1409,"line_end":1409,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420660,"byte_end":420676,"line_start":1445,"line_end":1445,"column_start":12,"column_end":28},"name":"swap_remove_back","qualname":"<VecDeque<T>>::swap_remove_back","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n last element.","sig":null,"attributes":[{"value":"/ Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419884,"byte_end":419976,"line_start":1420,"line_end":1420,"column_start":5,"column_end":97}},{"value":"/ last element.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":419981,"byte_end":419998,"line_start":1421,"line_end":1421,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420003,"byte_end":420006,"line_start":1422,"line_end":1422,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420011,"byte_end":420060,"line_start":1423,"line_end":1423,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420065,"byte_end":420068,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420073,"byte_end":420120,"line_start":1425,"line_end":1425,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420125,"byte_end":420128,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420133,"byte_end":420182,"line_start":1427,"line_end":1427,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420187,"byte_end":420190,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420195,"byte_end":420209,"line_start":1429,"line_end":1429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420214,"byte_end":420217,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420222,"byte_end":420229,"line_start":1431,"line_end":1431,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420234,"byte_end":420269,"line_start":1432,"line_end":1432,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420274,"byte_end":420277,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420282,"byte_end":420316,"line_start":1434,"line_end":1434,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.swap_remove_back(0), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420321,"byte_end":420367,"line_start":1435,"line_end":1435,"column_start":5,"column_end":51}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420372,"byte_end":420393,"line_start":1436,"line_end":1436,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420398,"byte_end":420419,"line_start":1437,"line_end":1437,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420424,"byte_end":420445,"line_start":1438,"line_end":1438,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420450,"byte_end":420481,"line_start":1439,"line_end":1439,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420486,"byte_end":420489,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.swap_remove_back(0), Some(1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420494,"byte_end":420543,"line_start":1441,"line_end":1441,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buf, [3, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420548,"byte_end":420576,"line_start":1442,"line_end":1442,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420581,"byte_end":420588,"line_start":1443,"line_end":1443,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420593,"byte_end":420648,"line_start":1444,"line_end":1444,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421722,"byte_end":421728,"line_start":1479,"line_end":1479,"column_start":12,"column_end":18},"name":"insert","qualname":"<VecDeque<T>>::insert","value":"fn (&mut self, index: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts an element at `index` within the `VecDeque`, shifting all elements with indices\n greater than or equal to `index` towards the back.","sig":null,"attributes":[{"value":"/ Inserts an element at `index` within the `VecDeque`, shifting all elements with indices","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420944,"byte_end":421035,"line_start":1455,"line_end":1455,"column_start":5,"column_end":96}},{"value":"/ greater than or equal to `index` towards the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421040,"byte_end":421094,"line_start":1456,"line_end":1456,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421099,"byte_end":421102,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421107,"byte_end":421156,"line_start":1458,"line_end":1458,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421161,"byte_end":421164,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421169,"byte_end":421181,"line_start":1460,"line_end":1460,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421186,"byte_end":421189,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is greater than `VecDeque`'s length","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421194,"byte_end":421251,"line_start":1462,"line_end":1462,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421256,"byte_end":421259,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421264,"byte_end":421278,"line_start":1464,"line_end":1464,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421283,"byte_end":421286,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421291,"byte_end":421298,"line_start":1466,"line_end":1466,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421303,"byte_end":421338,"line_start":1467,"line_end":1467,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421343,"byte_end":421346,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ let mut vec_deque = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421351,"byte_end":421391,"line_start":1469,"line_end":1469,"column_start":5,"column_end":45}},{"value":"/ vec_deque.push_back('a');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421396,"byte_end":421425,"line_start":1470,"line_end":1470,"column_start":5,"column_end":34}},{"value":"/ vec_deque.push_back('b');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421430,"byte_end":421459,"line_start":1471,"line_end":1471,"column_start":5,"column_end":34}},{"value":"/ vec_deque.push_back('c');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421464,"byte_end":421493,"line_start":1472,"line_end":1472,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(vec_deque, &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421498,"byte_end":421542,"line_start":1473,"line_end":1473,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421547,"byte_end":421550,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ vec_deque.insert(1, 'd');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421555,"byte_end":421584,"line_start":1475,"line_end":1475,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(vec_deque, &['a', 'd', 'b', 'c']);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421589,"byte_end":421638,"line_start":1476,"line_end":1476,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421643,"byte_end":421650,"line_start":1477,"line_end":1477,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421655,"byte_end":421710,"line_start":1478,"line_end":1478,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430207,"byte_end":430213,"line_start":1699,"line_end":1699,"column_start":12,"column_end":18},"name":"remove","qualname":"<VecDeque<T>>::remove","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the element at `index` from the `VecDeque`.\n Whichever end is closer to the removal point will be moved to make\n room, and all the affected elements will be moved to new positions.\n Returns `None` if `index` is out of bounds.","sig":null,"attributes":[{"value":"/ Removes and returns the element at `index` from the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429468,"byte_end":429535,"line_start":1677,"line_end":1677,"column_start":5,"column_end":72}},{"value":"/ Whichever end is closer to the removal point will be moved to make","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429540,"byte_end":429610,"line_start":1678,"line_end":1678,"column_start":5,"column_end":75}},{"value":"/ room, and all the affected elements will be moved to new positions.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429615,"byte_end":429686,"line_start":1679,"line_end":1679,"column_start":5,"column_end":76}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429691,"byte_end":429738,"line_start":1680,"line_end":1680,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429743,"byte_end":429746,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429751,"byte_end":429800,"line_start":1682,"line_end":1682,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429805,"byte_end":429808,"line_start":1683,"line_end":1683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429813,"byte_end":429827,"line_start":1684,"line_end":1684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429832,"byte_end":429835,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429840,"byte_end":429847,"line_start":1686,"line_end":1686,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429852,"byte_end":429887,"line_start":1687,"line_end":1687,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429892,"byte_end":429895,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429900,"byte_end":429934,"line_start":1689,"line_end":1689,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429939,"byte_end":429960,"line_start":1690,"line_end":1690,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429965,"byte_end":429986,"line_start":1691,"line_end":1691,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429991,"byte_end":430012,"line_start":1692,"line_end":1692,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430017,"byte_end":430048,"line_start":1693,"line_end":1693,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430053,"byte_end":430056,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.remove(1), Some(2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430061,"byte_end":430100,"line_start":1695,"line_end":1695,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(buf, [1, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430105,"byte_end":430133,"line_start":1696,"line_end":1696,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430138,"byte_end":430145,"line_start":1697,"line_end":1697,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430150,"byte_end":430195,"line_start":1698,"line_end":1698,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437038,"byte_end":437047,"line_start":1880,"line_end":1880,"column_start":12,"column_end":21},"name":"split_off","qualname":"<VecDeque<T>>::split_off","value":"fn (&mut self, at: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the `VecDeque` into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the `VecDeque` into two at the given index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436278,"byte_end":436332,"line_start":1855,"line_end":1855,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436337,"byte_end":436340,"line_start":1856,"line_end":1856,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated `VecDeque`. `self` contains elements `[0, at)`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436345,"byte_end":436422,"line_start":1857,"line_end":1857,"column_start":5,"column_end":82}},{"value":"/ and the returned `VecDeque` contains elements `[at, len)`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436427,"byte_end":436489,"line_start":1858,"line_end":1858,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436494,"byte_end":436497,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of `self` does not change.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436502,"byte_end":436555,"line_start":1860,"line_end":1860,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436560,"byte_end":436563,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436568,"byte_end":436617,"line_start":1862,"line_end":1862,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436622,"byte_end":436625,"line_start":1863,"line_end":1863,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436630,"byte_end":436642,"line_start":1864,"line_end":1864,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436647,"byte_end":436650,"line_start":1865,"line_end":1865,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436655,"byte_end":436680,"line_start":1866,"line_end":1866,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436685,"byte_end":436688,"line_start":1867,"line_end":1867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436693,"byte_end":436707,"line_start":1868,"line_end":1868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436712,"byte_end":436715,"line_start":1869,"line_end":1869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436720,"byte_end":436727,"line_start":1870,"line_end":1870,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436732,"byte_end":436767,"line_start":1871,"line_end":1871,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436772,"byte_end":436775,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436780,"byte_end":436845,"line_start":1873,"line_end":1873,"column_start":5,"column_end":70}},{"value":"/ let buf2 = buf.split_off(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436850,"byte_end":436882,"line_start":1874,"line_end":1874,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(buf, [1]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436887,"byte_end":436912,"line_start":1875,"line_end":1875,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buf2, [2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436917,"byte_end":436946,"line_start":1876,"line_end":1876,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436951,"byte_end":436958,"line_start":1877,"line_end":1877,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436963,"byte_end":436972,"line_start":1878,"line_end":1878,"column_start":5,"column_end":14}},{"value":"stable(feature = \"split_off\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436977,"byte_end":437026,"line_start":1879,"line_end":1879,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439164,"byte_end":439170,"line_start":1943,"line_end":1943,"column_start":12,"column_end":18},"name":"append","qualname":"<VecDeque<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438561,"byte_end":438634,"line_start":1924,"line_end":1924,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438639,"byte_end":438642,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438647,"byte_end":438659,"line_start":1926,"line_end":1926,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438664,"byte_end":438667,"line_start":1927,"line_end":1927,"column_start":5,"column_end":8}},{"value":"/ Panics if the new number of elements in self overflows a `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438672,"byte_end":438741,"line_start":1928,"line_end":1928,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438746,"byte_end":438749,"line_start":1929,"line_end":1929,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438754,"byte_end":438768,"line_start":1930,"line_end":1930,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438773,"byte_end":438776,"line_start":1931,"line_end":1931,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438781,"byte_end":438788,"line_start":1932,"line_end":1932,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438793,"byte_end":438828,"line_start":1933,"line_end":1933,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438833,"byte_end":438836,"line_start":1934,"line_end":1934,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = vec![1, 2].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438841,"byte_end":438905,"line_start":1935,"line_end":1935,"column_start":5,"column_end":69}},{"value":"/ let mut buf2: VecDeque<_> = vec![3, 4].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438910,"byte_end":438975,"line_start":1936,"line_end":1936,"column_start":5,"column_end":70}},{"value":"/ buf.append(&mut buf2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":438980,"byte_end":439006,"line_start":1937,"line_end":1937,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(buf, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439011,"byte_end":439045,"line_start":1938,"line_end":1938,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf2, []);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439050,"byte_end":439075,"line_start":1939,"line_end":1939,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439080,"byte_end":439087,"line_start":1940,"line_end":1940,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439092,"byte_end":439101,"line_start":1941,"line_end":1941,"column_start":5,"column_end":14}},{"value":"stable(feature = \"append\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439106,"byte_end":439152,"line_start":1942,"line_end":1942,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440289,"byte_end":440295,"line_start":1979,"line_end":1979,"column_start":12,"column_end":18},"name":"retain","qualname":"<VecDeque<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439273,"byte_end":439330,"line_start":1948,"line_end":1948,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439335,"byte_end":439338,"line_start":1949,"line_end":1949,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns false.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439343,"byte_end":439419,"line_start":1950,"line_end":1950,"column_start":5,"column_end":81}},{"value":"/ This method operates in place, visiting each element exactly once in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439424,"byte_end":439500,"line_start":1951,"line_end":1951,"column_start":5,"column_end":81}},{"value":"/ original order, and preserves the order of the retained elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439505,"byte_end":439574,"line_start":1952,"line_end":1952,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439579,"byte_end":439582,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439587,"byte_end":439601,"line_start":1954,"line_end":1954,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439606,"byte_end":439609,"line_start":1955,"line_end":1955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439614,"byte_end":439621,"line_start":1956,"line_end":1956,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439626,"byte_end":439661,"line_start":1957,"line_end":1957,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439666,"byte_end":439669,"line_start":1958,"line_end":1958,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439674,"byte_end":439708,"line_start":1959,"line_end":1959,"column_start":5,"column_end":39}},{"value":"/ buf.extend(1..5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439713,"byte_end":439734,"line_start":1960,"line_end":1960,"column_start":5,"column_end":26}},{"value":"/ buf.retain(|&x| x % 2 == 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439739,"byte_end":439771,"line_start":1961,"line_end":1961,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(buf, [2, 4]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439776,"byte_end":439804,"line_start":1962,"line_end":1962,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439809,"byte_end":439816,"line_start":1963,"line_end":1963,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439821,"byte_end":439824,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439829,"byte_end":439906,"line_start":1965,"line_end":1965,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439911,"byte_end":439914,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439919,"byte_end":439926,"line_start":1967,"line_end":1967,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439931,"byte_end":439966,"line_start":1968,"line_end":1968,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439971,"byte_end":439974,"line_start":1969,"line_end":1969,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439979,"byte_end":440013,"line_start":1970,"line_end":1970,"column_start":5,"column_end":39}},{"value":"/ buf.extend(1..6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440018,"byte_end":440039,"line_start":1971,"line_end":1971,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440044,"byte_end":440047,"line_start":1972,"line_end":1972,"column_start":5,"column_end":8}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440052,"byte_end":440100,"line_start":1973,"line_end":1973,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440105,"byte_end":440123,"line_start":1974,"line_end":1974,"column_start":5,"column_end":23}},{"value":"/ buf.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440128,"byte_end":440168,"line_start":1975,"line_end":1975,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buf, [2, 3, 5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440173,"byte_end":440204,"line_start":1976,"line_end":1976,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440209,"byte_end":440216,"line_start":1977,"line_end":1977,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_deque_retain\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440221,"byte_end":440277,"line_start":1978,"line_end":1978,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441885,"byte_end":441896,"line_start":2036,"line_end":2036,"column_start":12,"column_end":23},"name":"resize_with","qualname":"<VecDeque<T>>::resize_with","value":"fn (&mut self, new_len: usize, generator: impl FnMut() -> T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n either by removing excess elements from the back or by appending\n elements generated by calling `generator` to the back.","sig":null,"attributes":[{"value":"/ Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441010,"byte_end":441085,"line_start":2010,"line_end":2010,"column_start":5,"column_end":80}},{"value":"/ either by removing excess elements from the back or by appending","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441090,"byte_end":441158,"line_start":2011,"line_end":2011,"column_start":5,"column_end":73}},{"value":"/ elements generated by calling `generator` to the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441163,"byte_end":441221,"line_start":2012,"line_end":2012,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441226,"byte_end":441229,"line_start":2013,"line_end":2013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441234,"byte_end":441248,"line_start":2014,"line_end":2014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441253,"byte_end":441256,"line_start":2015,"line_end":2015,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441261,"byte_end":441268,"line_start":2016,"line_end":2016,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441273,"byte_end":441308,"line_start":2017,"line_end":2017,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441313,"byte_end":441316,"line_start":2018,"line_end":2018,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441321,"byte_end":441355,"line_start":2019,"line_end":2019,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441360,"byte_end":441381,"line_start":2020,"line_end":2020,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441386,"byte_end":441408,"line_start":2021,"line_end":2021,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441413,"byte_end":441435,"line_start":2022,"line_end":2022,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441440,"byte_end":441473,"line_start":2023,"line_end":2023,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441478,"byte_end":441481,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ buf.resize_with(5, Default::default);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441486,"byte_end":441527,"line_start":2025,"line_end":2025,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(buf, [5, 10, 15, 0, 0]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441532,"byte_end":441571,"line_start":2026,"line_end":2026,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441576,"byte_end":441579,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ buf.resize_with(2, || unreachable!());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441584,"byte_end":441626,"line_start":2028,"line_end":2028,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(buf, [5, 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441631,"byte_end":441660,"line_start":2029,"line_end":2029,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441665,"byte_end":441668,"line_start":2030,"line_end":2030,"column_start":5,"column_end":8}},{"value":"/ let mut state = 100;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441673,"byte_end":441697,"line_start":2031,"line_end":2031,"column_start":5,"column_end":29}},{"value":"/ buf.resize_with(5, || { state += 1; state });","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441702,"byte_end":441751,"line_start":2032,"line_end":2032,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buf, [5, 10, 101, 102, 103]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441756,"byte_end":441800,"line_start":2033,"line_end":2033,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441805,"byte_end":441812,"line_start":2034,"line_end":2034,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_resize_with\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441817,"byte_end":441873,"line_start":2035,"line_end":2035,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443174,"byte_end":443185,"line_start":2079,"line_end":2079,"column_start":12,"column_end":23},"name":"rotate_left","qualname":"<VecDeque<T>>::rotate_left","value":"fn (&mut self, mid: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the double-ended queue `mid` places to the left.","sig":null,"attributes":[{"value":"/ Rotates the double-ended queue `mid` places to the left.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442156,"byte_end":442216,"line_start":2046,"line_end":2046,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442221,"byte_end":442224,"line_start":2047,"line_end":2047,"column_start":5,"column_end":8}},{"value":"/ Equivalently,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442229,"byte_end":442246,"line_start":2048,"line_end":2048,"column_start":5,"column_end":22}},{"value":"/ - Rotates item `mid` into the first position.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442251,"byte_end":442300,"line_start":2049,"line_end":2049,"column_start":5,"column_end":54}},{"value":"/ - Pops the first `mid` items and pushes them to the end.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442305,"byte_end":442365,"line_start":2050,"line_end":2050,"column_start":5,"column_end":65}},{"value":"/ - Rotates `len() - mid` places to the right.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442370,"byte_end":442418,"line_start":2051,"line_end":2051,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442423,"byte_end":442426,"line_start":2052,"line_end":2052,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442431,"byte_end":442443,"line_start":2053,"line_end":2053,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442448,"byte_end":442451,"line_start":2054,"line_end":2054,"column_start":5,"column_end":8}},{"value":"/ If `mid` is greater than `len()`. Note that `mid == len()`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442456,"byte_end":442518,"line_start":2055,"line_end":2055,"column_start":5,"column_end":67}},{"value":"/ does _not_ panic and is a no-op rotation.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442523,"byte_end":442568,"line_start":2056,"line_end":2056,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442573,"byte_end":442576,"line_start":2057,"line_end":2057,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442581,"byte_end":442597,"line_start":2058,"line_end":2058,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442602,"byte_end":442605,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ Takes `O(min(mid, len() - mid))` time and no extra space.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442610,"byte_end":442671,"line_start":2060,"line_end":2060,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442676,"byte_end":442679,"line_start":2061,"line_end":2061,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442684,"byte_end":442698,"line_start":2062,"line_end":2062,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442703,"byte_end":442706,"line_start":2063,"line_end":2063,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442711,"byte_end":442718,"line_start":2064,"line_end":2064,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442723,"byte_end":442758,"line_start":2065,"line_end":2065,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442763,"byte_end":442766,"line_start":2066,"line_end":2066,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = (0..10).collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442771,"byte_end":442820,"line_start":2067,"line_end":2067,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442825,"byte_end":442828,"line_start":2068,"line_end":2068,"column_start":5,"column_end":8}},{"value":"/ buf.rotate_left(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442833,"byte_end":442856,"line_start":2069,"line_end":2069,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442861,"byte_end":442913,"line_start":2070,"line_end":2070,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442918,"byte_end":442921,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ for i in 1..10 {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442926,"byte_end":442946,"line_start":2072,"line_end":2072,"column_start":5,"column_end":25}},{"value":"/     assert_eq!(i * 3 % 10, buf[0]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442951,"byte_end":442990,"line_start":2073,"line_end":2073,"column_start":5,"column_end":44}},{"value":"/     buf.rotate_left(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442995,"byte_end":443022,"line_start":2074,"line_end":2074,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443027,"byte_end":443032,"line_start":2075,"line_end":2075,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443037,"byte_end":443089,"line_start":2076,"line_end":2076,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443094,"byte_end":443101,"line_start":2077,"line_end":2077,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443106,"byte_end":443162,"line_start":2078,"line_end":2078,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444447,"byte_end":444459,"line_start":2122,"line_end":2122,"column_start":12,"column_end":24},"name":"rotate_right","qualname":"<VecDeque<T>>::rotate_right","value":"fn (&mut self, k: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the double-ended queue `k` places to the right.","sig":null,"attributes":[{"value":"/ Rotates the double-ended queue `k` places to the right.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443442,"byte_end":443501,"line_start":2089,"line_end":2089,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443506,"byte_end":443509,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ Equivalently,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443514,"byte_end":443531,"line_start":2091,"line_end":2091,"column_start":5,"column_end":22}},{"value":"/ - Rotates the first item into position `k`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443536,"byte_end":443583,"line_start":2092,"line_end":2092,"column_start":5,"column_end":52}},{"value":"/ - Pops the last `k` items and pushes them to the front.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443588,"byte_end":443647,"line_start":2093,"line_end":2093,"column_start":5,"column_end":64}},{"value":"/ - Rotates `len() - k` places to the left.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443652,"byte_end":443697,"line_start":2094,"line_end":2094,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443702,"byte_end":443705,"line_start":2095,"line_end":2095,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443710,"byte_end":443722,"line_start":2096,"line_end":2096,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443727,"byte_end":443730,"line_start":2097,"line_end":2097,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than `len()`. Note that `k == len()`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443735,"byte_end":443793,"line_start":2098,"line_end":2098,"column_start":5,"column_end":63}},{"value":"/ does _not_ panic and is a no-op rotation.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443798,"byte_end":443843,"line_start":2099,"line_end":2099,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443848,"byte_end":443851,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443856,"byte_end":443872,"line_start":2101,"line_end":2101,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443877,"byte_end":443880,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ Takes `O(min(k, len() - k))` time and no extra space.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443885,"byte_end":443942,"line_start":2103,"line_end":2103,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443947,"byte_end":443950,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443955,"byte_end":443969,"line_start":2105,"line_end":2105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443974,"byte_end":443977,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443982,"byte_end":443989,"line_start":2107,"line_end":2107,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":443994,"byte_end":444029,"line_start":2108,"line_end":2108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444034,"byte_end":444037,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = (0..10).collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444042,"byte_end":444091,"line_start":2110,"line_end":2110,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444096,"byte_end":444099,"line_start":2111,"line_end":2111,"column_start":5,"column_end":8}},{"value":"/ buf.rotate_right(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444104,"byte_end":444128,"line_start":2112,"line_end":2112,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444133,"byte_end":444185,"line_start":2113,"line_end":2113,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444190,"byte_end":444193,"line_start":2114,"line_end":2114,"column_start":5,"column_end":8}},{"value":"/ for i in 1..10 {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444198,"byte_end":444218,"line_start":2115,"line_end":2115,"column_start":5,"column_end":25}},{"value":"/     assert_eq!(0, buf[i * 3 % 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444223,"byte_end":444262,"line_start":2116,"line_end":2116,"column_start":5,"column_end":44}},{"value":"/     buf.rotate_right(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444267,"byte_end":444295,"line_start":2117,"line_end":2117,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444300,"byte_end":444305,"line_start":2118,"line_end":2118,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444310,"byte_end":444362,"line_start":2119,"line_end":2119,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444367,"byte_end":444374,"line_start":2120,"line_end":2120,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444379,"byte_end":444435,"line_start":2121,"line_end":2121,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446356,"byte_end":446362,"line_start":2178,"line_end":2178,"column_start":12,"column_end":18},"name":"resize","qualname":"<VecDeque<T>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n either by removing excess elements from the back or by appending clones of `value`\n to the back.","sig":null,"attributes":[{"value":"/ Modifies the `VecDeque` in-place so that `len()` is equal to new_len,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445688,"byte_end":445761,"line_start":2156,"line_end":2156,"column_start":5,"column_end":78}},{"value":"/ either by removing excess elements from the back or by appending clones of `value`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445766,"byte_end":445852,"line_start":2157,"line_end":2157,"column_start":5,"column_end":91}},{"value":"/ to the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445857,"byte_end":445873,"line_start":2158,"line_end":2158,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445878,"byte_end":445881,"line_start":2159,"line_end":2159,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445886,"byte_end":445900,"line_start":2160,"line_end":2160,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445905,"byte_end":445908,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445913,"byte_end":445920,"line_start":2162,"line_end":2162,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445925,"byte_end":445960,"line_start":2163,"line_end":2163,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445965,"byte_end":445968,"line_start":2164,"line_end":2164,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445973,"byte_end":446007,"line_start":2165,"line_end":2165,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446012,"byte_end":446033,"line_start":2166,"line_end":2166,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446038,"byte_end":446060,"line_start":2167,"line_end":2167,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446065,"byte_end":446087,"line_start":2168,"line_end":2168,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446092,"byte_end":446125,"line_start":2169,"line_end":2169,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446130,"byte_end":446133,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ buf.resize(2, 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446138,"byte_end":446159,"line_start":2171,"line_end":2171,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [5, 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446164,"byte_end":446193,"line_start":2172,"line_end":2172,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446198,"byte_end":446201,"line_start":2173,"line_end":2173,"column_start":5,"column_end":8}},{"value":"/ buf.resize(5, 20);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446206,"byte_end":446228,"line_start":2174,"line_end":2174,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 20, 20, 20]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446233,"byte_end":446274,"line_start":2175,"line_end":2175,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446279,"byte_end":446286,"line_start":2176,"line_end":2176,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446291,"byte_end":446344,"line_start":2177,"line_end":2177,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446812,"byte_end":446817,"line_start":2193,"line_end":2193,"column_start":8,"column_end":13},"name":"slice","qualname":"::collections::vec_deque::RingSlices::slice","value":"fn (self, from: usize, to: usize) -> Self","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446864,"byte_end":446872,"line_start":2194,"line_end":2194,"column_start":8,"column_end":16},"name":"split_at","qualname":"::collections::vec_deque::RingSlices::split_at","value":"fn (self, i: usize) -> (Self, Self)","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446914,"byte_end":446925,"line_start":2196,"line_end":2196,"column_start":8,"column_end":19},"name":"ring_slices","qualname":"::collections::vec_deque::RingSlices::ring_slices","value":"fn (buf: Self, head: usize, tail: usize) -> (Self, Self)","parent":{"krate":0,"index":2547},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2560},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448232,"byte_end":448236,"line_start":2242,"line_end":2242,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565}],"decl_id":null,"docs":" An iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447925,"byte_end":447975,"line_start":2234,"line_end":2234,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447976,"byte_end":447979,"line_start":2235,"line_end":2235,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447980,"byte_end":448056,"line_start":2236,"line_end":2236,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448057,"byte_end":448084,"line_start":2237,"line_end":2237,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448085,"byte_end":448088,"line_start":2238,"line_end":2238,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.VecDeque.html#method.iter","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448089,"byte_end":448135,"line_start":2239,"line_end":2239,"column_start":1,"column_end":47}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448136,"byte_end":448174,"line_start":2240,"line_end":2240,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448175,"byte_end":448220,"line_start":2241,"line_end":2241,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2603},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453224,"byte_end":453231,"line_start":2397,"line_end":2397,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608}],"decl_id":null,"docs":" A mutable iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452898,"byte_end":452955,"line_start":2389,"line_end":2389,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452956,"byte_end":452959,"line_start":2390,"line_end":2390,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452960,"byte_end":453040,"line_start":2391,"line_end":2391,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453041,"byte_end":453068,"line_start":2392,"line_end":2392,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453069,"byte_end":453072,"line_start":2393,"line_end":2393,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.VecDeque.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453073,"byte_end":453127,"line_start":2394,"line_end":2394,"column_start":1,"column_end":55}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453128,"byte_end":453166,"line_start":2395,"line_end":2395,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453167,"byte_end":453212,"line_start":2396,"line_end":2396,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4663},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456409,"byte_end":456417,"line_start":2504,"line_end":2504,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4665}],"decl_id":null,"docs":" An owning iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456024,"byte_end":456081,"line_start":2495,"line_end":2495,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456082,"byte_end":456085,"line_start":2496,"line_end":2496,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`VecDeque`]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456086,"byte_end":456158,"line_start":2497,"line_end":2497,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456159,"byte_end":456234,"line_start":2498,"line_end":2498,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456235,"byte_end":456238,"line_start":2499,"line_end":2499,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.VecDeque.html#method.into_iter","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456239,"byte_end":456295,"line_start":2500,"line_end":2500,"column_start":1,"column_end":57}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456296,"byte_end":456334,"line_start":2501,"line_end":2501,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456352,"byte_end":456397,"line_start":2503,"line_end":2503,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2713},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67702,"byte_end":67711,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"btree_map","qualname":"::collections::btree_map","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":2714}],"decl_id":null,"docs":" A map based on a B-Tree.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67648,"byte_end":67693,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"! A map based on a B-Tree.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67718,"byte_end":67746,"line_start":12,"line_end":12,"column_start":5,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":2715},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67888,"byte_end":67897,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"name":"btree_set","qualname":"::collections::btree_set","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":2716}],"decl_id":null,"docs":" A set based on a B-Tree.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67834,"byte_end":67879,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"! A set based on a B-Tree.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67904,"byte_end":67932,"line_start":19,"line_end":19,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4706},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68844,"byte_end":68860,"line_start":52,"line_end":52,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::collections::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":4705},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68728,"byte_end":68801,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68806,"byte_end":68839,"line_start":51,"line_end":51,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":4708},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68914,"byte_end":68924,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::collections::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout, non_exhaustive }","parent":{"krate":0,"index":4705},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68867,"byte_end":68909,"line_start":54,"line_end":54,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":4705},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68706,"byte_end":68721,"line_start":49,"line_end":49,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::collections::TryReserveError","value":"TryReserveError::{CapacityOverflow, AllocError}","parent":null,"children":[{"krate":0,"index":4706},{"krate":0,"index":4708}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68538,"byte_end":68583,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":68623,"byte_end":68696,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":69791,"byte_end":69802,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"spec_extend","qualname":"::collections::SpecExtend::spec_extend","value":"fn (&mut self, iter: I) -> ()","parent":{"krate":0,"index":2727},"children":[],"decl_id":null,"docs":" Extends `self` with the contents of the given iterator.\n","sig":null,"attributes":[{"value":"/ Extends `self` with the contents of the given iterator.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":69724,"byte_end":69783,"line_start":83,"line_end":83,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2730},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"src/liballoc/fmt.rs","parent":null,"children":[{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2750},{"krate":0,"index":2754},{"krate":0,"index":2757},{"krate":0,"index":2761},{"krate":0,"index":2762}],"decl_id":null,"docs":" Utilities for formatting and printing `String`s.","sig":null,"attributes":[{"value":"! Utilities for formatting and printing `String`s.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473181,"byte_end":473233,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473234,"byte_end":473237,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains the runtime support for the [`format!`] syntax extension.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473238,"byte_end":473320,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"! This macro is implemented in the compiler to emit calls to this module in","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473321,"byte_end":473398,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! order to format arguments at runtime into strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473399,"byte_end":473453,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473454,"byte_end":473457,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473458,"byte_end":473469,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473470,"byte_end":473473,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The [`format!`] macro is intended to be familiar to those coming from C's","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473474,"byte_end":473551,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! `printf`/`fprintf` functions or Python's `str.format` function.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473552,"byte_end":473619,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473620,"byte_end":473623,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Some examples of the [`format!`] extension are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473624,"byte_end":473675,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473676,"byte_end":473679,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473680,"byte_end":473687,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"! format!(\"Hello\");                 // => \"Hello\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473688,"byte_end":473739,"line_start":15,"line_end":15,"column_start":1,"column_end":52}},{"value":"! format!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473740,"byte_end":473799,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"! format!(\"The number is {}\", 1);   // => \"The number is 1\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473800,"byte_end":473861,"line_start":17,"line_end":17,"column_start":1,"column_end":62}},{"value":"! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473862,"byte_end":473914,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"! format!(\"{value}\", value=4);      // => \"4\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473915,"byte_end":473962,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"! format!(\"{} {}\", 1, 2);           // => \"1 2\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473963,"byte_end":474012,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"! format!(\"{:04}\", 42);             // => \"0042\" with leading zeros","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474013,"byte_end":474082,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474083,"byte_end":474090,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474091,"byte_end":474094,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! From these, you can see that the first argument is a format string. It is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474095,"byte_end":474172,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"! required by the compiler for this to be a string literal; it cannot be a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474173,"byte_end":474249,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"! variable passed in (in order to perform validity checking). The compiler","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474250,"byte_end":474326,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"! will then parse the format string and determine if the list of arguments","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474327,"byte_end":474403,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"! provided is suitable to pass to this format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474404,"byte_end":474459,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474460,"byte_end":474463,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! To convert a single value to a string, use the [`to_string`] method. This","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474464,"byte_end":474541,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"! will use the [`Display`] formatting trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474542,"byte_end":474588,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474589,"byte_end":474592,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Positional parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474593,"byte_end":474621,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474622,"byte_end":474625,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! Each formatting argument is allowed to specify which value argument it's","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474626,"byte_end":474702,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"! referencing, and if omitted it is assumed to be \"the next argument\". For","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474703,"byte_end":474779,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! example, the format string `{} {} {}` would take three parameters, and they","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474780,"byte_end":474859,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"! would be formatted in the same order as they're given. The format string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474860,"byte_end":474936,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"! `{2} {1} {0}`, however, would format arguments in reverse order.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474937,"byte_end":475005,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475006,"byte_end":475009,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Things can get a little tricky once you start intermingling the two types of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475010,"byte_end":475090,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"! positional specifiers. The \"next argument\" specifier can be thought of as an","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475091,"byte_end":475171,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"! iterator over the argument. Each time a \"next argument\" specifier is seen,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475172,"byte_end":475250,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"! the iterator advances. This leads to behavior like this:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475251,"byte_end":475311,"line_start":44,"line_end":44,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475312,"byte_end":475315,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475316,"byte_end":475323,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"! format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475324,"byte_end":475375,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475376,"byte_end":475383,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475384,"byte_end":475387,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! The internal iterator over the argument has not been advanced by the time","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475388,"byte_end":475465,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"! the first `{}` is seen, so it prints the first argument. Then upon reaching","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475466,"byte_end":475545,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"! the second `{}`, the iterator has advanced forward to the second argument.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475546,"byte_end":475624,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"! Essentially, parameters which explicitly name their argument do not affect","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475625,"byte_end":475703,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"! parameters which do not name an argument in terms of positional specifiers.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475704,"byte_end":475783,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475784,"byte_end":475787,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! A format string is required to use all of its arguments, otherwise it is a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475788,"byte_end":475866,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! compile-time error. You may refer to the same argument more than once in the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475867,"byte_end":475947,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"! format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475948,"byte_end":475966,"line_start":58,"line_end":58,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475967,"byte_end":475970,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! ## Named parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475971,"byte_end":475994,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475995,"byte_end":475998,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! Rust itself does not have a Python-like equivalent of named parameters to a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475999,"byte_end":476078,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"! function, but the [`format!`] macro is a syntax extension which allows it to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476079,"byte_end":476159,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"! leverage named parameters. Named parameters are listed at the end of the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476160,"byte_end":476236,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"! argument list and have the syntax:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476237,"byte_end":476275,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476276,"byte_end":476279,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476280,"byte_end":476291,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"! identifier '=' expression","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476292,"byte_end":476321,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476322,"byte_end":476329,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476330,"byte_end":476333,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! For example, the following [`format!`] expressions all use named argument:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476334,"byte_end":476412,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476413,"byte_end":476416,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476417,"byte_end":476424,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! format!(\"{argument}\", argument = \"test\");   // => \"test\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476425,"byte_end":476485,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"! format!(\"{name} {}\", 1, name = 2);          // => \"2 1\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476486,"byte_end":476545,"line_start":75,"line_end":75,"column_start":1,"column_end":60}},{"value":"! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476546,"byte_end":476607,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476608,"byte_end":476615,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476616,"byte_end":476619,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! It is not valid to put positional parameters (those without names) after","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476620,"byte_end":476696,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"! arguments which have names. Like with positional parameters, it is not","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476697,"byte_end":476771,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"! valid to provide named parameters that are unused by the format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476772,"byte_end":476847,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476848,"byte_end":476851,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! # Formatting Parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476852,"byte_end":476879,"line_start":83,"line_end":83,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476880,"byte_end":476883,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! Each argument being formatted can be transformed by a number of formatting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476884,"byte_end":476962,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"! parameters (corresponding to `format_spec` in the syntax above). These","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476963,"byte_end":477037,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"! parameters affect the string representation of what's being formatted.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477038,"byte_end":477112,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477113,"byte_end":477116,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"! ## Width","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477117,"byte_end":477129,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477130,"byte_end":477133,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477134,"byte_end":477141,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"! // All of these print \"Hello x    !\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477142,"byte_end":477182,"line_start":92,"line_end":92,"column_start":1,"column_end":41}},{"value":"! println!(\"Hello {:5}!\", \"x\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477183,"byte_end":477216,"line_start":93,"line_end":93,"column_start":1,"column_end":34}},{"value":"! println!(\"Hello {:1$}!\", \"x\", 5);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477217,"byte_end":477254,"line_start":94,"line_end":94,"column_start":1,"column_end":38}},{"value":"! println!(\"Hello {1:0$}!\", 5, \"x\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477255,"byte_end":477293,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"! println!(\"Hello {:width$}!\", \"x\", width = 5);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477294,"byte_end":477343,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477344,"byte_end":477351,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477352,"byte_end":477355,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! This is a parameter for the \"minimum width\" that the format should take up.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477356,"byte_end":477435,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"! If the value's string does not fill up this many characters, then the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477436,"byte_end":477509,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"! padding specified by fill/alignment will be used to take up the required","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477510,"byte_end":477586,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"! space (see below).","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477587,"byte_end":477609,"line_start":102,"line_end":102,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477610,"byte_end":477613,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! The value for the width can also be provided as a [`usize`] in the list of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477614,"byte_end":477692,"line_start":104,"line_end":104,"column_start":1,"column_end":79}},{"value":"! parameters by adding a postfix `$`, indicating that the second argument is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477693,"byte_end":477771,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"! a [`usize`] specifying the width.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477772,"byte_end":477809,"line_start":106,"line_end":106,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477810,"byte_end":477813,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"! Referring to an argument with the dollar syntax does not affect the \"next","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477814,"byte_end":477891,"line_start":108,"line_end":108,"column_start":1,"column_end":78}},{"value":"! argument\" counter, so it's usually a good idea to refer to arguments by","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477892,"byte_end":477967,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"! position, or use named arguments.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477968,"byte_end":478005,"line_start":110,"line_end":110,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478006,"byte_end":478009,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"! ## Fill/Alignment","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478010,"byte_end":478031,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478032,"byte_end":478035,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478036,"byte_end":478043,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478044,"byte_end":478106,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478107,"byte_end":478169,"line_start":116,"line_end":116,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478170,"byte_end":478232,"line_start":117,"line_end":117,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478233,"byte_end":478295,"line_start":118,"line_end":118,"column_start":1,"column_end":63}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478296,"byte_end":478303,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478304,"byte_end":478307,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"! The optional fill character and alignment is provided normally in conjunction with the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478308,"byte_end":478398,"line_start":121,"line_end":121,"column_start":1,"column_end":91}},{"value":"! [`width`](#width) parameter. It must be defined before `width`, right after the `:`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478399,"byte_end":478487,"line_start":122,"line_end":122,"column_start":1,"column_end":89}},{"value":"! This indicates that if the value being formatted is smaller than","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478488,"byte_end":478556,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"! `width` some extra characters will be printed around it.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478557,"byte_end":478617,"line_start":124,"line_end":124,"column_start":1,"column_end":61}},{"value":"! Filling comes in the following variants for different alignments:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478618,"byte_end":478687,"line_start":125,"line_end":125,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478688,"byte_end":478691,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"! * `[fill]<` - the argument is left-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478692,"byte_end":478757,"line_start":127,"line_end":127,"column_start":1,"column_end":66}},{"value":"! * `[fill]^` - the argument is center-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478758,"byte_end":478825,"line_start":128,"line_end":128,"column_start":1,"column_end":68}},{"value":"! * `[fill]>` - the argument is right-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478826,"byte_end":478892,"line_start":129,"line_end":129,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478893,"byte_end":478896,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"! The default [fill/alignment](#fillalignment) for non-numerics is a space and","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478897,"byte_end":478977,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"! left-aligned. The","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478978,"byte_end":478999,"line_start":132,"line_end":132,"column_start":1,"column_end":22}},{"value":"! defaults for numeric formatters is also a space but with right-alignment. If","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479000,"byte_end":479080,"line_start":133,"line_end":133,"column_start":1,"column_end":81}},{"value":"! the `0` flag (see below) is specified for numerics, then the implicit fill character is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479081,"byte_end":479172,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"! `0`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479173,"byte_end":479181,"line_start":135,"line_end":135,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479182,"byte_end":479185,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"! Note that alignment may not be implemented by some types. In particular, it","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479186,"byte_end":479265,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"! is not generally implemented for the `Debug` trait.  A good way to ensure","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479266,"byte_end":479343,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"! padding is applied is to format your input, then pad this resulting string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479344,"byte_end":479422,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"! to obtain your output:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479423,"byte_end":479449,"line_start":140,"line_end":140,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479450,"byte_end":479453,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479454,"byte_end":479461,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"! println!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479462,"byte_end":479552,"line_start":143,"line_end":143,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479553,"byte_end":479560,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479561,"byte_end":479564,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! ## Sign/`#`/`0`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479565,"byte_end":479584,"line_start":146,"line_end":146,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479585,"byte_end":479588,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479589,"byte_end":479596,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479597,"byte_end":479652,"line_start":149,"line_end":149,"column_start":1,"column_end":56}},{"value":"! assert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479653,"byte_end":479700,"line_start":150,"line_end":150,"column_start":1,"column_end":48}},{"value":"! assert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479701,"byte_end":479761,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"! assert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479762,"byte_end":479822,"line_start":152,"line_end":152,"column_start":1,"column_end":61}},{"value":"! assert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479823,"byte_end":479879,"line_start":153,"line_end":153,"column_start":1,"column_end":57}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479880,"byte_end":479887,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479888,"byte_end":479891,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"! These are all flags altering the behavior of the formatter.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479892,"byte_end":479955,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479956,"byte_end":479959,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"! * `+` - This is intended for numeric types and indicates that the sign","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479960,"byte_end":480034,"line_start":158,"line_end":158,"column_start":1,"column_end":75}},{"value":"!         should always be printed. Positive signs are never printed by","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480035,"byte_end":480108,"line_start":159,"line_end":159,"column_start":1,"column_end":74}},{"value":"!         default, and the negative sign is only printed by default for the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480109,"byte_end":480186,"line_start":160,"line_end":160,"column_start":1,"column_end":78}},{"value":"!         `Signed` trait. This flag indicates that the correct sign (`+` or `-`)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480187,"byte_end":480269,"line_start":161,"line_end":161,"column_start":1,"column_end":83}},{"value":"!         should always be printed.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480270,"byte_end":480307,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"! * `-` - Currently not used","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480308,"byte_end":480338,"line_start":163,"line_end":163,"column_start":1,"column_end":31}},{"value":"! * `#` - This flag is indicates that the \"alternate\" form of printing should","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480339,"byte_end":480418,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"!         be used. The alternate forms are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480419,"byte_end":480464,"line_start":165,"line_end":165,"column_start":1,"column_end":46}},{"value":"!     * `#?` - pretty-print the [`Debug`] formatting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480465,"byte_end":480519,"line_start":166,"line_end":166,"column_start":1,"column_end":55}},{"value":"!     * `#x` - precedes the argument with a `0x`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480520,"byte_end":480570,"line_start":167,"line_end":167,"column_start":1,"column_end":51}},{"value":"!     * `#X` - precedes the argument with a `0x`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480571,"byte_end":480621,"line_start":168,"line_end":168,"column_start":1,"column_end":51}},{"value":"!     * `#b` - precedes the argument with a `0b`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480622,"byte_end":480672,"line_start":169,"line_end":169,"column_start":1,"column_end":51}},{"value":"!     * `#o` - precedes the argument with a `0o`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480673,"byte_end":480723,"line_start":170,"line_end":170,"column_start":1,"column_end":51}},{"value":"! * `0` - This is used to indicate for integer formats that the padding to `width` should","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480724,"byte_end":480815,"line_start":171,"line_end":171,"column_start":1,"column_end":92}},{"value":"!         both be done with a `0` character as well as be sign-aware. A format","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480816,"byte_end":480896,"line_start":172,"line_end":172,"column_start":1,"column_end":81}},{"value":"!         like `{:08}` would yield `00000001` for the integer `1`, while the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480897,"byte_end":480975,"line_start":173,"line_end":173,"column_start":1,"column_end":79}},{"value":"!         same format would yield `-0000001` for the integer `-1`. Notice that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480976,"byte_end":481056,"line_start":174,"line_end":174,"column_start":1,"column_end":81}},{"value":"!         the negative version has one fewer zero than the positive version.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481057,"byte_end":481135,"line_start":175,"line_end":175,"column_start":1,"column_end":79}},{"value":"!         Note that padding zeroes are always placed after the sign (if any)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481136,"byte_end":481214,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"!         and before the digits. When used together with the `#` flag, a similar","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481215,"byte_end":481297,"line_start":177,"line_end":177,"column_start":1,"column_end":83}},{"value":"!         rule applies: padding zeroes are inserted after the prefix but before","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481298,"byte_end":481379,"line_start":178,"line_end":178,"column_start":1,"column_end":82}},{"value":"!         the digits. The prefix is included in the total width.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481380,"byte_end":481446,"line_start":179,"line_end":179,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481447,"byte_end":481450,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"! ## Precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481451,"byte_end":481467,"line_start":181,"line_end":181,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481468,"byte_end":481471,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"! For non-numeric types, this can be considered a \"maximum width\". If the resulting string is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481472,"byte_end":481567,"line_start":183,"line_end":183,"column_start":1,"column_end":96}},{"value":"! longer than this width, then it is truncated down to this many characters and that truncated","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481568,"byte_end":481664,"line_start":184,"line_end":184,"column_start":1,"column_end":97}},{"value":"! value is emitted with proper `fill`, `alignment` and `width` if those parameters are set.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481665,"byte_end":481758,"line_start":185,"line_end":185,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481759,"byte_end":481762,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"! For integral types, this is ignored.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481763,"byte_end":481803,"line_start":187,"line_end":187,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481804,"byte_end":481807,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"! For floating-point types, this indicates how many digits after the decimal point should be","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481808,"byte_end":481902,"line_start":189,"line_end":189,"column_start":1,"column_end":95}},{"value":"! printed.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481903,"byte_end":481915,"line_start":190,"line_end":190,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481916,"byte_end":481919,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"! There are three possible ways to specify the desired `precision`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481920,"byte_end":481989,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481990,"byte_end":481993,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"! 1. An integer `.N`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":481994,"byte_end":482017,"line_start":194,"line_end":194,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482018,"byte_end":482021,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"!    the integer `N` itself is the precision.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482022,"byte_end":482069,"line_start":196,"line_end":196,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482070,"byte_end":482073,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"! 2. An integer or name followed by dollar sign `.N$`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482074,"byte_end":482130,"line_start":198,"line_end":198,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482131,"byte_end":482134,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"!    use format *argument* `N` (which must be a `usize`) as the precision.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482135,"byte_end":482211,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482212,"byte_end":482215,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! 3. An asterisk `.*`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482216,"byte_end":482240,"line_start":202,"line_end":202,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482241,"byte_end":482244,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"!    `.*` means that this `{...}` is associated with *two* format inputs rather than one: the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482245,"byte_end":482340,"line_start":204,"line_end":204,"column_start":1,"column_end":96}},{"value":"!    first input holds the `usize` precision, and the second holds the value to print. Note that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482341,"byte_end":482439,"line_start":205,"line_end":205,"column_start":1,"column_end":99}},{"value":"!    in this case, if one uses the format string `{<arg>:<spec>.*}`, then the `<arg>` part refers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482440,"byte_end":482539,"line_start":206,"line_end":206,"column_start":1,"column_end":100}},{"value":"!    to the *value* to print, and the `precision` must come in the input preceding `<arg>`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482540,"byte_end":482633,"line_start":207,"line_end":207,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482634,"byte_end":482637,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"! For example, the following calls all print the same thing `Hello x is 0.01000`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482638,"byte_end":482721,"line_start":209,"line_end":209,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482722,"byte_end":482725,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482726,"byte_end":482733,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"! // Hello {arg 0 (\"x\")} is {arg 1 (0.01) with precision specified inline (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482734,"byte_end":482814,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"! println!(\"Hello {0} is {1:.5}\", \"x\", 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482815,"byte_end":482862,"line_start":213,"line_end":213,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482863,"byte_end":482866,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! // Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision specified in arg 0 (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482867,"byte_end":482949,"line_start":215,"line_end":215,"column_start":1,"column_end":83}},{"value":"! println!(\"Hello {1} is {2:.0$}\", 5, \"x\", 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":482950,"byte_end":483001,"line_start":216,"line_end":216,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483002,"byte_end":483005,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! // Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483006,"byte_end":483088,"line_start":218,"line_end":218,"column_start":1,"column_end":83}},{"value":"! println!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483089,"byte_end":483140,"line_start":219,"line_end":219,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483141,"byte_end":483144,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {second of next two args (0.01) with precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483145,"byte_end":483224,"line_start":221,"line_end":221,"column_start":1,"column_end":80}},{"value":"! //                          specified in first of next two args (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483225,"byte_end":483297,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"! println!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483298,"byte_end":483349,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483350,"byte_end":483353,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {arg 2 (0.01) with precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483354,"byte_end":483415,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! //                          specified in its predecessor (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483416,"byte_end":483481,"line_start":226,"line_end":226,"column_start":1,"column_end":66}},{"value":"! println!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483482,"byte_end":483533,"line_start":227,"line_end":227,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483534,"byte_end":483537,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {arg \"number\" (0.01) with precision specified","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483538,"byte_end":483616,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"! //                          in arg \"prec\" (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483617,"byte_end":483667,"line_start":230,"line_end":230,"column_start":1,"column_end":51}},{"value":"! println!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483668,"byte_end":483742,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483743,"byte_end":483750,"line_start":232,"line_end":232,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483751,"byte_end":483754,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"! While these:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483755,"byte_end":483771,"line_start":234,"line_end":234,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483772,"byte_end":483775,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483776,"byte_end":483783,"line_start":236,"line_end":236,"column_start":1,"column_end":8}},{"value":"! println!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483784,"byte_end":483866,"line_start":237,"line_end":237,"column_start":1,"column_end":83}},{"value":"! println!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483867,"byte_end":483944,"line_start":238,"line_end":238,"column_start":1,"column_end":78}},{"value":"! println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":483945,"byte_end":484038,"line_start":239,"line_end":239,"column_start":1,"column_end":94}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484039,"byte_end":484046,"line_start":240,"line_end":240,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484047,"byte_end":484050,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! print two significantly different things:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484051,"byte_end":484096,"line_start":242,"line_end":242,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484097,"byte_end":484100,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484101,"byte_end":484112,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"! Hello, `1234.560` has 3 fractional digits","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484113,"byte_end":484158,"line_start":245,"line_end":245,"column_start":1,"column_end":46}},{"value":"! Hello, `123` has 3 characters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484159,"byte_end":484192,"line_start":246,"line_end":246,"column_start":1,"column_end":34}},{"value":"! Hello, `     123` has 3 right-aligned characters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484193,"byte_end":484245,"line_start":247,"line_end":247,"column_start":1,"column_end":53}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484246,"byte_end":484253,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484254,"byte_end":484257,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"! ## Localization","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484258,"byte_end":484277,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484278,"byte_end":484281,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"! In some programming languages, the behavior of string formatting functions","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484282,"byte_end":484360,"line_start":252,"line_end":252,"column_start":1,"column_end":79}},{"value":"! depends on the operating system's locale setting. The format functions","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484361,"byte_end":484435,"line_start":253,"line_end":253,"column_start":1,"column_end":75}},{"value":"! provided by Rust's standard library do not have any concept of locale, and","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484436,"byte_end":484514,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"! will produce the same results on all systems regardless of user","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484515,"byte_end":484582,"line_start":255,"line_end":255,"column_start":1,"column_end":68}},{"value":"! configuration.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484583,"byte_end":484601,"line_start":256,"line_end":256,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484602,"byte_end":484605,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"! For example, the following code will always print `1.5` even if the system","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484606,"byte_end":484684,"line_start":258,"line_end":258,"column_start":1,"column_end":79}},{"value":"! locale uses a decimal separator other than a dot.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484685,"byte_end":484738,"line_start":259,"line_end":259,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484739,"byte_end":484742,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484743,"byte_end":484750,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"! println!(\"The value is {}\", 1.5);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484751,"byte_end":484788,"line_start":262,"line_end":262,"column_start":1,"column_end":38}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484789,"byte_end":484796,"line_start":263,"line_end":263,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484797,"byte_end":484800,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"! # Escaping","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484801,"byte_end":484815,"line_start":265,"line_end":265,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484816,"byte_end":484819,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"! The literal characters `{` and `}` may be included in a string by preceding","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484820,"byte_end":484899,"line_start":267,"line_end":267,"column_start":1,"column_end":80}},{"value":"! them with the same character. For example, the `{` character is escaped with","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484900,"byte_end":484980,"line_start":268,"line_end":268,"column_start":1,"column_end":81}},{"value":"! `{{` and the `}` character is escaped with `}}`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":484981,"byte_end":485033,"line_start":269,"line_end":269,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485034,"byte_end":485037,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485038,"byte_end":485045,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485046,"byte_end":485096,"line_start":272,"line_end":272,"column_start":1,"column_end":51}},{"value":"! assert_eq!(format!(\"{{ Hello\"), \"{ Hello\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485097,"byte_end":485144,"line_start":273,"line_end":273,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485145,"byte_end":485152,"line_start":274,"line_end":274,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485153,"byte_end":485156,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"! # Syntax","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485157,"byte_end":485169,"line_start":276,"line_end":276,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485170,"byte_end":485173,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"! To summarize, here you can find the full grammar of format strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485174,"byte_end":485245,"line_start":278,"line_end":278,"column_start":1,"column_end":72}},{"value":"! The syntax for the formatting language used is drawn from other languages,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485246,"byte_end":485324,"line_start":279,"line_end":279,"column_start":1,"column_end":79}},{"value":"! so it should not be too alien. Arguments are formatted with Python-like","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485325,"byte_end":485400,"line_start":280,"line_end":280,"column_start":1,"column_end":76}},{"value":"! syntax, meaning that arguments are surrounded by `{}` instead of the C-like","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485401,"byte_end":485480,"line_start":281,"line_end":281,"column_start":1,"column_end":80}},{"value":"! `%`. The actual grammar for the formatting syntax is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485481,"byte_end":485538,"line_start":282,"line_end":282,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485539,"byte_end":485542,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485543,"byte_end":485554,"line_start":284,"line_end":284,"column_start":1,"column_end":12}},{"value":"! format_string := <text> [ maybe-format <text> ] *","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485555,"byte_end":485608,"line_start":285,"line_end":285,"column_start":1,"column_end":54}},{"value":"! maybe-format := '{' '{' | '}' '}' | <format>","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485609,"byte_end":485657,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"! format := '{' [ argument ] [ ':' format_spec ] '}'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485658,"byte_end":485712,"line_start":287,"line_end":287,"column_start":1,"column_end":55}},{"value":"! argument := integer | identifier","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485713,"byte_end":485749,"line_start":288,"line_end":288,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485750,"byte_end":485753,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! format_spec := [[fill]align][sign]['#']['0'][width]['.' precision][type]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485754,"byte_end":485830,"line_start":290,"line_end":290,"column_start":1,"column_end":77}},{"value":"! fill := character","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485831,"byte_end":485852,"line_start":291,"line_end":291,"column_start":1,"column_end":22}},{"value":"! align := '<' | '^' | '>'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485853,"byte_end":485881,"line_start":292,"line_end":292,"column_start":1,"column_end":29}},{"value":"! sign := '+' | '-'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485882,"byte_end":485903,"line_start":293,"line_end":293,"column_start":1,"column_end":22}},{"value":"! width := count","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485904,"byte_end":485922,"line_start":294,"line_end":294,"column_start":1,"column_end":19}},{"value":"! precision := count | '*'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485923,"byte_end":485951,"line_start":295,"line_end":295,"column_start":1,"column_end":29}},{"value":"! type := identifier | '?' | ''","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485952,"byte_end":485985,"line_start":296,"line_end":296,"column_start":1,"column_end":34}},{"value":"! count := parameter | integer","span":{"file_name":"src/liballoc/fmt.rs","byte_start":485986,"byte_end":486018,"line_start":297,"line_end":297,"column_start":1,"column_end":33}},{"value":"! parameter := argument '$'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486019,"byte_end":486048,"line_start":298,"line_end":298,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486049,"byte_end":486056,"line_start":299,"line_end":299,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486057,"byte_end":486060,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"! # Formatting traits","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486061,"byte_end":486084,"line_start":301,"line_end":301,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486085,"byte_end":486088,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"! When requesting that an argument be formatted with a particular type, you","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486089,"byte_end":486166,"line_start":303,"line_end":303,"column_start":1,"column_end":78}},{"value":"! are actually requesting that an argument ascribes to a particular trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486167,"byte_end":486243,"line_start":304,"line_end":304,"column_start":1,"column_end":77}},{"value":"! This allows multiple actual types to be formatted via `{:x}` (like [`i8`] as","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486244,"byte_end":486324,"line_start":305,"line_end":305,"column_start":1,"column_end":81}},{"value":"! well as [`isize`]). The current mapping of types to traits is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486325,"byte_end":486391,"line_start":306,"line_end":306,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486392,"byte_end":486395,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"! * *nothing* ⇒ [`Display`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486396,"byte_end":486427,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"! * `?` ⇒ [`Debug`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486428,"byte_end":486451,"line_start":309,"line_end":309,"column_start":1,"column_end":22}},{"value":"! * `x?` ⇒ [`Debug`] with lower-case hexadecimal integers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486452,"byte_end":486513,"line_start":310,"line_end":310,"column_start":1,"column_end":60}},{"value":"! * `X?` ⇒ [`Debug`] with upper-case hexadecimal integers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486514,"byte_end":486575,"line_start":311,"line_end":311,"column_start":1,"column_end":60}},{"value":"! * `o` ⇒ [`Octal`](trait.Octal.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486576,"byte_end":486617,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"! * `x` ⇒ [`LowerHex`](trait.LowerHex.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486618,"byte_end":486665,"line_start":313,"line_end":313,"column_start":1,"column_end":46}},{"value":"! * `X` ⇒ [`UpperHex`](trait.UpperHex.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486666,"byte_end":486713,"line_start":314,"line_end":314,"column_start":1,"column_end":46}},{"value":"! * `p` ⇒ [`Pointer`](trait.Pointer.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486714,"byte_end":486759,"line_start":315,"line_end":315,"column_start":1,"column_end":44}},{"value":"! * `b` ⇒ [`Binary`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486760,"byte_end":486784,"line_start":316,"line_end":316,"column_start":1,"column_end":23}},{"value":"! * `e` ⇒ [`LowerExp`](trait.LowerExp.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486785,"byte_end":486832,"line_start":317,"line_end":317,"column_start":1,"column_end":46}},{"value":"! * `E` ⇒ [`UpperExp`](trait.UpperExp.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486833,"byte_end":486880,"line_start":318,"line_end":318,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486881,"byte_end":486884,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"! What this means is that any type of argument which implements the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486885,"byte_end":486954,"line_start":320,"line_end":320,"column_start":1,"column_end":70}},{"value":"! [`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":486955,"byte_end":487041,"line_start":321,"line_end":321,"column_start":1,"column_end":87}},{"value":"! are provided for these traits for a number of primitive types by the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487042,"byte_end":487114,"line_start":322,"line_end":322,"column_start":1,"column_end":73}},{"value":"! standard library as well. If no format is specified (as in `{}` or `{:6}`),","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487115,"byte_end":487194,"line_start":323,"line_end":323,"column_start":1,"column_end":80}},{"value":"! then the format trait used is the [`Display`] trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487195,"byte_end":487251,"line_start":324,"line_end":324,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487252,"byte_end":487255,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"! When implementing a format trait for your own type, you will have to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487256,"byte_end":487328,"line_start":326,"line_end":326,"column_start":1,"column_end":73}},{"value":"! implement a method of the signature:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487329,"byte_end":487369,"line_start":327,"line_end":327,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487370,"byte_end":487373,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487374,"byte_end":487381,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"! # #![allow(dead_code)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487382,"byte_end":487408,"line_start":330,"line_end":330,"column_start":1,"column_end":27}},{"value":"! # use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487409,"byte_end":487428,"line_start":331,"line_end":331,"column_start":1,"column_end":20}},{"value":"! # struct Foo; // our custom type","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487429,"byte_end":487465,"line_start":332,"line_end":332,"column_start":1,"column_end":37}},{"value":"! # impl fmt::Display for Foo {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487466,"byte_end":487499,"line_start":333,"line_end":333,"column_start":1,"column_end":34}},{"value":"! fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487500,"byte_end":487558,"line_start":334,"line_end":334,"column_start":1,"column_end":59}},{"value":"! # write!(f, \"testing, testing\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487559,"byte_end":487594,"line_start":335,"line_end":335,"column_start":1,"column_end":36}},{"value":"! # } }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487595,"byte_end":487604,"line_start":336,"line_end":336,"column_start":1,"column_end":10}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487605,"byte_end":487612,"line_start":337,"line_end":337,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487613,"byte_end":487616,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"! Your type will be passed as `self` by-reference, and then the function","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487617,"byte_end":487691,"line_start":339,"line_end":339,"column_start":1,"column_end":75}},{"value":"! should emit output into the `f.buf` stream. It is up to each format trait","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487692,"byte_end":487769,"line_start":340,"line_end":340,"column_start":1,"column_end":78}},{"value":"! implementation to correctly adhere to the requested formatting parameters.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487770,"byte_end":487848,"line_start":341,"line_end":341,"column_start":1,"column_end":79}},{"value":"! The values of these parameters will be listed in the fields of the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487849,"byte_end":487919,"line_start":342,"line_end":342,"column_start":1,"column_end":71}},{"value":"! [`Formatter`] struct. In order to help with this, the [`Formatter`] struct also","span":{"file_name":"src/liballoc/fmt.rs","byte_start":487920,"byte_end":488003,"line_start":343,"line_end":343,"column_start":1,"column_end":84}},{"value":"! provides some helper methods.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488004,"byte_end":488037,"line_start":344,"line_end":344,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488038,"byte_end":488041,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! Additionally, the return value of this function is [`fmt::Result`] which is a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488042,"byte_end":488123,"line_start":346,"line_end":346,"column_start":1,"column_end":82}},{"value":"! type alias of [`Result`]`<(), `[`std::fmt::Error`]`>`. Formatting implementations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488124,"byte_end":488209,"line_start":347,"line_end":347,"column_start":1,"column_end":86}},{"value":"! should ensure that they propagate errors from the [`Formatter`] (e.g., when","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488210,"byte_end":488289,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"! calling [`write!`]). However, they should never return errors spuriously. That","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488290,"byte_end":488372,"line_start":349,"line_end":349,"column_start":1,"column_end":83}},{"value":"! is, a formatting implementation must and may only return an error if the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488373,"byte_end":488449,"line_start":350,"line_end":350,"column_start":1,"column_end":77}},{"value":"! passed-in [`Formatter`] returns an error. This is because, contrary to what","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488450,"byte_end":488529,"line_start":351,"line_end":351,"column_start":1,"column_end":80}},{"value":"! the function signature might suggest, string formatting is an infallible","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488530,"byte_end":488606,"line_start":352,"line_end":352,"column_start":1,"column_end":77}},{"value":"! operation. This function only returns a result because writing to the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488607,"byte_end":488680,"line_start":353,"line_end":353,"column_start":1,"column_end":74}},{"value":"! underlying stream might fail and it must provide a way to propagate the fact","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488681,"byte_end":488761,"line_start":354,"line_end":354,"column_start":1,"column_end":81}},{"value":"! that an error has occurred back up the stack.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488762,"byte_end":488811,"line_start":355,"line_end":355,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488812,"byte_end":488815,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"! An example of implementing the formatting traits would look","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488816,"byte_end":488879,"line_start":357,"line_end":357,"column_start":1,"column_end":64}},{"value":"! like:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488880,"byte_end":488889,"line_start":358,"line_end":358,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488890,"byte_end":488893,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488894,"byte_end":488901,"line_start":360,"line_end":360,"column_start":1,"column_end":8}},{"value":"! use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488902,"byte_end":488919,"line_start":361,"line_end":361,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488920,"byte_end":488923,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! #[derive(Debug)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488924,"byte_end":488944,"line_start":363,"line_end":363,"column_start":1,"column_end":21}},{"value":"! struct Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488945,"byte_end":488966,"line_start":364,"line_end":364,"column_start":1,"column_end":22}},{"value":"!     x: isize,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488967,"byte_end":488984,"line_start":365,"line_end":365,"column_start":1,"column_end":18}},{"value":"!     y: isize,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":488985,"byte_end":489002,"line_start":366,"line_end":366,"column_start":1,"column_end":18}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489003,"byte_end":489008,"line_start":367,"line_end":367,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489009,"byte_end":489012,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"! impl fmt::Display for Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489013,"byte_end":489049,"line_start":369,"line_end":369,"column_start":1,"column_end":37}},{"value":"!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489050,"byte_end":489112,"line_start":370,"line_end":370,"column_start":1,"column_end":63}},{"value":"!         // The `f` value implements the `Write` trait, which is what the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489113,"byte_end":489189,"line_start":371,"line_end":371,"column_start":1,"column_end":77}},{"value":"!         // write! macro is expecting. Note that this formatting ignores the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489190,"byte_end":489269,"line_start":372,"line_end":372,"column_start":1,"column_end":80}},{"value":"!         // various flags provided to format strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489270,"byte_end":489326,"line_start":373,"line_end":373,"column_start":1,"column_end":57}},{"value":"!         write!(f, \"({}, {})\", self.x, self.y)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489327,"byte_end":489376,"line_start":374,"line_end":374,"column_start":1,"column_end":50}},{"value":"!     }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489377,"byte_end":489386,"line_start":375,"line_end":375,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489387,"byte_end":489392,"line_start":376,"line_end":376,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489393,"byte_end":489396,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"! // Different traits allow different forms of output of a type. The meaning","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489397,"byte_end":489475,"line_start":378,"line_end":378,"column_start":1,"column_end":79}},{"value":"! // of this format is to print the magnitude of a vector.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489476,"byte_end":489536,"line_start":379,"line_end":379,"column_start":1,"column_end":61}},{"value":"! impl fmt::Binary for Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489537,"byte_end":489572,"line_start":380,"line_end":380,"column_start":1,"column_end":36}},{"value":"!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489573,"byte_end":489635,"line_start":381,"line_end":381,"column_start":1,"column_end":63}},{"value":"!         let magnitude = (self.x * self.x + self.y * self.y) as f64;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489636,"byte_end":489707,"line_start":382,"line_end":382,"column_start":1,"column_end":72}},{"value":"!         let magnitude = magnitude.sqrt();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489708,"byte_end":489753,"line_start":383,"line_end":383,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489754,"byte_end":489757,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"!         // Respect the formatting flags by using the helper method","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489758,"byte_end":489828,"line_start":385,"line_end":385,"column_start":1,"column_end":71}},{"value":"!         // `pad_integral` on the Formatter object. See the method","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489829,"byte_end":489898,"line_start":386,"line_end":386,"column_start":1,"column_end":70}},{"value":"!         // documentation for details, and the function `pad` can be used","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489899,"byte_end":489975,"line_start":387,"line_end":387,"column_start":1,"column_end":77}},{"value":"!         // to pad strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":489976,"byte_end":490006,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"!         let decimals = f.precision().unwrap_or(3);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490007,"byte_end":490061,"line_start":389,"line_end":389,"column_start":1,"column_end":55}},{"value":"!         let string = format!(\"{:.*}\", decimals, magnitude);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490062,"byte_end":490125,"line_start":390,"line_end":390,"column_start":1,"column_end":64}},{"value":"!         f.pad_integral(true, \"\", &string)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490126,"byte_end":490171,"line_start":391,"line_end":391,"column_start":1,"column_end":46}},{"value":"!     }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490172,"byte_end":490181,"line_start":392,"line_end":392,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490182,"byte_end":490187,"line_start":393,"line_end":393,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490188,"byte_end":490191,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490192,"byte_end":490207,"line_start":395,"line_end":395,"column_start":1,"column_end":16}},{"value":"!     let myvector = Vector2D { x: 3, y: 4 };","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490208,"byte_end":490255,"line_start":396,"line_end":396,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490256,"byte_end":490259,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"!     println!(\"{}\", myvector);       // => \"(3, 4)\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490260,"byte_end":490314,"line_start":398,"line_end":398,"column_start":1,"column_end":55}},{"value":"!     println!(\"{:?}\", myvector);     // => \"Vector2D {x: 3, y:4}\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490315,"byte_end":490383,"line_start":399,"line_end":399,"column_start":1,"column_end":69}},{"value":"!     println!(\"{:10.3b}\", myvector); // => \"     5.000\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490384,"byte_end":490442,"line_start":400,"line_end":400,"column_start":1,"column_end":59}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490443,"byte_end":490448,"line_start":401,"line_end":401,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490449,"byte_end":490456,"line_start":402,"line_end":402,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490457,"byte_end":490460,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"! ### `fmt::Display` vs `fmt::Debug`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490461,"byte_end":490499,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490500,"byte_end":490503,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"! These two formatting traits have distinct purposes:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490504,"byte_end":490559,"line_start":406,"line_end":406,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490560,"byte_end":490563,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"! - [`fmt::Display`][`Display`] implementations assert that the type can be faithfully","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490564,"byte_end":490652,"line_start":408,"line_end":408,"column_start":1,"column_end":89}},{"value":"!   represented as a UTF-8 string at all times. It is **not** expected that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490653,"byte_end":490730,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"!   all types implement the [`Display`] trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490731,"byte_end":490779,"line_start":410,"line_end":410,"column_start":1,"column_end":49}},{"value":"! - [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490780,"byte_end":490873,"line_start":411,"line_end":411,"column_start":1,"column_end":94}},{"value":"!   Output will typically represent the internal state as faithfully as possible.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490874,"byte_end":490957,"line_start":412,"line_end":412,"column_start":1,"column_end":84}},{"value":"!   The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In","span":{"file_name":"src/liballoc/fmt.rs","byte_start":490958,"byte_end":491039,"line_start":413,"line_end":413,"column_start":1,"column_end":82}},{"value":"!   most cases, using `#[derive(Debug)]` is sufficient and recommended.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491040,"byte_end":491113,"line_start":414,"line_end":414,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491114,"byte_end":491117,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"! Some examples of the output from both traits:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491118,"byte_end":491167,"line_start":416,"line_end":416,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491168,"byte_end":491171,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491172,"byte_end":491179,"line_start":418,"line_end":418,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491180,"byte_end":491228,"line_start":419,"line_end":419,"column_start":1,"column_end":49}},{"value":"! assert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491229,"byte_end":491283,"line_start":420,"line_end":420,"column_start":1,"column_end":55}},{"value":"! assert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491284,"byte_end":491357,"line_start":421,"line_end":421,"column_start":1,"column_end":74}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491358,"byte_end":491365,"line_start":422,"line_end":422,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491366,"byte_end":491369,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"! # Related macros","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491370,"byte_end":491390,"line_start":424,"line_end":424,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491391,"byte_end":491394,"line_start":425,"line_end":425,"column_start":1,"column_end":4}},{"value":"! There are a number of related macros in the [`format!`] family. The ones that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491395,"byte_end":491476,"line_start":426,"line_end":426,"column_start":1,"column_end":82}},{"value":"! are currently implemented are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491477,"byte_end":491511,"line_start":427,"line_end":427,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491512,"byte_end":491515,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"! ```ignore (only-for-syntax-highlight)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491516,"byte_end":491557,"line_start":429,"line_end":429,"column_start":1,"column_end":42}},{"value":"! format!      // described above","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491558,"byte_end":491593,"line_start":430,"line_end":430,"column_start":1,"column_end":36}},{"value":"! write!       // first argument is a &mut io::Write, the destination","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491594,"byte_end":491665,"line_start":431,"line_end":431,"column_start":1,"column_end":72}},{"value":"! writeln!     // same as write but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491666,"byte_end":491721,"line_start":432,"line_end":432,"column_start":1,"column_end":56}},{"value":"! print!       // the format string is printed to the standard output","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491722,"byte_end":491793,"line_start":433,"line_end":433,"column_start":1,"column_end":72}},{"value":"! println!     // same as print but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491794,"byte_end":491849,"line_start":434,"line_end":434,"column_start":1,"column_end":56}},{"value":"! eprint!      // the format string is printed to the standard error","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491850,"byte_end":491920,"line_start":435,"line_end":435,"column_start":1,"column_end":71}},{"value":"! eprintln!    // same as eprint but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491921,"byte_end":491977,"line_start":436,"line_end":436,"column_start":1,"column_end":57}},{"value":"! format_args! // described below.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":491978,"byte_end":492014,"line_start":437,"line_end":437,"column_start":1,"column_end":37}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492015,"byte_end":492022,"line_start":438,"line_end":438,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492023,"byte_end":492026,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"! ### `write!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492027,"byte_end":492043,"line_start":440,"line_end":440,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492044,"byte_end":492047,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"! This and [`writeln!`] are two macros which are used to emit the format string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492048,"byte_end":492129,"line_start":442,"line_end":442,"column_start":1,"column_end":82}},{"value":"! to a specified stream. This is used to prevent intermediate allocations of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492130,"byte_end":492208,"line_start":443,"line_end":443,"column_start":1,"column_end":79}},{"value":"! format strings and instead directly write the output. Under the hood, this","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492209,"byte_end":492287,"line_start":444,"line_end":444,"column_start":1,"column_end":79}},{"value":"! function is actually invoking the [`write_fmt`] function defined on the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492288,"byte_end":492363,"line_start":445,"line_end":445,"column_start":1,"column_end":76}},{"value":"! [`std::io::Write`] trait. Example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492364,"byte_end":492411,"line_start":446,"line_end":446,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492412,"byte_end":492415,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492416,"byte_end":492423,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_must_use)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492424,"byte_end":492456,"line_start":449,"line_end":449,"column_start":1,"column_end":33}},{"value":"! use std::io::Write;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492457,"byte_end":492480,"line_start":450,"line_end":450,"column_start":1,"column_end":24}},{"value":"! let mut w = Vec::new();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492481,"byte_end":492508,"line_start":451,"line_end":451,"column_start":1,"column_end":28}},{"value":"! write!(&mut w, \"Hello {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492509,"byte_end":492550,"line_start":452,"line_end":452,"column_start":1,"column_end":42}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492551,"byte_end":492558,"line_start":453,"line_end":453,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492559,"byte_end":492562,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"! ### `print!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492563,"byte_end":492579,"line_start":455,"line_end":455,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492580,"byte_end":492583,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"! This and [`println!`] emit their output to stdout. Similarly to the [`write!`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492584,"byte_end":492666,"line_start":457,"line_end":457,"column_start":1,"column_end":83}},{"value":"! macro, the goal of these macros is to avoid intermediate allocations when","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492667,"byte_end":492744,"line_start":458,"line_end":458,"column_start":1,"column_end":78}},{"value":"! printing output. Example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492745,"byte_end":492783,"line_start":459,"line_end":459,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492784,"byte_end":492787,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492788,"byte_end":492795,"line_start":461,"line_end":461,"column_start":1,"column_end":8}},{"value":"! print!(\"Hello {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492796,"byte_end":492829,"line_start":462,"line_end":462,"column_start":1,"column_end":34}},{"value":"! println!(\"I have a newline {}\", \"character at the end\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492830,"byte_end":492890,"line_start":463,"line_end":463,"column_start":1,"column_end":61}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492891,"byte_end":492898,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"! ### `eprint!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492899,"byte_end":492916,"line_start":465,"line_end":465,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492917,"byte_end":492920,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"! The [`eprint!`] and [`eprintln!`] macros are identical to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492921,"byte_end":492982,"line_start":467,"line_end":467,"column_start":1,"column_end":62}},{"value":"! [`print!`] and [`println!`], respectively, except they emit their","span":{"file_name":"src/liballoc/fmt.rs","byte_start":492983,"byte_end":493052,"line_start":468,"line_end":468,"column_start":1,"column_end":70}},{"value":"! output to stderr.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493053,"byte_end":493074,"line_start":469,"line_end":469,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493075,"byte_end":493078,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"! ### `format_args!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493079,"byte_end":493101,"line_start":471,"line_end":471,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493102,"byte_end":493105,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"! This is a curious macro which is used to safely pass around","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493106,"byte_end":493169,"line_start":473,"line_end":473,"column_start":1,"column_end":64}},{"value":"! an opaque object describing the format string. This object","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493170,"byte_end":493232,"line_start":474,"line_end":474,"column_start":1,"column_end":63}},{"value":"! does not require any heap allocations to create, and it only","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493233,"byte_end":493297,"line_start":475,"line_end":475,"column_start":1,"column_end":65}},{"value":"! references information on the stack. Under the hood, all of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493298,"byte_end":493361,"line_start":476,"line_end":476,"column_start":1,"column_end":64}},{"value":"! the related macros are implemented in terms of this. First","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493362,"byte_end":493424,"line_start":477,"line_end":477,"column_start":1,"column_end":63}},{"value":"! off, some example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493425,"byte_end":493456,"line_start":478,"line_end":478,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493457,"byte_end":493460,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493461,"byte_end":493468,"line_start":480,"line_end":480,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_must_use)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493469,"byte_end":493501,"line_start":481,"line_end":481,"column_start":1,"column_end":33}},{"value":"! use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493502,"byte_end":493519,"line_start":482,"line_end":482,"column_start":1,"column_end":18}},{"value":"! use std::io::{self, Write};","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493520,"byte_end":493551,"line_start":483,"line_end":483,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493552,"byte_end":493555,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"! let mut some_writer = io::stdout();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493556,"byte_end":493595,"line_start":485,"line_end":485,"column_start":1,"column_end":40}},{"value":"! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493596,"byte_end":493673,"line_start":486,"line_end":486,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493674,"byte_end":493677,"line_start":487,"line_end":487,"column_start":1,"column_end":4}},{"value":"! fn my_fmt_fn(args: fmt::Arguments) {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493678,"byte_end":493718,"line_start":488,"line_end":488,"column_start":1,"column_end":41}},{"value":"!     write!(&mut io::stdout(), \"{}\", args);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493719,"byte_end":493765,"line_start":489,"line_end":489,"column_start":1,"column_end":47}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493766,"byte_end":493771,"line_start":490,"line_end":490,"column_start":1,"column_end":6}},{"value":"! my_fmt_fn(format_args!(\", or a {} too\", \"function\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493772,"byte_end":493829,"line_start":491,"line_end":491,"column_start":1,"column_end":58}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493830,"byte_end":493837,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493838,"byte_end":493841,"line_start":493,"line_end":493,"column_start":1,"column_end":4}},{"value":"! The result of the [`format_args!`] macro is a value of type [`fmt::Arguments`].","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493842,"byte_end":493925,"line_start":494,"line_end":494,"column_start":1,"column_end":84}},{"value":"! This structure can then be passed to the [`write`] and [`format`] functions","span":{"file_name":"src/liballoc/fmt.rs","byte_start":493926,"byte_end":494005,"line_start":495,"line_end":495,"column_start":1,"column_end":80}},{"value":"! inside this module in order to process the format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494006,"byte_end":494067,"line_start":496,"line_end":496,"column_start":1,"column_end":62}},{"value":"! The goal of this macro is to even further prevent intermediate allocations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494068,"byte_end":494146,"line_start":497,"line_end":497,"column_start":1,"column_end":79}},{"value":"! when dealing formatting strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494147,"byte_end":494183,"line_start":498,"line_end":498,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494184,"byte_end":494187,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"! For example, a logging library could use the standard formatting syntax, but","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494188,"byte_end":494268,"line_start":500,"line_end":500,"column_start":1,"column_end":81}},{"value":"! it would internally pass around this structure until it has been determined","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494269,"byte_end":494348,"line_start":501,"line_end":501,"column_start":1,"column_end":80}},{"value":"! where output should go to.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494349,"byte_end":494379,"line_start":502,"line_end":502,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494380,"byte_end":494383,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"! [`usize`]: ../../std/primitive.usize.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494384,"byte_end":494429,"line_start":504,"line_end":504,"column_start":1,"column_end":46}},{"value":"! [`isize`]: ../../std/primitive.isize.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494430,"byte_end":494475,"line_start":505,"line_end":505,"column_start":1,"column_end":46}},{"value":"! [`i8`]: ../../std/primitive.i8.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494476,"byte_end":494515,"line_start":506,"line_end":506,"column_start":1,"column_end":40}},{"value":"! [`Display`]: trait.Display.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494516,"byte_end":494551,"line_start":507,"line_end":507,"column_start":1,"column_end":36}},{"value":"! [`Binary`]: trait.Binary.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494552,"byte_end":494585,"line_start":508,"line_end":508,"column_start":1,"column_end":34}},{"value":"! [`fmt::Result`]: type.Result.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494586,"byte_end":494623,"line_start":509,"line_end":509,"column_start":1,"column_end":38}},{"value":"! [`Result`]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494624,"byte_end":494673,"line_start":510,"line_end":510,"column_start":1,"column_end":50}},{"value":"! [`std::fmt::Error`]: struct.Error.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494674,"byte_end":494716,"line_start":511,"line_end":511,"column_start":1,"column_end":43}},{"value":"! [`Formatter`]: struct.Formatter.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494717,"byte_end":494757,"line_start":512,"line_end":512,"column_start":1,"column_end":41}},{"value":"! [`write!`]: ../../std/macro.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494758,"byte_end":494800,"line_start":513,"line_end":513,"column_start":1,"column_end":43}},{"value":"! [`Debug`]: trait.Debug.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494801,"byte_end":494832,"line_start":514,"line_end":514,"column_start":1,"column_end":32}},{"value":"! [`format!`]: ../../std/macro.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494833,"byte_end":494877,"line_start":515,"line_end":515,"column_start":1,"column_end":45}},{"value":"! [`to_string`]: ../../std/string/trait.ToString.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494878,"byte_end":494933,"line_start":516,"line_end":516,"column_start":1,"column_end":56}},{"value":"! [`writeln!`]: ../../std/macro.writeln.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494934,"byte_end":494980,"line_start":517,"line_end":517,"column_start":1,"column_end":47}},{"value":"! [`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt","span":{"file_name":"src/liballoc/fmt.rs","byte_start":494981,"byte_end":495046,"line_start":518,"line_end":518,"column_start":1,"column_end":66}},{"value":"! [`std::io::Write`]: ../../std/io/trait.Write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495047,"byte_end":495100,"line_start":519,"line_end":519,"column_start":1,"column_end":54}},{"value":"! [`print!`]: ../../std/macro.print.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495101,"byte_end":495143,"line_start":520,"line_end":520,"column_start":1,"column_end":43}},{"value":"! [`println!`]: ../../std/macro.println.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495144,"byte_end":495190,"line_start":521,"line_end":521,"column_start":1,"column_end":47}},{"value":"! [`eprint!`]: ../../std/macro.eprint.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495191,"byte_end":495235,"line_start":522,"line_end":522,"column_start":1,"column_end":45}},{"value":"! [`eprintln!`]: ../../std/macro.eprintln.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495236,"byte_end":495284,"line_start":523,"line_end":523,"column_start":1,"column_end":49}},{"value":"! [`write!`]: ../../std/macro.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495285,"byte_end":495327,"line_start":524,"line_end":524,"column_start":1,"column_end":43}},{"value":"! [`format_args!`]: ../../std/macro.format_args.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495328,"byte_end":495382,"line_start":525,"line_end":525,"column_start":1,"column_end":55}},{"value":"! [`fmt::Arguments`]: struct.Arguments.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495383,"byte_end":495428,"line_start":526,"line_end":526,"column_start":1,"column_end":46}},{"value":"! [`write`]: fn.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495429,"byte_end":495457,"line_start":527,"line_end":527,"column_start":1,"column_end":29}},{"value":"! [`format`]: fn.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495458,"byte_end":495488,"line_start":528,"line_end":528,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":495490,"byte_end":495536,"line_start":530,"line_end":530,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2762},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":497199,"byte_end":497205,"line_start":583,"line_end":583,"column_start":8,"column_end":14},"name":"format","qualname":"::fmt::format","value":"fn (args: Arguments<'_>) -> string::String","parent":null,"children":[],"decl_id":null,"docs":" The `format` function takes an [`Arguments`] struct and returns the resulting\n formatted string.","sig":null,"attributes":[{"value":"/ The `format` function takes an [`Arguments`] struct and returns the resulting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496457,"byte_end":496538,"line_start":555,"line_end":555,"column_start":1,"column_end":82}},{"value":"/ formatted string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496539,"byte_end":496560,"line_start":556,"line_end":556,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496561,"byte_end":496564,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ The [`Arguments`] instance can be created with the [`format_args!`] macro.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496565,"byte_end":496643,"line_start":558,"line_end":558,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496644,"byte_end":496647,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496648,"byte_end":496662,"line_start":560,"line_end":560,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496663,"byte_end":496666,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496667,"byte_end":496683,"line_start":562,"line_end":562,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496684,"byte_end":496687,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496688,"byte_end":496695,"line_start":564,"line_end":564,"column_start":1,"column_end":8}},{"value":"/ use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496696,"byte_end":496713,"line_start":565,"line_end":565,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496714,"byte_end":496717,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496718,"byte_end":496779,"line_start":567,"line_end":567,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(s, \"Hello, world!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496780,"byte_end":496815,"line_start":568,"line_end":568,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496816,"byte_end":496823,"line_start":569,"line_end":569,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496824,"byte_end":496827,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ Please note that using [`format!`] might be preferable.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496828,"byte_end":496887,"line_start":571,"line_end":571,"column_start":1,"column_end":60}},{"value":"/ Example:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496888,"byte_end":496900,"line_start":572,"line_end":572,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496901,"byte_end":496904,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496905,"byte_end":496912,"line_start":574,"line_end":574,"column_start":1,"column_end":8}},{"value":"/ let s = format!(\"Hello, {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496913,"byte_end":496956,"line_start":575,"line_end":575,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(s, \"Hello, world!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496957,"byte_end":496992,"line_start":576,"line_end":576,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":496993,"byte_end":497000,"line_start":577,"line_end":577,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":497001,"byte_end":497004,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ [`Arguments`]: struct.Arguments.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":497005,"byte_end":497045,"line_start":579,"line_end":579,"column_start":1,"column_end":41}},{"value":"/ [`format_args!`]: ../../std/macro.format_args.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":497046,"byte_end":497100,"line_start":580,"line_end":580,"column_start":1,"column_end":55}},{"value":"/ [`format!`]: ../../std/macro.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":497101,"byte_end":497145,"line_start":581,"line_end":581,"column_start":1,"column_end":45}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":497146,"byte_end":497191,"line_start":582,"line_end":582,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2763},"span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"src/liballoc/prelude/mod.rs","parent":null,"children":[{"krate":0,"index":2764}],"decl_id":null,"docs":" The alloc Prelude","sig":null,"attributes":[{"value":"! The alloc Prelude","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497459,"byte_end":497480,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497481,"byte_end":497484,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The purpose of this module is to alleviate imports of commonly-used","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497485,"byte_end":497556,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! items of the `alloc` crate by adding a glob import to the top of modules:","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497557,"byte_end":497634,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497635,"byte_end":497638,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497639,"byte_end":497646,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_imports)]","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497647,"byte_end":497678,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"! #![feature(alloc_prelude)]","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497679,"byte_end":497709,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"! extern crate alloc;","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497710,"byte_end":497733,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"! use alloc::prelude::v1::*;","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497734,"byte_end":497764,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497765,"byte_end":497772,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"unstable(feature = \"alloc_prelude\", issue = \"58935\")","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497774,"byte_end":497830,"line_start":13,"line_end":13,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2764},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::prelude::v1","value":"src/liballoc/prelude/v1.rs","parent":null,"children":[{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2770}],"decl_id":null,"docs":" The first version of the prelude of `alloc` crate.","sig":null,"attributes":[{"value":"! The first version of the prelude of `alloc` crate.","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":497845,"byte_end":497899,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":497900,"byte_end":497903,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the [module-level documentation](../index.html) for more.","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":497904,"byte_end":497969,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"unstable(feature = \"alloc_prelude\", issue = \"58935\")","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":497971,"byte_end":498027,"line_start":5,"line_end":5,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2771},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw_vec","qualname":"::raw_vec","value":"src/liballoc/raw_vec.rs","parent":null,"children":[{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2796},{"krate":0,"index":2805},{"krate":0,"index":2811},{"krate":0,"index":2815},{"krate":0,"index":2819},{"krate":0,"index":2840},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2864},{"krate":0,"index":2868},{"krate":0,"index":2869}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\",\n           issue = \"none\")","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498381,"byte_end":498474,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":2790},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500482,"byte_end":500488,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"RawVec","qualname":"::raw_vec::RawVec","value":"RawVec {  }","parent":null,"children":[{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795}],"decl_id":null,"docs":" A low-level utility for more ergonomically allocating, reallocating, and deallocating\n a buffer of memory on the heap without having to worry about all the corner cases\n involved. This type is excellent for building your own data structures like Vec and VecDeque.\n In particular:","sig":null,"attributes":[{"value":"/ A low-level utility for more ergonomically allocating, reallocating, and deallocating","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498778,"byte_end":498867,"line_start":17,"line_end":17,"column_start":1,"column_end":90}},{"value":"/ a buffer of memory on the heap without having to worry about all the corner cases","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498868,"byte_end":498953,"line_start":18,"line_end":18,"column_start":1,"column_end":86}},{"value":"/ involved. This type is excellent for building your own data structures like Vec and VecDeque.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498954,"byte_end":499051,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ In particular:","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499052,"byte_end":499070,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499071,"byte_end":499074,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * Produces `Unique::empty()` on zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499075,"byte_end":499128,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/ * Produces `Unique::empty()` on zero-length allocations.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499129,"byte_end":499189,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499190,"byte_end":499289,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ * Guards against 32-bit systems allocating more than isize::MAX bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499290,"byte_end":499364,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ * Guards against overflowing your length.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499365,"byte_end":499410,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"/ * Aborts on OOM or calls `handle_alloc_error` as applicable.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499411,"byte_end":499475,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/ * Avoids freeing `Unique::empty()`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499476,"byte_end":499515,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ * Contains a `ptr::Unique` and thus endows the user with all related benefits.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499516,"byte_end":499598,"line_start":29,"line_end":29,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499599,"byte_end":499602,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This type does not in anyway inspect the memory that it manages. When dropped it *will*","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499603,"byte_end":499694,"line_start":31,"line_end":31,"column_start":1,"column_end":92}},{"value":"/ free its memory, but it *won't* try to drop its contents. It is up to the user of `RawVec`","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499695,"byte_end":499789,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ to handle the actual things *stored* inside of a `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499790,"byte_end":499852,"line_start":33,"line_end":33,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499853,"byte_end":499856,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Note that a `RawVec` always forces its capacity to be `usize::MAX` for zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499857,"byte_end":499949,"line_start":35,"line_end":35,"column_start":1,"column_end":93}},{"value":"/ This enables you to use capacity-growing logic catch the overflows in your length","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499950,"byte_end":500035,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"/ that might occur with zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500036,"byte_end":500079,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500080,"byte_end":500083,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The above means that you need to be careful when round-tripping this type with a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500084,"byte_end":500168,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/ `Box<[T]>`, since `capacity()` won't yield the length. However, `with_capacity`,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500169,"byte_end":500253,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ `shrink_to_fit`, and `from_box` will actually set `RawVec`'s private capacity","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500254,"byte_end":500335,"line_start":41,"line_end":41,"column_start":1,"column_end":82}},{"value":"/ field. This allows zero-sized types to not be special-cased by consumers of","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500336,"byte_end":500415,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ this type.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500416,"byte_end":500430,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500431,"byte_end":500470,"line_start":44,"line_end":44,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500720,"byte_end":500726,"line_start":54,"line_end":54,"column_start":18,"column_end":24},"name":"new_in","qualname":"<RawVec<T, A>>::new_in","value":"fn (a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but parameterized over the choice of allocator for\n the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `new`, but parameterized over the choice of allocator for","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500605,"byte_end":500671,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500676,"byte_end":500702,"line_start":53,"line_end":53,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501098,"byte_end":501114,"line_start":64,"line_end":64,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<RawVec<T, A>>::with_capacity_in","value":"fn (capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity`, but parameterized over the choice of\n allocator for the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity`, but parameterized over the choice of","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500965,"byte_end":501027,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ allocator for the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501032,"byte_end":501072,"line_start":62,"line_end":62,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501077,"byte_end":501086,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501347,"byte_end":501370,"line_start":71,"line_end":71,"column_start":12,"column_end":35},"name":"with_capacity_zeroed_in","qualname":"<RawVec<T, A>>::with_capacity_zeroed_in","value":"fn (capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity_zeroed`, but parameterized over the choice\n of allocator for the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity_zeroed`, but parameterized over the choice","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501207,"byte_end":501273,"line_start":68,"line_end":68,"column_start":5,"column_end":71}},{"value":"/ of allocator for the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501278,"byte_end":501321,"line_start":69,"line_end":69,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501326,"byte_end":501335,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":2807},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503135,"byte_end":503138,"line_start":113,"line_end":113,"column_start":15,"column_end":18},"name":"NEW","qualname":"::raw_vec::RawVec::<T>::NEW","value":"Self","parent":{"krate":0,"index":2805},"children":[],"decl_id":null,"docs":" HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n to `min_const_fn` and so they cannot be called in `min_const_fn`s either.","sig":null,"attributes":[{"value":"/ HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502441,"byte_end":502521,"line_start":102,"line_end":102,"column_start":5,"column_end":85}},{"value":"/ to `min_const_fn` and so they cannot be called in `min_const_fn`s either.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502526,"byte_end":502603,"line_start":103,"line_end":103,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502608,"byte_end":502611,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ If you change `RawVec<T>::new` or dependencies, please take care to not","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502616,"byte_end":502691,"line_start":105,"line_end":105,"column_start":5,"column_end":80}},{"value":"/ introduce anything that would truly violate `min_const_fn`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502696,"byte_end":502759,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502764,"byte_end":502767,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ NOTE: We could avoid this hack and check conformance with some","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502772,"byte_end":502838,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ `#[rustc_force_min_const_fn]` attribute which requires conformance","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502843,"byte_end":502913,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/ with `min_const_fn` but does not necessarily allow calling it in","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502918,"byte_end":502986,"line_start":110,"line_end":110,"column_start":5,"column_end":73}},{"value":"/ `stable(...) const fn` / user code not enabling `foo` when","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502991,"byte_end":503053,"line_start":111,"line_end":111,"column_start":5,"column_end":67}},{"value":"/ `#[rustc_const_unstable(feature = \"foo\", ..)]` is present.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503058,"byte_end":503120,"line_start":112,"line_end":112,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2808},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503488,"byte_end":503491,"line_start":120,"line_end":120,"column_start":18,"column_end":21},"name":"new","qualname":"<RawVec<T, Global>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the biggest possible `RawVec` (on the system heap)\n without allocating. If `T` has positive size, then this makes a\n `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n `RawVec` with capacity `usize::MAX`. Useful for implementing\n delayed allocation.\n","sig":null,"attributes":[{"value":"/ Creates the biggest possible `RawVec` (on the system heap)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503165,"byte_end":503227,"line_start":115,"line_end":115,"column_start":5,"column_end":67}},{"value":"/ without allocating. If `T` has positive size, then this makes a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503232,"byte_end":503299,"line_start":116,"line_end":116,"column_start":5,"column_end":72}},{"value":"/ `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503304,"byte_end":503373,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/ `RawVec` with capacity `usize::MAX`. Useful for implementing","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503378,"byte_end":503442,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"/ delayed allocation.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503447,"byte_end":503470,"line_start":119,"line_end":119,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504172,"byte_end":504185,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawVec<T, Global>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawVec` (on the system heap) with exactly the\n capacity and alignment requirements for a `[T; capacity]`. This is\n equivalent to calling `RawVec::new` when `capacity` is `0` or `T` is\n zero-sized. Note that if `T` is zero-sized this means you will\n *not* get a `RawVec` with the requested capacity.","sig":null,"attributes":[{"value":"/ Creates a `RawVec` (on the system heap) with exactly the","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503544,"byte_end":503604,"line_start":124,"line_end":124,"column_start":5,"column_end":65}},{"value":"/ capacity and alignment requirements for a `[T; capacity]`. This is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503609,"byte_end":503679,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ equivalent to calling `RawVec::new` when `capacity` is `0` or `T` is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503684,"byte_end":503756,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ zero-sized. Note that if `T` is zero-sized this means you will","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503761,"byte_end":503827,"line_start":127,"line_end":127,"column_start":5,"column_end":71}},{"value":"/ *not* get a `RawVec` with the requested capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503832,"byte_end":503885,"line_start":128,"line_end":128,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503890,"byte_end":503893,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503898,"byte_end":503910,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503915,"byte_end":503918,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503923,"byte_end":503989,"line_start":132,"line_end":132,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503994,"byte_end":504060,"line_start":133,"line_end":133,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504065,"byte_end":504090,"line_start":134,"line_end":134,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504095,"byte_end":504098,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504103,"byte_end":504115,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504120,"byte_end":504123,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504128,"byte_end":504146,"line_start":138,"line_end":138,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504151,"byte_end":504160,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504365,"byte_end":504385,"line_start":146,"line_end":146,"column_start":12,"column_end":32},"name":"with_capacity_zeroed","qualname":"<RawVec<T, Global>>::with_capacity_zeroed","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity`, but guarantees the buffer is zeroed.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity`, but guarantees the buffer is zeroed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504277,"byte_end":504339,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504344,"byte_end":504353,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504930,"byte_end":504947,"line_start":159,"line_end":159,"column_start":19,"column_end":36},"name":"from_raw_parts_in","qualname":"<RawVec<T, A>>::from_raw_parts_in","value":"fn (ptr: *mut T, capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Reconstitutes a `RawVec` from a pointer, capacity, and allocator.","sig":null,"attributes":[{"value":"/ Reconstitutes a `RawVec` from a pointer, capacity, and allocator.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504514,"byte_end":504583,"line_start":152,"line_end":152,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504588,"byte_end":504591,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504596,"byte_end":504620,"line_start":154,"line_end":154,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504625,"byte_end":504628,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The `ptr` must be allocated (via the given allocator `a`), and with the given `capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504633,"byte_end":504726,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/ The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504731,"byte_end":504812,"line_start":157,"line_end":157,"column_start":5,"column_end":86}},{"value":"/ If the `ptr` and `capacity` come from a `RawVec` created via `a`, then this is guaranteed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504817,"byte_end":504911,"line_start":158,"line_end":158,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505483,"byte_end":505497,"line_start":172,"line_end":172,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<RawVec<T, Global>>::from_raw_parts","value":"fn (ptr: *mut T, capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Reconstitutes a `RawVec` from a pointer and capacity.","sig":null,"attributes":[{"value":"/ Reconstitutes a `RawVec` from a pointer and capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505104,"byte_end":505161,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505166,"byte_end":505169,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505174,"byte_end":505198,"line_start":167,"line_end":167,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505203,"byte_end":505206,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The `ptr` must be allocated (on the system heap), and with the given `capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505211,"byte_end":505295,"line_start":169,"line_end":169,"column_start":5,"column_end":89}},{"value":"/ The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505300,"byte_end":505381,"line_start":170,"line_end":170,"column_start":5,"column_end":86}},{"value":"/ If the `ptr` and `capacity` come from a `RawVec`, then this is guaranteed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505386,"byte_end":505464,"line_start":171,"line_end":171,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505683,"byte_end":505691,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"from_box","qualname":"<RawVec<T, Global>>::from_box","value":"fn (mut slice: Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `RawVec<T>`.\n","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `RawVec<T>`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505626,"byte_end":505671,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506132,"byte_end":506135,"line_start":190,"line_end":190,"column_start":12,"column_end":15},"name":"ptr","qualname":"<RawVec<T, A>>::ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw pointer to the start of the allocation. Note that this is\n `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n be careful.\n","sig":null,"attributes":[{"value":"/ Gets a raw pointer to the start of the allocation. Note that this is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505932,"byte_end":506004,"line_start":187,"line_end":187,"column_start":5,"column_end":77}},{"value":"/ `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506009,"byte_end":506100,"line_start":188,"line_end":188,"column_start":5,"column_end":96}},{"value":"/ be careful.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506105,"byte_end":506120,"line_start":189,"line_end":189,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506337,"byte_end":506345,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawVec<T, A>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the capacity of the allocation.","sig":null,"attributes":[{"value":"/ Gets the capacity of the allocation.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506192,"byte_end":506232,"line_start":194,"line_end":194,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506237,"byte_end":506240,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This will always be `usize::MAX` if `T` is zero-sized.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506245,"byte_end":506303,"line_start":196,"line_end":196,"column_start":5,"column_end":63}},{"value":"inline(always)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506308,"byte_end":506325,"line_start":197,"line_end":197,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506518,"byte_end":506523,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"alloc","qualname":"<RawVec<T, A>>::alloc","value":"fn (&self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the allocator backing this `RawVec`.\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the allocator backing this `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506436,"byte_end":506506,"line_start":202,"line_end":202,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506649,"byte_end":506658,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"alloc_mut","qualname":"<RawVec<T, A>>::alloc_mut","value":"fn (&mut self) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the allocator backing this `RawVec`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the allocator backing this `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506566,"byte_end":506637,"line_start":207,"line_end":207,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508952,"byte_end":508958,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"double","qualname":"<RawVec<T, A>>::double","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Doubles the size of the type's backing allocation. This is common enough\n to want to do that it's easiest to just have a dedicated method. Slightly\n more efficient logic can be provided for this than the general case.","sig":null,"attributes":[{"value":"/ Doubles the size of the type's backing allocation. This is common enough","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507180,"byte_end":507256,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ to want to do that it's easiest to just have a dedicated method. Slightly","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507261,"byte_end":507338,"line_start":227,"line_end":227,"column_start":5,"column_end":82}},{"value":"/ more efficient logic can be provided for this than the general case.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507343,"byte_end":507415,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507420,"byte_end":507423,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This function is ideal for when pushing elements one-at-a-time because","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507428,"byte_end":507502,"line_start":230,"line_end":230,"column_start":5,"column_end":79}},{"value":"/ you don't need to incur the costs of the more general computations","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507507,"byte_end":507577,"line_start":231,"line_end":231,"column_start":5,"column_end":75}},{"value":"/ reserve needs to do to guard against overflow. You do however need to","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507582,"byte_end":507655,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/ manually check if your `len == capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507660,"byte_end":507705,"line_start":233,"line_end":233,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507710,"byte_end":507713,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507718,"byte_end":507730,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507735,"byte_end":507738,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ * Panics if `T` is zero-sized on the assumption that you managed to exhaust","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507743,"byte_end":507822,"line_start":237,"line_end":237,"column_start":5,"column_end":84}},{"value":"/   all `usize::MAX` slots in your imaginary buffer.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507827,"byte_end":507881,"line_start":238,"line_end":238,"column_start":5,"column_end":59}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507886,"byte_end":507952,"line_start":239,"line_end":239,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507957,"byte_end":507982,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507987,"byte_end":507990,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":507995,"byte_end":508007,"line_start":242,"line_end":242,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508012,"byte_end":508015,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508020,"byte_end":508037,"line_start":244,"line_end":244,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508042,"byte_end":508045,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508050,"byte_end":508064,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508069,"byte_end":508072,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508077,"byte_end":508084,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ # #![feature(raw_vec_internals)]","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508089,"byte_end":508125,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/ # extern crate alloc;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508130,"byte_end":508155,"line_start":250,"line_end":250,"column_start":5,"column_end":30}},{"value":"/ # use std::ptr;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508160,"byte_end":508179,"line_start":251,"line_end":251,"column_start":5,"column_end":24}},{"value":"/ # use alloc::raw_vec::RawVec;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508184,"byte_end":508217,"line_start":252,"line_end":252,"column_start":5,"column_end":38}},{"value":"/ struct MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508222,"byte_end":508243,"line_start":253,"line_end":253,"column_start":5,"column_end":26}},{"value":"/     buf: RawVec<T>,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508248,"byte_end":508271,"line_start":254,"line_end":254,"column_start":5,"column_end":28}},{"value":"/     len: usize,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508276,"byte_end":508295,"line_start":255,"line_end":255,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508300,"byte_end":508305,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508310,"byte_end":508313,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ impl<T> MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508318,"byte_end":508340,"line_start":258,"line_end":258,"column_start":5,"column_end":27}},{"value":"/     pub fn push(&mut self, elem: T) {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508345,"byte_end":508386,"line_start":259,"line_end":259,"column_start":5,"column_end":46}},{"value":"/         if self.len == self.buf.capacity() { self.buf.double(); }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508391,"byte_end":508460,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/         // double would have aborted or panicked if the len exceeded","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508465,"byte_end":508537,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/         // `isize::MAX` so this is safe to do unchecked now.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508542,"byte_end":508606,"line_start":262,"line_end":262,"column_start":5,"column_end":69}},{"value":"/         unsafe {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508611,"byte_end":508631,"line_start":263,"line_end":263,"column_start":5,"column_end":25}},{"value":"/             ptr::write(self.buf.ptr().add(self.len), elem);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508636,"byte_end":508699,"line_start":264,"line_end":264,"column_start":5,"column_end":68}},{"value":"/         }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508704,"byte_end":508717,"line_start":265,"line_end":265,"column_start":5,"column_end":18}},{"value":"/         self.len += 1;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508722,"byte_end":508748,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/     }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508753,"byte_end":508762,"line_start":267,"line_end":267,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508767,"byte_end":508772,"line_start":268,"line_end":268,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508777,"byte_end":508794,"line_start":269,"line_end":269,"column_start":5,"column_end":22}},{"value":"/ #   let mut vec = MyVec { buf: RawVec::new(), len: 0 };","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508799,"byte_end":508858,"line_start":270,"line_end":270,"column_start":5,"column_end":64}},{"value":"/ #   vec.push(1);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508863,"byte_end":508883,"line_start":271,"line_end":271,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508888,"byte_end":508895,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508900,"byte_end":508907,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"inline(never)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508912,"byte_end":508928,"line_start":274,"line_end":274,"column_start":5,"column_end":21}},{"value":"cold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508933,"byte_end":508940,"line_start":275,"line_end":275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511903,"byte_end":511918,"line_start":338,"line_end":338,"column_start":12,"column_end":27},"name":"double_in_place","qualname":"<RawVec<T, A>>::double_in_place","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to double the size of the type's backing allocation in place. This is common\n enough to want to do that it's easiest to just have a dedicated method. Slightly\n more efficient logic can be provided for this than the general case.","sig":null,"attributes":[{"value":"/ Attempts to double the size of the type's backing allocation in place. This is common","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511252,"byte_end":511341,"line_start":324,"line_end":324,"column_start":5,"column_end":94}},{"value":"/ enough to want to do that it's easiest to just have a dedicated method. Slightly","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511346,"byte_end":511430,"line_start":325,"line_end":325,"column_start":5,"column_end":89}},{"value":"/ more efficient logic can be provided for this than the general case.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511435,"byte_end":511507,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511512,"byte_end":511515,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the reallocation attempt has succeeded.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511520,"byte_end":511581,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511586,"byte_end":511589,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511594,"byte_end":511606,"line_start":330,"line_end":330,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511611,"byte_end":511614,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ * Panics if `T` is zero-sized on the assumption that you managed to exhaust","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511619,"byte_end":511698,"line_start":332,"line_end":332,"column_start":5,"column_end":84}},{"value":"/   all `usize::MAX` slots in your imaginary buffer.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511703,"byte_end":511757,"line_start":333,"line_end":333,"column_start":5,"column_end":59}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511762,"byte_end":511828,"line_start":334,"line_end":334,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511833,"byte_end":511858,"line_start":335,"line_end":335,"column_start":5,"column_end":30}},{"value":"inline(never)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511863,"byte_end":511879,"line_start":336,"line_end":336,"column_start":5,"column_end":21}},{"value":"cold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":511884,"byte_end":511891,"line_start":337,"line_end":337,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513407,"byte_end":513424,"line_start":372,"line_end":372,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<RawVec<T, A>>::try_reserve_exact","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" The same as `reserve_exact`, but returns on errors instead of panicking or aborting.\n","sig":null,"attributes":[{"value":"/ The same as `reserve_exact`, but returns on errors instead of panicking or aborting.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513307,"byte_end":513395,"line_start":371,"line_end":371,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514553,"byte_end":514566,"line_start":400,"line_end":400,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<RawVec<T, A>>::reserve_exact","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already,\n will reallocate the minimum possible amount of memory necessary.\n Generally this will be exactly the amount of memory necessary,\n but in principle the allocator is free to give back more than\n we asked for.","sig":null,"attributes":[{"value":"/ Ensures that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513648,"byte_end":513714,"line_start":380,"line_end":380,"column_start":5,"column_end":71}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513719,"byte_end":513795,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/ will reallocate the minimum possible amount of memory necessary.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513800,"byte_end":513868,"line_start":382,"line_end":382,"column_start":5,"column_end":73}},{"value":"/ Generally this will be exactly the amount of memory necessary,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513873,"byte_end":513939,"line_start":383,"line_end":383,"column_start":5,"column_end":71}},{"value":"/ but in principle the allocator is free to give back more than","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":513944,"byte_end":514009,"line_start":384,"line_end":384,"column_start":5,"column_end":70}},{"value":"/ we asked for.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514014,"byte_end":514031,"line_start":385,"line_end":385,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514036,"byte_end":514039,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514044,"byte_end":514128,"line_start":387,"line_end":387,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514133,"byte_end":514199,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514204,"byte_end":514280,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514285,"byte_end":514288,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514293,"byte_end":514305,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514310,"byte_end":514313,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514318,"byte_end":514384,"line_start":393,"line_end":393,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514389,"byte_end":514455,"line_start":394,"line_end":394,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514460,"byte_end":514485,"line_start":395,"line_end":395,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514490,"byte_end":514493,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514498,"byte_end":514510,"line_start":397,"line_end":397,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514515,"byte_end":514518,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":514523,"byte_end":514541,"line_start":399,"line_end":399,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":515774,"byte_end":515785,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawVec<T, A>>::try_reserve","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" The same as `reserve`, but returns on errors instead of panicking or aborting.\n","sig":null,"attributes":[{"value":"/ The same as `reserve`, but returns on errors instead of panicking or aborting.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":515680,"byte_end":515762,"line_start":425,"line_end":425,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517940,"byte_end":517947,"line_start":486,"line_end":486,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawVec<T, A>>::reserve","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n enough capacity, will reallocate enough space plus comfortable slack\n space to get amortized `O(1)` behavior. Will limit this behavior\n if it would needlessly cause itself to panic.","sig":null,"attributes":[{"value":"/ Ensures that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516013,"byte_end":516079,"line_start":434,"line_end":434,"column_start":5,"column_end":71}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already have","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516084,"byte_end":516164,"line_start":435,"line_end":435,"column_start":5,"column_end":85}},{"value":"/ enough capacity, will reallocate enough space plus comfortable slack","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516169,"byte_end":516241,"line_start":436,"line_end":436,"column_start":5,"column_end":77}},{"value":"/ space to get amortized `O(1)` behavior. Will limit this behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516246,"byte_end":516314,"line_start":437,"line_end":437,"column_start":5,"column_end":73}},{"value":"/ if it would needlessly cause itself to panic.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516319,"byte_end":516368,"line_start":438,"line_end":438,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516373,"byte_end":516376,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516381,"byte_end":516465,"line_start":440,"line_end":440,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516470,"byte_end":516536,"line_start":441,"line_end":441,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516541,"byte_end":516617,"line_start":442,"line_end":442,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516622,"byte_end":516625,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ This is ideal for implementing a bulk-push operation like `extend`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516630,"byte_end":516701,"line_start":444,"line_end":444,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516706,"byte_end":516709,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516714,"byte_end":516726,"line_start":446,"line_end":446,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516731,"byte_end":516734,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516739,"byte_end":516805,"line_start":448,"line_end":448,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516810,"byte_end":516876,"line_start":449,"line_end":449,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516881,"byte_end":516906,"line_start":450,"line_end":450,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516911,"byte_end":516914,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516919,"byte_end":516931,"line_start":452,"line_end":452,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516936,"byte_end":516939,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516944,"byte_end":516962,"line_start":454,"line_end":454,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516967,"byte_end":516970,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516975,"byte_end":516989,"line_start":456,"line_end":456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":516994,"byte_end":516997,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517002,"byte_end":517009,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/ # #![feature(raw_vec_internals)]","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517014,"byte_end":517050,"line_start":459,"line_end":459,"column_start":5,"column_end":41}},{"value":"/ # extern crate alloc;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517055,"byte_end":517080,"line_start":460,"line_end":460,"column_start":5,"column_end":30}},{"value":"/ # use std::ptr;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517085,"byte_end":517104,"line_start":461,"line_end":461,"column_start":5,"column_end":24}},{"value":"/ # use alloc::raw_vec::RawVec;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517109,"byte_end":517142,"line_start":462,"line_end":462,"column_start":5,"column_end":38}},{"value":"/ struct MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517147,"byte_end":517168,"line_start":463,"line_end":463,"column_start":5,"column_end":26}},{"value":"/     buf: RawVec<T>,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517173,"byte_end":517196,"line_start":464,"line_end":464,"column_start":5,"column_end":28}},{"value":"/     len: usize,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517201,"byte_end":517220,"line_start":465,"line_end":465,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517225,"byte_end":517230,"line_start":466,"line_end":466,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517235,"byte_end":517238,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ impl<T: Clone> MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517243,"byte_end":517272,"line_start":468,"line_end":468,"column_start":5,"column_end":34}},{"value":"/     pub fn push_all(&mut self, elems: &[T]) {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517277,"byte_end":517326,"line_start":469,"line_end":469,"column_start":5,"column_end":54}},{"value":"/         self.buf.reserve(self.len, elems.len());","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517331,"byte_end":517383,"line_start":470,"line_end":470,"column_start":5,"column_end":57}},{"value":"/         // reserve would have aborted or panicked if the len exceeded","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517388,"byte_end":517461,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/         // `isize::MAX` so this is safe to do unchecked now.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517466,"byte_end":517530,"line_start":472,"line_end":472,"column_start":5,"column_end":69}},{"value":"/         for x in elems {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517535,"byte_end":517563,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/             unsafe {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517568,"byte_end":517592,"line_start":474,"line_end":474,"column_start":5,"column_end":29}},{"value":"/                 ptr::write(self.buf.ptr().add(self.len), x.clone());","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517597,"byte_end":517669,"line_start":475,"line_end":475,"column_start":5,"column_end":77}},{"value":"/             }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517674,"byte_end":517691,"line_start":476,"line_end":476,"column_start":5,"column_end":22}},{"value":"/             self.len += 1;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517696,"byte_end":517726,"line_start":477,"line_end":477,"column_start":5,"column_end":35}},{"value":"/         }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517731,"byte_end":517744,"line_start":478,"line_end":478,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517749,"byte_end":517758,"line_start":479,"line_end":479,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517763,"byte_end":517768,"line_start":480,"line_end":480,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517773,"byte_end":517790,"line_start":481,"line_end":481,"column_start":5,"column_end":22}},{"value":"/ #   let mut vector = MyVec { buf: RawVec::new(), len: 0 };","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517795,"byte_end":517857,"line_start":482,"line_end":482,"column_start":5,"column_end":67}},{"value":"/ #   vector.push_all(&[1, 3, 5, 7, 9]);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517862,"byte_end":517904,"line_start":483,"line_end":483,"column_start":5,"column_end":47}},{"value":"/ # }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517909,"byte_end":517916,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":517921,"byte_end":517928,"line_start":485,"line_end":485,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":519196,"byte_end":519212,"line_start":510,"line_end":510,"column_start":12,"column_end":28},"name":"reserve_in_place","qualname":"<RawVec<T, A>>::reserve_in_place","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to ensure that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n enough capacity, will reallocate in place enough space plus comfortable slack\n space to get amortized `O(1)` behavior. Will limit this behaviour\n if it would needlessly cause itself to panic.","sig":null,"attributes":[{"value":"/ Attempts to ensure that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518280,"byte_end":518357,"line_start":493,"line_end":493,"column_start":5,"column_end":82}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already have","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518362,"byte_end":518442,"line_start":494,"line_end":494,"column_start":5,"column_end":85}},{"value":"/ enough capacity, will reallocate in place enough space plus comfortable slack","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518447,"byte_end":518528,"line_start":495,"line_end":495,"column_start":5,"column_end":86}},{"value":"/ space to get amortized `O(1)` behavior. Will limit this behaviour","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518533,"byte_end":518602,"line_start":496,"line_end":496,"column_start":5,"column_end":74}},{"value":"/ if it would needlessly cause itself to panic.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518607,"byte_end":518656,"line_start":497,"line_end":497,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518661,"byte_end":518664,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518669,"byte_end":518753,"line_start":499,"line_end":499,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518758,"byte_end":518824,"line_start":500,"line_end":500,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518829,"byte_end":518905,"line_start":501,"line_end":501,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518910,"byte_end":518913,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the reallocation attempt has succeeded.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518918,"byte_end":518979,"line_start":503,"line_end":503,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518984,"byte_end":518987,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":518992,"byte_end":519004,"line_start":505,"line_end":505,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":519009,"byte_end":519012,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":519017,"byte_end":519083,"line_start":507,"line_end":507,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":519088,"byte_end":519154,"line_start":508,"line_end":508,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":519159,"byte_end":519184,"line_start":509,"line_end":509,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521274,"byte_end":521287,"line_start":563,"line_end":563,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<RawVec<T, A>>::shrink_to_fit","value":"fn (&mut self, amount: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the allocation down to the specified amount. If the given amount\n is 0, actually completely deallocates.","sig":null,"attributes":[{"value":"/ Shrinks the allocation down to the specified amount. If the given amount","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":520976,"byte_end":521052,"line_start":553,"line_end":553,"column_start":5,"column_end":81}},{"value":"/ is 0, actually completely deallocates.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521057,"byte_end":521099,"line_start":554,"line_end":554,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521104,"byte_end":521107,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521112,"byte_end":521124,"line_start":556,"line_end":556,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521129,"byte_end":521132,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Panics if the given amount is *larger* than the current capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521137,"byte_end":521206,"line_start":558,"line_end":558,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521211,"byte_end":521214,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521219,"byte_end":521231,"line_start":560,"line_end":560,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521236,"byte_end":521239,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":521244,"byte_end":521262,"line_start":562,"line_end":562,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526266,"byte_end":526274,"line_start":698,"line_end":698,"column_start":19,"column_end":27},"name":"into_box","qualname":"<RawVec<T, Global>>::into_box","value":"fn (self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the entire buffer into `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Converts the entire buffer into `Box<[T]>`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525790,"byte_end":525837,"line_start":688,"line_end":688,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525842,"byte_end":525845,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Note that this will correctly reconstitute any `cap` changes","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525850,"byte_end":525914,"line_start":690,"line_end":690,"column_start":5,"column_end":69}},{"value":"/ that may have been performed. (See description of type for details.)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525919,"byte_end":525991,"line_start":691,"line_end":691,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525996,"byte_end":525999,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526004,"byte_end":526028,"line_start":693,"line_end":693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526033,"byte_end":526036,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ All elements of `RawVec<T, Global>` must be initialized. Notice that","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526041,"byte_end":526113,"line_start":695,"line_end":695,"column_start":5,"column_end":77}},{"value":"/ the rules around uninitialized boxed values are not finalized yet,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526118,"byte_end":526188,"line_start":696,"line_end":696,"column_start":5,"column_end":75}},{"value":"/ but until they are, it is advisable to avoid them.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526193,"byte_end":526247,"line_start":697,"line_end":697,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526693,"byte_end":526707,"line_start":709,"line_end":709,"column_start":19,"column_end":33},"name":"dealloc_buffer","qualname":"<RawVec<T, A>>::dealloc_buffer","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Frees the memory owned by the `RawVec` *without* trying to drop its contents.\n","sig":null,"attributes":[{"value":"/ Frees the memory owned by the `RawVec` *without* trying to drop its contents.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526593,"byte_end":526674,"line_start":708,"line_end":708,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":2870},"span":{"file_name":"src/liballoc/rc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc","qualname":"::rc","value":"src/liballoc/rc.rs","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2891},{"krate":0,"index":2897},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2923},{"krate":0,"index":2927},{"krate":0,"index":2929},{"krate":0,"index":2931},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2941},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2970},{"krate":0,"index":2973},{"krate":0,"index":2976},{"krate":0,"index":2984},{"krate":0,"index":2988},{"krate":0,"index":2991},{"krate":0,"index":3005},{"krate":0,"index":3008},{"krate":0,"index":3011},{"krate":0,"index":3014},{"krate":0,"index":3018},{"krate":0,"index":3020},{"krate":0,"index":3023},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3033},{"krate":0,"index":3037},{"krate":0,"index":3041},{"krate":0,"index":3045},{"krate":0,"index":3047},{"krate":0,"index":3054},{"krate":0,"index":3057},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3067},{"krate":0,"index":3070},{"krate":0,"index":3073},{"krate":0,"index":3076},{"krate":0,"index":3078},{"krate":0,"index":3080},{"krate":0,"index":3083},{"krate":0,"index":3086},{"krate":0,"index":3094},{"krate":0,"index":3098},{"krate":0,"index":3102},{"krate":0,"index":3106},{"krate":0,"index":3110},{"krate":0,"index":3114},{"krate":0,"index":3117},{"krate":0,"index":3119},{"krate":0,"index":3121},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3133},{"krate":0,"index":3135},{"krate":0,"index":3143},{"krate":0,"index":3146},{"krate":0,"index":3149},{"krate":0,"index":3152},{"krate":0,"index":3155},{"krate":0,"index":3164},{"krate":0,"index":3167},{"krate":0,"index":3170},{"krate":0,"index":3173},{"krate":0,"index":3176},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3182}],"decl_id":null,"docs":" Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n Counted'.","sig":null,"attributes":[{"value":"! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":528177,"byte_end":528252,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"! Counted'.","span":{"file_name":"src/liballoc/rc.rs","byte_start":528253,"byte_end":528266,"line_start":2,"line_end":2,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":528267,"byte_end":528270,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! The type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,","span":{"file_name":"src/liballoc/rc.rs","byte_start":528271,"byte_end":528349,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! allocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new","span":{"file_name":"src/liballoc/rc.rs","byte_start":528350,"byte_end":528427,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"! pointer to the same allocation in the heap. When the last [`Rc`] pointer to a","span":{"file_name":"src/liballoc/rc.rs","byte_start":528428,"byte_end":528509,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"! given allocation is destroyed, the value stored in that allocation (often","span":{"file_name":"src/liballoc/rc.rs","byte_start":528510,"byte_end":528587,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"! referred to as \"inner value\") is also dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":528588,"byte_end":528638,"line_start":8,"line_end":8,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":528639,"byte_end":528642,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Shared references in Rust disallow mutation by default, and [`Rc`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":528643,"byte_end":528713,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"! is no exception: you cannot generally obtain a mutable reference to","span":{"file_name":"src/liballoc/rc.rs","byte_start":528714,"byte_end":528785,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"! something inside an [`Rc`]. If you need mutability, put a [`Cell`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":528786,"byte_end":528856,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"! or [`RefCell`] inside the [`Rc`]; see [an example of mutability","span":{"file_name":"src/liballoc/rc.rs","byte_start":528857,"byte_end":528924,"line_start":13,"line_end":13,"column_start":1,"column_end":68}},{"value":"! inside an Rc][mutability].","span":{"file_name":"src/liballoc/rc.rs","byte_start":528925,"byte_end":528955,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":528956,"byte_end":528959,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! [`Rc`] uses non-atomic reference counting. This means that overhead is very","span":{"file_name":"src/liballoc/rc.rs","byte_start":528960,"byte_end":529039,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":529040,"byte_end":529118,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"! does not implement [`Send`][send]. As a result, the Rust compiler","span":{"file_name":"src/liballoc/rc.rs","byte_start":529119,"byte_end":529188,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"! will check *at compile time* that you are not sending [`Rc`]s between","span":{"file_name":"src/liballoc/rc.rs","byte_start":529189,"byte_end":529262,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"! threads. If you need multi-threaded, atomic reference counting, use","span":{"file_name":"src/liballoc/rc.rs","byte_start":529263,"byte_end":529334,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"! [`sync::Arc`][arc].","span":{"file_name":"src/liballoc/rc.rs","byte_start":529335,"byte_end":529358,"line_start":21,"line_end":21,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":529359,"byte_end":529362,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! The [`downgrade`][downgrade] method can be used to create a non-owning","span":{"file_name":"src/liballoc/rc.rs","byte_start":529363,"byte_end":529437,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"! [`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d","span":{"file_name":"src/liballoc/rc.rs","byte_start":529438,"byte_end":529507,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"! to an [`Rc`], but this will return [`None`] if the value stored in the allocation has","span":{"file_name":"src/liballoc/rc.rs","byte_start":529508,"byte_end":529597,"line_start":25,"line_end":25,"column_start":1,"column_end":90}},{"value":"! already been dropped. In other words, `Weak` pointers do not keep the value","span":{"file_name":"src/liballoc/rc.rs","byte_start":529598,"byte_end":529677,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"! inside the allocation alive; however, they *do* keep the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":529678,"byte_end":529749,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"! (the backing store for the inner value) alive.","span":{"file_name":"src/liballoc/rc.rs","byte_start":529750,"byte_end":529800,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":529801,"byte_end":529804,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! A cycle between [`Rc`] pointers will never be deallocated. For this reason,","span":{"file_name":"src/liballoc/rc.rs","byte_start":529805,"byte_end":529884,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"! [`Weak`] is used to break cycles. For example, a tree could have strong","span":{"file_name":"src/liballoc/rc.rs","byte_start":529885,"byte_end":529960,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"! [`Rc`] pointers from parent nodes to children, and [`Weak`] pointers from","span":{"file_name":"src/liballoc/rc.rs","byte_start":529961,"byte_end":530038,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"! children back to their parents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":530039,"byte_end":530074,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530075,"byte_end":530078,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),","span":{"file_name":"src/liballoc/rc.rs","byte_start":530079,"byte_end":530151,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name","span":{"file_name":"src/liballoc/rc.rs","byte_start":530152,"byte_end":530235,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated","span":{"file_name":"src/liballoc/rc.rs","byte_start":530236,"byte_end":530320,"line_start":37,"line_end":37,"column_start":1,"column_end":85}},{"value":"! functions, called using function-like syntax:","span":{"file_name":"src/liballoc/rc.rs","byte_start":530321,"byte_end":530370,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530371,"byte_end":530374,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":530375,"byte_end":530382,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":530383,"byte_end":530403,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"! let my_rc = Rc::new(());","span":{"file_name":"src/liballoc/rc.rs","byte_start":530404,"byte_end":530432,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530433,"byte_end":530436,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Rc::downgrade(&my_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":530437,"byte_end":530463,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":530464,"byte_end":530471,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530472,"byte_end":530475,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! [`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have","span":{"file_name":"src/liballoc/rc.rs","byte_start":530476,"byte_end":530566,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"! already been dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":530567,"byte_end":530592,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530593,"byte_end":530596,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Cloning references","span":{"file_name":"src/liballoc/rc.rs","byte_start":530597,"byte_end":530621,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530622,"byte_end":530625,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! Creating a new reference to the same allocation as an existing reference counted pointer","span":{"file_name":"src/liballoc/rc.rs","byte_start":530626,"byte_end":530718,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"! is done using the `Clone` trait implemented for [`Rc<T>`][`Rc`] and [`Weak<T>`][`Weak`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":530719,"byte_end":530811,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":530812,"byte_end":530815,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":530816,"byte_end":530823,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":530824,"byte_end":530844,"line_start":56,"line_end":56,"column_start":1,"column_end":21}},{"value":"! let foo = Rc::new(vec![1.0, 2.0, 3.0]);","span":{"file_name":"src/liballoc/rc.rs","byte_start":530845,"byte_end":530888,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"! // The two syntaxes below are equivalent.","span":{"file_name":"src/liballoc/rc.rs","byte_start":530889,"byte_end":530934,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"! let a = foo.clone();","span":{"file_name":"src/liballoc/rc.rs","byte_start":530935,"byte_end":530959,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"! let b = Rc::clone(&foo);","span":{"file_name":"src/liballoc/rc.rs","byte_start":530960,"byte_end":530988,"line_start":60,"line_end":60,"column_start":1,"column_end":29}},{"value":"! // a and b both point to the same memory location as foo.","span":{"file_name":"src/liballoc/rc.rs","byte_start":530989,"byte_end":531050,"line_start":61,"line_end":61,"column_start":1,"column_end":62}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":531051,"byte_end":531058,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531059,"byte_end":531062,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! The `Rc::clone(&from)` syntax is the most idiomatic because it conveys more explicitly","span":{"file_name":"src/liballoc/rc.rs","byte_start":531063,"byte_end":531153,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"! the meaning of the code. In the example above, this syntax makes it easier to see that","span":{"file_name":"src/liballoc/rc.rs","byte_start":531154,"byte_end":531244,"line_start":65,"line_end":65,"column_start":1,"column_end":91}},{"value":"! this code is creating a new reference rather than copying the whole content of foo.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531245,"byte_end":531332,"line_start":66,"line_end":66,"column_start":1,"column_end":88}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531333,"byte_end":531336,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":531337,"byte_end":531351,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531352,"byte_end":531355,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! Consider a scenario where a set of `Gadget`s are owned by a given `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531356,"byte_end":531434,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"! We want to have our `Gadget`s point to their `Owner`. We can't do this with","span":{"file_name":"src/liballoc/rc.rs","byte_start":531435,"byte_end":531514,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"! unique ownership, because more than one gadget may belong to the same","span":{"file_name":"src/liballoc/rc.rs","byte_start":531515,"byte_end":531588,"line_start":72,"line_end":72,"column_start":1,"column_end":74}},{"value":"! `Owner`. [`Rc`] allows us to share an `Owner` between multiple `Gadget`s,","span":{"file_name":"src/liballoc/rc.rs","byte_start":531589,"byte_end":531666,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"! and have the `Owner` remain allocated as long as any `Gadget` points at it.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531667,"byte_end":531746,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531747,"byte_end":531750,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":531751,"byte_end":531758,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":531759,"byte_end":531779,"line_start":77,"line_end":77,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531780,"byte_end":531783,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! struct Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":531784,"byte_end":531802,"line_start":79,"line_end":79,"column_start":1,"column_end":19}},{"value":"!     name: String,","span":{"file_name":"src/liballoc/rc.rs","byte_start":531803,"byte_end":531824,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":531825,"byte_end":531851,"line_start":81,"line_end":81,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":531852,"byte_end":531857,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531858,"byte_end":531861,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! struct Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":531862,"byte_end":531881,"line_start":84,"line_end":84,"column_start":1,"column_end":20}},{"value":"!     id: i32,","span":{"file_name":"src/liballoc/rc.rs","byte_start":531882,"byte_end":531898,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"!     owner: Rc<Owner>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":531899,"byte_end":531924,"line_start":86,"line_end":86,"column_start":1,"column_end":26}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":531925,"byte_end":531951,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":531952,"byte_end":531957,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531958,"byte_end":531961,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":531962,"byte_end":531977,"line_start":90,"line_end":90,"column_start":1,"column_end":16}},{"value":"!     // Create a reference-counted `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531978,"byte_end":532024,"line_start":91,"line_end":91,"column_start":1,"column_end":47}},{"value":"!     let gadget_owner: Rc<Owner> = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":532025,"byte_end":532071,"line_start":92,"line_end":92,"column_start":1,"column_end":47}},{"value":"!         Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":532072,"byte_end":532091,"line_start":93,"line_end":93,"column_start":1,"column_end":20}},{"value":"!             name: \"Gadget Man\".to_string(),","span":{"file_name":"src/liballoc/rc.rs","byte_start":532092,"byte_end":532139,"line_start":94,"line_end":94,"column_start":1,"column_end":48}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":532140,"byte_end":532153,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":532154,"byte_end":532164,"line_start":96,"line_end":96,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":532165,"byte_end":532168,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"!     // Create `Gadget`s belonging to `gadget_owner`. Cloning the `Rc<Owner>`","span":{"file_name":"src/liballoc/rc.rs","byte_start":532169,"byte_end":532249,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"!     // gives us a new pointer to the same `Owner` allocation, incrementing","span":{"file_name":"src/liballoc/rc.rs","byte_start":532250,"byte_end":532328,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"!     // the reference count in the process.","span":{"file_name":"src/liballoc/rc.rs","byte_start":532329,"byte_end":532375,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"!     let gadget1 = Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":532376,"byte_end":532406,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"!         id: 1,","span":{"file_name":"src/liballoc/rc.rs","byte_start":532407,"byte_end":532425,"line_start":102,"line_end":102,"column_start":1,"column_end":19}},{"value":"!         owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":532426,"byte_end":532470,"line_start":103,"line_end":103,"column_start":1,"column_end":45}},{"value":"!     };","span":{"file_name":"src/liballoc/rc.rs","byte_start":532471,"byte_end":532481,"line_start":104,"line_end":104,"column_start":1,"column_end":11}},{"value":"!     let gadget2 = Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":532482,"byte_end":532512,"line_start":105,"line_end":105,"column_start":1,"column_end":31}},{"value":"!         id: 2,","span":{"file_name":"src/liballoc/rc.rs","byte_start":532513,"byte_end":532531,"line_start":106,"line_end":106,"column_start":1,"column_end":19}},{"value":"!         owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":532532,"byte_end":532576,"line_start":107,"line_end":107,"column_start":1,"column_end":45}},{"value":"!     };","span":{"file_name":"src/liballoc/rc.rs","byte_start":532577,"byte_end":532587,"line_start":108,"line_end":108,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":532588,"byte_end":532591,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"!     // Dispose of our local variable `gadget_owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":532592,"byte_end":532648,"line_start":110,"line_end":110,"column_start":1,"column_end":57}},{"value":"!     drop(gadget_owner);","span":{"file_name":"src/liballoc/rc.rs","byte_start":532649,"byte_end":532676,"line_start":111,"line_end":111,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":532677,"byte_end":532680,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"!     // Despite dropping `gadget_owner`, we're still able to print out the name","span":{"file_name":"src/liballoc/rc.rs","byte_start":532681,"byte_end":532763,"line_start":113,"line_end":113,"column_start":1,"column_end":83}},{"value":"!     // of the `Owner` of the `Gadget`s. This is because we've only dropped a","span":{"file_name":"src/liballoc/rc.rs","byte_start":532764,"byte_end":532844,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"!     // single `Rc<Owner>`, not the `Owner` it points to. As long as there are","span":{"file_name":"src/liballoc/rc.rs","byte_start":532845,"byte_end":532926,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"!     // other `Rc<Owner>` pointing at the same `Owner` allocation, it will remain","span":{"file_name":"src/liballoc/rc.rs","byte_start":532927,"byte_end":533011,"line_start":116,"line_end":116,"column_start":1,"column_end":85}},{"value":"!     // live. The field projection `gadget1.owner.name` works because","span":{"file_name":"src/liballoc/rc.rs","byte_start":533012,"byte_end":533084,"line_start":117,"line_end":117,"column_start":1,"column_end":73}},{"value":"!     // `Rc<Owner>` automatically dereferences to `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":533085,"byte_end":533146,"line_start":118,"line_end":118,"column_start":1,"column_end":62}},{"value":"!     println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533147,"byte_end":533221,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"!     println!(\"Gadget {} owned by {}\", gadget2.id, gadget2.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533222,"byte_end":533296,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":533297,"byte_end":533300,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"!     // At the end of the function, `gadget1` and `gadget2` are destroyed, and","span":{"file_name":"src/liballoc/rc.rs","byte_start":533301,"byte_end":533382,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"!     // with them the last counted references to our `Owner`. Gadget Man now","span":{"file_name":"src/liballoc/rc.rs","byte_start":533383,"byte_end":533462,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"!     // gets destroyed as well.","span":{"file_name":"src/liballoc/rc.rs","byte_start":533463,"byte_end":533497,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":533498,"byte_end":533503,"line_start":125,"line_end":125,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":533504,"byte_end":533511,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":533512,"byte_end":533515,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"! If our requirements change, and we also need to be able to traverse from","span":{"file_name":"src/liballoc/rc.rs","byte_start":533516,"byte_end":533592,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"! `Owner` to `Gadget`, we will run into problems. An [`Rc`] pointer from `Owner`","span":{"file_name":"src/liballoc/rc.rs","byte_start":533593,"byte_end":533676,"line_start":129,"line_end":129,"column_start":1,"column_end":83}},{"value":"! to `Gadget` introduces a cycle. This means that their","span":{"file_name":"src/liballoc/rc.rs","byte_start":533677,"byte_end":533734,"line_start":130,"line_end":130,"column_start":1,"column_end":58}},{"value":"! reference counts can never reach 0, and the allocation will never be destroyed:","span":{"file_name":"src/liballoc/rc.rs","byte_start":533735,"byte_end":533818,"line_start":131,"line_end":131,"column_start":1,"column_end":84}},{"value":"! a memory leak. In order to get around this, we can use [`Weak`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":533819,"byte_end":533886,"line_start":132,"line_end":132,"column_start":1,"column_end":68}},{"value":"! pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":533887,"byte_end":533900,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":533901,"byte_end":533904,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"! Rust actually makes it somewhat difficult to produce this loop in the first","span":{"file_name":"src/liballoc/rc.rs","byte_start":533905,"byte_end":533984,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"! place. In order to end up with two values that point at each other, one of","span":{"file_name":"src/liballoc/rc.rs","byte_start":533985,"byte_end":534063,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"! them needs to be mutable. This is difficult because [`Rc`] enforces","span":{"file_name":"src/liballoc/rc.rs","byte_start":534064,"byte_end":534135,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"! memory safety by only giving out shared references to the value it wraps,","span":{"file_name":"src/liballoc/rc.rs","byte_start":534136,"byte_end":534213,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"! and these don't allow direct mutation. We need to wrap the part of the","span":{"file_name":"src/liballoc/rc.rs","byte_start":534214,"byte_end":534288,"line_start":139,"line_end":139,"column_start":1,"column_end":75}},{"value":"! value we wish to mutate in a [`RefCell`], which provides *interior","span":{"file_name":"src/liballoc/rc.rs","byte_start":534289,"byte_end":534359,"line_start":140,"line_end":140,"column_start":1,"column_end":71}},{"value":"! mutability*: a method to achieve mutability through a shared reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534360,"byte_end":534435,"line_start":141,"line_end":141,"column_start":1,"column_end":76}},{"value":"! [`RefCell`] enforces Rust's borrowing rules at runtime.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534436,"byte_end":534495,"line_start":142,"line_end":142,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":534496,"byte_end":534499,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":534500,"byte_end":534507,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":534508,"byte_end":534528,"line_start":145,"line_end":145,"column_start":1,"column_end":21}},{"value":"! use std::rc::Weak;","span":{"file_name":"src/liballoc/rc.rs","byte_start":534529,"byte_end":534551,"line_start":146,"line_end":146,"column_start":1,"column_end":23}},{"value":"! use std::cell::RefCell;","span":{"file_name":"src/liballoc/rc.rs","byte_start":534552,"byte_end":534579,"line_start":147,"line_end":147,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":534580,"byte_end":534583,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"! struct Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":534584,"byte_end":534602,"line_start":149,"line_end":149,"column_start":1,"column_end":19}},{"value":"!     name: String,","span":{"file_name":"src/liballoc/rc.rs","byte_start":534603,"byte_end":534624,"line_start":150,"line_end":150,"column_start":1,"column_end":22}},{"value":"!     gadgets: RefCell<Vec<Weak<Gadget>>>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":534625,"byte_end":534669,"line_start":151,"line_end":151,"column_start":1,"column_end":45}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":534670,"byte_end":534696,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":534697,"byte_end":534702,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":534703,"byte_end":534706,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"! struct Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":534707,"byte_end":534726,"line_start":155,"line_end":155,"column_start":1,"column_end":20}},{"value":"!     id: i32,","span":{"file_name":"src/liballoc/rc.rs","byte_start":534727,"byte_end":534743,"line_start":156,"line_end":156,"column_start":1,"column_end":17}},{"value":"!     owner: Rc<Owner>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":534744,"byte_end":534769,"line_start":157,"line_end":157,"column_start":1,"column_end":26}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":534770,"byte_end":534796,"line_start":158,"line_end":158,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":534797,"byte_end":534802,"line_start":159,"line_end":159,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":534803,"byte_end":534806,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":534807,"byte_end":534822,"line_start":161,"line_end":161,"column_start":1,"column_end":16}},{"value":"!     // Create a reference-counted `Owner`. Note that we've put the `Owner`'s","span":{"file_name":"src/liballoc/rc.rs","byte_start":534823,"byte_end":534903,"line_start":162,"line_end":162,"column_start":1,"column_end":81}},{"value":"!     // vector of `Gadget`s inside a `RefCell` so that we can mutate it through","span":{"file_name":"src/liballoc/rc.rs","byte_start":534904,"byte_end":534986,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"!     // a shared reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534987,"byte_end":535017,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"!     let gadget_owner: Rc<Owner> = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":535018,"byte_end":535064,"line_start":165,"line_end":165,"column_start":1,"column_end":47}},{"value":"!         Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":535065,"byte_end":535084,"line_start":166,"line_end":166,"column_start":1,"column_end":20}},{"value":"!             name: \"Gadget Man\".to_string(),","span":{"file_name":"src/liballoc/rc.rs","byte_start":535085,"byte_end":535132,"line_start":167,"line_end":167,"column_start":1,"column_end":48}},{"value":"!             gadgets: RefCell::new(vec![]),","span":{"file_name":"src/liballoc/rc.rs","byte_start":535133,"byte_end":535179,"line_start":168,"line_end":168,"column_start":1,"column_end":47}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":535180,"byte_end":535193,"line_start":169,"line_end":169,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":535194,"byte_end":535204,"line_start":170,"line_end":170,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":535205,"byte_end":535208,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"!     // Create `Gadget`s belonging to `gadget_owner`, as before.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535209,"byte_end":535276,"line_start":172,"line_end":172,"column_start":1,"column_end":68}},{"value":"!     let gadget1 = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":535277,"byte_end":535307,"line_start":173,"line_end":173,"column_start":1,"column_end":31}},{"value":"!         Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":535308,"byte_end":535328,"line_start":174,"line_end":174,"column_start":1,"column_end":21}},{"value":"!             id: 1,","span":{"file_name":"src/liballoc/rc.rs","byte_start":535329,"byte_end":535351,"line_start":175,"line_end":175,"column_start":1,"column_end":23}},{"value":"!             owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":535352,"byte_end":535400,"line_start":176,"line_end":176,"column_start":1,"column_end":49}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":535401,"byte_end":535414,"line_start":177,"line_end":177,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":535415,"byte_end":535425,"line_start":178,"line_end":178,"column_start":1,"column_end":11}},{"value":"!     let gadget2 = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":535426,"byte_end":535456,"line_start":179,"line_end":179,"column_start":1,"column_end":31}},{"value":"!         Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":535457,"byte_end":535477,"line_start":180,"line_end":180,"column_start":1,"column_end":21}},{"value":"!             id: 2,","span":{"file_name":"src/liballoc/rc.rs","byte_start":535478,"byte_end":535500,"line_start":181,"line_end":181,"column_start":1,"column_end":23}},{"value":"!             owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":535501,"byte_end":535549,"line_start":182,"line_end":182,"column_start":1,"column_end":49}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":535550,"byte_end":535563,"line_start":183,"line_end":183,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":535564,"byte_end":535574,"line_start":184,"line_end":184,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":535575,"byte_end":535578,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"!     // Add the `Gadget`s to their `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535579,"byte_end":535625,"line_start":186,"line_end":186,"column_start":1,"column_end":47}},{"value":"!     {","span":{"file_name":"src/liballoc/rc.rs","byte_start":535626,"byte_end":535635,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"!         let mut gadgets = gadget_owner.gadgets.borrow_mut();","span":{"file_name":"src/liballoc/rc.rs","byte_start":535636,"byte_end":535700,"line_start":188,"line_end":188,"column_start":1,"column_end":65}},{"value":"!         gadgets.push(Rc::downgrade(&gadget1));","span":{"file_name":"src/liballoc/rc.rs","byte_start":535701,"byte_end":535751,"line_start":189,"line_end":189,"column_start":1,"column_end":51}},{"value":"!         gadgets.push(Rc::downgrade(&gadget2));","span":{"file_name":"src/liballoc/rc.rs","byte_start":535752,"byte_end":535802,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":535803,"byte_end":535806,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"!         // `RefCell` dynamic borrow ends here.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535807,"byte_end":535857,"line_start":192,"line_end":192,"column_start":1,"column_end":51}},{"value":"!     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":535858,"byte_end":535867,"line_start":193,"line_end":193,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":535868,"byte_end":535871,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"!     // Iterate over our `Gadget`s, printing their details out.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535872,"byte_end":535938,"line_start":195,"line_end":195,"column_start":1,"column_end":67}},{"value":"!     for gadget_weak in gadget_owner.gadgets.borrow().iter() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":535939,"byte_end":536004,"line_start":196,"line_end":196,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":536005,"byte_end":536008,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"!         // `gadget_weak` is a `Weak<Gadget>`. Since `Weak` pointers can't","span":{"file_name":"src/liballoc/rc.rs","byte_start":536009,"byte_end":536086,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"!         // guarantee the allocation still exists, we need to call","span":{"file_name":"src/liballoc/rc.rs","byte_start":536087,"byte_end":536156,"line_start":199,"line_end":199,"column_start":1,"column_end":70}},{"value":"!         // `upgrade`, which returns an `Option<Rc<Gadget>>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":536157,"byte_end":536221,"line_start":200,"line_end":200,"column_start":1,"column_end":65}},{"value":"!         //","span":{"file_name":"src/liballoc/rc.rs","byte_start":536222,"byte_end":536236,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"!         // In this case we know the allocation still exists, so we simply","span":{"file_name":"src/liballoc/rc.rs","byte_start":536237,"byte_end":536314,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"!         // `unwrap` the `Option`. In a more complicated program, you might","span":{"file_name":"src/liballoc/rc.rs","byte_start":536315,"byte_end":536393,"line_start":203,"line_end":203,"column_start":1,"column_end":79}},{"value":"!         // need graceful error handling for a `None` result.","span":{"file_name":"src/liballoc/rc.rs","byte_start":536394,"byte_end":536458,"line_start":204,"line_end":204,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":536459,"byte_end":536462,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"!         let gadget = gadget_weak.upgrade().unwrap();","span":{"file_name":"src/liballoc/rc.rs","byte_start":536463,"byte_end":536519,"line_start":206,"line_end":206,"column_start":1,"column_end":57}},{"value":"!         println!(\"Gadget {} owned by {}\", gadget.id, gadget.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":536520,"byte_end":536596,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"!     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":536597,"byte_end":536606,"line_start":208,"line_end":208,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":536607,"byte_end":536610,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"!     // At the end of the function, `gadget_owner`, `gadget1`, and `gadget2`","span":{"file_name":"src/liballoc/rc.rs","byte_start":536611,"byte_end":536690,"line_start":210,"line_end":210,"column_start":1,"column_end":80}},{"value":"!     // are destroyed. There are now no strong (`Rc`) pointers to the","span":{"file_name":"src/liballoc/rc.rs","byte_start":536691,"byte_end":536763,"line_start":211,"line_end":211,"column_start":1,"column_end":73}},{"value":"!     // gadgets, so they are destroyed. This zeroes the reference count on","span":{"file_name":"src/liballoc/rc.rs","byte_start":536764,"byte_end":536841,"line_start":212,"line_end":212,"column_start":1,"column_end":78}},{"value":"!     // Gadget Man, so he gets destroyed as well.","span":{"file_name":"src/liballoc/rc.rs","byte_start":536842,"byte_end":536894,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":536895,"byte_end":536900,"line_start":214,"line_end":214,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":536901,"byte_end":536908,"line_start":215,"line_end":215,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":536909,"byte_end":536912,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"! [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":536913,"byte_end":536939,"line_start":217,"line_end":217,"column_start":1,"column_end":27}},{"value":"! [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":536940,"byte_end":536970,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"! [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":536971,"byte_end":537031,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"! [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537032,"byte_end":537077,"line_start":220,"line_end":220,"column_start":1,"column_end":46}},{"value":"! [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537078,"byte_end":537129,"line_start":221,"line_end":221,"column_start":1,"column_end":52}},{"value":"! [send]: ../../std/marker/trait.Send.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537130,"byte_end":537174,"line_start":222,"line_end":222,"column_start":1,"column_end":45}},{"value":"! [arc]: ../../std/sync/struct.Arc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537175,"byte_end":537216,"line_start":223,"line_end":223,"column_start":1,"column_end":42}},{"value":"! [`Deref`]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537217,"byte_end":537262,"line_start":224,"line_end":224,"column_start":1,"column_end":46}},{"value":"! [downgrade]: struct.Rc.html#method.downgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":537263,"byte_end":537311,"line_start":225,"line_end":225,"column_start":1,"column_end":49}},{"value":"! [upgrade]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":537312,"byte_end":537358,"line_start":226,"line_end":226,"column_start":1,"column_end":47}},{"value":"! [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":537359,"byte_end":537419,"line_start":227,"line_end":227,"column_start":1,"column_end":61}},{"value":"! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable","span":{"file_name":"src/liballoc/rc.rs","byte_start":537420,"byte_end":537516,"line_start":228,"line_end":228,"column_start":1,"column_end":97}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":537518,"byte_end":537564,"line_start":230,"line_end":230,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2923},"span":{"file_name":"src/liballoc/rc.rs","byte_start":538980,"byte_end":538982,"line_start":281,"line_end":281,"column_start":12,"column_end":14},"name":"Rc","qualname":"::rc::Rc","value":"Rc {  }","parent":null,"children":[{"krate":0,"index":2925},{"krate":0,"index":2926}],"decl_id":null,"docs":" A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\n Counted'.","sig":null,"attributes":[{"value":"/ A single-threaded reference-counting pointer. 'Rc' stands for 'Reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":538432,"byte_end":538508,"line_start":268,"line_end":268,"column_start":1,"column_end":77}},{"value":"/ Counted'.","span":{"file_name":"src/liballoc/rc.rs","byte_start":538509,"byte_end":538522,"line_start":269,"line_end":269,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538523,"byte_end":538526,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](./index.html) for more details.","span":{"file_name":"src/liballoc/rc.rs","byte_start":538527,"byte_end":538599,"line_start":271,"line_end":271,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538600,"byte_end":538603,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ The inherent methods of `Rc` are all associated functions, which means","span":{"file_name":"src/liballoc/rc.rs","byte_start":538604,"byte_end":538678,"line_start":273,"line_end":273,"column_start":1,"column_end":75}},{"value":"/ that you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of","span":{"file_name":"src/liballoc/rc.rs","byte_start":538679,"byte_end":538766,"line_start":274,"line_end":274,"column_start":1,"column_end":88}},{"value":"/ `value.get_mut()`. This avoids conflicts with methods of the inner","span":{"file_name":"src/liballoc/rc.rs","byte_start":538767,"byte_end":538837,"line_start":275,"line_end":275,"column_start":1,"column_end":71}},{"value":"/ type `T`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":538838,"byte_end":538851,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538852,"byte_end":538855,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ [get_mut]: #method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":538856,"byte_end":538886,"line_start":278,"line_end":278,"column_start":1,"column_end":31}},{"value":"lang = \"rc\"","span":{"file_name":"src/liballoc/rc.rs","byte_start":538909,"byte_end":538920,"line_start":279,"line_end":279,"column_start":23,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":538923,"byte_end":538968,"line_start":280,"line_end":280,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"src/liballoc/rc.rs","byte_start":539984,"byte_end":539987,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"new","qualname":"<Rc<T>>::new","value":"fn (value: T) -> Rc<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":539770,"byte_end":539799,"line_start":308,"line_end":308,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":539804,"byte_end":539807,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":539812,"byte_end":539826,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":539831,"byte_end":539834,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":539839,"byte_end":539846,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":539851,"byte_end":539871,"line_start":313,"line_end":313,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":539876,"byte_end":539879,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":539884,"byte_end":539910,"line_start":315,"line_end":315,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":539915,"byte_end":539922,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":539927,"byte_end":539972,"line_start":317,"line_end":317,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"src/liballoc/rc.rs","byte_start":541026,"byte_end":541036,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Rc<T>>::new_uninit","value":"fn () -> Rc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc` with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc` with uninitialized contents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":540453,"byte_end":540507,"line_start":330,"line_end":330,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540512,"byte_end":540515,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":540520,"byte_end":540534,"line_start":332,"line_end":332,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540539,"byte_end":540542,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":540547,"byte_end":540554,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":540559,"byte_end":540586,"line_start":335,"line_end":335,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":540591,"byte_end":540625,"line_start":336,"line_end":336,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540630,"byte_end":540633,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":540638,"byte_end":540658,"line_start":338,"line_end":338,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540663,"byte_end":540666,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let mut five = Rc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/rc.rs","byte_start":540671,"byte_end":540714,"line_start":340,"line_end":340,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540719,"byte_end":540722,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":540727,"byte_end":540750,"line_start":342,"line_end":342,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":540755,"byte_end":540790,"line_start":343,"line_end":343,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":540795,"byte_end":540858,"line_start":344,"line_end":344,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540863,"byte_end":540866,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":540871,"byte_end":540897,"line_start":346,"line_end":346,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":540902,"byte_end":540908,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540913,"byte_end":540916,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/rc.rs","byte_start":540921,"byte_end":540945,"line_start":349,"line_end":349,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":540950,"byte_end":540957,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":540962,"byte_end":541014,"line_start":351,"line_end":351,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":"src/liballoc/rc.rs","byte_start":541890,"byte_end":541900,"line_start":381,"line_end":381,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Rc<T>>::new_zeroed","value":"fn () -> Rc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/rc.rs","byte_start":541254,"byte_end":541324,"line_start":360,"line_end":360,"column_start":5,"column_end":75}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/rc.rs","byte_start":541329,"byte_end":541361,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541366,"byte_end":541369,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and","span":{"file_name":"src/liballoc/rc.rs","byte_start":541374,"byte_end":541441,"line_start":363,"line_end":363,"column_start":5,"column_end":72}},{"value":"/ incorrect usage of this method.","span":{"file_name":"src/liballoc/rc.rs","byte_start":541446,"byte_end":541481,"line_start":364,"line_end":364,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541486,"byte_end":541489,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":541494,"byte_end":541508,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541513,"byte_end":541516,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":541521,"byte_end":541528,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":541533,"byte_end":541560,"line_start":369,"line_end":369,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541565,"byte_end":541568,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":541573,"byte_end":541593,"line_start":371,"line_end":371,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541598,"byte_end":541601,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let zero = Rc::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/rc.rs","byte_start":541606,"byte_end":541645,"line_start":373,"line_end":373,"column_start":5,"column_end":44}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/rc.rs","byte_start":541650,"byte_end":541695,"line_start":374,"line_end":374,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541700,"byte_end":541703,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/rc.rs","byte_start":541708,"byte_end":541732,"line_start":376,"line_end":376,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":541737,"byte_end":541744,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":541749,"byte_end":541752,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/rc.rs","byte_start":541757,"byte_end":541821,"line_start":379,"line_end":379,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":541826,"byte_end":541878,"line_start":380,"line_end":380,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"src/liballoc/rc.rs","byte_start":542328,"byte_end":542331,"line_start":392,"line_end":392,"column_start":12,"column_end":15},"name":"pin","qualname":"<Rc<T>>::pin","value":"fn (value: T) -> Pin<Rc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n `value` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/rc.rs","byte_start":542128,"byte_end":542202,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ `value` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/rc.rs","byte_start":542207,"byte_end":542267,"line_start":390,"line_end":390,"column_start":5,"column_end":65}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":542272,"byte_end":542316,"line_start":391,"line_end":391,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":"src/liballoc/rc.rs","byte_start":543113,"byte_end":543123,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Rc<T>>::try_unwrap","value":"fn (this: Self) -> Result<T, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner value, if the `Rc` has exactly one strong reference.","sig":null,"attributes":[{"value":"/ Returns the inner value, if the `Rc` has exactly one strong reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":542423,"byte_end":542497,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542502,"byte_end":542505,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Otherwise, an [`Err`][result] is returned with the same `Rc` that was","span":{"file_name":"src/liballoc/rc.rs","byte_start":542510,"byte_end":542583,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ passed in.","span":{"file_name":"src/liballoc/rc.rs","byte_start":542588,"byte_end":542602,"line_start":399,"line_end":399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542607,"byte_end":542610,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ This will succeed even if there are outstanding weak references.","span":{"file_name":"src/liballoc/rc.rs","byte_start":542615,"byte_end":542683,"line_start":401,"line_end":401,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542688,"byte_end":542691,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ [result]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":542696,"byte_end":542743,"line_start":403,"line_end":403,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542748,"byte_end":542751,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":542756,"byte_end":542770,"line_start":405,"line_end":405,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542775,"byte_end":542778,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":542783,"byte_end":542790,"line_start":407,"line_end":407,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":542795,"byte_end":542815,"line_start":408,"line_end":408,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542820,"byte_end":542823,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":542828,"byte_end":542851,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(Rc::try_unwrap(x), Ok(3));","span":{"file_name":"src/liballoc/rc.rs","byte_start":542856,"byte_end":542897,"line_start":411,"line_end":411,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":542902,"byte_end":542905,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":542910,"byte_end":542933,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/ let _y = Rc::clone(&x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":542938,"byte_end":542965,"line_start":414,"line_end":414,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":542970,"byte_end":543021,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":543026,"byte_end":543033,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":543038,"byte_end":543047,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":543052,"byte_end":543101,"line_start":418,"line_end":418,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"src/liballoc/rc.rs","byte_start":544566,"byte_end":544582,"line_start":464,"line_end":464,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Rc<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Rc<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new reference-counted slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new reference-counted slice with uninitialized contents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":543798,"byte_end":543871,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":543876,"byte_end":543879,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":543884,"byte_end":543898,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":543903,"byte_end":543906,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":543911,"byte_end":543918,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":543923,"byte_end":543950,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":543955,"byte_end":543989,"line_start":446,"line_end":446,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":543994,"byte_end":543997,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":544002,"byte_end":544022,"line_start":448,"line_end":448,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544027,"byte_end":544030,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ let mut values = Rc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":544035,"byte_end":544089,"line_start":450,"line_end":450,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544094,"byte_end":544097,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":544102,"byte_end":544127,"line_start":452,"line_end":452,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":544132,"byte_end":544167,"line_start":453,"line_end":453,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/rc.rs","byte_start":544172,"byte_end":544240,"line_start":454,"line_end":454,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/rc.rs","byte_start":544245,"byte_end":544313,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":544318,"byte_end":544386,"line_start":456,"line_end":456,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544391,"byte_end":544394,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":544399,"byte_end":544427,"line_start":458,"line_end":458,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":544432,"byte_end":544438,"line_start":459,"line_end":459,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544443,"byte_end":544446,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/rc.rs","byte_start":544451,"byte_end":544485,"line_start":461,"line_end":461,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":544490,"byte_end":544497,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":544502,"byte_end":544554,"line_start":463,"line_end":463,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"src/liballoc/rc.rs","byte_start":545699,"byte_end":545710,"line_start":503,"line_end":503,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Rc<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Rc<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Rc<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Rc<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":544734,"byte_end":544758,"line_start":470,"line_end":470,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544763,"byte_end":544766,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":544771,"byte_end":544783,"line_start":472,"line_end":472,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":544788,"byte_end":544791,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":544796,"byte_end":544837,"line_start":474,"line_end":474,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/rc.rs","byte_start":544842,"byte_end":544902,"line_start":475,"line_end":475,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/rc.rs","byte_start":544907,"byte_end":544945,"line_start":476,"line_end":476,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/rc.rs","byte_start":544950,"byte_end":545012,"line_start":477,"line_end":477,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/rc.rs","byte_start":545017,"byte_end":545057,"line_start":478,"line_end":478,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545062,"byte_end":545065,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/rc.rs","byte_start":545070,"byte_end":545159,"line_start":480,"line_end":480,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545164,"byte_end":545167,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":545172,"byte_end":545186,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545191,"byte_end":545194,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":545199,"byte_end":545206,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":545211,"byte_end":545238,"line_start":485,"line_end":485,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":545243,"byte_end":545277,"line_start":486,"line_end":486,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545282,"byte_end":545285,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":545290,"byte_end":545310,"line_start":488,"line_end":488,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545315,"byte_end":545318,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let mut five = Rc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/rc.rs","byte_start":545323,"byte_end":545366,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545371,"byte_end":545374,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":545379,"byte_end":545402,"line_start":492,"line_end":492,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":545407,"byte_end":545442,"line_start":493,"line_end":493,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":545447,"byte_end":545510,"line_start":494,"line_end":494,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545515,"byte_end":545518,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":545523,"byte_end":545549,"line_start":496,"line_end":496,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":545554,"byte_end":545560,"line_start":497,"line_end":497,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545565,"byte_end":545568,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/rc.rs","byte_start":545573,"byte_end":545597,"line_start":499,"line_end":499,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":545602,"byte_end":545609,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":545614,"byte_end":545666,"line_start":501,"line_end":501,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":545671,"byte_end":545680,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2957},"span":{"file_name":"src/liballoc/rc.rs","byte_start":546984,"byte_end":546995,"line_start":544,"line_end":544,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Rc<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Rc<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Rc<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Rc<[T]>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":545841,"byte_end":545867,"line_start":509,"line_end":509,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545872,"byte_end":545875,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":545880,"byte_end":545892,"line_start":511,"line_end":511,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":545897,"byte_end":545900,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":545905,"byte_end":545946,"line_start":513,"line_end":513,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/rc.rs","byte_start":545951,"byte_end":546011,"line_start":514,"line_end":514,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/rc.rs","byte_start":546016,"byte_end":546054,"line_start":515,"line_end":515,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/rc.rs","byte_start":546059,"byte_end":546121,"line_start":516,"line_end":516,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/rc.rs","byte_start":546126,"byte_end":546166,"line_start":517,"line_end":517,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546171,"byte_end":546174,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/rc.rs","byte_start":546179,"byte_end":546268,"line_start":519,"line_end":519,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546273,"byte_end":546276,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":546281,"byte_end":546295,"line_start":521,"line_end":521,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546300,"byte_end":546303,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":546308,"byte_end":546315,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":546320,"byte_end":546347,"line_start":524,"line_end":524,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":546352,"byte_end":546386,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546391,"byte_end":546394,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":546399,"byte_end":546419,"line_start":527,"line_end":527,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546424,"byte_end":546427,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ let mut values = Rc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":546432,"byte_end":546486,"line_start":529,"line_end":529,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546491,"byte_end":546494,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":546499,"byte_end":546524,"line_start":531,"line_end":531,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":546529,"byte_end":546564,"line_start":532,"line_end":532,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/rc.rs","byte_start":546569,"byte_end":546637,"line_start":533,"line_end":533,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/rc.rs","byte_start":546642,"byte_end":546710,"line_start":534,"line_end":534,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":546715,"byte_end":546783,"line_start":535,"line_end":535,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546788,"byte_end":546791,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":546796,"byte_end":546824,"line_start":537,"line_end":537,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":546829,"byte_end":546835,"line_start":538,"line_end":538,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":546840,"byte_end":546843,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/rc.rs","byte_start":546848,"byte_end":546882,"line_start":540,"line_end":540,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":546887,"byte_end":546894,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":546899,"byte_end":546951,"line_start":542,"line_end":542,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":546956,"byte_end":546965,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"src/liballoc/rc.rs","byte_start":547647,"byte_end":547655,"line_start":567,"line_end":567,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Rc<T>>::into_raw","value":"fn (this: Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Rc`, returning the wrapped pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Rc`, returning the wrapped pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":547121,"byte_end":547174,"line_start":550,"line_end":550,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":547179,"byte_end":547182,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ To avoid a memory leak the pointer must be converted back to an `Rc` using","span":{"file_name":"src/liballoc/rc.rs","byte_start":547187,"byte_end":547265,"line_start":552,"line_end":552,"column_start":5,"column_end":83}},{"value":"/ [`Rc::from_raw`][from_raw].","span":{"file_name":"src/liballoc/rc.rs","byte_start":547270,"byte_end":547301,"line_start":553,"line_end":553,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":547306,"byte_end":547309,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ [from_raw]: struct.Rc.html#method.from_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":547314,"byte_end":547360,"line_start":555,"line_end":555,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":547365,"byte_end":547368,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":547373,"byte_end":547387,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":547392,"byte_end":547395,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":547400,"byte_end":547407,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":547412,"byte_end":547432,"line_start":560,"line_end":560,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":547437,"byte_end":547440,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":547445,"byte_end":547485,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"/ let x_ptr = Rc::into_raw(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":547490,"byte_end":547522,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(unsafe { &*x_ptr }, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":547527,"byte_end":547571,"line_start":564,"line_end":564,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":547576,"byte_end":547583,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":547588,"byte_end":547635,"line_start":566,"line_end":566,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"src/liballoc/rc.rs","byte_start":549355,"byte_end":549363,"line_start":612,"line_end":612,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Rc<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an `Rc` from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs an `Rc` from a raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":548341,"byte_end":548383,"line_start":583,"line_end":583,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548388,"byte_end":548391,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ The raw pointer must have been previously returned by a call to a","span":{"file_name":"src/liballoc/rc.rs","byte_start":548396,"byte_end":548465,"line_start":585,"line_end":585,"column_start":5,"column_end":74}},{"value":"/ [`Rc::into_raw`][into_raw].","span":{"file_name":"src/liballoc/rc.rs","byte_start":548470,"byte_end":548501,"line_start":586,"line_end":586,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548506,"byte_end":548509,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to memory problems. For example, a","span":{"file_name":"src/liballoc/rc.rs","byte_start":548514,"byte_end":548606,"line_start":588,"line_end":588,"column_start":5,"column_end":97}},{"value":"/ double-free may occur if the function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":548611,"byte_end":548693,"line_start":589,"line_end":589,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548698,"byte_end":548701,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ [into_raw]: struct.Rc.html#method.into_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":548706,"byte_end":548752,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548757,"byte_end":548760,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":548765,"byte_end":548779,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548784,"byte_end":548787,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":548792,"byte_end":548799,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":548804,"byte_end":548824,"line_start":596,"line_end":596,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548829,"byte_end":548832,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":548837,"byte_end":548877,"line_start":598,"line_end":598,"column_start":5,"column_end":45}},{"value":"/ let x_ptr = Rc::into_raw(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":548882,"byte_end":548914,"line_start":599,"line_end":599,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":548919,"byte_end":548922,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":548927,"byte_end":548939,"line_start":601,"line_end":601,"column_start":5,"column_end":17}},{"value":"/     // Convert back to an `Rc` to prevent leak.","span":{"file_name":"src/liballoc/rc.rs","byte_start":548944,"byte_end":548995,"line_start":602,"line_end":602,"column_start":5,"column_end":56}},{"value":"/     let x = Rc::from_raw(x_ptr);","span":{"file_name":"src/liballoc/rc.rs","byte_start":549000,"byte_end":549036,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(&*x, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":549041,"byte_end":549074,"line_start":604,"line_end":604,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549079,"byte_end":549082,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/     // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.","span":{"file_name":"src/liballoc/rc.rs","byte_start":549087,"byte_end":549160,"line_start":606,"line_end":606,"column_start":5,"column_end":78}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":549165,"byte_end":549170,"line_start":607,"line_end":607,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549175,"byte_end":549178,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!","span":{"file_name":"src/liballoc/rc.rs","byte_start":549183,"byte_end":549272,"line_start":609,"line_end":609,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":549277,"byte_end":549284,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":549289,"byte_end":549336,"line_start":611,"line_end":611,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":"src/liballoc/rc.rs","byte_start":550128,"byte_end":550145,"line_start":638,"line_end":638,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Rc<T>>::into_raw_non_null","value":"fn (this: Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":549654,"byte_end":549723,"line_start":622,"line_end":622,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549728,"byte_end":549731,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":549736,"byte_end":549750,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549755,"byte_end":549758,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":549763,"byte_end":549770,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ #![feature(rc_into_raw_non_null)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":549775,"byte_end":549812,"line_start":627,"line_end":627,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549817,"byte_end":549820,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":549825,"byte_end":549845,"line_start":629,"line_end":629,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":549850,"byte_end":549853,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":549858,"byte_end":549898,"line_start":631,"line_end":631,"column_start":5,"column_end":45}},{"value":"/ let ptr = Rc::into_raw_non_null(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":549903,"byte_end":549942,"line_start":632,"line_end":632,"column_start":5,"column_end":44}},{"value":"/ let deref = unsafe { ptr.as_ref() };","span":{"file_name":"src/liballoc/rc.rs","byte_start":549947,"byte_end":549987,"line_start":633,"line_end":633,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(deref, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":549992,"byte_end":550023,"line_start":634,"line_end":634,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":550028,"byte_end":550035,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":550040,"byte_end":550102,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":550107,"byte_end":550116,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"src/liballoc/rc.rs","byte_start":550661,"byte_end":550670,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Rc<T>>::downgrade","value":"fn (this: &Self) -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Weak`][weak] pointer to this allocation.","sig":null,"attributes":[{"value":"/ Creates a new [`Weak`][weak] pointer to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":550319,"byte_end":550379,"line_start":643,"line_end":643,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550384,"byte_end":550387,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":550392,"byte_end":550420,"line_start":645,"line_end":645,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550425,"byte_end":550428,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":550433,"byte_end":550447,"line_start":647,"line_end":647,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550452,"byte_end":550455,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":550460,"byte_end":550467,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":550472,"byte_end":550492,"line_start":650,"line_end":650,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550497,"byte_end":550500,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":550505,"byte_end":550531,"line_start":652,"line_end":652,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550536,"byte_end":550539,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":550544,"byte_end":550585,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":550590,"byte_end":550597,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":550602,"byte_end":550649,"line_start":656,"line_end":656,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2964},"span":{"file_name":"src/liballoc/rc.rs","byte_start":551277,"byte_end":551287,"line_start":680,"line_end":680,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Rc<T>>::weak_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of [`Weak`][weak] pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of [`Weak`][weak] pointers to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":550865,"byte_end":550931,"line_start":664,"line_end":664,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550936,"byte_end":550939,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":550944,"byte_end":550972,"line_start":666,"line_end":666,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":550977,"byte_end":550980,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":550985,"byte_end":550999,"line_start":668,"line_end":668,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551004,"byte_end":551007,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":551012,"byte_end":551019,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":551024,"byte_end":551044,"line_start":671,"line_end":671,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551049,"byte_end":551052,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":551057,"byte_end":551083,"line_start":673,"line_end":673,"column_start":5,"column_end":31}},{"value":"/ let _weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":551088,"byte_end":551130,"line_start":674,"line_end":674,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551135,"byte_end":551138,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Rc::weak_count(&five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":551143,"byte_end":551184,"line_start":676,"line_end":676,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":551189,"byte_end":551196,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":551201,"byte_end":551210,"line_start":678,"line_end":678,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":551215,"byte_end":551265,"line_start":679,"line_end":679,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"src/liballoc/rc.rs","byte_start":551715,"byte_end":551727,"line_start":698,"line_end":698,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Rc<T>>::strong_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Rc`) pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Rc`) pointers to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":551347,"byte_end":551412,"line_start":684,"line_end":684,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551417,"byte_end":551420,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":551425,"byte_end":551439,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551444,"byte_end":551447,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":551452,"byte_end":551459,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":551464,"byte_end":551484,"line_start":689,"line_end":689,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551489,"byte_end":551492,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":551497,"byte_end":551523,"line_start":691,"line_end":691,"column_start":5,"column_end":31}},{"value":"/ let _also_five = Rc::clone(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":551528,"byte_end":551566,"line_start":692,"line_end":692,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":551571,"byte_end":551574,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Rc::strong_count(&five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":551579,"byte_end":551622,"line_start":694,"line_end":694,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":551627,"byte_end":551634,"line_start":695,"line_end":695,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":551639,"byte_end":551648,"line_start":696,"line_end":696,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":551653,"byte_end":551703,"line_start":697,"line_end":697,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"src/liballoc/rc.rs","byte_start":553012,"byte_end":553019,"line_start":739,"line_end":739,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Rc<T>>::get_mut","value":"fn (this: &mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Rc`, if there are\n no other `Rc` or [`Weak`][weak] pointers to the same allocation.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Rc`, if there are","span":{"file_name":"src/liballoc/rc.rs","byte_start":552057,"byte_end":552122,"line_start":711,"line_end":711,"column_start":5,"column_end":70}},{"value":"/ no other `Rc` or [`Weak`][weak] pointers to the same allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":552127,"byte_end":552195,"line_start":712,"line_end":712,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552200,"byte_end":552203,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] otherwise, because it is not safe to","span":{"file_name":"src/liballoc/rc.rs","byte_start":552208,"byte_end":552265,"line_start":714,"line_end":714,"column_start":5,"column_end":62}},{"value":"/ mutate a shared value.","span":{"file_name":"src/liballoc/rc.rs","byte_start":552270,"byte_end":552296,"line_start":715,"line_end":715,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552301,"byte_end":552304,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ See also [`make_mut`][make_mut], which will [`clone`][clone]","span":{"file_name":"src/liballoc/rc.rs","byte_start":552309,"byte_end":552373,"line_start":717,"line_end":717,"column_start":5,"column_end":69}},{"value":"/ the inner value when there are other pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":552378,"byte_end":552428,"line_start":718,"line_end":718,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552433,"byte_end":552436,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":552441,"byte_end":552469,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":552474,"byte_end":552534,"line_start":721,"line_end":721,"column_start":5,"column_end":65}},{"value":"/ [make_mut]: struct.Rc.html#method.make_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":552539,"byte_end":552585,"line_start":722,"line_end":722,"column_start":5,"column_end":51}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":552590,"byte_end":552650,"line_start":723,"line_end":723,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552655,"byte_end":552658,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":552663,"byte_end":552677,"line_start":725,"line_end":725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552682,"byte_end":552685,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":552690,"byte_end":552697,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":552702,"byte_end":552722,"line_start":728,"line_end":728,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552727,"byte_end":552730,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let mut x = Rc::new(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":552735,"byte_end":552762,"line_start":730,"line_end":730,"column_start":5,"column_end":32}},{"value":"/ *Rc::get_mut(&mut x).unwrap() = 4;","span":{"file_name":"src/liballoc/rc.rs","byte_start":552767,"byte_end":552805,"line_start":731,"line_end":731,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(*x, 4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":552810,"byte_end":552832,"line_start":732,"line_end":732,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":552837,"byte_end":552840,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let _y = Rc::clone(&x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":552845,"byte_end":552872,"line_start":734,"line_end":734,"column_start":5,"column_end":32}},{"value":"/ assert!(Rc::get_mut(&mut x).is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":552877,"byte_end":552920,"line_start":735,"line_end":735,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":552925,"byte_end":552932,"line_start":736,"line_end":736,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":552937,"byte_end":552946,"line_start":737,"line_end":737,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":552951,"byte_end":553000,"line_start":738,"line_end":738,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"src/liballoc/rc.rs","byte_start":554062,"byte_end":554079,"line_start":772,"line_end":772,"column_start":19,"column_end":36},"name":"get_mut_unchecked","qualname":"<Rc<T>>::get_mut_unchecked","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Rc`,\n without any check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Rc`,","span":{"file_name":"src/liballoc/rc.rs","byte_start":553162,"byte_end":553214,"line_start":743,"line_end":743,"column_start":5,"column_end":57}},{"value":"/ without any check.","span":{"file_name":"src/liballoc/rc.rs","byte_start":553219,"byte_end":553241,"line_start":744,"line_end":744,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553246,"byte_end":553249,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which is safe and does appropriate checks.","span":{"file_name":"src/liballoc/rc.rs","byte_start":553254,"byte_end":553322,"line_start":746,"line_end":746,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553327,"byte_end":553330,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: struct.Rc.html#method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":553335,"byte_end":553381,"line_start":748,"line_end":748,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553386,"byte_end":553389,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":553394,"byte_end":553406,"line_start":750,"line_end":750,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553411,"byte_end":553414,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Any other `Rc` or [`Weak`] pointers to the same allocation must not be dereferenced","span":{"file_name":"src/liballoc/rc.rs","byte_start":553419,"byte_end":553506,"line_start":752,"line_end":752,"column_start":5,"column_end":92}},{"value":"/ for the duration of the returned borrow.","span":{"file_name":"src/liballoc/rc.rs","byte_start":553511,"byte_end":553555,"line_start":753,"line_end":753,"column_start":5,"column_end":49}},{"value":"/ This is trivially the case if no such pointers exist,","span":{"file_name":"src/liballoc/rc.rs","byte_start":553560,"byte_end":553617,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/ for example immediately after `Rc::new`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":553622,"byte_end":553666,"line_start":755,"line_end":755,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553671,"byte_end":553674,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":553679,"byte_end":553693,"line_start":757,"line_end":757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553698,"byte_end":553701,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":553706,"byte_end":553713,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":553718,"byte_end":553752,"line_start":760,"line_end":760,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553757,"byte_end":553760,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":553765,"byte_end":553785,"line_start":762,"line_end":762,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":553790,"byte_end":553793,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let mut x = Rc::new(String::new());","span":{"file_name":"src/liballoc/rc.rs","byte_start":553798,"byte_end":553837,"line_start":764,"line_end":764,"column_start":5,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":553842,"byte_end":553854,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/     Rc::get_mut_unchecked(&mut x).push_str(\"foo\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":553859,"byte_end":553912,"line_start":766,"line_end":766,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":553917,"byte_end":553922,"line_start":767,"line_end":767,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(*x, \"foo\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":553927,"byte_end":553953,"line_start":768,"line_end":768,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":553958,"byte_end":553965,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":553970,"byte_end":553979,"line_start":770,"line_end":770,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"get_mut_unchecked\", issue = \"63292\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":553984,"byte_end":554043,"line_start":771,"line_end":771,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2969},"span":{"file_name":"src/liballoc/rc.rs","byte_start":554705,"byte_end":554711,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Rc<T>>::ptr_eq","value":"fn (this: &Self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Rc`s point to the same allocation\n (in a vein similar to [`ptr::eq`]).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":554157,"byte_end":554166,"line_start":776,"line_end":776,"column_start":5,"column_end":14}},{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":554171,"byte_end":554218,"line_start":777,"line_end":777,"column_start":5,"column_end":52}},{"value":"/ Returns `true` if the two `Rc`s point to the same allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":554223,"byte_end":554287,"line_start":778,"line_end":778,"column_start":5,"column_end":69}},{"value":"/ (in a vein similar to [`ptr::eq`]).","span":{"file_name":"src/liballoc/rc.rs","byte_start":554292,"byte_end":554331,"line_start":779,"line_end":779,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554336,"byte_end":554339,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":554344,"byte_end":554358,"line_start":781,"line_end":781,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554363,"byte_end":554366,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":554371,"byte_end":554378,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":554383,"byte_end":554403,"line_start":784,"line_end":784,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554408,"byte_end":554411,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":554416,"byte_end":554442,"line_start":786,"line_end":786,"column_start":5,"column_end":31}},{"value":"/ let same_five = Rc::clone(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":554447,"byte_end":554484,"line_start":787,"line_end":787,"column_start":5,"column_end":42}},{"value":"/ let other_five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":554489,"byte_end":554521,"line_start":788,"line_end":788,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554526,"byte_end":554529,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ assert!(Rc::ptr_eq(&five, &same_five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":554534,"byte_end":554577,"line_start":790,"line_end":790,"column_start":5,"column_end":48}},{"value":"/ assert!(!Rc::ptr_eq(&five, &other_five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":554582,"byte_end":554627,"line_start":791,"line_end":791,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":554632,"byte_end":554639,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554644,"byte_end":554647,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":554652,"byte_end":554693,"line_start":794,"line_end":794,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2972},"span":{"file_name":"src/liballoc/rc.rs","byte_start":556621,"byte_end":556629,"line_start":852,"line_end":852,"column_start":12,"column_end":20},"name":"make_mut","qualname":"<Rc<T>>::make_mut","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Makes a mutable reference into the given `Rc`.","sig":null,"attributes":[{"value":"/ Makes a mutable reference into the given `Rc`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":554833,"byte_end":554883,"line_start":801,"line_end":801,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":554888,"byte_end":554891,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ If there are other `Rc` pointers to the same allocation, then `make_mut` will","span":{"file_name":"src/liballoc/rc.rs","byte_start":554896,"byte_end":554977,"line_start":803,"line_end":803,"column_start":5,"column_end":86}},{"value":"/ [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also","span":{"file_name":"src/liballoc/rc.rs","byte_start":554982,"byte_end":555073,"line_start":804,"line_end":804,"column_start":5,"column_end":96}},{"value":"/ referred to as clone-on-write.","span":{"file_name":"src/liballoc/rc.rs","byte_start":555078,"byte_end":555112,"line_start":805,"line_end":805,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555117,"byte_end":555120,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ If there are no other `Rc` pointers to this allocation, then [`Weak`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":555125,"byte_end":555198,"line_start":807,"line_end":807,"column_start":5,"column_end":78}},{"value":"/ pointers to this allocation will be disassociated.","span":{"file_name":"src/liballoc/rc.rs","byte_start":555203,"byte_end":555257,"line_start":808,"line_end":808,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555262,"byte_end":555265,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which will fail rather than cloning.","span":{"file_name":"src/liballoc/rc.rs","byte_start":555270,"byte_end":555332,"line_start":810,"line_end":810,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555337,"byte_end":555340,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":555345,"byte_end":555375,"line_start":812,"line_end":812,"column_start":5,"column_end":35}},{"value":"/ [`clone`]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":555380,"byte_end":555442,"line_start":813,"line_end":813,"column_start":5,"column_end":67}},{"value":"/ [`get_mut`]: struct.Rc.html#method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":555447,"byte_end":555493,"line_start":814,"line_end":814,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555498,"byte_end":555501,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":555506,"byte_end":555520,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555525,"byte_end":555528,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":555533,"byte_end":555540,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":555545,"byte_end":555565,"line_start":819,"line_end":819,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555570,"byte_end":555573,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ let mut data = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":555578,"byte_end":555608,"line_start":821,"line_end":821,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555613,"byte_end":555616,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":555621,"byte_end":555686,"line_start":823,"line_end":823,"column_start":5,"column_end":70}},{"value":"/ let mut other_data = Rc::clone(&data);    // Won't clone inner data","span":{"file_name":"src/liballoc/rc.rs","byte_start":555691,"byte_end":555762,"line_start":824,"line_end":824,"column_start":5,"column_end":76}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Clones inner data","span":{"file_name":"src/liballoc/rc.rs","byte_start":555767,"byte_end":555829,"line_start":825,"line_end":825,"column_start":5,"column_end":67}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":555834,"byte_end":555899,"line_start":826,"line_end":826,"column_start":5,"column_end":70}},{"value":"/ *Rc::make_mut(&mut other_data) *= 2;  // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":555904,"byte_end":555969,"line_start":827,"line_end":827,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":555974,"byte_end":555977,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ // Now `data` and `other_data` point to different allocations.","span":{"file_name":"src/liballoc/rc.rs","byte_start":555982,"byte_end":556048,"line_start":829,"line_end":829,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(*data, 8);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556053,"byte_end":556078,"line_start":830,"line_end":830,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*other_data, 12);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556083,"byte_end":556115,"line_start":831,"line_end":831,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":556120,"byte_end":556127,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556132,"byte_end":556135,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ [`Weak`] pointers will be disassociated:","span":{"file_name":"src/liballoc/rc.rs","byte_start":556140,"byte_end":556184,"line_start":834,"line_end":834,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556189,"byte_end":556192,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":556197,"byte_end":556204,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":556209,"byte_end":556229,"line_start":837,"line_end":837,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556234,"byte_end":556237,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let mut data = Rc::new(75);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556242,"byte_end":556273,"line_start":839,"line_end":839,"column_start":5,"column_end":36}},{"value":"/ let weak = Rc::downgrade(&data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556278,"byte_end":556314,"line_start":840,"line_end":840,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556319,"byte_end":556322,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert!(75 == *data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556327,"byte_end":556352,"line_start":842,"line_end":842,"column_start":5,"column_end":30}},{"value":"/ assert!(75 == *weak.upgrade().unwrap());","span":{"file_name":"src/liballoc/rc.rs","byte_start":556357,"byte_end":556401,"line_start":843,"line_end":843,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556406,"byte_end":556409,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ *Rc::make_mut(&mut data) += 1;","span":{"file_name":"src/liballoc/rc.rs","byte_start":556414,"byte_end":556448,"line_start":845,"line_end":845,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":556453,"byte_end":556456,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ assert!(76 == *data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":556461,"byte_end":556486,"line_start":847,"line_end":847,"column_start":5,"column_end":30}},{"value":"/ assert!(weak.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":556491,"byte_end":556529,"line_start":848,"line_end":848,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":556534,"byte_end":556541,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":556546,"byte_end":556555,"line_start":850,"line_end":850,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":556560,"byte_end":556609,"line_start":851,"line_end":851,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"src/liballoc/rc.rs","byte_start":558366,"byte_end":558374,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Rc<Any>>::downcast","value":"fn <T> (self) -> Result<Rc<T>, Rc<dyn Any>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the `Rc<dyn Any>` to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":557759,"byte_end":557768,"line_start":878,"line_end":878,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_downcast\", since = \"1.29.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":557773,"byte_end":557825,"line_start":879,"line_end":879,"column_start":5,"column_end":57}},{"value":"/ Attempt to downcast the `Rc<dyn Any>` to a concrete type.","span":{"file_name":"src/liballoc/rc.rs","byte_start":557830,"byte_end":557891,"line_start":880,"line_end":880,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":557896,"byte_end":557899,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":557904,"byte_end":557918,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":557923,"byte_end":557926,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":557931,"byte_end":557938,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/rc.rs","byte_start":557943,"byte_end":557965,"line_start":885,"line_end":885,"column_start":5,"column_end":27}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":557970,"byte_end":557990,"line_start":886,"line_end":886,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":557995,"byte_end":557998,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Rc<dyn Any>) {","span":{"file_name":"src/liballoc/rc.rs","byte_start":558003,"byte_end":558047,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":558052,"byte_end":558108,"line_start":889,"line_end":889,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/rc.rs","byte_start":558113,"byte_end":558175,"line_start":890,"line_end":890,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":558180,"byte_end":558189,"line_start":891,"line_end":891,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":558194,"byte_end":558199,"line_start":892,"line_end":892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":558204,"byte_end":558207,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/rc.rs","byte_start":558212,"byte_end":558258,"line_start":894,"line_end":894,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Rc::new(my_string));","span":{"file_name":"src/liballoc/rc.rs","byte_start":558263,"byte_end":558303,"line_start":895,"line_end":895,"column_start":5,"column_end":45}},{"value":"/ print_if_string(Rc::new(0i8));","span":{"file_name":"src/liballoc/rc.rs","byte_start":558308,"byte_end":558342,"line_start":896,"line_end":896,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":558347,"byte_end":558354,"line_start":897,"line_end":897,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3007},"span":{"file_name":"src/liballoc/rc.rs","byte_start":563458,"byte_end":563468,"line_start":1048,"line_end":1048,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::rc::RcFromSlice::from_slice","value":"fn (slice: &[T]) -> Self","parent":{"krate":0,"index":3005},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3031},"span":{"file_name":"src/liballoc/rc.rs","byte_start":566469,"byte_end":566471,"line_start":1169,"line_end":1169,"column_start":8,"column_end":10},"name":"eq","qualname":"::rc::RcEqIdent::eq","value":"fn (&self, other: &Rc<T>) -> bool","parent":{"krate":0,"index":3029},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3032},"span":{"file_name":"src/liballoc/rc.rs","byte_start":566510,"byte_end":566512,"line_start":1170,"line_end":1170,"column_start":8,"column_end":10},"name":"ne","qualname":"::rc::RcEqIdent::ne","value":"fn (&self, other: &Rc<T>) -> bool","parent":{"krate":0,"index":3029},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575995,"byte_end":576004,"line_start":1519,"line_end":1519,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::rc::RcFromIter::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":3098},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3114},"span":{"file_name":"src/liballoc/rc.rs","byte_start":579011,"byte_end":579015,"line_start":1590,"line_end":1590,"column_start":12,"column_end":16},"name":"Weak","qualname":"::rc::Weak","value":"Weak {  }","parent":null,"children":[{"krate":0,"index":3116}],"decl_id":null,"docs":" `Weak` is a version of [`Rc`] that holds a non-owning reference to the\n managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\n pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.","sig":null,"attributes":[{"value":"/ `Weak` is a version of [`Rc`] that holds a non-owning reference to the","span":{"file_name":"src/liballoc/rc.rs","byte_start":577535,"byte_end":577609,"line_start":1565,"line_end":1565,"column_start":1,"column_end":75}},{"value":"/ managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`","span":{"file_name":"src/liballoc/rc.rs","byte_start":577610,"byte_end":577697,"line_start":1566,"line_end":1566,"column_start":1,"column_end":88}},{"value":"/ pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":577698,"byte_end":577754,"line_start":1567,"line_end":1567,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":577755,"byte_end":577758,"line_start":1568,"line_end":1568,"column_start":1,"column_end":4}},{"value":"/ Since a `Weak` reference does not count towards ownership, it will not","span":{"file_name":"src/liballoc/rc.rs","byte_start":577759,"byte_end":577833,"line_start":1569,"line_end":1569,"column_start":1,"column_end":75}},{"value":"/ prevent the value stored in the allocation from being dropped, and `Weak` itself makes no","span":{"file_name":"src/liballoc/rc.rs","byte_start":577834,"byte_end":577927,"line_start":1570,"line_end":1570,"column_start":1,"column_end":94}},{"value":"/ guarantees about the value still being present. Thus it may return [`None`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":577928,"byte_end":578007,"line_start":1571,"line_end":1571,"column_start":1,"column_end":80}},{"value":"/ when [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":578008,"byte_end":578097,"line_start":1572,"line_end":1572,"column_start":1,"column_end":90}},{"value":"/ itself (the backing store) from being deallocated.","span":{"file_name":"src/liballoc/rc.rs","byte_start":578098,"byte_end":578152,"line_start":1573,"line_end":1573,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":578153,"byte_end":578156,"line_start":1574,"line_end":1574,"column_start":1,"column_end":4}},{"value":"/ A `Weak` pointer is useful for keeping a temporary reference to the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":578157,"byte_end":578239,"line_start":1575,"line_end":1575,"column_start":1,"column_end":83}},{"value":"/ managed by [`Rc`] without preventing its inner value from being dropped. It is also used to","span":{"file_name":"src/liballoc/rc.rs","byte_start":578240,"byte_end":578335,"line_start":1576,"line_end":1576,"column_start":1,"column_end":96}},{"value":"/ prevent circular references between [`Rc`] pointers, since mutual owning references","span":{"file_name":"src/liballoc/rc.rs","byte_start":578336,"byte_end":578423,"line_start":1577,"line_end":1577,"column_start":1,"column_end":88}},{"value":"/ would never allow either [`Rc`] to be dropped. For example, a tree could","span":{"file_name":"src/liballoc/rc.rs","byte_start":578424,"byte_end":578500,"line_start":1578,"line_end":1578,"column_start":1,"column_end":77}},{"value":"/ have strong [`Rc`] pointers from parent nodes to children, and `Weak`","span":{"file_name":"src/liballoc/rc.rs","byte_start":578501,"byte_end":578574,"line_start":1579,"line_end":1579,"column_start":1,"column_end":74}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":578575,"byte_end":578624,"line_start":1580,"line_end":1580,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":578625,"byte_end":578628,"line_start":1581,"line_end":1581,"column_start":1,"column_end":4}},{"value":"/ The typical way to obtain a `Weak` pointer is to call [`Rc::downgrade`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":578629,"byte_end":578705,"line_start":1582,"line_end":1582,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":578706,"byte_end":578709,"line_start":1583,"line_end":1583,"column_start":1,"column_end":4}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":578710,"byte_end":578736,"line_start":1584,"line_end":1584,"column_start":1,"column_end":27}},{"value":"/ [`Rc::downgrade`]: struct.Rc.html#method.downgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":578737,"byte_end":578791,"line_start":1585,"line_end":1585,"column_start":1,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":578792,"byte_end":578840,"line_start":1586,"line_end":1586,"column_start":1,"column_end":49}},{"value":"/ [`Option`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":578841,"byte_end":578890,"line_start":1587,"line_end":1587,"column_start":1,"column_end":50}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":578891,"byte_end":578951,"line_start":1588,"line_end":1588,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":578952,"byte_end":578999,"line_start":1589,"line_end":1589,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3129},"span":{"file_name":"src/liballoc/rc.rs","byte_start":580363,"byte_end":580366,"line_start":1626,"line_end":1626,"column_start":12,"column_end":15},"name":"new","qualname":"<Weak<T>>::new","value":"fn () -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Weak<T>`, without allocating any memory.\n Calling [`upgrade`] on the return value always gives [`None`].","sig":null,"attributes":[{"value":"/ Constructs a new `Weak<T>`, without allocating any memory.","span":{"file_name":"src/liballoc/rc.rs","byte_start":579878,"byte_end":579940,"line_start":1611,"line_end":1611,"column_start":5,"column_end":67}},{"value":"/ Calling [`upgrade`] on the return value always gives [`None`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":579945,"byte_end":580011,"line_start":1612,"line_end":1612,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580016,"byte_end":580019,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ [`upgrade`]: #method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":580024,"byte_end":580056,"line_start":1614,"line_end":1614,"column_start":5,"column_end":37}},{"value":"/ [`None`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":580061,"byte_end":580108,"line_start":1615,"line_end":1615,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580113,"byte_end":580116,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":580121,"byte_end":580135,"line_start":1617,"line_end":1617,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580140,"byte_end":580143,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":580148,"byte_end":580155,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Weak;","span":{"file_name":"src/liballoc/rc.rs","byte_start":580160,"byte_end":580182,"line_start":1620,"line_end":1620,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580187,"byte_end":580190,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ let empty: Weak<i64> = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":580195,"byte_end":580234,"line_start":1622,"line_end":1622,"column_start":5,"column_end":44}},{"value":"/ assert!(empty.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":580239,"byte_end":580278,"line_start":1623,"line_end":1623,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":580283,"byte_end":580290,"line_start":1624,"line_end":1624,"column_start":5,"column_end":12}},{"value":"stable(feature = \"downgraded_weak\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":580295,"byte_end":580351,"line_start":1625,"line_end":1625,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3130},"span":{"file_name":"src/liballoc/rc.rs","byte_start":581514,"byte_end":581520,"line_start":1658,"line_end":1658,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<Weak<T>>::as_raw","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":580480,"byte_end":580553,"line_start":1630,"line_end":1630,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580558,"byte_end":580561,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only if there are some strong references. The pointer may be dangling","span":{"file_name":"src/liballoc/rc.rs","byte_start":580566,"byte_end":580660,"line_start":1632,"line_end":1632,"column_start":5,"column_end":99}},{"value":"/ or even [`null`] otherwise.","span":{"file_name":"src/liballoc/rc.rs","byte_start":580665,"byte_end":580696,"line_start":1633,"line_end":1633,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580701,"byte_end":580704,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":580709,"byte_end":580723,"line_start":1635,"line_end":1635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580728,"byte_end":580731,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":580736,"byte_end":580743,"line_start":1637,"line_end":1637,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":580748,"byte_end":580778,"line_start":1638,"line_end":1638,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580783,"byte_end":580786,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":580791,"byte_end":580811,"line_start":1640,"line_end":1640,"column_start":5,"column_end":25}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/rc.rs","byte_start":580816,"byte_end":580833,"line_start":1641,"line_end":1641,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":580838,"byte_end":580841,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":580846,"byte_end":580891,"line_start":1643,"line_end":1643,"column_start":5,"column_end":50}},{"value":"/ let weak = Rc::downgrade(&strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":580896,"byte_end":580934,"line_start":1644,"line_end":1644,"column_start":5,"column_end":43}},{"value":"/ // Both point to the same object","span":{"file_name":"src/liballoc/rc.rs","byte_start":580939,"byte_end":580975,"line_start":1645,"line_end":1645,"column_start":5,"column_end":41}},{"value":"/ assert!(ptr::eq(&*strong, weak.as_raw()));","span":{"file_name":"src/liballoc/rc.rs","byte_start":580980,"byte_end":581026,"line_start":1646,"line_end":1646,"column_start":5,"column_end":51}},{"value":"/ // The strong here keeps it alive, so we can still access the object.","span":{"file_name":"src/liballoc/rc.rs","byte_start":581031,"byte_end":581104,"line_start":1647,"line_end":1647,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/rc.rs","byte_start":581109,"byte_end":581161,"line_start":1648,"line_end":1648,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":581166,"byte_end":581169,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":581174,"byte_end":581191,"line_start":1650,"line_end":1650,"column_start":5,"column_end":22}},{"value":"/ // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to","span":{"file_name":"src/liballoc/rc.rs","byte_start":581196,"byte_end":581285,"line_start":1651,"line_end":1651,"column_start":5,"column_end":94}},{"value":"/ // undefined behaviour.","span":{"file_name":"src/liballoc/rc.rs","byte_start":581290,"byte_end":581317,"line_start":1652,"line_end":1652,"column_start":5,"column_end":32}},{"value":"/ // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/rc.rs","byte_start":581322,"byte_end":581377,"line_start":1653,"line_end":1653,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":581382,"byte_end":581389,"line_start":1654,"line_end":1654,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":581394,"byte_end":581397,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ [`null`]: ../../std/ptr/fn.null.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":581402,"byte_end":581442,"line_start":1656,"line_end":1656,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":581447,"byte_end":581502,"line_start":1657,"line_end":1657,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3131},"span":{"file_name":"src/liballoc/rc.rs","byte_start":583162,"byte_end":583170,"line_start":1702,"line_end":1702,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Weak<T>>::into_raw","value":"fn (self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Weak<T>` and turns it into a raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Weak<T>` and turns it into a raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":582159,"byte_end":582218,"line_start":1673,"line_end":1673,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582223,"byte_end":582226,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ This converts the weak pointer into a raw pointer, preserving the original weak count. It","span":{"file_name":"src/liballoc/rc.rs","byte_start":582231,"byte_end":582324,"line_start":1675,"line_end":1675,"column_start":5,"column_end":98}},{"value":"/ can be turned back into the `Weak<T>` with [`from_raw`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":582329,"byte_end":582389,"line_start":1676,"line_end":1676,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582394,"byte_end":582397,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ The same restrictions of accessing the target of the pointer as with","span":{"file_name":"src/liballoc/rc.rs","byte_start":582402,"byte_end":582474,"line_start":1678,"line_end":1678,"column_start":5,"column_end":77}},{"value":"/ [`as_raw`] apply.","span":{"file_name":"src/liballoc/rc.rs","byte_start":582479,"byte_end":582500,"line_start":1679,"line_end":1679,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582505,"byte_end":582508,"line_start":1680,"line_end":1680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":582513,"byte_end":582527,"line_start":1681,"line_end":1681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582532,"byte_end":582535,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":582540,"byte_end":582547,"line_start":1683,"line_end":1683,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":582552,"byte_end":582582,"line_start":1684,"line_end":1684,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582587,"byte_end":582590,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":582595,"byte_end":582623,"line_start":1686,"line_end":1686,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582628,"byte_end":582631,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":582636,"byte_end":582681,"line_start":1688,"line_end":1688,"column_start":5,"column_end":50}},{"value":"/ let weak = Rc::downgrade(&strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":582686,"byte_end":582724,"line_start":1689,"line_end":1689,"column_start":5,"column_end":43}},{"value":"/ let raw = weak.into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":582729,"byte_end":582759,"line_start":1690,"line_end":1690,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582764,"byte_end":582767,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":582772,"byte_end":582815,"line_start":1692,"line_end":1692,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(\"hello\", unsafe { &*raw });","span":{"file_name":"src/liballoc/rc.rs","byte_start":582820,"byte_end":582862,"line_start":1693,"line_end":1693,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582867,"byte_end":582870,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ drop(unsafe { Weak::from_raw(raw) });","span":{"file_name":"src/liballoc/rc.rs","byte_start":582875,"byte_end":582916,"line_start":1695,"line_end":1695,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":582921,"byte_end":582964,"line_start":1696,"line_end":1696,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":582969,"byte_end":582976,"line_start":1697,"line_end":1697,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":582981,"byte_end":582984,"line_start":1698,"line_end":1698,"column_start":5,"column_end":8}},{"value":"/ [`from_raw`]: struct.Weak.html#method.from_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":582989,"byte_end":583039,"line_start":1699,"line_end":1699,"column_start":5,"column_end":55}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":583044,"byte_end":583090,"line_start":1700,"line_end":1700,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":583095,"byte_end":583150,"line_start":1701,"line_end":1701,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"src/liballoc/rc.rs","byte_start":585229,"byte_end":585237,"line_start":1757,"line_end":1757,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Weak<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.","sig":null,"attributes":[{"value":"/ Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":583280,"byte_end":583362,"line_start":1708,"line_end":1708,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":583367,"byte_end":583370,"line_start":1709,"line_end":1709,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely get a strong reference (by calling [`upgrade`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":583375,"byte_end":583452,"line_start":1710,"line_end":1710,"column_start":5,"column_end":82}},{"value":"/ later) or to deallocate the weak count by dropping the `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":583457,"byte_end":583526,"line_start":1711,"line_end":1711,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":583531,"byte_end":583534,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ It takes ownership of one weak count (with the exception of pointers created by [`new`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":583539,"byte_end":583631,"line_start":1713,"line_end":1713,"column_start":5,"column_end":97}},{"value":"/ as these don't have any corresponding weak count).","span":{"file_name":"src/liballoc/rc.rs","byte_start":583636,"byte_end":583690,"line_start":1714,"line_end":1714,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":583695,"byte_end":583698,"line_start":1715,"line_end":1715,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":583703,"byte_end":583715,"line_start":1716,"line_end":1716,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":583720,"byte_end":583723,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ The pointer must have originated from the [`into_raw`] (or [`as_raw`], provided there was","span":{"file_name":"src/liballoc/rc.rs","byte_start":583728,"byte_end":583821,"line_start":1718,"line_end":1718,"column_start":5,"column_end":98}},{"value":"/ a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":583826,"byte_end":583922,"line_start":1719,"line_end":1719,"column_start":5,"column_end":101}},{"value":"/ count.","span":{"file_name":"src/liballoc/rc.rs","byte_start":583927,"byte_end":583937,"line_start":1720,"line_end":1720,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":583942,"byte_end":583945,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ It is allowed for the strong count to be 0 at the time of calling this, but the weak count","span":{"file_name":"src/liballoc/rc.rs","byte_start":583950,"byte_end":584044,"line_start":1722,"line_end":1722,"column_start":5,"column_end":99}},{"value":"/ must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created","span":{"file_name":"src/liballoc/rc.rs","byte_start":584049,"byte_end":584144,"line_start":1723,"line_end":1723,"column_start":5,"column_end":100}},{"value":"/ by [`new`]).","span":{"file_name":"src/liballoc/rc.rs","byte_start":584149,"byte_end":584165,"line_start":1724,"line_end":1724,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584170,"byte_end":584173,"line_start":1725,"line_end":1725,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":584178,"byte_end":584192,"line_start":1726,"line_end":1726,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584197,"byte_end":584200,"line_start":1727,"line_end":1727,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":584205,"byte_end":584212,"line_start":1728,"line_end":1728,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":584217,"byte_end":584247,"line_start":1729,"line_end":1729,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584252,"byte_end":584255,"line_start":1730,"line_end":1730,"column_start":5,"column_end":8}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":584260,"byte_end":584288,"line_start":1731,"line_end":1731,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584293,"byte_end":584296,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":584301,"byte_end":584346,"line_start":1733,"line_end":1733,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584351,"byte_end":584354,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ let raw_1 = Rc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":584359,"byte_end":584409,"line_start":1735,"line_end":1735,"column_start":5,"column_end":55}},{"value":"/ let raw_2 = Rc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":584414,"byte_end":584464,"line_start":1736,"line_end":1736,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584469,"byte_end":584472,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":584477,"byte_end":584520,"line_start":1738,"line_end":1738,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584525,"byte_end":584528,"line_start":1739,"line_end":1739,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());","span":{"file_name":"src/liballoc/rc.rs","byte_start":584533,"byte_end":584612,"line_start":1740,"line_end":1740,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(1, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":584617,"byte_end":584660,"line_start":1741,"line_end":1741,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584665,"byte_end":584668,"line_start":1742,"line_end":1742,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":584673,"byte_end":584690,"line_start":1743,"line_end":1743,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584695,"byte_end":584698,"line_start":1744,"line_end":1744,"column_start":5,"column_end":8}},{"value":"/ // Decrement the last weak count.","span":{"file_name":"src/liballoc/rc.rs","byte_start":584703,"byte_end":584740,"line_start":1745,"line_end":1745,"column_start":5,"column_end":42}},{"value":"/ assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":584745,"byte_end":584811,"line_start":1746,"line_end":1746,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":584816,"byte_end":584823,"line_start":1747,"line_end":1747,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":584828,"byte_end":584831,"line_start":1748,"line_end":1748,"column_start":5,"column_end":8}},{"value":"/ [`into_raw`]: struct.Weak.html#method.into_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":584836,"byte_end":584886,"line_start":1749,"line_end":1749,"column_start":5,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":584891,"byte_end":584939,"line_start":1750,"line_end":1750,"column_start":5,"column_end":53}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":584944,"byte_end":584970,"line_start":1751,"line_end":1751,"column_start":5,"column_end":31}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":584975,"byte_end":585005,"line_start":1752,"line_end":1752,"column_start":5,"column_end":35}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":585010,"byte_end":585056,"line_start":1753,"line_end":1753,"column_start":5,"column_end":51}},{"value":"/ [`new`]: struct.Weak.html#method.new","span":{"file_name":"src/liballoc/rc.rs","byte_start":585061,"byte_end":585101,"line_start":1754,"line_end":1754,"column_start":5,"column_end":45}},{"value":"/ [`forget`]: ../../std/mem/fn.forget.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":585106,"byte_end":585150,"line_start":1755,"line_end":1755,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":585155,"byte_end":585210,"line_start":1756,"line_end":1756,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3137},"span":{"file_name":"src/liballoc/rc.rs","byte_start":586615,"byte_end":586622,"line_start":1803,"line_end":1803,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<Weak<T>>::upgrade","value":"fn (&self) -> Option<Rc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n dropping of the inner value if successful.","sig":null,"attributes":[{"value":"/ Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying","span":{"file_name":"src/liballoc/rc.rs","byte_start":585830,"byte_end":585895,"line_start":1776,"line_end":1776,"column_start":5,"column_end":70}},{"value":"/ dropping of the inner value if successful.","span":{"file_name":"src/liballoc/rc.rs","byte_start":585900,"byte_end":585946,"line_start":1777,"line_end":1777,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":585951,"byte_end":585954,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if the inner value has since been dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":585959,"byte_end":586022,"line_start":1779,"line_end":1779,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586027,"byte_end":586030,"line_start":1780,"line_end":1780,"column_start":5,"column_end":8}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":586035,"byte_end":586061,"line_start":1781,"line_end":1781,"column_start":5,"column_end":31}},{"value":"/ [`None`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":586066,"byte_end":586113,"line_start":1782,"line_end":1782,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586118,"byte_end":586121,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":586126,"byte_end":586140,"line_start":1784,"line_end":1784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586145,"byte_end":586148,"line_start":1785,"line_end":1785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":586153,"byte_end":586160,"line_start":1786,"line_end":1786,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":586165,"byte_end":586185,"line_start":1787,"line_end":1787,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586190,"byte_end":586193,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":586198,"byte_end":586224,"line_start":1789,"line_end":1789,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586229,"byte_end":586232,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":586237,"byte_end":586278,"line_start":1791,"line_end":1791,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586283,"byte_end":586286,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ let strong_five: Option<Rc<_>> = weak_five.upgrade();","span":{"file_name":"src/liballoc/rc.rs","byte_start":586291,"byte_end":586348,"line_start":1793,"line_end":1793,"column_start":5,"column_end":62}},{"value":"/ assert!(strong_five.is_some());","span":{"file_name":"src/liballoc/rc.rs","byte_start":586353,"byte_end":586388,"line_start":1794,"line_end":1794,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586393,"byte_end":586396,"line_start":1795,"line_end":1795,"column_start":5,"column_end":8}},{"value":"/ // Destroy all strong pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":586401,"byte_end":586436,"line_start":1796,"line_end":1796,"column_start":5,"column_end":40}},{"value":"/ drop(strong_five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":586441,"byte_end":586463,"line_start":1797,"line_end":1797,"column_start":5,"column_end":27}},{"value":"/ drop(five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":586468,"byte_end":586483,"line_start":1798,"line_end":1798,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586488,"byte_end":586491,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ assert!(weak_five.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":586496,"byte_end":586539,"line_start":1800,"line_end":1800,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":586544,"byte_end":586551,"line_start":1801,"line_end":1801,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":586556,"byte_end":586603,"line_start":1802,"line_end":1802,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3138},"span":{"file_name":"src/liballoc/rc.rs","byte_start":587112,"byte_end":587124,"line_start":1819,"line_end":1819,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Weak<T>>::strong_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Rc`) pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Rc`) pointers pointing to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":586847,"byte_end":586921,"line_start":1813,"line_end":1813,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":586926,"byte_end":586929,"line_start":1814,"line_end":1814,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], this will return 0.","span":{"file_name":"src/liballoc/rc.rs","byte_start":586934,"byte_end":587000,"line_start":1815,"line_end":1815,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":587005,"byte_end":587008,"line_start":1816,"line_end":1816,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/rc.rs","byte_start":587013,"byte_end":587043,"line_start":1817,"line_end":1817,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":587048,"byte_end":587100,"line_start":1818,"line_end":1818,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"src/liballoc/rc.rs","byte_start":587431,"byte_end":587441,"line_start":1827,"line_end":1827,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Weak<T>>::weak_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of `Weak` pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of `Weak` pointers pointing to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":587226,"byte_end":587293,"line_start":1823,"line_end":1823,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":587298,"byte_end":587301,"line_start":1824,"line_end":1824,"column_start":5,"column_end":8}},{"value":"/ If no strong pointers remain, this will return zero.","span":{"file_name":"src/liballoc/rc.rs","byte_start":587306,"byte_end":587362,"line_start":1825,"line_end":1825,"column_start":5,"column_end":61}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":587367,"byte_end":587419,"line_start":1826,"line_end":1826,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":"src/liballoc/rc.rs","byte_start":589297,"byte_end":589303,"line_start":1889,"line_end":1889,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Weak<T>>::ptr_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Weak`s point to the same allocation (similar to\n [`ptr::eq`]), or if both don't point to any allocation\n (because they were created with `Weak::new()`).","sig":null,"attributes":[{"value":"/ Returns `true` if the two `Weak`s point to the same allocation (similar to","span":{"file_name":"src/liballoc/rc.rs","byte_start":588033,"byte_end":588111,"line_start":1846,"line_end":1846,"column_start":5,"column_end":83}},{"value":"/ [`ptr::eq`]), or if both don't point to any allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":588116,"byte_end":588174,"line_start":1847,"line_end":1847,"column_start":5,"column_end":63}},{"value":"/ (because they were created with `Weak::new()`).","span":{"file_name":"src/liballoc/rc.rs","byte_start":588179,"byte_end":588230,"line_start":1848,"line_end":1848,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588235,"byte_end":588238,"line_start":1849,"line_end":1849,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"src/liballoc/rc.rs","byte_start":588243,"byte_end":588254,"line_start":1850,"line_end":1850,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588259,"byte_end":588262,"line_start":1851,"line_end":1851,"column_start":5,"column_end":8}},{"value":"/ Since this compares pointers it means that `Weak::new()` will equal each","span":{"file_name":"src/liballoc/rc.rs","byte_start":588267,"byte_end":588343,"line_start":1852,"line_end":1852,"column_start":5,"column_end":81}},{"value":"/ other, even though they don't point to any allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":588348,"byte_end":588406,"line_start":1853,"line_end":1853,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588411,"byte_end":588414,"line_start":1854,"line_end":1854,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":588419,"byte_end":588433,"line_start":1855,"line_end":1855,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588438,"byte_end":588441,"line_start":1856,"line_end":1856,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":588446,"byte_end":588453,"line_start":1857,"line_end":1857,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":588458,"byte_end":588478,"line_start":1858,"line_end":1858,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588483,"byte_end":588486,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ let first_rc = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":588491,"byte_end":588521,"line_start":1860,"line_end":1860,"column_start":5,"column_end":35}},{"value":"/ let first = Rc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":588526,"byte_end":588567,"line_start":1861,"line_end":1861,"column_start":5,"column_end":46}},{"value":"/ let second = Rc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":588572,"byte_end":588614,"line_start":1862,"line_end":1862,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588619,"byte_end":588622,"line_start":1863,"line_end":1863,"column_start":5,"column_end":8}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/rc.rs","byte_start":588627,"byte_end":588662,"line_start":1864,"line_end":1864,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588667,"byte_end":588670,"line_start":1865,"line_end":1865,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":588675,"byte_end":588705,"line_start":1866,"line_end":1866,"column_start":5,"column_end":35}},{"value":"/ let third = Rc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":588710,"byte_end":588751,"line_start":1867,"line_end":1867,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588756,"byte_end":588759,"line_start":1868,"line_end":1868,"column_start":5,"column_end":8}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/rc.rs","byte_start":588764,"byte_end":588799,"line_start":1869,"line_end":1869,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":588804,"byte_end":588811,"line_start":1870,"line_end":1870,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588816,"byte_end":588819,"line_start":1871,"line_end":1871,"column_start":5,"column_end":8}},{"value":"/ Comparing `Weak::new`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":588824,"byte_end":588850,"line_start":1872,"line_end":1872,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588855,"byte_end":588858,"line_start":1873,"line_end":1873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":588863,"byte_end":588870,"line_start":1874,"line_end":1874,"column_start":5,"column_end":12}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":588875,"byte_end":588903,"line_start":1875,"line_end":1875,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":588908,"byte_end":588911,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ let first = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":588916,"byte_end":588944,"line_start":1877,"line_end":1877,"column_start":5,"column_end":33}},{"value":"/ let second = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":588949,"byte_end":588978,"line_start":1878,"line_end":1878,"column_start":5,"column_end":34}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/rc.rs","byte_start":588983,"byte_end":589018,"line_start":1879,"line_end":1879,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":589023,"byte_end":589026,"line_start":1880,"line_end":1880,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Rc::new(());","span":{"file_name":"src/liballoc/rc.rs","byte_start":589031,"byte_end":589062,"line_start":1881,"line_end":1881,"column_start":5,"column_end":36}},{"value":"/ let third = Rc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":589067,"byte_end":589108,"line_start":1882,"line_end":1882,"column_start":5,"column_end":46}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/rc.rs","byte_start":589113,"byte_end":589148,"line_start":1883,"line_end":1883,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":589153,"byte_end":589160,"line_start":1884,"line_end":1884,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":589165,"byte_end":589168,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":589173,"byte_end":589214,"line_start":1886,"line_end":1886,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":589219,"byte_end":589228,"line_start":1887,"line_end":1887,"column_start":5,"column_end":14}},{"value":"stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":589233,"byte_end":589285,"line_start":1888,"line_end":1888,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"src/liballoc/rc.rs","byte_start":592411,"byte_end":592416,"line_start":1995,"line_end":1995,"column_start":8,"column_end":13},"name":"inner","qualname":"::rc::RcBoxPtr::inner","value":"fn (&self) -> &RcBox<T>","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"src/liballoc/rc.rs","byte_start":592460,"byte_end":592466,"line_start":1998,"line_end":1998,"column_start":8,"column_end":14},"name":"strong","qualname":"::rc::RcBoxPtr::strong","value":"fn (&self) -> usize","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":592443,"byte_end":592452,"line_start":1997,"line_end":1997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"src/liballoc/rc.rs","byte_start":592547,"byte_end":592557,"line_start":2003,"line_end":2003,"column_start":8,"column_end":18},"name":"inc_strong","qualname":"::rc::RcBoxPtr::inc_strong","value":"fn (&self) -> ()","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":592530,"byte_end":592539,"line_start":2002,"line_end":2002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"src/liballoc/rc.rs","byte_start":593056,"byte_end":593066,"line_start":2019,"line_end":2019,"column_start":8,"column_end":18},"name":"dec_strong","qualname":"::rc::RcBoxPtr::dec_strong","value":"fn (&self) -> ()","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":593039,"byte_end":593048,"line_start":2018,"line_end":2018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"src/liballoc/rc.rs","byte_start":593156,"byte_end":593160,"line_start":2024,"line_end":2024,"column_start":8,"column_end":12},"name":"weak","qualname":"::rc::RcBoxPtr::weak","value":"fn (&self) -> usize","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":593139,"byte_end":593148,"line_start":2023,"line_end":2023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":"src/liballoc/rc.rs","byte_start":593239,"byte_end":593247,"line_start":2029,"line_end":2029,"column_start":8,"column_end":16},"name":"inc_weak","qualname":"::rc::RcBoxPtr::inc_weak","value":"fn (&self) -> ()","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":593222,"byte_end":593231,"line_start":2028,"line_end":2028,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3163},"span":{"file_name":"src/liballoc/rc.rs","byte_start":593734,"byte_end":593742,"line_start":2045,"line_end":2045,"column_start":8,"column_end":16},"name":"dec_weak","qualname":"::rc::RcBoxPtr::dec_weak","value":"fn (&self) -> ()","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":593717,"byte_end":593726,"line_start":2044,"line_end":2044,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":3183},"span":{"file_name":"src/liballoc/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"src/liballoc/slice.rs","parent":null,"children":[{"krate":0,"index":3184},{"krate":0,"index":3187},{"krate":0,"index":3190},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3198},{"krate":0,"index":3199},{"krate":0,"index":3200},{"krate":0,"index":3201},{"krate":0,"index":3202},{"krate":0,"index":3205},{"krate":0,"index":3208},{"krate":0,"index":3211},{"krate":0,"index":3214},{"krate":0,"index":3218},{"krate":0,"index":3221},{"krate":0,"index":3226},{"krate":0,"index":3229},{"krate":0,"index":3234},{"krate":0,"index":3241},{"krate":0,"index":3265},{"krate":0,"index":3268},{"krate":0,"index":3272},{"krate":0,"index":3276},{"krate":0,"index":3282},{"krate":0,"index":3288},{"krate":0,"index":3294},{"krate":0,"index":3297},{"krate":0,"index":3300},{"krate":0,"index":3305},{"krate":0,"index":3315},{"krate":0,"index":3330}],"decl_id":null,"docs":" A dynamically-sized view into a contiguous sequence, `[T]`.","sig":null,"attributes":[{"value":"! A dynamically-sized view into a contiguous sequence, `[T]`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":595245,"byte_end":595308,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":595309,"byte_end":595312,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! *[See also the slice primitive type](../../std/primitive.slice.html).*","span":{"file_name":"src/liballoc/slice.rs","byte_start":595313,"byte_end":595387,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":595388,"byte_end":595391,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Slices are a view into a block of memory represented as a pointer and a","span":{"file_name":"src/liballoc/slice.rs","byte_start":595392,"byte_end":595467,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"! length.","span":{"file_name":"src/liballoc/slice.rs","byte_start":595468,"byte_end":595479,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":595480,"byte_end":595483,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":595484,"byte_end":595491,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"! // slicing a Vec","span":{"file_name":"src/liballoc/slice.rs","byte_start":595492,"byte_end":595512,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"! let vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/slice.rs","byte_start":595513,"byte_end":595541,"line_start":10,"line_end":10,"column_start":1,"column_end":29}},{"value":"! let int_slice = &vec[..];","span":{"file_name":"src/liballoc/slice.rs","byte_start":595542,"byte_end":595571,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"! // coercing an array to a slice","span":{"file_name":"src/liballoc/slice.rs","byte_start":595572,"byte_end":595607,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];","span":{"file_name":"src/liballoc/slice.rs","byte_start":595608,"byte_end":595662,"line_start":13,"line_end":13,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":595663,"byte_end":595670,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":595671,"byte_end":595674,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Slices are either mutable or shared. The shared slice type is `&[T]`,","span":{"file_name":"src/liballoc/slice.rs","byte_start":595675,"byte_end":595748,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! while the mutable slice type is `&mut [T]`, where `T` represents the element","span":{"file_name":"src/liballoc/slice.rs","byte_start":595749,"byte_end":595829,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! type. For example, you can mutate the block of memory that a mutable slice","span":{"file_name":"src/liballoc/slice.rs","byte_start":595830,"byte_end":595908,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! points to:","span":{"file_name":"src/liballoc/slice.rs","byte_start":595909,"byte_end":595923,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":595924,"byte_end":595927,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":595928,"byte_end":595935,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"! let x = &mut [1, 2, 3];","span":{"file_name":"src/liballoc/slice.rs","byte_start":595936,"byte_end":595963,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"! x[1] = 7;","span":{"file_name":"src/liballoc/slice.rs","byte_start":595964,"byte_end":595977,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"! assert_eq!(x, &[1, 7, 3]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":595978,"byte_end":596008,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596009,"byte_end":596016,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596017,"byte_end":596020,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Here are some of the things this module contains:","span":{"file_name":"src/liballoc/slice.rs","byte_start":596021,"byte_end":596074,"line_start":27,"line_end":27,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596075,"byte_end":596078,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ## Structs","span":{"file_name":"src/liballoc/slice.rs","byte_start":596079,"byte_end":596093,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596094,"byte_end":596097,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! There are several structs that are useful for slices, such as [`Iter`], which","span":{"file_name":"src/liballoc/slice.rs","byte_start":596098,"byte_end":596179,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"! represents iteration over a slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":596180,"byte_end":596218,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596219,"byte_end":596222,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! ## Trait Implementations","span":{"file_name":"src/liballoc/slice.rs","byte_start":596223,"byte_end":596251,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596252,"byte_end":596255,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! There are several implementations of common traits for slices. Some examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":596256,"byte_end":596336,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"! include:","span":{"file_name":"src/liballoc/slice.rs","byte_start":596337,"byte_end":596349,"line_start":37,"line_end":37,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596350,"byte_end":596353,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`Clone`]","span":{"file_name":"src/liballoc/slice.rs","byte_start":596354,"byte_end":596369,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"! * [`Eq`], [`Ord`] - for slices whose element type are [`Eq`] or [`Ord`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":596370,"byte_end":596446,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"! * [`Hash`] - for slices whose element type is [`Hash`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":596447,"byte_end":596506,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596507,"byte_end":596510,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Iteration","span":{"file_name":"src/liballoc/slice.rs","byte_start":596511,"byte_end":596527,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596528,"byte_end":596531,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! The slices implement `IntoIterator`. The iterator yields references to the","span":{"file_name":"src/liballoc/slice.rs","byte_start":596532,"byte_end":596610,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"! slice elements.","span":{"file_name":"src/liballoc/slice.rs","byte_start":596611,"byte_end":596630,"line_start":46,"line_end":46,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596631,"byte_end":596634,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596635,"byte_end":596642,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"! let numbers = &[0, 1, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":596643,"byte_end":596672,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"! for n in numbers {","span":{"file_name":"src/liballoc/slice.rs","byte_start":596673,"byte_end":596695,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"!     println!(\"{} is a number!\", n);","span":{"file_name":"src/liballoc/slice.rs","byte_start":596696,"byte_end":596735,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"! }","span":{"file_name":"src/liballoc/slice.rs","byte_start":596736,"byte_end":596741,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596742,"byte_end":596749,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596750,"byte_end":596753,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The mutable slice yields mutable references to the elements:","span":{"file_name":"src/liballoc/slice.rs","byte_start":596754,"byte_end":596818,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596819,"byte_end":596822,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596823,"byte_end":596830,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"! let mut scores = [7, 8, 9];","span":{"file_name":"src/liballoc/slice.rs","byte_start":596831,"byte_end":596862,"line_start":58,"line_end":58,"column_start":1,"column_end":32}},{"value":"! for score in &mut scores[..] {","span":{"file_name":"src/liballoc/slice.rs","byte_start":596863,"byte_end":596897,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"!     *score += 1;","span":{"file_name":"src/liballoc/slice.rs","byte_start":596898,"byte_end":596918,"line_start":60,"line_end":60,"column_start":1,"column_end":21}},{"value":"! }","span":{"file_name":"src/liballoc/slice.rs","byte_start":596919,"byte_end":596924,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596925,"byte_end":596932,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":596933,"byte_end":596936,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! This iterator yields mutable references to the slice's elements, so while","span":{"file_name":"src/liballoc/slice.rs","byte_start":596937,"byte_end":597014,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"! the element type of the slice is `i32`, the element type of the iterator is","span":{"file_name":"src/liballoc/slice.rs","byte_start":597015,"byte_end":597094,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"! `&mut i32`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597095,"byte_end":597110,"line_start":66,"line_end":66,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":597111,"byte_end":597114,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default","span":{"file_name":"src/liballoc/slice.rs","byte_start":597115,"byte_end":597195,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"!   iterators.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597196,"byte_end":597212,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"! * Further methods that return iterators are [`.split`], [`.splitn`],","span":{"file_name":"src/liballoc/slice.rs","byte_start":597213,"byte_end":597285,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"!   [`.chunks`], [`.windows`] and more.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597286,"byte_end":597327,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":597328,"byte_end":597331,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":597332,"byte_end":597379,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"! [`Eq`]: ../../std/cmp/trait.Eq.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":597380,"byte_end":597419,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"! [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":597420,"byte_end":597461,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"! [`Iter`]: struct.Iter.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":597462,"byte_end":597492,"line_start":76,"line_end":76,"column_start":1,"column_end":31}},{"value":"! [`Hash`]: ../../std/hash/trait.Hash.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":597493,"byte_end":597537,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"! [`.iter`]: ../../std/primitive.slice.html#method.iter","span":{"file_name":"src/liballoc/slice.rs","byte_start":597538,"byte_end":597595,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"! [`.iter_mut`]: ../../std/primitive.slice.html#method.iter_mut","span":{"file_name":"src/liballoc/slice.rs","byte_start":597596,"byte_end":597661,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"! [`.split`]: ../../std/primitive.slice.html#method.split","span":{"file_name":"src/liballoc/slice.rs","byte_start":597662,"byte_end":597721,"line_start":80,"line_end":80,"column_start":1,"column_end":60}},{"value":"! [`.splitn`]: ../../std/primitive.slice.html#method.splitn","span":{"file_name":"src/liballoc/slice.rs","byte_start":597722,"byte_end":597783,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"! [`.chunks`]: ../../std/primitive.slice.html#method.chunks","span":{"file_name":"src/liballoc/slice.rs","byte_start":597784,"byte_end":597845,"line_start":82,"line_end":82,"column_start":1,"column_end":62}},{"value":"! [`.windows`]: ../../std/primitive.slice.html#method.windows","span":{"file_name":"src/liballoc/slice.rs","byte_start":597846,"byte_end":597909,"line_start":83,"line_end":83,"column_start":1,"column_end":64}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":597910,"byte_end":597956,"line_start":84,"line_end":84,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":3237},"span":{"file_name":"src/liballoc/slice.rs","byte_start":600299,"byte_end":600307,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"into_vec","qualname":"::slice::hack::into_vec","value":"fn <T> (b: Box<[T]>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3239},"span":{"file_name":"src/liballoc/slice.rs","byte_start":600544,"byte_end":600550,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"to_vec","qualname":"::slice::hack::to_vec","value":"fn <T> (s: &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":600523,"byte_end":600532,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"src/liballoc/slice.rs","byte_start":601874,"byte_end":601878,"line_start":195,"line_end":195,"column_start":12,"column_end":16},"name":"sort","qualname":"<[T]>::sort","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice.","sig":null,"attributes":[{"value":"/ Sorts the slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":600782,"byte_end":600802,"line_start":167,"line_end":167,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":600807,"byte_end":600810,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"src/liballoc/slice.rs","byte_start":600815,"byte_end":600907,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":600912,"byte_end":600915,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":600920,"byte_end":601013,"line_start":171,"line_end":171,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":601018,"byte_end":601071,"line_start":172,"line_end":172,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable`](#method.sort_unstable).","span":{"file_name":"src/liballoc/slice.rs","byte_start":601076,"byte_end":601125,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601130,"byte_end":601133,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":601138,"byte_end":601166,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601171,"byte_end":601174,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":601179,"byte_end":601253,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":601258,"byte_end":601311,"line_start":178,"line_end":178,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":601316,"byte_end":601408,"line_start":179,"line_end":179,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":601413,"byte_end":601477,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601482,"byte_end":601485,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":601490,"byte_end":601578,"line_start":182,"line_end":182,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":601583,"byte_end":601633,"line_start":183,"line_end":183,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601638,"byte_end":601641,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":601646,"byte_end":601660,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601665,"byte_end":601668,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":601673,"byte_end":601680,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":601685,"byte_end":601719,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":601724,"byte_end":601727,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ v.sort();","span":{"file_name":"src/liballoc/slice.rs","byte_start":601732,"byte_end":601745,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/ assert!(v == [-5, -3, 1, 2, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":601750,"byte_end":601786,"line_start":191,"line_end":191,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":601791,"byte_end":601798,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":601803,"byte_end":601848,"line_start":193,"line_end":193,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":601853,"byte_end":601862,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"src/liballoc/slice.rs","byte_start":604059,"byte_end":604066,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<[T]>::sort_by","value":"fn <F> (&mut self, mut compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a comparator function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":601975,"byte_end":602022,"line_start":202,"line_end":202,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602027,"byte_end":602030,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"src/liballoc/slice.rs","byte_start":602035,"byte_end":602127,"line_start":204,"line_end":204,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602132,"byte_end":602135,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The comparator function must define a total ordering for the elements in the slice. If","span":{"file_name":"src/liballoc/slice.rs","byte_start":602140,"byte_end":602230,"line_start":206,"line_end":206,"column_start":5,"column_end":95}},{"value":"/ the ordering is not total, the order of the elements is unspecified. An order is a","span":{"file_name":"src/liballoc/slice.rs","byte_start":602235,"byte_end":602321,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ total order if it is (for all `a`, `b` and `c`):","span":{"file_name":"src/liballoc/slice.rs","byte_start":602326,"byte_end":602378,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602383,"byte_end":602386,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and","span":{"file_name":"src/liballoc/slice.rs","byte_start":602391,"byte_end":602478,"line_start":210,"line_end":210,"column_start":5,"column_end":92}},{"value":"/ * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":602483,"byte_end":602579,"line_start":211,"line_end":211,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602584,"byte_end":602587,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use","span":{"file_name":"src/liballoc/slice.rs","byte_start":602592,"byte_end":602681,"line_start":213,"line_end":213,"column_start":5,"column_end":94}},{"value":"/ `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":602686,"byte_end":602772,"line_start":214,"line_end":214,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602777,"byte_end":602780,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":602785,"byte_end":602792,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];","span":{"file_name":"src/liballoc/slice.rs","byte_start":602797,"byte_end":602845,"line_start":217,"line_end":217,"column_start":5,"column_end":53}},{"value":"/ floats.sort_by(|a, b| a.partial_cmp(b).unwrap());","span":{"file_name":"src/liballoc/slice.rs","byte_start":602850,"byte_end":602903,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":602908,"byte_end":602958,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":602963,"byte_end":602970,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":602975,"byte_end":602978,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":602983,"byte_end":603076,"line_start":222,"line_end":222,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":603081,"byte_end":603134,"line_start":223,"line_end":223,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable_by`](#method.sort_unstable_by).","span":{"file_name":"src/liballoc/slice.rs","byte_start":603139,"byte_end":603194,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603199,"byte_end":603202,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":603207,"byte_end":603235,"line_start":226,"line_end":226,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603240,"byte_end":603243,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":603248,"byte_end":603322,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":603327,"byte_end":603380,"line_start":229,"line_end":229,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":603385,"byte_end":603477,"line_start":230,"line_end":230,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":603482,"byte_end":603546,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603551,"byte_end":603554,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":603559,"byte_end":603647,"line_start":233,"line_end":233,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":603652,"byte_end":603702,"line_start":234,"line_end":234,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603707,"byte_end":603710,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":603715,"byte_end":603729,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603734,"byte_end":603737,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":603742,"byte_end":603749,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":603754,"byte_end":603786,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ v.sort_by(|a, b| a.cmp(b));","span":{"file_name":"src/liballoc/slice.rs","byte_start":603791,"byte_end":603822,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":603827,"byte_end":603861,"line_start":241,"line_end":241,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":603866,"byte_end":603869,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"src/liballoc/slice.rs","byte_start":603874,"byte_end":603896,"line_start":243,"line_end":243,"column_start":5,"column_end":27}},{"value":"/ v.sort_by(|a, b| b.cmp(a));","span":{"file_name":"src/liballoc/slice.rs","byte_start":603901,"byte_end":603932,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [5, 4, 3, 2, 1]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":603937,"byte_end":603971,"line_start":245,"line_end":245,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":603976,"byte_end":603983,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":603988,"byte_end":604033,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":604038,"byte_end":604047,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"src/liballoc/slice.rs","byte_start":605699,"byte_end":605710,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"sort_by_key","qualname":"<[T]>::sort_by_key","value":"fn <K, F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a key extraction function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":604218,"byte_end":604269,"line_start":256,"line_end":256,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":604274,"byte_end":604277,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(m n log(m n))`","span":{"file_name":"src/liballoc/slice.rs","byte_start":604282,"byte_end":604367,"line_start":258,"line_end":258,"column_start":5,"column_end":90}},{"value":"/ worst-case, where the key function is `O(m)`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":604372,"byte_end":604421,"line_start":259,"line_end":259,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":604426,"byte_end":604429,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ For expensive key functions (e.g. functions that are not simple property accesses or","span":{"file_name":"src/liballoc/slice.rs","byte_start":604434,"byte_end":604522,"line_start":261,"line_end":261,"column_start":5,"column_end":93}},{"value":"/ basic operations), [`sort_by_cached_key`](#method.sort_by_cached_key) is likely to be","span":{"file_name":"src/liballoc/slice.rs","byte_start":604527,"byte_end":604616,"line_start":262,"line_end":262,"column_start":5,"column_end":94}},{"value":"/ significantly faster, as it does not recompute element keys.","span":{"file_name":"src/liballoc/slice.rs","byte_start":604621,"byte_end":604685,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":604690,"byte_end":604693,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":604698,"byte_end":604791,"line_start":265,"line_end":265,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":604796,"byte_end":604849,"line_start":266,"line_end":266,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable_by_key`](#method.sort_unstable_by_key).","span":{"file_name":"src/liballoc/slice.rs","byte_start":604854,"byte_end":604917,"line_start":267,"line_end":267,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":604922,"byte_end":604925,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":604930,"byte_end":604958,"line_start":269,"line_end":269,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":604963,"byte_end":604966,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":604971,"byte_end":605045,"line_start":271,"line_end":271,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":605050,"byte_end":605103,"line_start":272,"line_end":272,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":605108,"byte_end":605200,"line_start":273,"line_end":273,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":605205,"byte_end":605269,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605274,"byte_end":605277,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":605282,"byte_end":605370,"line_start":276,"line_end":276,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":605375,"byte_end":605425,"line_start":277,"line_end":277,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605430,"byte_end":605433,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":605438,"byte_end":605452,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605457,"byte_end":605460,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":605465,"byte_end":605472,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":605477,"byte_end":605514,"line_start":282,"line_end":282,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605519,"byte_end":605522,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ v.sort_by_key(|k| k.abs());","span":{"file_name":"src/liballoc/slice.rs","byte_start":605527,"byte_end":605558,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [1, 2, -3, 4, -5]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":605563,"byte_end":605599,"line_start":285,"line_end":285,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":605604,"byte_end":605611,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":605616,"byte_end":605673,"line_start":287,"line_end":287,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":605678,"byte_end":605687,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3252},"span":{"file_name":"src/liballoc/slice.rs","byte_start":607273,"byte_end":607291,"line_start":331,"line_end":331,"column_start":12,"column_end":30},"name":"sort_by_cached_key","qualname":"<[T]>::sort_by_cached_key","value":"fn <K, F> (&mut self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a key extraction function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":605857,"byte_end":605908,"line_start":297,"line_end":297,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605913,"byte_end":605916,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ During sorting, the key function is called only once per element.","span":{"file_name":"src/liballoc/slice.rs","byte_start":605921,"byte_end":605990,"line_start":299,"line_end":299,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":605995,"byte_end":605998,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(m n + n log n)`","span":{"file_name":"src/liballoc/slice.rs","byte_start":606003,"byte_end":606089,"line_start":301,"line_end":301,"column_start":5,"column_end":91}},{"value":"/ worst-case, where the key function is `O(m)`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":606094,"byte_end":606143,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606148,"byte_end":606151,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ For simple key functions (e.g., functions that are property accesses or","span":{"file_name":"src/liballoc/slice.rs","byte_start":606156,"byte_end":606231,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ basic operations), [`sort_by_key`](#method.sort_by_key) is likely to be","span":{"file_name":"src/liballoc/slice.rs","byte_start":606236,"byte_end":606311,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/ faster.","span":{"file_name":"src/liballoc/slice.rs","byte_start":606316,"byte_end":606327,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606332,"byte_end":606335,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":606340,"byte_end":606368,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606373,"byte_end":606376,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"src/liballoc/slice.rs","byte_start":606381,"byte_end":606474,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"src/liballoc/slice.rs","byte_start":606479,"byte_end":606571,"line_start":311,"line_end":311,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"src/liballoc/slice.rs","byte_start":606576,"byte_end":606663,"line_start":312,"line_end":312,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"src/liballoc/slice.rs","byte_start":606668,"byte_end":606752,"line_start":313,"line_end":313,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"src/liballoc/slice.rs","byte_start":606757,"byte_end":606784,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606789,"byte_end":606792,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ In the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the","span":{"file_name":"src/liballoc/slice.rs","byte_start":606797,"byte_end":606888,"line_start":316,"line_end":316,"column_start":5,"column_end":96}},{"value":"/ length of the slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":606893,"byte_end":606917,"line_start":317,"line_end":317,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606922,"byte_end":606925,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":606930,"byte_end":606944,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":606949,"byte_end":606952,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":606957,"byte_end":606964,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5i32, 4, 32, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":606969,"byte_end":607007,"line_start":322,"line_end":322,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":607012,"byte_end":607015,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ v.sort_by_cached_key(|k| k.to_string());","span":{"file_name":"src/liballoc/slice.rs","byte_start":607020,"byte_end":607064,"line_start":324,"line_end":324,"column_start":5,"column_end":49}},{"value":"/ assert!(v == [-3, -5, 2, 32, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":607069,"byte_end":607106,"line_start":325,"line_end":325,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":607111,"byte_end":607118,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":607123,"byte_end":607126,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"src/liballoc/slice.rs","byte_start":607131,"byte_end":607177,"line_start":328,"line_end":328,"column_start":5,"column_end":51}},{"value":"stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":607182,"byte_end":607247,"line_start":329,"line_end":329,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":607252,"byte_end":607261,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3256},"span":{"file_name":"src/liballoc/slice.rs","byte_start":609346,"byte_end":609352,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<[T]>::to_vec","value":"fn (&self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new `Vec`.","sig":null,"attributes":[{"value":"/ Copies `self` into a new `Vec`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":609023,"byte_end":609058,"line_start":377,"line_end":377,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609063,"byte_end":609066,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":609071,"byte_end":609085,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609090,"byte_end":609093,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":609098,"byte_end":609105,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"/ let s = [10, 40, 30];","span":{"file_name":"src/liballoc/slice.rs","byte_start":609110,"byte_end":609135,"line_start":382,"line_end":382,"column_start":5,"column_end":30}},{"value":"/ let x = s.to_vec();","span":{"file_name":"src/liballoc/slice.rs","byte_start":609140,"byte_end":609163,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ // Here, `s` and `x` can be modified independently.","span":{"file_name":"src/liballoc/slice.rs","byte_start":609168,"byte_end":609223,"line_start":384,"line_end":384,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":609228,"byte_end":609235,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"rustc_conversion_suggestion","span":{"file_name":"src/liballoc/slice.rs","byte_start":609240,"byte_end":609270,"line_start":386,"line_end":386,"column_start":5,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":609275,"byte_end":609320,"line_start":387,"line_end":387,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":609325,"byte_end":609334,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3257},"span":{"file_name":"src/liballoc/slice.rs","byte_start":610039,"byte_end":610047,"line_start":413,"line_end":413,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<[T]>::into_vec","value":"fn (self: Box<Self>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"src/liballoc/slice.rs","byte_start":609512,"byte_end":609575,"line_start":397,"line_end":397,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609580,"byte_end":609583,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The resulting vector can be converted back into a box via","span":{"file_name":"src/liballoc/slice.rs","byte_start":609588,"byte_end":609649,"line_start":399,"line_end":399,"column_start":5,"column_end":66}},{"value":"/ `Vec<T>`'s `into_boxed_slice` method.","span":{"file_name":"src/liballoc/slice.rs","byte_start":609654,"byte_end":609695,"line_start":400,"line_end":400,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609700,"byte_end":609703,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":609708,"byte_end":609722,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609727,"byte_end":609730,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":609735,"byte_end":609742,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ let s: Box<[i32]> = Box::new([10, 40, 30]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":609747,"byte_end":609794,"line_start":405,"line_end":405,"column_start":5,"column_end":52}},{"value":"/ let x = s.into_vec();","span":{"file_name":"src/liballoc/slice.rs","byte_start":609799,"byte_end":609824,"line_start":406,"line_end":406,"column_start":5,"column_end":30}},{"value":"/ // `s` cannot be used anymore because it has been converted into `x`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":609829,"byte_end":609902,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":609907,"byte_end":609910,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x, vec![10, 40, 30]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":609915,"byte_end":609951,"line_start":409,"line_end":409,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":609956,"byte_end":609963,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":609968,"byte_end":610013,"line_start":411,"line_end":411,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":610018,"byte_end":610027,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3258},"span":{"file_name":"src/liballoc/slice.rs","byte_start":610742,"byte_end":610748,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"repeat","qualname":"<[T]>::repeat","value":"fn (&self, n: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"src/liballoc/slice.rs","byte_start":610187,"byte_end":610239,"line_start":418,"line_end":418,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610244,"byte_end":610247,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/slice.rs","byte_start":610252,"byte_end":610264,"line_start":420,"line_end":420,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610269,"byte_end":610272,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"src/liballoc/slice.rs","byte_start":610277,"byte_end":610337,"line_start":422,"line_end":422,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610342,"byte_end":610345,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":610350,"byte_end":610364,"line_start":424,"line_end":424,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610369,"byte_end":610372,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/slice.rs","byte_start":610377,"byte_end":610393,"line_start":426,"line_end":426,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610398,"byte_end":610401,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":610406,"byte_end":610413,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":610418,"byte_end":610475,"line_start":429,"line_end":429,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":610480,"byte_end":610487,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610492,"byte_end":610495,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ A panic upon overflow:","span":{"file_name":"src/liballoc/slice.rs","byte_start":610500,"byte_end":610526,"line_start":432,"line_end":432,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":610531,"byte_end":610534,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/slice.rs","byte_start":610539,"byte_end":610558,"line_start":434,"line_end":434,"column_start":5,"column_end":24}},{"value":"/ // this will panic at runtime","span":{"file_name":"src/liballoc/slice.rs","byte_start":610563,"byte_end":610596,"line_start":435,"line_end":435,"column_start":5,"column_end":38}},{"value":"/ b\"0123456789abcdef\".repeat(usize::max_value());","span":{"file_name":"src/liballoc/slice.rs","byte_start":610601,"byte_end":610652,"line_start":436,"line_end":436,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":610657,"byte_end":610664,"line_start":437,"line_end":437,"column_start":5,"column_end":12}},{"value":"stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":610669,"byte_end":610730,"line_start":438,"line_end":438,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"src/liballoc/slice.rs","byte_start":613057,"byte_end":613063,"line_start":506,"line_end":506,"column_start":12,"column_end":18},"name":"concat","qualname":"<[T]>::concat","value":"fn <Item> (&self) -> <Self as Concat<Item>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":612749,"byte_end":612812,"line_start":497,"line_end":497,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":612817,"byte_end":612820,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":612825,"byte_end":612839,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":612844,"byte_end":612847,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":612852,"byte_end":612859,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":612864,"byte_end":612922,"line_start":502,"line_end":502,"column_start":5,"column_end":63}},{"value":"/ assert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":612927,"byte_end":612983,"line_start":503,"line_end":503,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":612988,"byte_end":612995,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":613000,"byte_end":613045,"line_start":505,"line_end":505,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"src/liballoc/slice.rs","byte_start":613657,"byte_end":613661,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"join","qualname":"<[T]>::join","value":"fn <Separator> (&self, sep: Separator) -> <Self as Join<Separator>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`, placing a\n given separator between each.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`, placing a","span":{"file_name":"src/liballoc/slice.rs","byte_start":613203,"byte_end":613276,"line_start":513,"line_end":513,"column_start":5,"column_end":78}},{"value":"/ given separator between each.","span":{"file_name":"src/liballoc/slice.rs","byte_start":613281,"byte_end":613314,"line_start":514,"line_end":514,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":613319,"byte_end":613322,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":613327,"byte_end":613341,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":613346,"byte_end":613349,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":613354,"byte_end":613361,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":613366,"byte_end":613426,"line_start":519,"line_end":519,"column_start":5,"column_end":65}},{"value":"/ assert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":613431,"byte_end":613490,"line_start":520,"line_end":520,"column_start":5,"column_end":64}},{"value":"/ assert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":613495,"byte_end":613566,"line_start":521,"line_end":521,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":613571,"byte_end":613578,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":613583,"byte_end":613645,"line_start":523,"line_end":523,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"src/liballoc/slice.rs","byte_start":614289,"byte_end":614296,"line_start":543,"line_end":543,"column_start":12,"column_end":19},"name":"connect","qualname":"<[T]>::connect","value":"fn <Separator> (&self, sep: Separator) -> <Self as Join<Separator>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`, placing a\n given separator between each.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`, placing a","span":{"file_name":"src/liballoc/slice.rs","byte_start":613821,"byte_end":613894,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/ given separator between each.","span":{"file_name":"src/liballoc/slice.rs","byte_start":613899,"byte_end":613932,"line_start":532,"line_end":532,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":613937,"byte_end":613940,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":613945,"byte_end":613959,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":613964,"byte_end":613967,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":613972,"byte_end":613979,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"/ # #![allow(deprecated)]","span":{"file_name":"src/liballoc/slice.rs","byte_start":613984,"byte_end":614011,"line_start":537,"line_end":537,"column_start":5,"column_end":32}},{"value":"/ assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":614016,"byte_end":614079,"line_start":538,"line_end":538,"column_start":5,"column_end":68}},{"value":"/ assert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":614084,"byte_end":614146,"line_start":539,"line_end":539,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":614151,"byte_end":614158,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":614163,"byte_end":614208,"line_start":541,"line_end":541,"column_start":5,"column_end":50}},{"value":"rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":614213,"byte_end":614277,"line_start":542,"line_end":542,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3266},"span":{"file_name":"src/liballoc/slice.rs","byte_start":614998,"byte_end":615016,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<[u8]>::to_ascii_uppercase","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector containing a copy of this slice where each byte\n is mapped to its ASCII upper case equivalent.","sig":null,"attributes":[{"value":"/ Returns a vector containing a copy of this slice where each byte","span":{"file_name":"src/liballoc/slice.rs","byte_start":614515,"byte_end":614583,"line_start":554,"line_end":554,"column_start":5,"column_end":73}},{"value":"/ is mapped to its ASCII upper case equivalent.","span":{"file_name":"src/liballoc/slice.rs","byte_start":614588,"byte_end":614637,"line_start":555,"line_end":555,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":614642,"byte_end":614645,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',","span":{"file_name":"src/liballoc/slice.rs","byte_start":614650,"byte_end":614704,"line_start":557,"line_end":557,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/slice.rs","byte_start":614709,"byte_end":614749,"line_start":558,"line_end":558,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":614754,"byte_end":614757,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ To uppercase the value in-place, use [`make_ascii_uppercase`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":614762,"byte_end":614828,"line_start":560,"line_end":560,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":614833,"byte_end":614836,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_uppercase`]: #method.make_ascii_uppercase","span":{"file_name":"src/liballoc/slice.rs","byte_start":614841,"byte_end":614899,"line_start":562,"line_end":562,"column_start":5,"column_end":63}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":614904,"byte_end":614972,"line_start":563,"line_end":563,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":614977,"byte_end":614986,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"src/liballoc/slice.rs","byte_start":615613,"byte_end":615631,"line_start":582,"line_end":582,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<[u8]>::to_ascii_lowercase","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector containing a copy of this slice where each byte\n is mapped to its ASCII lower case equivalent.","sig":null,"attributes":[{"value":"/ Returns a vector containing a copy of this slice where each byte","span":{"file_name":"src/liballoc/slice.rs","byte_start":615130,"byte_end":615198,"line_start":571,"line_end":571,"column_start":5,"column_end":73}},{"value":"/ is mapped to its ASCII lower case equivalent.","span":{"file_name":"src/liballoc/slice.rs","byte_start":615203,"byte_end":615252,"line_start":572,"line_end":572,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":615257,"byte_end":615260,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',","span":{"file_name":"src/liballoc/slice.rs","byte_start":615265,"byte_end":615319,"line_start":574,"line_end":574,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/slice.rs","byte_start":615324,"byte_end":615364,"line_start":575,"line_end":575,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":615369,"byte_end":615372,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ To lowercase the value in-place, use [`make_ascii_lowercase`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":615377,"byte_end":615443,"line_start":577,"line_end":577,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":615448,"byte_end":615451,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_lowercase`]: #method.make_ascii_lowercase","span":{"file_name":"src/liballoc/slice.rs","byte_start":615456,"byte_end":615514,"line_start":579,"line_end":579,"column_start":5,"column_end":63}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":615519,"byte_end":615587,"line_start":580,"line_end":580,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":615592,"byte_end":615601,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3268},"span":{"file_name":"src/liballoc/slice.rs","byte_start":616979,"byte_end":616985,"line_start":623,"line_end":623,"column_start":11,"column_end":17},"name":"Concat","qualname":"::slice::Concat","value":"Concat<Item: ?Sized>","parent":null,"children":[{"krate":0,"index":3270},{"krate":0,"index":3271}],"decl_id":null,"docs":" Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).","sig":null,"attributes":[{"value":"/ Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).","span":{"file_name":"src/liballoc/slice.rs","byte_start":615965,"byte_end":616048,"line_start":593,"line_end":593,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616049,"byte_end":616052,"line_start":594,"line_end":594,"column_start":1,"column_end":4}},{"value":"/ Note: the `Item` type parameter is not used in this trait,","span":{"file_name":"src/liballoc/slice.rs","byte_start":616053,"byte_end":616115,"line_start":595,"line_end":595,"column_start":1,"column_end":63}},{"value":"/ but it allows impls to be more generic.","span":{"file_name":"src/liballoc/slice.rs","byte_start":616116,"byte_end":616159,"line_start":596,"line_end":596,"column_start":1,"column_end":44}},{"value":"/ Without it, we get this error:","span":{"file_name":"src/liballoc/slice.rs","byte_start":616160,"byte_end":616194,"line_start":597,"line_end":597,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616195,"byte_end":616198,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ ```error","span":{"file_name":"src/liballoc/slice.rs","byte_start":616199,"byte_end":616211,"line_start":599,"line_end":599,"column_start":1,"column_end":13}},{"value":"/ error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica","span":{"file_name":"src/liballoc/slice.rs","byte_start":616212,"byte_end":616312,"line_start":600,"line_end":600,"column_start":1,"column_end":101}},{"value":"/    --> src/liballoc/slice.rs:608:6","span":{"file_name":"src/liballoc/slice.rs","byte_start":616313,"byte_end":616351,"line_start":601,"line_end":601,"column_start":1,"column_end":39}},{"value":"/     |","span":{"file_name":"src/liballoc/slice.rs","byte_start":616352,"byte_end":616361,"line_start":602,"line_end":602,"column_start":1,"column_end":10}},{"value":"/ 608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {","span":{"file_name":"src/liballoc/slice.rs","byte_start":616362,"byte_end":616419,"line_start":603,"line_end":603,"column_start":1,"column_end":58}},{"value":"/     |      ^ unconstrained type parameter","span":{"file_name":"src/liballoc/slice.rs","byte_start":616420,"byte_end":616465,"line_start":604,"line_end":604,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":616466,"byte_end":616473,"line_start":605,"line_end":605,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616474,"byte_end":616477,"line_start":606,"line_end":606,"column_start":1,"column_end":4}},{"value":"/ This is because there could exist `V` types with multiple `Borrow<[_]>` impls,","span":{"file_name":"src/liballoc/slice.rs","byte_start":616478,"byte_end":616560,"line_start":607,"line_end":607,"column_start":1,"column_end":83}},{"value":"/ such that multiple `T` types would apply:","span":{"file_name":"src/liballoc/slice.rs","byte_start":616561,"byte_end":616606,"line_start":608,"line_end":608,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616607,"byte_end":616610,"line_start":609,"line_end":609,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":616611,"byte_end":616618,"line_start":610,"line_end":610,"column_start":1,"column_end":8}},{"value":"/ # #[allow(dead_code)]","span":{"file_name":"src/liballoc/slice.rs","byte_start":616619,"byte_end":616644,"line_start":611,"line_end":611,"column_start":1,"column_end":26}},{"value":"/ pub struct Foo(Vec<u32>, Vec<String>);","span":{"file_name":"src/liballoc/slice.rs","byte_start":616645,"byte_end":616687,"line_start":612,"line_end":612,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616688,"byte_end":616691,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ impl std::borrow::Borrow<[u32]> for Foo {","span":{"file_name":"src/liballoc/slice.rs","byte_start":616692,"byte_end":616737,"line_start":614,"line_end":614,"column_start":1,"column_end":46}},{"value":"/     fn borrow(&self) -> &[u32] { &self.0 }","span":{"file_name":"src/liballoc/slice.rs","byte_start":616738,"byte_end":616784,"line_start":615,"line_end":615,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/slice.rs","byte_start":616785,"byte_end":616790,"line_start":616,"line_end":616,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":616791,"byte_end":616794,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ impl std::borrow::Borrow<[String]> for Foo {","span":{"file_name":"src/liballoc/slice.rs","byte_start":616795,"byte_end":616843,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/     fn borrow(&self) -> &[String] { &self.1 }","span":{"file_name":"src/liballoc/slice.rs","byte_start":616844,"byte_end":616893,"line_start":619,"line_end":619,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"src/liballoc/slice.rs","byte_start":616894,"byte_end":616899,"line_start":620,"line_end":620,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":616900,"byte_end":616907,"line_start":621,"line_end":621,"column_start":1,"column_end":8}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":616908,"byte_end":616968,"line_start":622,"line_end":622,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3270},"span":{"file_name":"src/liballoc/slice.rs","byte_start":617123,"byte_end":617129,"line_start":626,"line_end":626,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::Concat::Output","value":"type Output;","parent":{"krate":0,"index":3268},"children":[],"decl_id":null,"docs":" The resulting type after concatenation\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":617006,"byte_end":617066,"line_start":624,"line_end":624,"column_start":5,"column_end":65}},{"value":"/ The resulting type after concatenation","span":{"file_name":"src/liballoc/slice.rs","byte_start":617071,"byte_end":617113,"line_start":625,"line_end":625,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"src/liballoc/slice.rs","byte_start":617292,"byte_end":617298,"line_start":630,"line_end":630,"column_start":8,"column_end":14},"name":"concat","qualname":"::slice::Concat::concat","value":"fn (slice: &Self) -> Self::Output","parent":{"krate":0,"index":3268},"children":[],"decl_id":null,"docs":" Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n","sig":null,"attributes":[{"value":"/ Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)","span":{"file_name":"src/liballoc/slice.rs","byte_start":617136,"byte_end":617219,"line_start":628,"line_end":628,"column_start":5,"column_end":88}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":617224,"byte_end":617284,"line_start":629,"line_end":629,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":3272},"span":{"file_name":"src/liballoc/slice.rs","byte_start":617483,"byte_end":617487,"line_start":635,"line_end":635,"column_start":11,"column_end":15},"name":"Join","qualname":"::slice::Join","value":"Join<Separator>","parent":null,"children":[{"krate":0,"index":3274},{"krate":0,"index":3275}],"decl_id":null,"docs":" Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)\n","sig":null,"attributes":[{"value":"/ Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)","span":{"file_name":"src/liballoc/slice.rs","byte_start":617333,"byte_end":617411,"line_start":633,"line_end":633,"column_start":1,"column_end":79}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":617412,"byte_end":617472,"line_start":634,"line_end":634,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3274},"span":{"file_name":"src/liballoc/slice.rs","byte_start":617622,"byte_end":617628,"line_start":638,"line_end":638,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::Join::Output","value":"type Output;","parent":{"krate":0,"index":3272},"children":[],"decl_id":null,"docs":" The resulting type after concatenation\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":617505,"byte_end":617565,"line_start":636,"line_end":636,"column_start":5,"column_end":65}},{"value":"/ The resulting type after concatenation","span":{"file_name":"src/liballoc/slice.rs","byte_start":617570,"byte_end":617612,"line_start":637,"line_end":637,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3275},"span":{"file_name":"src/liballoc/slice.rs","byte_start":617787,"byte_end":617791,"line_start":642,"line_end":642,"column_start":8,"column_end":12},"name":"join","qualname":"::slice::Join::join","value":"fn (slice: &Self, sep: Separator) -> Self::Output","parent":{"krate":0,"index":3272},"children":[],"decl_id":null,"docs":" Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)\n","sig":null,"attributes":[{"value":"/ Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)","span":{"file_name":"src/liballoc/slice.rs","byte_start":617635,"byte_end":617714,"line_start":640,"line_end":640,"column_start":5,"column_end":84}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":617719,"byte_end":617779,"line_start":641,"line_end":641,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":3336},"span":{"file_name":"src/liballoc/str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"src/liballoc/str.rs","parent":null,"children":[{"krate":0,"index":3337},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3367},{"krate":0,"index":3371},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3381},{"krate":0,"index":3384},{"krate":0,"index":3387},{"krate":0,"index":3390},{"krate":0,"index":3393},{"krate":0,"index":3396},{"krate":0,"index":3400},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3412},{"krate":0,"index":3414},{"krate":0,"index":3416},{"krate":0,"index":3420},{"krate":0,"index":3441}],"decl_id":null,"docs":" Unicode string slices.","sig":null,"attributes":[{"value":"! Unicode string slices.","span":{"file_name":"src/liballoc/str.rs","byte_start":633777,"byte_end":633803,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":633804,"byte_end":633807,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! *[See also the `str` primitive type](../../std/primitive.str.html).*","span":{"file_name":"src/liballoc/str.rs","byte_start":633808,"byte_end":633880,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":633881,"byte_end":633884,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The `&str` type is one of the two main string types, the other being `String`.","span":{"file_name":"src/liballoc/str.rs","byte_start":633885,"byte_end":633967,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"! Unlike its `String` counterpart, its contents are borrowed.","span":{"file_name":"src/liballoc/str.rs","byte_start":633968,"byte_end":634031,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":634032,"byte_end":634035,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Basic Usage","span":{"file_name":"src/liballoc/str.rs","byte_start":634036,"byte_end":634053,"line_start":8,"line_end":8,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":634054,"byte_end":634057,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! A basic string declaration of `&str` type:","span":{"file_name":"src/liballoc/str.rs","byte_start":634058,"byte_end":634104,"line_start":10,"line_end":10,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":634105,"byte_end":634108,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634109,"byte_end":634116,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"! let hello_world = \"Hello, World!\";","span":{"file_name":"src/liballoc/str.rs","byte_start":634117,"byte_end":634155,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634156,"byte_end":634163,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":634164,"byte_end":634167,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Here we have declared a string literal, also known as a string slice.","span":{"file_name":"src/liballoc/str.rs","byte_start":634168,"byte_end":634241,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! String literals have a static lifetime, which means the string `hello_world`","span":{"file_name":"src/liballoc/str.rs","byte_start":634242,"byte_end":634322,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! is guaranteed to be valid for the duration of the entire program.","span":{"file_name":"src/liballoc/str.rs","byte_start":634323,"byte_end":634392,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"! We can explicitly specify `hello_world`'s lifetime as well:","span":{"file_name":"src/liballoc/str.rs","byte_start":634393,"byte_end":634456,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":634457,"byte_end":634460,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634461,"byte_end":634468,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"! let hello_world: &'static str = \"Hello, world!\";","span":{"file_name":"src/liballoc/str.rs","byte_start":634469,"byte_end":634521,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634522,"byte_end":634529,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":634531,"byte_end":634577,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"allow(unused_imports)","span":{"file_name":"src/liballoc/str.rs","byte_start":634734,"byte_end":634759,"line_start":28,"line_end":28,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"src/liballoc/str.rs","byte_start":641595,"byte_end":641611,"line_start":233,"line_end":233,"column_start":12,"column_end":28},"name":"into_boxed_bytes","qualname":"<str>::into_boxed_bytes","value":"fn (self: Box<str>) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.","sig":null,"attributes":[{"value":"/ Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.","span":{"file_name":"src/liballoc/str.rs","byte_start":641150,"byte_end":641225,"line_start":219,"line_end":219,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":641230,"byte_end":641233,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":641238,"byte_end":641252,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":641257,"byte_end":641260,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":641265,"byte_end":641281,"line_start":223,"line_end":223,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":641286,"byte_end":641289,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":641294,"byte_end":641301,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is a string\";","span":{"file_name":"src/liballoc/str.rs","byte_start":641306,"byte_end":641337,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/ let boxed_str = s.to_owned().into_boxed_str();","span":{"file_name":"src/liballoc/str.rs","byte_start":641342,"byte_end":641392,"line_start":227,"line_end":227,"column_start":5,"column_end":55}},{"value":"/ let boxed_bytes = boxed_str.into_boxed_bytes();","span":{"file_name":"src/liballoc/str.rs","byte_start":641397,"byte_end":641448,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(*boxed_bytes, *s.as_bytes());","span":{"file_name":"src/liballoc/str.rs","byte_start":641453,"byte_end":641497,"line_start":229,"line_end":229,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":641502,"byte_end":641509,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"stable(feature = \"str_box_extras\", since = \"1.20.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":641514,"byte_end":641569,"line_start":231,"line_end":231,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":641574,"byte_end":641583,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":"src/liballoc/str.rs","byte_start":642599,"byte_end":642606,"line_start":265,"line_end":265,"column_start":12,"column_end":19},"name":"replace","qualname":"<str>::replace","value":"fn <'a, P> (&'a self, from: P, to: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Replaces all matches of a pattern with another string.","sig":null,"attributes":[{"value":"/ Replaces all matches of a pattern with another string.","span":{"file_name":"src/liballoc/str.rs","byte_start":641674,"byte_end":641732,"line_start":237,"line_end":237,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":641737,"byte_end":641740,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ `replace` creates a new [`String`], and copies the data from this string slice into it.","span":{"file_name":"src/liballoc/str.rs","byte_start":641745,"byte_end":641836,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ While doing so, it attempts to find matches of a pattern. If it finds any, it","span":{"file_name":"src/liballoc/str.rs","byte_start":641841,"byte_end":641922,"line_start":240,"line_end":240,"column_start":5,"column_end":86}},{"value":"/ replaces them with the replacement string slice.","span":{"file_name":"src/liballoc/str.rs","byte_start":641927,"byte_end":641979,"line_start":241,"line_end":241,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":641984,"byte_end":641987,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":641992,"byte_end":642033,"line_start":243,"line_end":243,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642038,"byte_end":642041,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":642046,"byte_end":642060,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642065,"byte_end":642068,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":642073,"byte_end":642089,"line_start":247,"line_end":247,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642094,"byte_end":642097,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":642102,"byte_end":642109,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":642114,"byte_end":642140,"line_start":250,"line_end":250,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642145,"byte_end":642148,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"this is new\", s.replace(\"old\", \"new\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":642153,"byte_end":642208,"line_start":252,"line_end":252,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":642213,"byte_end":642220,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642225,"byte_end":642228,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"src/liballoc/str.rs","byte_start":642233,"byte_end":642268,"line_start":255,"line_end":255,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":642273,"byte_end":642276,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":642281,"byte_end":642288,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":642293,"byte_end":642319,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":642324,"byte_end":642386,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":642391,"byte_end":642398,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"","span":{"file_name":"src/liballoc/str.rs","byte_start":642403,"byte_end":642523,"line_start":261,"line_end":262,"column_start":5,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":642528,"byte_end":642573,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":642578,"byte_end":642587,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3425},"span":{"file_name":"src/liballoc/str.rs","byte_start":644161,"byte_end":644169,"line_start":305,"line_end":305,"column_start":12,"column_end":20},"name":"replacen","qualname":"<str>::replacen","value":"fn <'a, P> (&'a self, pat: P, to: &str, count: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Replaces first N matches of a pattern with another string.","sig":null,"attributes":[{"value":"/ Replaces first N matches of a pattern with another string.","span":{"file_name":"src/liballoc/str.rs","byte_start":643061,"byte_end":643123,"line_start":277,"line_end":277,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643128,"byte_end":643131,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ `replacen` creates a new [`String`], and copies the data from this string slice into it.","span":{"file_name":"src/liballoc/str.rs","byte_start":643136,"byte_end":643228,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/ While doing so, it attempts to find matches of a pattern. If it finds any, it","span":{"file_name":"src/liballoc/str.rs","byte_start":643233,"byte_end":643314,"line_start":280,"line_end":280,"column_start":5,"column_end":86}},{"value":"/ replaces them with the replacement string slice at most `count` times.","span":{"file_name":"src/liballoc/str.rs","byte_start":643319,"byte_end":643393,"line_start":281,"line_end":281,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643398,"byte_end":643401,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":643406,"byte_end":643447,"line_start":283,"line_end":283,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643452,"byte_end":643455,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":643460,"byte_end":643474,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643479,"byte_end":643482,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":643487,"byte_end":643503,"line_start":287,"line_end":287,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643508,"byte_end":643511,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":643516,"byte_end":643523,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/ let s = \"foo foo 123 foo\";","span":{"file_name":"src/liballoc/str.rs","byte_start":643528,"byte_end":643558,"line_start":290,"line_end":290,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));","span":{"file_name":"src/liballoc/str.rs","byte_start":643563,"byte_end":643626,"line_start":291,"line_end":291,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));","span":{"file_name":"src/liballoc/str.rs","byte_start":643631,"byte_end":643690,"line_start":292,"line_end":292,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));","span":{"file_name":"src/liballoc/str.rs","byte_start":643695,"byte_end":643771,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":643776,"byte_end":643783,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643788,"byte_end":643791,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"src/liballoc/str.rs","byte_start":643796,"byte_end":643831,"line_start":296,"line_end":296,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":643836,"byte_end":643839,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":643844,"byte_end":643851,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":643856,"byte_end":643882,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));","span":{"file_name":"src/liballoc/str.rs","byte_start":643887,"byte_end":643954,"line_start":300,"line_end":300,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":643959,"byte_end":643966,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"","span":{"file_name":"src/liballoc/str.rs","byte_start":643971,"byte_end":644091,"line_start":302,"line_end":303,"column_start":5,"column_end":51}},{"value":"stable(feature = \"str_replacen\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":644096,"byte_end":644149,"line_start":304,"line_end":304,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"src/liballoc/str.rs","byte_start":645935,"byte_end":645947,"line_start":360,"line_end":360,"column_start":12,"column_end":24},"name":"to_lowercase","qualname":"<str>::to_lowercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the lowercase equivalent of this string slice, as a new [`String`].","sig":null,"attributes":[{"value":"/ Returns the lowercase equivalent of this string slice, as a new [`String`].","span":{"file_name":"src/liballoc/str.rs","byte_start":644713,"byte_end":644792,"line_start":318,"line_end":318,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":644797,"byte_end":644800,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ 'Lowercase' is defined according to the terms of the Unicode Derived Core Property","span":{"file_name":"src/liballoc/str.rs","byte_start":644805,"byte_end":644891,"line_start":320,"line_end":320,"column_start":5,"column_end":91}},{"value":"/ `Lowercase`.","span":{"file_name":"src/liballoc/str.rs","byte_start":644896,"byte_end":644912,"line_start":321,"line_end":321,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":644917,"byte_end":644920,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Since some characters can expand into multiple characters when changing","span":{"file_name":"src/liballoc/str.rs","byte_start":644925,"byte_end":645000,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/ the case, this function returns a [`String`] instead of modifying the","span":{"file_name":"src/liballoc/str.rs","byte_start":645005,"byte_end":645078,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"/ parameter in-place.","span":{"file_name":"src/liballoc/str.rs","byte_start":645083,"byte_end":645106,"line_start":325,"line_end":325,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645111,"byte_end":645114,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":645119,"byte_end":645160,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645165,"byte_end":645168,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":645173,"byte_end":645187,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645192,"byte_end":645195,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":645200,"byte_end":645216,"line_start":331,"line_end":331,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645221,"byte_end":645224,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645229,"byte_end":645236,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ let s = \"HELLO\";","span":{"file_name":"src/liballoc/str.rs","byte_start":645241,"byte_end":645261,"line_start":334,"line_end":334,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645266,"byte_end":645269,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", s.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":645274,"byte_end":645316,"line_start":336,"line_end":336,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645321,"byte_end":645328,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645333,"byte_end":645336,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ A tricky example, with sigma:","span":{"file_name":"src/liballoc/str.rs","byte_start":645341,"byte_end":645374,"line_start":339,"line_end":339,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645379,"byte_end":645382,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645387,"byte_end":645394,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ let sigma = \"Σ\";","span":{"file_name":"src/liballoc/str.rs","byte_start":645399,"byte_end":645420,"line_start":342,"line_end":342,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645425,"byte_end":645428,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"σ\", sigma.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":645433,"byte_end":645476,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645481,"byte_end":645484,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ // but at the end of a word, it's ς, not σ:","span":{"file_name":"src/liballoc/str.rs","byte_start":645489,"byte_end":645538,"line_start":346,"line_end":346,"column_start":5,"column_end":52}},{"value":"/ let odysseus = \"ὈΔΥΣΣΕΎΣ\";","span":{"file_name":"src/liballoc/str.rs","byte_start":645543,"byte_end":645582,"line_start":347,"line_end":347,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645587,"byte_end":645590,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":645595,"byte_end":645656,"line_start":349,"line_end":349,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645661,"byte_end":645668,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645673,"byte_end":645676,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Languages without case are not changed:","span":{"file_name":"src/liballoc/str.rs","byte_start":645681,"byte_end":645724,"line_start":352,"line_end":352,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645729,"byte_end":645732,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645737,"byte_end":645744,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ let new_year = \"农历新年\";","span":{"file_name":"src/liballoc/str.rs","byte_start":645749,"byte_end":645783,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":645788,"byte_end":645791,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(new_year, new_year.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":645796,"byte_end":645846,"line_start":357,"line_end":357,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":645851,"byte_end":645858,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":645863,"byte_end":645923,"line_start":359,"line_end":359,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"src/liballoc/str.rs","byte_start":648848,"byte_end":648860,"line_start":441,"line_end":441,"column_start":12,"column_end":24},"name":"to_uppercase","qualname":"<str>::to_uppercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the uppercase equivalent of this string slice, as a new [`String`].","sig":null,"attributes":[{"value":"/ Returns the uppercase equivalent of this string slice, as a new [`String`].","span":{"file_name":"src/liballoc/str.rs","byte_start":647807,"byte_end":647886,"line_start":405,"line_end":405,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":647891,"byte_end":647894,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ 'Uppercase' is defined according to the terms of the Unicode Derived Core Property","span":{"file_name":"src/liballoc/str.rs","byte_start":647899,"byte_end":647985,"line_start":407,"line_end":407,"column_start":5,"column_end":91}},{"value":"/ `Uppercase`.","span":{"file_name":"src/liballoc/str.rs","byte_start":647990,"byte_end":648006,"line_start":408,"line_end":408,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648011,"byte_end":648014,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Since some characters can expand into multiple characters when changing","span":{"file_name":"src/liballoc/str.rs","byte_start":648019,"byte_end":648094,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ the case, this function returns a [`String`] instead of modifying the","span":{"file_name":"src/liballoc/str.rs","byte_start":648099,"byte_end":648172,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ parameter in-place.","span":{"file_name":"src/liballoc/str.rs","byte_start":648177,"byte_end":648200,"line_start":412,"line_end":412,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648205,"byte_end":648208,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":648213,"byte_end":648254,"line_start":414,"line_end":414,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648259,"byte_end":648262,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":648267,"byte_end":648281,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648286,"byte_end":648289,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":648294,"byte_end":648310,"line_start":418,"line_end":418,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648315,"byte_end":648318,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648323,"byte_end":648330,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ let s = \"hello\";","span":{"file_name":"src/liballoc/str.rs","byte_start":648335,"byte_end":648355,"line_start":421,"line_end":421,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648360,"byte_end":648363,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"HELLO\", s.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":648368,"byte_end":648410,"line_start":423,"line_end":423,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648415,"byte_end":648422,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648427,"byte_end":648430,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"src/liballoc/str.rs","byte_start":648435,"byte_end":648476,"line_start":426,"line_end":426,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648481,"byte_end":648484,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648489,"byte_end":648496,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ let new_year = \"农历新年\";","span":{"file_name":"src/liballoc/str.rs","byte_start":648501,"byte_end":648535,"line_start":429,"line_end":429,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648540,"byte_end":648543,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(new_year, new_year.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":648548,"byte_end":648598,"line_start":431,"line_end":431,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648603,"byte_end":648610,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648615,"byte_end":648618,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ One character can become multiple:","span":{"file_name":"src/liballoc/str.rs","byte_start":648623,"byte_end":648661,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648666,"byte_end":648673,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ let s = \"tschüß\";","span":{"file_name":"src/liballoc/str.rs","byte_start":648678,"byte_end":648701,"line_start":436,"line_end":436,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":648706,"byte_end":648709,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"TSCHÜSS\", s.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":648714,"byte_end":648759,"line_start":438,"line_end":438,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":648764,"byte_end":648771,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":648776,"byte_end":648836,"line_start":440,"line_end":440,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3437},"span":{"file_name":"src/liballoc/str.rs","byte_start":649870,"byte_end":649881,"line_start":477,"line_end":477,"column_start":12,"column_end":23},"name":"into_string","qualname":"<str>::into_string","value":"fn (self: Box<str>) -> String","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Box<str>`] into a [`String`] without copying or allocating.","sig":null,"attributes":[{"value":"/ Converts a [`Box<str>`] into a [`String`] without copying or allocating.","span":{"file_name":"src/liballoc/str.rs","byte_start":649360,"byte_end":649436,"line_start":460,"line_end":460,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":649441,"byte_end":649444,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":649449,"byte_end":649490,"line_start":462,"line_end":462,"column_start":5,"column_end":46}},{"value":"/ [`Box<str>`]: boxed/struct.Box.html","span":{"file_name":"src/liballoc/str.rs","byte_start":649495,"byte_end":649534,"line_start":463,"line_end":463,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":649539,"byte_end":649542,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":649547,"byte_end":649561,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":649566,"byte_end":649569,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":649574,"byte_end":649590,"line_start":467,"line_end":467,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":649595,"byte_end":649598,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":649603,"byte_end":649610,"line_start":469,"line_end":469,"column_start":5,"column_end":12}},{"value":"/ let string = String::from(\"birthday gift\");","span":{"file_name":"src/liballoc/str.rs","byte_start":649615,"byte_end":649662,"line_start":470,"line_end":470,"column_start":5,"column_end":52}},{"value":"/ let boxed_str = string.clone().into_boxed_str();","span":{"file_name":"src/liballoc/str.rs","byte_start":649667,"byte_end":649719,"line_start":471,"line_end":471,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":649724,"byte_end":649727,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(boxed_str.into_string(), string);","span":{"file_name":"src/liballoc/str.rs","byte_start":649732,"byte_end":649780,"line_start":473,"line_end":473,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":649785,"byte_end":649792,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_str\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":649797,"byte_end":649844,"line_start":475,"line_end":475,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":649849,"byte_end":649858,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"src/liballoc/str.rs","byte_start":650643,"byte_end":650649,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"repeat","qualname":"<str>::repeat","value":"fn (&self, n: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`String`] by repeating a string `n` times.","sig":null,"attributes":[{"value":"/ Creates a new [`String`] by repeating a string `n` times.","span":{"file_name":"src/liballoc/str.rs","byte_start":650031,"byte_end":650092,"line_start":482,"line_end":482,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650097,"byte_end":650100,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/str.rs","byte_start":650105,"byte_end":650117,"line_start":484,"line_end":484,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650122,"byte_end":650125,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"src/liballoc/str.rs","byte_start":650130,"byte_end":650190,"line_start":486,"line_end":486,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650195,"byte_end":650198,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":650203,"byte_end":650244,"line_start":488,"line_end":488,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650249,"byte_end":650252,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":650257,"byte_end":650271,"line_start":490,"line_end":490,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650276,"byte_end":650279,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":650284,"byte_end":650300,"line_start":492,"line_end":492,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650305,"byte_end":650308,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":650313,"byte_end":650320,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":650325,"byte_end":650387,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":650392,"byte_end":650399,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650404,"byte_end":650407,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ A panic upon overflow:","span":{"file_name":"src/liballoc/str.rs","byte_start":650412,"byte_end":650438,"line_start":498,"line_end":498,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650443,"byte_end":650446,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/str.rs","byte_start":650451,"byte_end":650470,"line_start":500,"line_end":500,"column_start":5,"column_end":24}},{"value":"/ // this will panic at runtime","span":{"file_name":"src/liballoc/str.rs","byte_start":650475,"byte_end":650508,"line_start":501,"line_end":501,"column_start":5,"column_end":38}},{"value":"/ \"0123456789abcdef\".repeat(usize::max_value());","span":{"file_name":"src/liballoc/str.rs","byte_start":650513,"byte_end":650563,"line_start":502,"line_end":502,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":650568,"byte_end":650575,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"stable(feature = \"repeat_str\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":650580,"byte_end":650631,"line_start":504,"line_end":504,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"src/liballoc/str.rs","byte_start":651568,"byte_end":651586,"line_start":532,"line_end":532,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<str>::to_ascii_uppercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this string where each character is mapped to its\n ASCII upper case equivalent.","sig":null,"attributes":[{"value":"/ Returns a copy of this string where each character is mapped to its","span":{"file_name":"src/liballoc/str.rs","byte_start":650764,"byte_end":650835,"line_start":509,"line_end":509,"column_start":5,"column_end":76}},{"value":"/ ASCII upper case equivalent.","span":{"file_name":"src/liballoc/str.rs","byte_start":650840,"byte_end":650872,"line_start":510,"line_end":510,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650877,"byte_end":650880,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',","span":{"file_name":"src/liballoc/str.rs","byte_start":650885,"byte_end":650939,"line_start":512,"line_end":512,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/str.rs","byte_start":650944,"byte_end":650984,"line_start":513,"line_end":513,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":650989,"byte_end":650992,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ To uppercase the value in-place, use [`make_ascii_uppercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":650997,"byte_end":651063,"line_start":515,"line_end":515,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651068,"byte_end":651071,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ To uppercase ASCII characters in addition to non-ASCII characters, use","span":{"file_name":"src/liballoc/str.rs","byte_start":651076,"byte_end":651150,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"/ [`to_uppercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":651155,"byte_end":651176,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651181,"byte_end":651184,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":651189,"byte_end":651203,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651208,"byte_end":651211,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":651216,"byte_end":651223,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"/ let s = \"Grüße, Jürgen ❤\";","span":{"file_name":"src/liballoc/str.rs","byte_start":651228,"byte_end":651263,"line_start":523,"line_end":523,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651268,"byte_end":651271,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":651276,"byte_end":651339,"line_start":525,"line_end":525,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":651344,"byte_end":651351,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651356,"byte_end":651359,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_uppercase`]: #method.make_ascii_uppercase","span":{"file_name":"src/liballoc/str.rs","byte_start":651364,"byte_end":651422,"line_start":528,"line_end":528,"column_start":5,"column_end":63}},{"value":"/ [`to_uppercase`]: #method.to_uppercase","span":{"file_name":"src/liballoc/str.rs","byte_start":651427,"byte_end":651469,"line_start":529,"line_end":529,"column_start":5,"column_end":47}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":651474,"byte_end":651542,"line_start":530,"line_end":530,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":651547,"byte_end":651556,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"src/liballoc/str.rs","byte_start":652628,"byte_end":652646,"line_start":562,"line_end":562,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<str>::to_ascii_lowercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this string where each character is mapped to its\n ASCII lower case equivalent.","sig":null,"attributes":[{"value":"/ Returns a copy of this string where each character is mapped to its","span":{"file_name":"src/liballoc/str.rs","byte_start":651824,"byte_end":651895,"line_start":539,"line_end":539,"column_start":5,"column_end":76}},{"value":"/ ASCII lower case equivalent.","span":{"file_name":"src/liballoc/str.rs","byte_start":651900,"byte_end":651932,"line_start":540,"line_end":540,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":651937,"byte_end":651940,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',","span":{"file_name":"src/liballoc/str.rs","byte_start":651945,"byte_end":651999,"line_start":542,"line_end":542,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/str.rs","byte_start":652004,"byte_end":652044,"line_start":543,"line_end":543,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652049,"byte_end":652052,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ To lowercase the value in-place, use [`make_ascii_lowercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":652057,"byte_end":652123,"line_start":545,"line_end":545,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652128,"byte_end":652131,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ To lowercase ASCII characters in addition to non-ASCII characters, use","span":{"file_name":"src/liballoc/str.rs","byte_start":652136,"byte_end":652210,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/ [`to_lowercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":652215,"byte_end":652236,"line_start":548,"line_end":548,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652241,"byte_end":652244,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":652249,"byte_end":652263,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652268,"byte_end":652271,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":652276,"byte_end":652283,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ let s = \"Grüße, Jürgen ❤\";","span":{"file_name":"src/liballoc/str.rs","byte_start":652288,"byte_end":652323,"line_start":553,"line_end":553,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652328,"byte_end":652331,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":652336,"byte_end":652399,"line_start":555,"line_end":555,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":652404,"byte_end":652411,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":652416,"byte_end":652419,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_lowercase`]: #method.make_ascii_lowercase","span":{"file_name":"src/liballoc/str.rs","byte_start":652424,"byte_end":652482,"line_start":558,"line_end":558,"column_start":5,"column_end":63}},{"value":"/ [`to_lowercase`]: #method.to_lowercase","span":{"file_name":"src/liballoc/str.rs","byte_start":652487,"byte_end":652529,"line_start":559,"line_end":559,"column_start":5,"column_end":47}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":652534,"byte_end":652602,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":652607,"byte_end":652616,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":3441},"span":{"file_name":"src/liballoc/str.rs","byte_start":653301,"byte_end":653326,"line_start":585,"line_end":585,"column_start":15,"column_end":40},"name":"from_boxed_utf8_unchecked","qualname":"::str::from_boxed_utf8_unchecked","value":"fn (v: Box<[u8]>) -> Box<str>","parent":null,"children":[],"decl_id":null,"docs":" Converts a boxed slice of bytes to a boxed string slice without checking\n that the string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a boxed slice of bytes to a boxed string slice without checking","span":{"file_name":"src/liballoc/str.rs","byte_start":652882,"byte_end":652958,"line_start":570,"line_end":570,"column_start":1,"column_end":77}},{"value":"/ that the string contains valid UTF-8.","span":{"file_name":"src/liballoc/str.rs","byte_start":652959,"byte_end":653000,"line_start":571,"line_end":571,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":653001,"byte_end":653004,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":653005,"byte_end":653019,"line_start":573,"line_end":573,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":653020,"byte_end":653023,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":653024,"byte_end":653040,"line_start":575,"line_end":575,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":653041,"byte_end":653044,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":653045,"byte_end":653052,"line_start":577,"line_end":577,"column_start":1,"column_end":8}},{"value":"/ let smile_utf8 = Box::new([226, 152, 186]);","span":{"file_name":"src/liballoc/str.rs","byte_start":653053,"byte_end":653100,"line_start":578,"line_end":578,"column_start":1,"column_end":48}},{"value":"/ let smile = unsafe { std::str::from_boxed_utf8_unchecked(smile_utf8) };","span":{"file_name":"src/liballoc/str.rs","byte_start":653101,"byte_end":653176,"line_start":579,"line_end":579,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":653177,"byte_end":653180,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"☺\", &*smile);","span":{"file_name":"src/liballoc/str.rs","byte_start":653181,"byte_end":653212,"line_start":581,"line_end":581,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":653213,"byte_end":653220,"line_start":582,"line_end":582,"column_start":1,"column_end":8}},{"value":"stable(feature = \"str_box_extras\", since = \"1.20.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":653221,"byte_end":653276,"line_start":583,"line_end":583,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":653277,"byte_end":653286,"line_start":584,"line_end":584,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3442},"span":{"file_name":"src/liballoc/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"src/liballoc/string.rs","parent":null,"children":[{"krate":0,"index":3443},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3451},{"krate":0,"index":3455},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3466},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3477},{"krate":0,"index":4732},{"krate":0,"index":4739},{"krate":0,"index":4736},{"krate":0,"index":4737},{"krate":0,"index":4734},{"krate":0,"index":4745},{"krate":0,"index":4757},{"krate":0,"index":4755},{"krate":0,"index":4751},{"krate":0,"index":4752},{"krate":0,"index":4748},{"krate":0,"index":4749},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":3478},{"krate":0,"index":3523},{"krate":0,"index":3527},{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3534},{"krate":0,"index":3537},{"krate":0,"index":3541},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3552},{"krate":0,"index":3556},{"krate":0,"index":3560},{"krate":0,"index":3565},{"krate":0,"index":3569},{"krate":0,"index":3574},{"krate":0,"index":3581},{"krate":0,"index":3584},{"krate":0,"index":4764},{"krate":0,"index":4769},{"krate":0,"index":4774},{"krate":0,"index":4779},{"krate":0,"index":4784},{"krate":0,"index":4789},{"krate":0,"index":4794},{"krate":0,"index":4799},{"krate":0,"index":4804},{"krate":0,"index":4809},{"krate":0,"index":3585},{"krate":0,"index":3587},{"krate":0,"index":3589},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3599},{"krate":0,"index":3602},{"krate":0,"index":3605},{"krate":0,"index":3608},{"krate":0,"index":3611},{"krate":0,"index":3614},{"krate":0,"index":3617},{"krate":0,"index":3619},{"krate":0,"index":3621},{"krate":0,"index":3623},{"krate":0,"index":3625},{"krate":0,"index":3627},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3638},{"krate":0,"index":3640},{"krate":0,"index":3644},{"krate":0,"index":3646},{"krate":0,"index":3648},{"krate":0,"index":3650},{"krate":0,"index":3652},{"krate":0,"index":3654},{"krate":0,"index":3656},{"krate":0,"index":3658},{"krate":0,"index":3660},{"krate":0,"index":3662},{"krate":0,"index":3664},{"krate":0,"index":3667},{"krate":0,"index":3670},{"krate":0,"index":3673},{"krate":0,"index":3676},{"krate":0,"index":3680},{"krate":0,"index":3685},{"krate":0,"index":3689},{"krate":0,"index":3691},{"krate":0,"index":3694},{"krate":0,"index":3700},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3706},{"krate":0,"index":3711},{"krate":0,"index":3713}],"decl_id":null,"docs":" A UTF-8 encoded, growable string.","sig":null,"attributes":[{"value":"! A UTF-8 encoded, growable string.","span":{"file_name":"src/liballoc/string.rs","byte_start":653406,"byte_end":653443,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653444,"byte_end":653447,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains the [`String`] type, a trait for converting","span":{"file_name":"src/liballoc/string.rs","byte_start":653448,"byte_end":653516,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"! [`ToString`]s, and several error types that may result from working with","span":{"file_name":"src/liballoc/string.rs","byte_start":653517,"byte_end":653593,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"! [`String`]s.","span":{"file_name":"src/liballoc/string.rs","byte_start":653594,"byte_end":653610,"line_start":5,"line_end":5,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653611,"byte_end":653614,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! [`ToString`]: trait.ToString.html","span":{"file_name":"src/liballoc/string.rs","byte_start":653615,"byte_end":653652,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653653,"byte_end":653656,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":653657,"byte_end":653671,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653672,"byte_end":653675,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! There are multiple ways to create a new [`String`] from a string literal:","span":{"file_name":"src/liballoc/string.rs","byte_start":653676,"byte_end":653753,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653754,"byte_end":653757,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653758,"byte_end":653765,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"! let s = \"Hello\".to_string();","span":{"file_name":"src/liballoc/string.rs","byte_start":653766,"byte_end":653798,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653799,"byte_end":653802,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! let s = String::from(\"world\");","span":{"file_name":"src/liballoc/string.rs","byte_start":653803,"byte_end":653837,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"! let s: String = \"also this\".into();","span":{"file_name":"src/liballoc/string.rs","byte_start":653838,"byte_end":653877,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653878,"byte_end":653885,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653886,"byte_end":653889,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! You can create a new [`String`] from an existing one by concatenating with","span":{"file_name":"src/liballoc/string.rs","byte_start":653890,"byte_end":653968,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! `+`:","span":{"file_name":"src/liballoc/string.rs","byte_start":653969,"byte_end":653977,"line_start":21,"line_end":21,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":653978,"byte_end":653981,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":653982,"byte_end":654016,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654017,"byte_end":654020,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":654021,"byte_end":654028,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! let s = \"Hello\".to_string();","span":{"file_name":"src/liballoc/string.rs","byte_start":654029,"byte_end":654061,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654062,"byte_end":654065,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! let message = s + \" world!\";","span":{"file_name":"src/liballoc/string.rs","byte_start":654066,"byte_end":654098,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":654099,"byte_end":654106,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654107,"byte_end":654110,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! If you have a vector of valid UTF-8 bytes, you can make a [`String`] out of","span":{"file_name":"src/liballoc/string.rs","byte_start":654111,"byte_end":654190,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"! it. You can do the reverse too.","span":{"file_name":"src/liballoc/string.rs","byte_start":654191,"byte_end":654226,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654227,"byte_end":654230,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":654231,"byte_end":654238,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"! let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":654239,"byte_end":654288,"line_start":35,"line_end":35,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654289,"byte_end":654292,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":654293,"byte_end":654355,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"! let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":654356,"byte_end":654422,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654423,"byte_end":654426,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":654427,"byte_end":654465,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654466,"byte_end":654469,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! let bytes = sparkle_heart.into_bytes();","span":{"file_name":"src/liballoc/string.rs","byte_start":654470,"byte_end":654513,"line_start":42,"line_end":42,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":654514,"byte_end":654517,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! assert_eq!(bytes, [240, 159, 146, 150]);","span":{"file_name":"src/liballoc/string.rs","byte_start":654518,"byte_end":654562,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":654563,"byte_end":654570,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":654572,"byte_end":654618,"line_start":47,"line_end":47,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":4732},"span":{"file_name":"src/liballoc/string.rs","byte_start":661909,"byte_end":661915,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":4733}],"decl_id":null,"docs":" A UTF-8 encoded, growable string.","sig":null,"attributes":[{"value":"/ A UTF-8 encoded, growable string.","span":{"file_name":"src/liballoc/string.rs","byte_start":655134,"byte_end":655171,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655172,"byte_end":655175,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The `String` type is the most common string type that has ownership over the","span":{"file_name":"src/liballoc/string.rs","byte_start":655176,"byte_end":655256,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ contents of the string. It has a close relationship with its borrowed","span":{"file_name":"src/liballoc/string.rs","byte_start":655257,"byte_end":655330,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ counterpart, the primitive [`str`].","span":{"file_name":"src/liballoc/string.rs","byte_start":655331,"byte_end":655370,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655371,"byte_end":655374,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":655375,"byte_end":655416,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655417,"byte_end":655420,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":655421,"byte_end":655435,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655436,"byte_end":655439,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ You can create a `String` from a literal string with [`String::from`]:","span":{"file_name":"src/liballoc/string.rs","byte_start":655440,"byte_end":655514,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655515,"byte_end":655518,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655519,"byte_end":655526,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ let hello = String::from(\"Hello, world!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":655527,"byte_end":655573,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655574,"byte_end":655581,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655582,"byte_end":655585,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ You can append a [`char`] to a `String` with the [`push`] method, and","span":{"file_name":"src/liballoc/string.rs","byte_start":655586,"byte_end":655659,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ append a [`&str`] with the [`push_str`] method:","span":{"file_name":"src/liballoc/string.rs","byte_start":655660,"byte_end":655711,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655712,"byte_end":655715,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655716,"byte_end":655723,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ let mut hello = String::from(\"Hello, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":655724,"byte_end":655768,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655769,"byte_end":655772,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ hello.push('w');","span":{"file_name":"src/liballoc/string.rs","byte_start":655773,"byte_end":655793,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/ hello.push_str(\"orld!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":655794,"byte_end":655822,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655823,"byte_end":655830,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655831,"byte_end":655834,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ [`String::from`]: #method.from","span":{"file_name":"src/liballoc/string.rs","byte_start":655835,"byte_end":655869,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":655870,"byte_end":655913,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/ [`push`]: #method.push","span":{"file_name":"src/liballoc/string.rs","byte_start":655914,"byte_end":655940,"line_start":92,"line_end":92,"column_start":1,"column_end":27}},{"value":"/ [`push_str`]: #method.push_str","span":{"file_name":"src/liballoc/string.rs","byte_start":655941,"byte_end":655975,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655976,"byte_end":655979,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ If you have a vector of UTF-8 bytes, you can create a `String` from it with","span":{"file_name":"src/liballoc/string.rs","byte_start":655980,"byte_end":656059,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/ the [`from_utf8`] method:","span":{"file_name":"src/liballoc/string.rs","byte_start":656060,"byte_end":656089,"line_start":96,"line_end":96,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656090,"byte_end":656093,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":656094,"byte_end":656101,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":656102,"byte_end":656132,"line_start":99,"line_end":99,"column_start":1,"column_end":31}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":656133,"byte_end":656182,"line_start":100,"line_end":100,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656183,"byte_end":656186,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":656187,"byte_end":656249,"line_start":102,"line_end":102,"column_start":1,"column_end":63}},{"value":"/ let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":656250,"byte_end":656316,"line_start":103,"line_end":103,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656317,"byte_end":656320,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":656321,"byte_end":656359,"line_start":105,"line_end":105,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":656360,"byte_end":656367,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656368,"byte_end":656371,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`from_utf8`]: #method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":656372,"byte_end":656408,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656409,"byte_end":656412,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ # UTF-8","span":{"file_name":"src/liballoc/string.rs","byte_start":656413,"byte_end":656424,"line_start":110,"line_end":110,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656425,"byte_end":656428,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `String`s are always valid UTF-8. This has a few implications, the first of","span":{"file_name":"src/liballoc/string.rs","byte_start":656429,"byte_end":656508,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ which is that if you need a non-UTF-8 string, consider [`OsString`]. It is","span":{"file_name":"src/liballoc/string.rs","byte_start":656509,"byte_end":656587,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"/ similar, but without the UTF-8 constraint. The second implication is that","span":{"file_name":"src/liballoc/string.rs","byte_start":656588,"byte_end":656665,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"/ you cannot index into a `String`:","span":{"file_name":"src/liballoc/string.rs","byte_start":656666,"byte_end":656703,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656704,"byte_end":656707,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```compile_fail,E0277","span":{"file_name":"src/liballoc/string.rs","byte_start":656708,"byte_end":656733,"line_start":117,"line_end":117,"column_start":1,"column_end":26}},{"value":"/ let s = \"hello\";","span":{"file_name":"src/liballoc/string.rs","byte_start":656734,"byte_end":656754,"line_start":118,"line_end":118,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656755,"byte_end":656758,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ println!(\"The first letter of s is {}\", s[0]); // ERROR!!!","span":{"file_name":"src/liballoc/string.rs","byte_start":656759,"byte_end":656821,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":656822,"byte_end":656829,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656830,"byte_end":656833,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`OsString`]: ../../std/ffi/struct.OsString.html","span":{"file_name":"src/liballoc/string.rs","byte_start":656834,"byte_end":656886,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656887,"byte_end":656890,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ Indexing is intended to be a constant-time operation, but UTF-8 encoding","span":{"file_name":"src/liballoc/string.rs","byte_start":656891,"byte_end":656967,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/ does not allow us to do this. Furthermore, it's not clear what sort of","span":{"file_name":"src/liballoc/string.rs","byte_start":656968,"byte_end":657042,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ thing the index should return: a byte, a codepoint, or a grapheme cluster.","span":{"file_name":"src/liballoc/string.rs","byte_start":657043,"byte_end":657121,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ The [`bytes`] and [`chars`] methods return iterators over the first","span":{"file_name":"src/liballoc/string.rs","byte_start":657122,"byte_end":657193,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/ two, respectively.","span":{"file_name":"src/liballoc/string.rs","byte_start":657194,"byte_end":657216,"line_start":129,"line_end":129,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657217,"byte_end":657220,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ [`bytes`]: #method.bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":657221,"byte_end":657249,"line_start":131,"line_end":131,"column_start":1,"column_end":29}},{"value":"/ [`chars`]: #method.chars","span":{"file_name":"src/liballoc/string.rs","byte_start":657250,"byte_end":657278,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657279,"byte_end":657282,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"src/liballoc/string.rs","byte_start":657283,"byte_end":657294,"line_start":134,"line_end":134,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657295,"byte_end":657298,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ `String`s implement [`Deref`]`<Target=str>`, and so inherit all of [`str`]'s","span":{"file_name":"src/liballoc/string.rs","byte_start":657299,"byte_end":657379,"line_start":136,"line_end":136,"column_start":1,"column_end":81}},{"value":"/ methods. In addition, this means that you can pass a `String` to a","span":{"file_name":"src/liballoc/string.rs","byte_start":657380,"byte_end":657450,"line_start":137,"line_end":137,"column_start":1,"column_end":71}},{"value":"/ function which takes a [`&str`] by using an ampersand (`&`):","span":{"file_name":"src/liballoc/string.rs","byte_start":657451,"byte_end":657515,"line_start":138,"line_end":138,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657516,"byte_end":657519,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":657520,"byte_end":657527,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ fn takes_str(s: &str) { }","span":{"file_name":"src/liballoc/string.rs","byte_start":657528,"byte_end":657557,"line_start":141,"line_end":141,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657558,"byte_end":657561,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ let s = String::from(\"Hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":657562,"byte_end":657596,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657597,"byte_end":657600,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ takes_str(&s);","span":{"file_name":"src/liballoc/string.rs","byte_start":657601,"byte_end":657619,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":657620,"byte_end":657627,"line_start":146,"line_end":146,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657628,"byte_end":657631,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This will create a [`&str`] from the `String` and pass it in. This","span":{"file_name":"src/liballoc/string.rs","byte_start":657632,"byte_end":657702,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"/ conversion is very inexpensive, and so generally, functions will accept","span":{"file_name":"src/liballoc/string.rs","byte_start":657703,"byte_end":657778,"line_start":149,"line_end":149,"column_start":1,"column_end":76}},{"value":"/ [`&str`]s as arguments unless they need a `String` for some specific","span":{"file_name":"src/liballoc/string.rs","byte_start":657779,"byte_end":657851,"line_start":150,"line_end":150,"column_start":1,"column_end":73}},{"value":"/ reason.","span":{"file_name":"src/liballoc/string.rs","byte_start":657852,"byte_end":657863,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657864,"byte_end":657867,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ In certain cases Rust doesn't have enough information to make this","span":{"file_name":"src/liballoc/string.rs","byte_start":657868,"byte_end":657938,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ conversion, known as [`Deref`] coercion. In the following example a string","span":{"file_name":"src/liballoc/string.rs","byte_start":657939,"byte_end":658017,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/ slice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function","span":{"file_name":"src/liballoc/string.rs","byte_start":658018,"byte_end":658101,"line_start":155,"line_end":155,"column_start":1,"column_end":84}},{"value":"/ `example_func` takes anything that implements the trait. In this case Rust","span":{"file_name":"src/liballoc/string.rs","byte_start":658102,"byte_end":658180,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ would need to make two implicit conversions, which Rust doesn't have the","span":{"file_name":"src/liballoc/string.rs","byte_start":658181,"byte_end":658257,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/ means to do. For that reason, the following example will not compile.","span":{"file_name":"src/liballoc/string.rs","byte_start":658258,"byte_end":658331,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658332,"byte_end":658335,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ```compile_fail,E0277","span":{"file_name":"src/liballoc/string.rs","byte_start":658336,"byte_end":658361,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/ trait TraitExample {}","span":{"file_name":"src/liballoc/string.rs","byte_start":658362,"byte_end":658387,"line_start":161,"line_end":161,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658388,"byte_end":658391,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ impl<'a> TraitExample for &'a str {}","span":{"file_name":"src/liballoc/string.rs","byte_start":658392,"byte_end":658432,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658433,"byte_end":658436,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ fn example_func<A: TraitExample>(example_arg: A) {}","span":{"file_name":"src/liballoc/string.rs","byte_start":658437,"byte_end":658492,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658493,"byte_end":658496,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ let example_string = String::from(\"example_string\");","span":{"file_name":"src/liballoc/string.rs","byte_start":658497,"byte_end":658553,"line_start":167,"line_end":167,"column_start":1,"column_end":57}},{"value":"/ example_func(&example_string);","span":{"file_name":"src/liballoc/string.rs","byte_start":658554,"byte_end":658588,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":658589,"byte_end":658596,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658597,"byte_end":658600,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ There are two options that would work instead. The first would be to","span":{"file_name":"src/liballoc/string.rs","byte_start":658601,"byte_end":658673,"line_start":171,"line_end":171,"column_start":1,"column_end":73}},{"value":"/ change the line `example_func(&example_string);` to","span":{"file_name":"src/liballoc/string.rs","byte_start":658674,"byte_end":658729,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"/ `example_func(example_string.as_str());`, using the method [`as_str()`]","span":{"file_name":"src/liballoc/string.rs","byte_start":658730,"byte_end":658805,"line_start":173,"line_end":173,"column_start":1,"column_end":76}},{"value":"/ to explicitly extract the string slice containing the string. The second","span":{"file_name":"src/liballoc/string.rs","byte_start":658806,"byte_end":658882,"line_start":174,"line_end":174,"column_start":1,"column_end":77}},{"value":"/ way changes `example_func(&example_string);` to","span":{"file_name":"src/liballoc/string.rs","byte_start":658883,"byte_end":658934,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ `example_func(&*example_string);`. In this case we are dereferencing a","span":{"file_name":"src/liballoc/string.rs","byte_start":658935,"byte_end":659009,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ `String` to a [`str`][`&str`], then referencing the [`str`][`&str`] back to","span":{"file_name":"src/liballoc/string.rs","byte_start":659010,"byte_end":659089,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/ [`&str`]. The second way is more idiomatic, however both work to do the","span":{"file_name":"src/liballoc/string.rs","byte_start":659090,"byte_end":659165,"line_start":178,"line_end":178,"column_start":1,"column_end":76}},{"value":"/ conversion explicitly rather than relying on the implicit conversion.","span":{"file_name":"src/liballoc/string.rs","byte_start":659166,"byte_end":659239,"line_start":179,"line_end":179,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659240,"byte_end":659243,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"src/liballoc/string.rs","byte_start":659244,"byte_end":659264,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659265,"byte_end":659268,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ A `String` is made up of three components: a pointer to some bytes, a","span":{"file_name":"src/liballoc/string.rs","byte_start":659269,"byte_end":659342,"line_start":183,"line_end":183,"column_start":1,"column_end":74}},{"value":"/ length, and a capacity. The pointer points to an internal buffer `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":659343,"byte_end":659420,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ uses to store its data. The length is the number of bytes currently stored","span":{"file_name":"src/liballoc/string.rs","byte_start":659421,"byte_end":659499,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ in the buffer, and the capacity is the size of the buffer in bytes. As such,","span":{"file_name":"src/liballoc/string.rs","byte_start":659500,"byte_end":659580,"line_start":186,"line_end":186,"column_start":1,"column_end":81}},{"value":"/ the length will always be less than or equal to the capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":659581,"byte_end":659646,"line_start":187,"line_end":187,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659647,"byte_end":659650,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ This buffer is always stored on the heap.","span":{"file_name":"src/liballoc/string.rs","byte_start":659651,"byte_end":659696,"line_start":189,"line_end":189,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659697,"byte_end":659700,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ You can look at these with the [`as_ptr`], [`len`], and [`capacity`]","span":{"file_name":"src/liballoc/string.rs","byte_start":659701,"byte_end":659773,"line_start":191,"line_end":191,"column_start":1,"column_end":73}},{"value":"/ methods:","span":{"file_name":"src/liballoc/string.rs","byte_start":659774,"byte_end":659786,"line_start":192,"line_end":192,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659787,"byte_end":659790,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":659791,"byte_end":659798,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/string.rs","byte_start":659799,"byte_end":659816,"line_start":195,"line_end":195,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659817,"byte_end":659820,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ let story = String::from(\"Once upon a time...\");","span":{"file_name":"src/liballoc/string.rs","byte_start":659821,"byte_end":659873,"line_start":197,"line_end":197,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659874,"byte_end":659877,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ // Prevent automatically dropping the String's data","span":{"file_name":"src/liballoc/string.rs","byte_start":659937,"byte_end":659992,"line_start":200,"line_end":200,"column_start":1,"column_end":56}},{"value":"/ let mut story = mem::ManuallyDrop::new(story);","span":{"file_name":"src/liballoc/string.rs","byte_start":659993,"byte_end":660043,"line_start":201,"line_end":201,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660044,"byte_end":660047,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ let ptr = story.as_mut_ptr();","span":{"file_name":"src/liballoc/string.rs","byte_start":660048,"byte_end":660081,"line_start":203,"line_end":203,"column_start":1,"column_end":34}},{"value":"/ let len = story.len();","span":{"file_name":"src/liballoc/string.rs","byte_start":660082,"byte_end":660108,"line_start":204,"line_end":204,"column_start":1,"column_end":27}},{"value":"/ let capacity = story.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":660109,"byte_end":660145,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660146,"byte_end":660149,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ // story has nineteen bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":660150,"byte_end":660181,"line_start":207,"line_end":207,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(19, len);","span":{"file_name":"src/liballoc/string.rs","byte_start":660182,"byte_end":660206,"line_start":208,"line_end":208,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660207,"byte_end":660210,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ // We can re-build a String out of ptr, len, and capacity. This is all","span":{"file_name":"src/liballoc/string.rs","byte_start":660211,"byte_end":660285,"line_start":210,"line_end":210,"column_start":1,"column_end":75}},{"value":"/ // unsafe because we are responsible for making sure the components are","span":{"file_name":"src/liballoc/string.rs","byte_start":660286,"byte_end":660361,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ // valid:","span":{"file_name":"src/liballoc/string.rs","byte_start":660362,"byte_end":660375,"line_start":212,"line_end":212,"column_start":1,"column_end":14}},{"value":"/ let s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;","span":{"file_name":"src/liballoc/string.rs","byte_start":660376,"byte_end":660443,"line_start":213,"line_end":213,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660444,"byte_end":660447,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(String::from(\"Once upon a time...\"), s);","span":{"file_name":"src/liballoc/string.rs","byte_start":660448,"byte_end":660503,"line_start":215,"line_end":215,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":660504,"byte_end":660511,"line_start":216,"line_end":216,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660512,"byte_end":660515,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ [`as_ptr`]: #method.as_ptr","span":{"file_name":"src/liballoc/string.rs","byte_start":660516,"byte_end":660546,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"/ [`len`]: #method.len","span":{"file_name":"src/liballoc/string.rs","byte_start":660547,"byte_end":660571,"line_start":219,"line_end":219,"column_start":1,"column_end":25}},{"value":"/ [`capacity`]: #method.capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":660572,"byte_end":660606,"line_start":220,"line_end":220,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660607,"byte_end":660610,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ If a `String` has enough capacity, adding elements to it will not","span":{"file_name":"src/liballoc/string.rs","byte_start":660611,"byte_end":660680,"line_start":222,"line_end":222,"column_start":1,"column_end":70}},{"value":"/ re-allocate. For example, consider this program:","span":{"file_name":"src/liballoc/string.rs","byte_start":660681,"byte_end":660733,"line_start":223,"line_end":223,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660734,"byte_end":660737,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":660738,"byte_end":660745,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":660746,"byte_end":660776,"line_start":226,"line_end":226,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660777,"byte_end":660780,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":660781,"byte_end":660814,"line_start":228,"line_end":228,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660815,"byte_end":660818,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..5 {","span":{"file_name":"src/liballoc/string.rs","byte_start":660819,"byte_end":660838,"line_start":230,"line_end":230,"column_start":1,"column_end":20}},{"value":"/     s.push_str(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":660839,"byte_end":660867,"line_start":231,"line_end":231,"column_start":1,"column_end":29}},{"value":"/     println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":660868,"byte_end":660905,"line_start":232,"line_end":232,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":660906,"byte_end":660911,"line_start":233,"line_end":233,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":660912,"byte_end":660919,"line_start":234,"line_end":234,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660920,"byte_end":660923,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ This will output the following:","span":{"file_name":"src/liballoc/string.rs","byte_start":660924,"byte_end":660959,"line_start":236,"line_end":236,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660960,"byte_end":660963,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"src/liballoc/string.rs","byte_start":660964,"byte_end":660975,"line_start":238,"line_end":238,"column_start":1,"column_end":12}},{"value":"/ 0","span":{"file_name":"src/liballoc/string.rs","byte_start":660976,"byte_end":660981,"line_start":239,"line_end":239,"column_start":1,"column_end":6}},{"value":"/ 5","span":{"file_name":"src/liballoc/string.rs","byte_start":660982,"byte_end":660987,"line_start":240,"line_end":240,"column_start":1,"column_end":6}},{"value":"/ 10","span":{"file_name":"src/liballoc/string.rs","byte_start":660988,"byte_end":660994,"line_start":241,"line_end":241,"column_start":1,"column_end":7}},{"value":"/ 20","span":{"file_name":"src/liballoc/string.rs","byte_start":660995,"byte_end":661001,"line_start":242,"line_end":242,"column_start":1,"column_end":7}},{"value":"/ 20","span":{"file_name":"src/liballoc/string.rs","byte_start":661002,"byte_end":661008,"line_start":243,"line_end":243,"column_start":1,"column_end":7}},{"value":"/ 40","span":{"file_name":"src/liballoc/string.rs","byte_start":661009,"byte_end":661015,"line_start":244,"line_end":244,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661016,"byte_end":661023,"line_start":245,"line_end":245,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661024,"byte_end":661027,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ At first, we have no memory allocated at all, but as we append to the","span":{"file_name":"src/liballoc/string.rs","byte_start":661028,"byte_end":661101,"line_start":247,"line_end":247,"column_start":1,"column_end":74}},{"value":"/ string, it increases its capacity appropriately. If we instead use the","span":{"file_name":"src/liballoc/string.rs","byte_start":661102,"byte_end":661176,"line_start":248,"line_end":248,"column_start":1,"column_end":75}},{"value":"/ [`with_capacity`] method to allocate the correct capacity initially:","span":{"file_name":"src/liballoc/string.rs","byte_start":661177,"byte_end":661249,"line_start":249,"line_end":249,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661250,"byte_end":661253,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661254,"byte_end":661261,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let mut s = String::with_capacity(25);","span":{"file_name":"src/liballoc/string.rs","byte_start":661262,"byte_end":661304,"line_start":252,"line_end":252,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661305,"byte_end":661308,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":661309,"byte_end":661342,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661343,"byte_end":661346,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..5 {","span":{"file_name":"src/liballoc/string.rs","byte_start":661347,"byte_end":661366,"line_start":256,"line_end":256,"column_start":1,"column_end":20}},{"value":"/     s.push_str(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":661367,"byte_end":661395,"line_start":257,"line_end":257,"column_start":1,"column_end":29}},{"value":"/     println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":661396,"byte_end":661433,"line_start":258,"line_end":258,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":661434,"byte_end":661439,"line_start":259,"line_end":259,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661440,"byte_end":661447,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661448,"byte_end":661451,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ [`with_capacity`]: #method.with_capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":661452,"byte_end":661496,"line_start":262,"line_end":262,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661497,"byte_end":661500,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ We end up with a different output:","span":{"file_name":"src/liballoc/string.rs","byte_start":661501,"byte_end":661539,"line_start":264,"line_end":264,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661540,"byte_end":661543,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"src/liballoc/string.rs","byte_start":661544,"byte_end":661555,"line_start":266,"line_end":266,"column_start":1,"column_end":12}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661556,"byte_end":661562,"line_start":267,"line_end":267,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661563,"byte_end":661569,"line_start":268,"line_end":268,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661570,"byte_end":661576,"line_start":269,"line_end":269,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661577,"byte_end":661583,"line_start":270,"line_end":270,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661584,"byte_end":661590,"line_start":271,"line_end":271,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":661591,"byte_end":661597,"line_start":272,"line_end":272,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661598,"byte_end":661605,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661606,"byte_end":661609,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ Here, there's no need to allocate more memory inside the loop.","span":{"file_name":"src/liballoc/string.rs","byte_start":661610,"byte_end":661676,"line_start":275,"line_end":275,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661677,"byte_end":661680,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":661681,"byte_end":661723,"line_start":277,"line_end":277,"column_start":1,"column_end":43}},{"value":"/ [`Deref`]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/string.rs","byte_start":661724,"byte_end":661769,"line_start":278,"line_end":278,"column_start":1,"column_end":46}},{"value":"/ [`as_str()`]: struct.String.html#method.as_str","span":{"file_name":"src/liballoc/string.rs","byte_start":661770,"byte_end":661820,"line_start":279,"line_end":279,"column_start":1,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":661852,"byte_end":661897,"line_start":281,"line_end":281,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4745},"span":{"file_name":"src/liballoc/string.rs","byte_start":663304,"byte_end":663317,"line_start":323,"line_end":323,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::string::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":4746},{"krate":0,"index":4747}],"decl_id":null,"docs":" A possible error value when converting a `String` from a UTF-8 byte vector.","sig":null,"attributes":[{"value":"/ A possible error value when converting a `String` from a UTF-8 byte vector.","span":{"file_name":"src/liballoc/string.rs","byte_start":661939,"byte_end":662018,"line_start":286,"line_end":286,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662019,"byte_end":662022,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ This type is the error type for the [`from_utf8`] method on [`String`]. It","span":{"file_name":"src/liballoc/string.rs","byte_start":662023,"byte_end":662101,"line_start":288,"line_end":288,"column_start":1,"column_end":79}},{"value":"/ is designed in such a way to carefully avoid reallocations: the","span":{"file_name":"src/liballoc/string.rs","byte_start":662102,"byte_end":662169,"line_start":289,"line_end":289,"column_start":1,"column_end":68}},{"value":"/ [`into_bytes`] method will give back the byte vector that was used in the","span":{"file_name":"src/liballoc/string.rs","byte_start":662170,"byte_end":662247,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"/ conversion attempt.","span":{"file_name":"src/liballoc/string.rs","byte_start":662248,"byte_end":662271,"line_start":291,"line_end":291,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662272,"byte_end":662275,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ [`from_utf8`]: struct.String.html#method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":662276,"byte_end":662330,"line_start":293,"line_end":293,"column_start":1,"column_end":55}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":662331,"byte_end":662365,"line_start":294,"line_end":294,"column_start":1,"column_end":35}},{"value":"/ [`into_bytes`]: struct.FromUtf8Error.html#method.into_bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":662366,"byte_end":662429,"line_start":295,"line_end":295,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662430,"byte_end":662433,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ The [`Utf8Error`] type provided by [`std::str`] represents an error that may","span":{"file_name":"src/liballoc/string.rs","byte_start":662434,"byte_end":662514,"line_start":297,"line_end":297,"column_start":1,"column_end":81}},{"value":"/ occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's","span":{"file_name":"src/liballoc/string.rs","byte_start":662515,"byte_end":662594,"line_start":298,"line_end":298,"column_start":1,"column_end":80}},{"value":"/ an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`","span":{"file_name":"src/liballoc/string.rs","byte_start":662595,"byte_end":662673,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/ through the [`utf8_error`] method.","span":{"file_name":"src/liballoc/string.rs","byte_start":662674,"byte_end":662712,"line_start":300,"line_end":300,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662713,"byte_end":662716,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ [`Utf8Error`]: ../../std/str/struct.Utf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":662717,"byte_end":662771,"line_start":302,"line_end":302,"column_start":1,"column_end":55}},{"value":"/ [`std::str`]: ../../std/str/index.html","span":{"file_name":"src/liballoc/string.rs","byte_start":662772,"byte_end":662814,"line_start":303,"line_end":303,"column_start":1,"column_end":43}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":662815,"byte_end":662854,"line_start":304,"line_end":304,"column_start":1,"column_end":40}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":662855,"byte_end":662897,"line_start":305,"line_end":305,"column_start":1,"column_end":43}},{"value":"/ [`utf8_error`]: #method.utf8_error","span":{"file_name":"src/liballoc/string.rs","byte_start":662898,"byte_end":662936,"line_start":306,"line_end":306,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662937,"byte_end":662940,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":662941,"byte_end":662955,"line_start":308,"line_end":308,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662956,"byte_end":662959,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":662960,"byte_end":662976,"line_start":310,"line_end":310,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662977,"byte_end":662980,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662981,"byte_end":662988,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":662989,"byte_end":663027,"line_start":313,"line_end":313,"column_start":1,"column_end":39}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":663028,"byte_end":663057,"line_start":314,"line_end":314,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663058,"byte_end":663061,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":663062,"byte_end":663103,"line_start":316,"line_end":316,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663104,"byte_end":663107,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ assert!(value.is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":663108,"byte_end":663136,"line_start":318,"line_end":318,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":663137,"byte_end":663199,"line_start":319,"line_end":319,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":663200,"byte_end":663207,"line_start":320,"line_end":320,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":663208,"byte_end":663253,"line_start":321,"line_end":321,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4759},"span":{"file_name":"src/liballoc/string.rs","byte_start":663915,"byte_end":663929,"line_start":348,"line_end":348,"column_start":12,"column_end":26},"name":"FromUtf16Error","qualname":"::string::FromUtf16Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A possible error value when converting a `String` from a UTF-16 byte slice.","sig":null,"attributes":[{"value":"/ A possible error value when converting a `String` from a UTF-16 byte slice.","span":{"file_name":"src/liballoc/string.rs","byte_start":663365,"byte_end":663444,"line_start":328,"line_end":328,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663445,"byte_end":663448,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ This type is the error type for the [`from_utf16`] method on [`String`].","span":{"file_name":"src/liballoc/string.rs","byte_start":663449,"byte_end":663525,"line_start":330,"line_end":330,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663526,"byte_end":663529,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ [`from_utf16`]: struct.String.html#method.from_utf16","span":{"file_name":"src/liballoc/string.rs","byte_start":663530,"byte_end":663586,"line_start":332,"line_end":332,"column_start":1,"column_end":57}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":663587,"byte_end":663621,"line_start":333,"line_end":333,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663622,"byte_end":663625,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":663626,"byte_end":663640,"line_start":335,"line_end":335,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663641,"byte_end":663644,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":663645,"byte_end":663661,"line_start":337,"line_end":337,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663662,"byte_end":663665,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":663666,"byte_end":663673,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ // 𝄞mu<invalid>ic","span":{"file_name":"src/liballoc/string.rs","byte_start":663674,"byte_end":663698,"line_start":340,"line_end":340,"column_start":1,"column_end":22}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":663699,"byte_end":663744,"line_start":341,"line_end":341,"column_start":1,"column_end":46}},{"value":"/           0xD800, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":663745,"byte_end":663783,"line_start":342,"line_end":342,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663784,"byte_end":663787,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ assert!(String::from_utf16(v).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":663788,"byte_end":663832,"line_start":344,"line_end":344,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":663833,"byte_end":663840,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":663841,"byte_end":663886,"line_start":346,"line_end":346,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3479},"span":{"file_name":"src/liballoc/string.rs","byte_start":664712,"byte_end":664715,"line_start":372,"line_end":372,"column_start":18,"column_end":21},"name":"new","qualname":"<String>::new","value":"fn () -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `String`.","sig":null,"attributes":[{"value":"/ Creates a new empty `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":663954,"byte_end":663987,"line_start":351,"line_end":351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663992,"byte_end":663995,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Given that the `String` is empty, this will not allocate any initial","span":{"file_name":"src/liballoc/string.rs","byte_start":664000,"byte_end":664072,"line_start":353,"line_end":353,"column_start":5,"column_end":77}},{"value":"/ buffer. While that means that this initial operation is very","span":{"file_name":"src/liballoc/string.rs","byte_start":664077,"byte_end":664141,"line_start":354,"line_end":354,"column_start":5,"column_end":69}},{"value":"/ inexpensive, it may cause excessive allocation later when you add","span":{"file_name":"src/liballoc/string.rs","byte_start":664146,"byte_end":664215,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/ data. If you have an idea of how much data the `String` will hold,","span":{"file_name":"src/liballoc/string.rs","byte_start":664220,"byte_end":664290,"line_start":356,"line_end":356,"column_start":5,"column_end":75}},{"value":"/ consider the [`with_capacity`] method to prevent excessive","span":{"file_name":"src/liballoc/string.rs","byte_start":664295,"byte_end":664357,"line_start":357,"line_end":357,"column_start":5,"column_end":67}},{"value":"/ re-allocation.","span":{"file_name":"src/liballoc/string.rs","byte_start":664362,"byte_end":664380,"line_start":358,"line_end":358,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664385,"byte_end":664388,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ [`with_capacity`]: #method.with_capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":664393,"byte_end":664437,"line_start":360,"line_end":360,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664442,"byte_end":664445,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":664450,"byte_end":664464,"line_start":362,"line_end":362,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664469,"byte_end":664472,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":664477,"byte_end":664493,"line_start":364,"line_end":364,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664498,"byte_end":664501,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664506,"byte_end":664513,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/ let s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":664518,"byte_end":664544,"line_start":367,"line_end":367,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664549,"byte_end":664556,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":664561,"byte_end":664570,"line_start":369,"line_end":369,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":664575,"byte_end":664644,"line_start":370,"line_end":370,"column_start":5,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":664649,"byte_end":664694,"line_start":371,"line_end":371,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":"src/liballoc/string.rs","byte_start":666096,"byte_end":666109,"line_start":415,"line_end":415,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<String>::with_capacity","value":"fn (capacity: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `String` with a particular capacity.","sig":null,"attributes":[{"value":"/ Creates a new empty `String` with a particular capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":664776,"byte_end":664836,"line_start":376,"line_end":376,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664841,"byte_end":664844,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ `String`s have an internal buffer to hold their data. The capacity is","span":{"file_name":"src/liballoc/string.rs","byte_start":664849,"byte_end":664922,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ the length of that buffer, and can be queried with the [`capacity`]","span":{"file_name":"src/liballoc/string.rs","byte_start":664927,"byte_end":664998,"line_start":379,"line_end":379,"column_start":5,"column_end":76}},{"value":"/ method. This method creates an empty `String`, but one with an initial","span":{"file_name":"src/liballoc/string.rs","byte_start":665003,"byte_end":665077,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ buffer that can hold `capacity` bytes. This is useful when you may be","span":{"file_name":"src/liballoc/string.rs","byte_start":665082,"byte_end":665155,"line_start":381,"line_end":381,"column_start":5,"column_end":78}},{"value":"/ appending a bunch of data to the `String`, reducing the number of","span":{"file_name":"src/liballoc/string.rs","byte_start":665160,"byte_end":665229,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/ reallocations it needs to do.","span":{"file_name":"src/liballoc/string.rs","byte_start":665234,"byte_end":665267,"line_start":383,"line_end":383,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665272,"byte_end":665275,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ [`capacity`]: #method.capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":665280,"byte_end":665314,"line_start":385,"line_end":385,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665319,"byte_end":665322,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ If the given capacity is `0`, no allocation will occur, and this method","span":{"file_name":"src/liballoc/string.rs","byte_start":665327,"byte_end":665402,"line_start":387,"line_end":387,"column_start":5,"column_end":80}},{"value":"/ is identical to the [`new`] method.","span":{"file_name":"src/liballoc/string.rs","byte_start":665407,"byte_end":665446,"line_start":388,"line_end":388,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665451,"byte_end":665454,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ [`new`]: #method.new","span":{"file_name":"src/liballoc/string.rs","byte_start":665459,"byte_end":665483,"line_start":390,"line_end":390,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665488,"byte_end":665491,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":665496,"byte_end":665510,"line_start":392,"line_end":392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665515,"byte_end":665518,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":665523,"byte_end":665539,"line_start":394,"line_end":394,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665544,"byte_end":665547,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":665552,"byte_end":665559,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":665564,"byte_end":665606,"line_start":397,"line_end":397,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665611,"byte_end":665614,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ // The String contains no chars, even though it has capacity for more","span":{"file_name":"src/liballoc/string.rs","byte_start":665619,"byte_end":665692,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(s.len(), 0);","span":{"file_name":"src/liballoc/string.rs","byte_start":665697,"byte_end":665724,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665729,"byte_end":665732,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"src/liballoc/string.rs","byte_start":665737,"byte_end":665786,"line_start":402,"line_end":402,"column_start":5,"column_end":54}},{"value":"/ let cap = s.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":665791,"byte_end":665818,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/string.rs","byte_start":665823,"byte_end":665843,"line_start":404,"line_end":404,"column_start":5,"column_end":25}},{"value":"/     s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":665848,"byte_end":665868,"line_start":405,"line_end":405,"column_start":5,"column_end":25}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":665873,"byte_end":665878,"line_start":406,"line_end":406,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665883,"byte_end":665886,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.capacity(), cap);","span":{"file_name":"src/liballoc/string.rs","byte_start":665891,"byte_end":665925,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665930,"byte_end":665933,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ // ...but this may make the string reallocate","span":{"file_name":"src/liballoc/string.rs","byte_start":665938,"byte_end":665987,"line_start":410,"line_end":410,"column_start":5,"column_end":54}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":665992,"byte_end":666008,"line_start":411,"line_end":411,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":666013,"byte_end":666020,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":666025,"byte_end":666034,"line_start":413,"line_end":413,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":666039,"byte_end":666084,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3481},"span":{"file_name":"src/liballoc/string.rs","byte_start":669027,"byte_end":669036,"line_start":491,"line_end":491,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String>::from_utf8","value":"fn (vec: Vec<u8>) -> Result<String, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String`.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":666625,"byte_end":666670,"line_start":429,"line_end":429,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666675,"byte_end":666678,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ A string ([`String`]) is made of bytes ([`u8`]), and a vector of bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":666683,"byte_end":666757,"line_start":431,"line_end":431,"column_start":5,"column_end":79}},{"value":"/ ([`Vec<u8>`]) is made of bytes, so this function converts between the","span":{"file_name":"src/liballoc/string.rs","byte_start":666762,"byte_end":666835,"line_start":432,"line_end":432,"column_start":5,"column_end":78}},{"value":"/ two. Not all byte slices are valid `String`s, however: `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":666840,"byte_end":666907,"line_start":433,"line_end":433,"column_start":5,"column_end":72}},{"value":"/ requires that it is valid UTF-8. `from_utf8()` checks to ensure that","span":{"file_name":"src/liballoc/string.rs","byte_start":666912,"byte_end":666984,"line_start":434,"line_end":434,"column_start":5,"column_end":77}},{"value":"/ the bytes are valid UTF-8, and then does the conversion.","span":{"file_name":"src/liballoc/string.rs","byte_start":666989,"byte_end":667049,"line_start":435,"line_end":435,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667054,"byte_end":667057,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ If you are sure that the byte slice is valid UTF-8, and you don't want","span":{"file_name":"src/liballoc/string.rs","byte_start":667062,"byte_end":667136,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ to incur the overhead of the validity check, there is an unsafe version","span":{"file_name":"src/liballoc/string.rs","byte_start":667141,"byte_end":667216,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ of this function, [`from_utf8_unchecked`], which has the same behavior","span":{"file_name":"src/liballoc/string.rs","byte_start":667221,"byte_end":667295,"line_start":439,"line_end":439,"column_start":5,"column_end":79}},{"value":"/ but skips the check.","span":{"file_name":"src/liballoc/string.rs","byte_start":667300,"byte_end":667324,"line_start":440,"line_end":440,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667329,"byte_end":667332,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This method will take care to not copy the vector, for efficiency's","span":{"file_name":"src/liballoc/string.rs","byte_start":667337,"byte_end":667408,"line_start":442,"line_end":442,"column_start":5,"column_end":76}},{"value":"/ sake.","span":{"file_name":"src/liballoc/string.rs","byte_start":667413,"byte_end":667422,"line_start":443,"line_end":443,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667427,"byte_end":667430,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ If you need a [`&str`] instead of a `String`, consider","span":{"file_name":"src/liballoc/string.rs","byte_start":667435,"byte_end":667493,"line_start":445,"line_end":445,"column_start":5,"column_end":63}},{"value":"/ [`str::from_utf8`].","span":{"file_name":"src/liballoc/string.rs","byte_start":667498,"byte_end":667521,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667526,"byte_end":667529,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ The inverse of this method is [`into_bytes`].","span":{"file_name":"src/liballoc/string.rs","byte_start":667534,"byte_end":667583,"line_start":448,"line_end":448,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667588,"byte_end":667591,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":667596,"byte_end":667608,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667613,"byte_end":667616,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Returns [`Err`] if the slice is not UTF-8 with a description as to why the","span":{"file_name":"src/liballoc/string.rs","byte_start":667621,"byte_end":667699,"line_start":452,"line_end":452,"column_start":5,"column_end":83}},{"value":"/ provided bytes are not UTF-8. The vector you moved in is also included.","span":{"file_name":"src/liballoc/string.rs","byte_start":667704,"byte_end":667779,"line_start":453,"line_end":453,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667784,"byte_end":667787,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":667792,"byte_end":667806,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667811,"byte_end":667814,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":667819,"byte_end":667835,"line_start":457,"line_end":457,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667840,"byte_end":667843,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":667848,"byte_end":667855,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":667860,"byte_end":667890,"line_start":460,"line_end":460,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":667895,"byte_end":667944,"line_start":461,"line_end":461,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667949,"byte_end":667952,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":667957,"byte_end":668019,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/ let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":668024,"byte_end":668090,"line_start":464,"line_end":464,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668095,"byte_end":668098,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":668103,"byte_end":668141,"line_start":466,"line_end":466,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":668146,"byte_end":668153,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668158,"byte_end":668161,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"src/liballoc/string.rs","byte_start":668166,"byte_end":668186,"line_start":469,"line_end":469,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668191,"byte_end":668194,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":668199,"byte_end":668206,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":668211,"byte_end":668249,"line_start":472,"line_end":472,"column_start":5,"column_end":43}},{"value":"/ let sparkle_heart = vec![0, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":668254,"byte_end":668301,"line_start":473,"line_end":473,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668306,"byte_end":668309,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ assert!(String::from_utf8(sparkle_heart).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":668314,"byte_end":668369,"line_start":475,"line_end":475,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":668374,"byte_end":668381,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668386,"byte_end":668389,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ See the docs for [`FromUtf8Error`] for more details on what you can do","span":{"file_name":"src/liballoc/string.rs","byte_start":668394,"byte_end":668468,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/ with this error.","span":{"file_name":"src/liballoc/string.rs","byte_start":668473,"byte_end":668493,"line_start":479,"line_end":479,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668498,"byte_end":668501,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked","span":{"file_name":"src/liballoc/string.rs","byte_start":668506,"byte_end":668580,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":668585,"byte_end":668619,"line_start":482,"line_end":482,"column_start":5,"column_end":39}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":668624,"byte_end":668663,"line_start":483,"line_end":483,"column_start":5,"column_end":44}},{"value":"/ [`Vec<u8>`]: ../../std/vec/struct.Vec.html","span":{"file_name":"src/liballoc/string.rs","byte_start":668668,"byte_end":668714,"line_start":484,"line_end":484,"column_start":5,"column_end":51}},{"value":"/ [`str::from_utf8`]: ../../std/str/fn.from_utf8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":668719,"byte_end":668774,"line_start":485,"line_end":485,"column_start":5,"column_end":60}},{"value":"/ [`into_bytes`]: struct.String.html#method.into_bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":668779,"byte_end":668835,"line_start":486,"line_end":486,"column_start":5,"column_end":61}},{"value":"/ [`FromUtf8Error`]: struct.FromUtf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":668840,"byte_end":668888,"line_start":487,"line_end":487,"column_start":5,"column_end":53}},{"value":"/ [`Err`]: ../../std/result/enum.Result.html#variant.Err","span":{"file_name":"src/liballoc/string.rs","byte_start":668893,"byte_end":668951,"line_start":488,"line_end":488,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":668956,"byte_end":668965,"line_start":489,"line_end":489,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":668970,"byte_end":669015,"line_start":490,"line_end":490,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"src/liballoc/string.rs","byte_start":671340,"byte_end":671355,"line_start":549,"line_end":549,"column_start":12,"column_end":27},"name":"from_utf8_lossy","qualname":"<String>::from_utf8_lossy","value":"fn (v: &[u8]) -> Cow<'_, str>","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string, including invalid characters.","sig":null,"attributes":[{"value":"/ Converts a slice of bytes to a string, including invalid characters.","span":{"file_name":"src/liballoc/string.rs","byte_start":669253,"byte_end":669325,"line_start":498,"line_end":498,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669330,"byte_end":669333,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Strings are made of bytes ([`u8`]), and a slice of bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":669338,"byte_end":669398,"line_start":500,"line_end":500,"column_start":5,"column_end":65}},{"value":"/ ([`&[u8]`][byteslice]) is made of bytes, so this function converts","span":{"file_name":"src/liballoc/string.rs","byte_start":669403,"byte_end":669473,"line_start":501,"line_end":501,"column_start":5,"column_end":75}},{"value":"/ between the two. Not all byte slices are valid strings, however: strings","span":{"file_name":"src/liballoc/string.rs","byte_start":669478,"byte_end":669554,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ are required to be valid UTF-8. During this conversion,","span":{"file_name":"src/liballoc/string.rs","byte_start":669559,"byte_end":669618,"line_start":503,"line_end":503,"column_start":5,"column_end":64}},{"value":"/ `from_utf8_lossy()` will replace any invalid UTF-8 sequences with","span":{"file_name":"src/liballoc/string.rs","byte_start":669623,"byte_end":669692,"line_start":504,"line_end":504,"column_start":5,"column_end":74}},{"value":"/ [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: �","span":{"file_name":"src/liballoc/string.rs","byte_start":669697,"byte_end":669769,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669774,"byte_end":669777,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":669782,"byte_end":669821,"line_start":507,"line_end":507,"column_start":5,"column_end":44}},{"value":"/ [byteslice]: ../../std/primitive.slice.html","span":{"file_name":"src/liballoc/string.rs","byte_start":669826,"byte_end":669873,"line_start":508,"line_end":508,"column_start":5,"column_end":52}},{"value":"/ [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html","span":{"file_name":"src/liballoc/string.rs","byte_start":669878,"byte_end":669935,"line_start":509,"line_end":509,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669940,"byte_end":669943,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ If you are sure that the byte slice is valid UTF-8, and you don't want","span":{"file_name":"src/liballoc/string.rs","byte_start":669948,"byte_end":670022,"line_start":511,"line_end":511,"column_start":5,"column_end":79}},{"value":"/ to incur the overhead of the conversion, there is an unsafe version","span":{"file_name":"src/liballoc/string.rs","byte_start":670027,"byte_end":670098,"line_start":512,"line_end":512,"column_start":5,"column_end":76}},{"value":"/ of this function, [`from_utf8_unchecked`], which has the same behavior","span":{"file_name":"src/liballoc/string.rs","byte_start":670103,"byte_end":670177,"line_start":513,"line_end":513,"column_start":5,"column_end":79}},{"value":"/ but skips the checks.","span":{"file_name":"src/liballoc/string.rs","byte_start":670182,"byte_end":670207,"line_start":514,"line_end":514,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670212,"byte_end":670215,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked","span":{"file_name":"src/liballoc/string.rs","byte_start":670220,"byte_end":670294,"line_start":516,"line_end":516,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670299,"byte_end":670302,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`Cow<'a, str>`]. If our byte slice is invalid","span":{"file_name":"src/liballoc/string.rs","byte_start":670307,"byte_end":670381,"line_start":518,"line_end":518,"column_start":5,"column_end":79}},{"value":"/ UTF-8, then we need to insert the replacement characters, which will","span":{"file_name":"src/liballoc/string.rs","byte_start":670386,"byte_end":670458,"line_start":519,"line_end":519,"column_start":5,"column_end":77}},{"value":"/ change the size of the string, and hence, require a `String`. But if","span":{"file_name":"src/liballoc/string.rs","byte_start":670463,"byte_end":670535,"line_start":520,"line_end":520,"column_start":5,"column_end":77}},{"value":"/ it's already valid UTF-8, we don't need a new allocation. This return","span":{"file_name":"src/liballoc/string.rs","byte_start":670540,"byte_end":670613,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ type allows us to handle both cases.","span":{"file_name":"src/liballoc/string.rs","byte_start":670618,"byte_end":670658,"line_start":522,"line_end":522,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670663,"byte_end":670666,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ [`Cow<'a, str>`]: ../../std/borrow/enum.Cow.html","span":{"file_name":"src/liballoc/string.rs","byte_start":670671,"byte_end":670723,"line_start":524,"line_end":524,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670728,"byte_end":670731,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":670736,"byte_end":670750,"line_start":526,"line_end":526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670755,"byte_end":670758,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":670763,"byte_end":670779,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670784,"byte_end":670787,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":670792,"byte_end":670799,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":670804,"byte_end":670834,"line_start":531,"line_end":531,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":670839,"byte_end":670888,"line_start":532,"line_end":532,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670893,"byte_end":670896,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let sparkle_heart = String::from_utf8_lossy(&sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":670901,"byte_end":670965,"line_start":534,"line_end":534,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670970,"byte_end":670973,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":670978,"byte_end":671016,"line_start":536,"line_end":536,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671021,"byte_end":671028,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671033,"byte_end":671036,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"src/liballoc/string.rs","byte_start":671041,"byte_end":671061,"line_start":539,"line_end":539,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671066,"byte_end":671069,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671074,"byte_end":671081,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":671086,"byte_end":671111,"line_start":542,"line_end":542,"column_start":5,"column_end":30}},{"value":"/ let input = b\"Hello \\xF0\\x90\\x80World\";","span":{"file_name":"src/liballoc/string.rs","byte_start":671116,"byte_end":671159,"line_start":543,"line_end":543,"column_start":5,"column_end":48}},{"value":"/ let output = String::from_utf8_lossy(input);","span":{"file_name":"src/liballoc/string.rs","byte_start":671164,"byte_end":671212,"line_start":544,"line_end":544,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671217,"byte_end":671220,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"Hello �World\", output);","span":{"file_name":"src/liballoc/string.rs","byte_start":671225,"byte_end":671266,"line_start":546,"line_end":546,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671271,"byte_end":671278,"line_start":547,"line_end":547,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":671283,"byte_end":671328,"line_start":548,"line_end":548,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":"src/liballoc/string.rs","byte_start":673021,"byte_end":673031,"line_start":603,"line_end":603,"column_start":12,"column_end":22},"name":"from_utf16","qualname":"<String>::from_utf16","value":"fn (v: &[u16]) -> Result<String, FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n if `v` contains any invalid data.","sig":null,"attributes":[{"value":"/ Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]","span":{"file_name":"src/liballoc/string.rs","byte_start":672294,"byte_end":672367,"line_start":581,"line_end":581,"column_start":5,"column_end":78}},{"value":"/ if `v` contains any invalid data.","span":{"file_name":"src/liballoc/string.rs","byte_start":672372,"byte_end":672409,"line_start":582,"line_end":582,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672414,"byte_end":672417,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ [`Err`]: ../../std/result/enum.Result.html#variant.Err","span":{"file_name":"src/liballoc/string.rs","byte_start":672422,"byte_end":672480,"line_start":584,"line_end":584,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672485,"byte_end":672488,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":672493,"byte_end":672507,"line_start":586,"line_end":586,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672512,"byte_end":672515,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":672520,"byte_end":672536,"line_start":588,"line_end":588,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672541,"byte_end":672544,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":672549,"byte_end":672556,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"/ // 𝄞music","span":{"file_name":"src/liballoc/string.rs","byte_start":672561,"byte_end":672577,"line_start":591,"line_end":591,"column_start":5,"column_end":18}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":672582,"byte_end":672627,"line_start":592,"line_end":592,"column_start":5,"column_end":50}},{"value":"/           0x0073, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":672632,"byte_end":672670,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(String::from(\"𝄞music\"),","span":{"file_name":"src/liballoc/string.rs","byte_start":672675,"byte_end":672716,"line_start":594,"line_end":594,"column_start":5,"column_end":43}},{"value":"/            String::from_utf16(v).unwrap());","span":{"file_name":"src/liballoc/string.rs","byte_start":672721,"byte_end":672768,"line_start":595,"line_end":595,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672773,"byte_end":672776,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ // 𝄞mu<invalid>ic","span":{"file_name":"src/liballoc/string.rs","byte_start":672781,"byte_end":672805,"line_start":597,"line_end":597,"column_start":5,"column_end":26}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":672810,"byte_end":672855,"line_start":598,"line_end":598,"column_start":5,"column_end":50}},{"value":"/           0xD800, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":672860,"byte_end":672898,"line_start":599,"line_end":599,"column_start":5,"column_end":43}},{"value":"/ assert!(String::from_utf16(v).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":672903,"byte_end":672947,"line_start":600,"line_end":600,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":672952,"byte_end":672959,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":672964,"byte_end":673009,"line_start":602,"line_end":602,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3485},"span":{"file_name":"src/liballoc/string.rs","byte_start":674482,"byte_end":674498,"line_start":643,"line_end":643,"column_start":12,"column_end":28},"name":"from_utf16_lossy","qualname":"<String>::from_utf16_lossy","value":"fn (v: &[u16]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Decode a UTF-16 encoded slice `v` into a `String`, replacing\n invalid data with [the replacement character (`U+FFFD`)][U+FFFD].","sig":null,"attributes":[{"value":"/ Decode a UTF-16 encoded slice `v` into a `String`, replacing","span":{"file_name":"src/liballoc/string.rs","byte_start":673524,"byte_end":673588,"line_start":617,"line_end":617,"column_start":5,"column_end":69}},{"value":"/ invalid data with [the replacement character (`U+FFFD`)][U+FFFD].","span":{"file_name":"src/liballoc/string.rs","byte_start":673593,"byte_end":673662,"line_start":618,"line_end":618,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673667,"byte_end":673670,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Unlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],","span":{"file_name":"src/liballoc/string.rs","byte_start":673675,"byte_end":673739,"line_start":620,"line_end":620,"column_start":5,"column_end":69}},{"value":"/ `from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8","span":{"file_name":"src/liballoc/string.rs","byte_start":673744,"byte_end":673811,"line_start":621,"line_end":621,"column_start":5,"column_end":72}},{"value":"/ conversion requires a memory allocation.","span":{"file_name":"src/liballoc/string.rs","byte_start":673816,"byte_end":673860,"line_start":622,"line_end":622,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673865,"byte_end":673868,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_lossy`]: #method.from_utf8_lossy","span":{"file_name":"src/liballoc/string.rs","byte_start":673873,"byte_end":673921,"line_start":624,"line_end":624,"column_start":5,"column_end":53}},{"value":"/ [`Cow<'a, str>`]: ../borrow/enum.Cow.html","span":{"file_name":"src/liballoc/string.rs","byte_start":673926,"byte_end":673971,"line_start":625,"line_end":625,"column_start":5,"column_end":50}},{"value":"/ [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html","span":{"file_name":"src/liballoc/string.rs","byte_start":673976,"byte_end":674033,"line_start":626,"line_end":626,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674038,"byte_end":674041,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":674046,"byte_end":674060,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674065,"byte_end":674068,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":674073,"byte_end":674089,"line_start":630,"line_end":630,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674094,"byte_end":674097,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":674102,"byte_end":674109,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ // 𝄞mus<invalid>ic<invalid>","span":{"file_name":"src/liballoc/string.rs","byte_start":674114,"byte_end":674148,"line_start":633,"line_end":633,"column_start":5,"column_end":36}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":674153,"byte_end":674198,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/           0x0073, 0xDD1E, 0x0069, 0x0063,","span":{"file_name":"src/liballoc/string.rs","byte_start":674203,"byte_end":674248,"line_start":635,"line_end":635,"column_start":5,"column_end":50}},{"value":"/           0xD834];","span":{"file_name":"src/liballoc/string.rs","byte_start":674253,"byte_end":674275,"line_start":636,"line_end":636,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674280,"byte_end":674283,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),","span":{"file_name":"src/liballoc/string.rs","byte_start":674288,"byte_end":674345,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/            String::from_utf16_lossy(v));","span":{"file_name":"src/liballoc/string.rs","byte_start":674350,"byte_end":674394,"line_start":639,"line_end":639,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":674399,"byte_end":674406,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":674411,"byte_end":674420,"line_start":641,"line_end":641,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":674425,"byte_end":674470,"line_start":642,"line_end":642,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3487},"span":{"file_name":"src/liballoc/string.rs","byte_start":675747,"byte_end":675761,"line_start":674,"line_end":674,"column_start":12,"column_end":26},"name":"into_raw_parts","qualname":"<String>::into_raw_parts","value":"fn (self) -> (*mut u8, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `String` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `String` into its raw components.","span":{"file_name":"src/liballoc/string.rs","byte_start":674627,"byte_end":674677,"line_start":647,"line_end":647,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674682,"byte_end":674685,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ Returns the raw pointer to the underlying data, the length of","span":{"file_name":"src/liballoc/string.rs","byte_start":674690,"byte_end":674755,"line_start":649,"line_end":649,"column_start":5,"column_end":70}},{"value":"/ the string (in bytes), and the allocated capacity of the data","span":{"file_name":"src/liballoc/string.rs","byte_start":674760,"byte_end":674825,"line_start":650,"line_end":650,"column_start":5,"column_end":70}},{"value":"/ (in bytes). These are the same arguments in the same order as","span":{"file_name":"src/liballoc/string.rs","byte_start":674830,"byte_end":674895,"line_start":651,"line_end":651,"column_start":5,"column_end":70}},{"value":"/ the arguments to [`from_raw_parts`].","span":{"file_name":"src/liballoc/string.rs","byte_start":674900,"byte_end":674940,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674945,"byte_end":674948,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/string.rs","byte_start":674953,"byte_end":675019,"line_start":654,"line_end":654,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `String`. The only way to do","span":{"file_name":"src/liballoc/string.rs","byte_start":675024,"byte_end":675089,"line_start":655,"line_end":655,"column_start":5,"column_end":70}},{"value":"/ this is to convert the raw pointer, length, and capacity back","span":{"file_name":"src/liballoc/string.rs","byte_start":675094,"byte_end":675159,"line_start":656,"line_end":656,"column_start":5,"column_end":70}},{"value":"/ into a `String` with the [`from_raw_parts`] function, allowing","span":{"file_name":"src/liballoc/string.rs","byte_start":675164,"byte_end":675230,"line_start":657,"line_end":657,"column_start":5,"column_end":71}},{"value":"/ the destructor to perform the cleanup.","span":{"file_name":"src/liballoc/string.rs","byte_start":675235,"byte_end":675277,"line_start":658,"line_end":658,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675282,"byte_end":675285,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ [`from_raw_parts`]: #method.from_raw_parts","span":{"file_name":"src/liballoc/string.rs","byte_start":675290,"byte_end":675336,"line_start":660,"line_end":660,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675341,"byte_end":675344,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":675349,"byte_end":675363,"line_start":662,"line_end":662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675368,"byte_end":675371,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":675376,"byte_end":675383,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_into_raw_parts)]","span":{"file_name":"src/liballoc/string.rs","byte_start":675388,"byte_end":675423,"line_start":665,"line_end":665,"column_start":5,"column_end":40}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":675428,"byte_end":675462,"line_start":666,"line_end":666,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675467,"byte_end":675470,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ let (ptr, len, cap) = s.into_raw_parts();","span":{"file_name":"src/liballoc/string.rs","byte_start":675475,"byte_end":675520,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675525,"byte_end":675528,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };","span":{"file_name":"src/liballoc/string.rs","byte_start":675533,"byte_end":675600,"line_start":670,"line_end":670,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(rebuilt, \"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":675605,"byte_end":675638,"line_start":671,"line_end":671,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":675643,"byte_end":675650,"line_start":672,"line_end":672,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n           \"65816\")","span":{"file_name":"src/liballoc/string.rs","byte_start":675655,"byte_end":675735,"line_start":673,"line_end":673,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3488},"span":{"file_name":"src/liballoc/string.rs","byte_start":677438,"byte_end":677452,"line_start":724,"line_end":724,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<String>::from_raw_parts","value":"fn (buf: *mut u8, length: usize, capacity: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `String` from a length, capacity, and pointer.","sig":null,"attributes":[{"value":"/ Creates a new `String` from a length, capacity, and pointer.","span":{"file_name":"src/liballoc/string.rs","byte_start":675842,"byte_end":675906,"line_start":678,"line_end":678,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675911,"byte_end":675914,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":675919,"byte_end":675931,"line_start":680,"line_end":680,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":675936,"byte_end":675939,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ This is highly unsafe, due to the number of invariants that aren't","span":{"file_name":"src/liballoc/string.rs","byte_start":675944,"byte_end":676014,"line_start":682,"line_end":682,"column_start":5,"column_end":75}},{"value":"/ checked:","span":{"file_name":"src/liballoc/string.rs","byte_start":676019,"byte_end":676031,"line_start":683,"line_end":683,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676036,"byte_end":676039,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ * The memory at `ptr` needs to have been previously allocated by the","span":{"file_name":"src/liballoc/string.rs","byte_start":676044,"byte_end":676116,"line_start":685,"line_end":685,"column_start":5,"column_end":77}},{"value":"/   same allocator the standard library uses, with a required alignment of exactly 1.","span":{"file_name":"src/liballoc/string.rs","byte_start":676121,"byte_end":676208,"line_start":686,"line_end":686,"column_start":5,"column_end":92}},{"value":"/ * `length` needs to be less than or equal to `capacity`.","span":{"file_name":"src/liballoc/string.rs","byte_start":676213,"byte_end":676273,"line_start":687,"line_end":687,"column_start":5,"column_end":65}},{"value":"/ * `capacity` needs to be the correct value.","span":{"file_name":"src/liballoc/string.rs","byte_start":676278,"byte_end":676325,"line_start":688,"line_end":688,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676330,"byte_end":676333,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Violating these may cause problems like corrupting the allocator's","span":{"file_name":"src/liballoc/string.rs","byte_start":676338,"byte_end":676408,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/ internal data structures.","span":{"file_name":"src/liballoc/string.rs","byte_start":676413,"byte_end":676442,"line_start":691,"line_end":691,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676447,"byte_end":676450,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ The ownership of `ptr` is effectively transferred to the","span":{"file_name":"src/liballoc/string.rs","byte_start":676455,"byte_end":676515,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/ `String` which may then deallocate, reallocate or change the","span":{"file_name":"src/liballoc/string.rs","byte_start":676520,"byte_end":676584,"line_start":694,"line_end":694,"column_start":5,"column_end":69}},{"value":"/ contents of memory pointed to by the pointer at will. Ensure","span":{"file_name":"src/liballoc/string.rs","byte_start":676589,"byte_end":676653,"line_start":695,"line_end":695,"column_start":5,"column_end":69}},{"value":"/ that nothing else uses the pointer after calling this","span":{"file_name":"src/liballoc/string.rs","byte_start":676658,"byte_end":676715,"line_start":696,"line_end":696,"column_start":5,"column_end":62}},{"value":"/ function.","span":{"file_name":"src/liballoc/string.rs","byte_start":676720,"byte_end":676733,"line_start":697,"line_end":697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676738,"byte_end":676741,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":676746,"byte_end":676760,"line_start":699,"line_end":699,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676765,"byte_end":676768,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":676773,"byte_end":676789,"line_start":701,"line_end":701,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676794,"byte_end":676797,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":676802,"byte_end":676809,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/string.rs","byte_start":676814,"byte_end":676831,"line_start":704,"line_end":704,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676836,"byte_end":676839,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":676844,"byte_end":676856,"line_start":706,"line_end":706,"column_start":5,"column_end":17}},{"value":"/     let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":676861,"byte_end":676899,"line_start":707,"line_end":707,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676904,"byte_end":676907,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/     // Prevent automatically dropping the String's data","span":{"file_name":"src/liballoc/string.rs","byte_start":676975,"byte_end":677034,"line_start":710,"line_end":710,"column_start":5,"column_end":64}},{"value":"/     let mut s = mem::ManuallyDrop::new(s);","span":{"file_name":"src/liballoc/string.rs","byte_start":677039,"byte_end":677085,"line_start":711,"line_end":711,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677090,"byte_end":677093,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/     let ptr = s.as_mut_ptr();","span":{"file_name":"src/liballoc/string.rs","byte_start":677098,"byte_end":677131,"line_start":713,"line_end":713,"column_start":5,"column_end":38}},{"value":"/     let len = s.len();","span":{"file_name":"src/liballoc/string.rs","byte_start":677136,"byte_end":677162,"line_start":714,"line_end":714,"column_start":5,"column_end":31}},{"value":"/     let capacity = s.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":677167,"byte_end":677203,"line_start":715,"line_end":715,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677208,"byte_end":677211,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/     let s = String::from_raw_parts(ptr, len, capacity);","span":{"file_name":"src/liballoc/string.rs","byte_start":677216,"byte_end":677275,"line_start":717,"line_end":717,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677280,"byte_end":677283,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(String::from(\"hello\"), s);","span":{"file_name":"src/liballoc/string.rs","byte_start":677288,"byte_end":677333,"line_start":719,"line_end":719,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":677338,"byte_end":677343,"line_start":720,"line_end":720,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":677348,"byte_end":677355,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":677360,"byte_end":677369,"line_start":722,"line_end":722,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":677374,"byte_end":677419,"line_start":723,"line_end":723,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3489},"span":{"file_name":"src/liballoc/string.rs","byte_start":678595,"byte_end":678614,"line_start":758,"line_end":758,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String>::from_utf8_unchecked","value":"fn (bytes: Vec<u8>) -> String","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String` without checking that the","span":{"file_name":"src/liballoc/string.rs","byte_start":677589,"byte_end":677659,"line_start":728,"line_end":728,"column_start":5,"column_end":75}},{"value":"/ string contains valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":677664,"byte_end":677696,"line_start":729,"line_end":729,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677701,"byte_end":677704,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ See the safe version, [`from_utf8`], for more details.","span":{"file_name":"src/liballoc/string.rs","byte_start":677709,"byte_end":677767,"line_start":731,"line_end":731,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677772,"byte_end":677775,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8`]: struct.String.html#method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":677780,"byte_end":677834,"line_start":733,"line_end":733,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677839,"byte_end":677842,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":677847,"byte_end":677859,"line_start":735,"line_end":735,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677864,"byte_end":677867,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"src/liballoc/string.rs","byte_start":677872,"byte_end":677947,"line_start":737,"line_end":737,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"src/liballoc/string.rs","byte_start":677952,"byte_end":678023,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"src/liballoc/string.rs","byte_start":678028,"byte_end":678104,"line_start":739,"line_end":739,"column_start":5,"column_end":81}},{"value":"/ the standard library assumes that `String`s are valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":678109,"byte_end":678173,"line_start":740,"line_end":740,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678178,"byte_end":678181,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":678186,"byte_end":678200,"line_start":742,"line_end":742,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678205,"byte_end":678208,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":678213,"byte_end":678229,"line_start":744,"line_end":744,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678234,"byte_end":678237,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":678242,"byte_end":678249,"line_start":746,"line_end":746,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":678254,"byte_end":678284,"line_start":747,"line_end":747,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":678289,"byte_end":678338,"line_start":748,"line_end":748,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678343,"byte_end":678346,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let sparkle_heart = unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":678351,"byte_end":678383,"line_start":750,"line_end":750,"column_start":5,"column_end":37}},{"value":"/     String::from_utf8_unchecked(sparkle_heart)","span":{"file_name":"src/liballoc/string.rs","byte_start":678388,"byte_end":678438,"line_start":751,"line_end":751,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"src/liballoc/string.rs","byte_start":678443,"byte_end":678449,"line_start":752,"line_end":752,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678454,"byte_end":678457,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":678462,"byte_end":678500,"line_start":754,"line_end":754,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":678505,"byte_end":678512,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":678517,"byte_end":678526,"line_start":756,"line_end":756,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":678531,"byte_end":678576,"line_start":757,"line_end":757,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":"src/liballoc/string.rs","byte_start":679122,"byte_end":679132,"line_start":778,"line_end":778,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String>::into_bytes","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"src/liballoc/string.rs","byte_start":678684,"byte_end":678727,"line_start":762,"line_end":762,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678732,"byte_end":678735,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":678740,"byte_end":678811,"line_start":764,"line_end":764,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678816,"byte_end":678819,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":678824,"byte_end":678838,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678843,"byte_end":678846,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":678851,"byte_end":678867,"line_start":768,"line_end":768,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678872,"byte_end":678875,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":678880,"byte_end":678887,"line_start":770,"line_end":770,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":678892,"byte_end":678926,"line_start":771,"line_end":771,"column_start":5,"column_end":39}},{"value":"/ let bytes = s.into_bytes();","span":{"file_name":"src/liballoc/string.rs","byte_start":678931,"byte_end":678962,"line_start":772,"line_end":772,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678967,"byte_end":678970,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);","span":{"file_name":"src/liballoc/string.rs","byte_start":678975,"byte_end":679034,"line_start":774,"line_end":774,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679039,"byte_end":679046,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":679051,"byte_end":679060,"line_start":776,"line_end":776,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":679065,"byte_end":679110,"line_start":777,"line_end":777,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3491},"span":{"file_name":"src/liballoc/string.rs","byte_start":679495,"byte_end":679501,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire `String`.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":679180,"byte_end":679239,"line_start":782,"line_end":782,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679244,"byte_end":679247,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":679252,"byte_end":679266,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679271,"byte_end":679274,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":679279,"byte_end":679295,"line_start":786,"line_end":786,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679300,"byte_end":679303,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679308,"byte_end":679315,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":679320,"byte_end":679352,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679357,"byte_end":679360,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foo\", s.as_str());","span":{"file_name":"src/liballoc/string.rs","byte_start":679365,"byte_end":679399,"line_start":791,"line_end":791,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679404,"byte_end":679411,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":679416,"byte_end":679425,"line_start":793,"line_end":793,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_as_str\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":679430,"byte_end":679483,"line_start":794,"line_end":794,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":"src/liballoc/string.rs","byte_start":679950,"byte_end":679960,"line_start":815,"line_end":815,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String>::as_mut_str","value":"fn (&mut self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"src/liballoc/string.rs","byte_start":679543,"byte_end":679595,"line_start":799,"line_end":799,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679600,"byte_end":679603,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":679608,"byte_end":679622,"line_start":801,"line_end":801,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679627,"byte_end":679630,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":679635,"byte_end":679651,"line_start":803,"line_end":803,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679656,"byte_end":679659,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679664,"byte_end":679671,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foobar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":679676,"byte_end":679715,"line_start":806,"line_end":806,"column_start":5,"column_end":44}},{"value":"/ let s_mut_str = s.as_mut_str();","span":{"file_name":"src/liballoc/string.rs","byte_start":679720,"byte_end":679755,"line_start":807,"line_end":807,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679760,"byte_end":679763,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ s_mut_str.make_ascii_uppercase();","span":{"file_name":"src/liballoc/string.rs","byte_start":679768,"byte_end":679805,"line_start":809,"line_end":809,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679810,"byte_end":679813,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"FOOBAR\", s_mut_str);","span":{"file_name":"src/liballoc/string.rs","byte_start":679818,"byte_end":679854,"line_start":811,"line_end":811,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679859,"byte_end":679866,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":679871,"byte_end":679880,"line_start":813,"line_end":813,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_as_str\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":679885,"byte_end":679938,"line_start":814,"line_end":814,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3493},"span":{"file_name":"src/liballoc/string.rs","byte_start":680354,"byte_end":680362,"line_start":834,"line_end":834,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String>::push_str","value":"fn (&mut self, string: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":680010,"byte_end":680073,"line_start":819,"line_end":819,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680078,"byte_end":680081,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":680086,"byte_end":680100,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680105,"byte_end":680108,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":680113,"byte_end":680129,"line_start":823,"line_end":823,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680134,"byte_end":680137,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680142,"byte_end":680149,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":680154,"byte_end":680190,"line_start":826,"line_end":826,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680195,"byte_end":680198,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ s.push_str(\"bar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":680203,"byte_end":680225,"line_start":828,"line_end":828,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680230,"byte_end":680233,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":680238,"byte_end":680266,"line_start":830,"line_end":830,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680271,"byte_end":680278,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":680283,"byte_end":680292,"line_start":832,"line_end":832,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":680297,"byte_end":680342,"line_start":833,"line_end":833,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":"src/liballoc/string.rs","byte_start":680754,"byte_end":680762,"line_start":851,"line_end":851,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns this `String`'s capacity, in bytes.","sig":null,"attributes":[{"value":"/ Returns this `String`'s capacity, in bytes.","span":{"file_name":"src/liballoc/string.rs","byte_start":680455,"byte_end":680502,"line_start":838,"line_end":838,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680507,"byte_end":680510,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":680515,"byte_end":680529,"line_start":840,"line_end":840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680534,"byte_end":680537,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":680542,"byte_end":680558,"line_start":842,"line_end":842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680563,"byte_end":680566,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680571,"byte_end":680578,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"/ let s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":680583,"byte_end":680621,"line_start":845,"line_end":845,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680626,"byte_end":680629,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":680634,"byte_end":680666,"line_start":847,"line_end":847,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680671,"byte_end":680678,"line_start":848,"line_end":848,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":680683,"byte_end":680692,"line_start":849,"line_end":849,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":680697,"byte_end":680742,"line_start":850,"line_end":850,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3495},"span":{"file_name":"src/liballoc/string.rs","byte_start":682156,"byte_end":682163,"line_start":902,"line_end":902,"column_start":12,"column_end":19},"name":"reserve","qualname":"<String>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that this `String`'s capacity is at least `additional` bytes\n larger than its length.","sig":null,"attributes":[{"value":"/ Ensures that this `String`'s capacity is at least `additional` bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":680820,"byte_end":680892,"line_start":855,"line_end":855,"column_start":5,"column_end":77}},{"value":"/ larger than its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":680897,"byte_end":680924,"line_start":856,"line_end":856,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680929,"byte_end":680932,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ The capacity may be increased by more than `additional` bytes if it","span":{"file_name":"src/liballoc/string.rs","byte_start":680937,"byte_end":681008,"line_start":858,"line_end":858,"column_start":5,"column_end":76}},{"value":"/ chooses, to prevent frequent reallocations.","span":{"file_name":"src/liballoc/string.rs","byte_start":681013,"byte_end":681060,"line_start":859,"line_end":859,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681065,"byte_end":681068,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ If you do not want this \"at least\" behavior, see the [`reserve_exact`]","span":{"file_name":"src/liballoc/string.rs","byte_start":681073,"byte_end":681147,"line_start":861,"line_end":861,"column_start":5,"column_end":79}},{"value":"/ method.","span":{"file_name":"src/liballoc/string.rs","byte_start":681152,"byte_end":681163,"line_start":862,"line_end":862,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681168,"byte_end":681171,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":681176,"byte_end":681188,"line_start":864,"line_end":864,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681193,"byte_end":681196,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows [`usize`].","span":{"file_name":"src/liballoc/string.rs","byte_start":681201,"byte_end":681252,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681257,"byte_end":681260,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ [`reserve_exact`]: struct.String.html#method.reserve_exact","span":{"file_name":"src/liballoc/string.rs","byte_start":681265,"byte_end":681327,"line_start":868,"line_end":868,"column_start":5,"column_end":67}},{"value":"/ [`usize`]: ../../std/primitive.usize.html","span":{"file_name":"src/liballoc/string.rs","byte_start":681332,"byte_end":681377,"line_start":869,"line_end":869,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681382,"byte_end":681385,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":681390,"byte_end":681404,"line_start":871,"line_end":871,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681409,"byte_end":681412,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":681417,"byte_end":681433,"line_start":873,"line_end":873,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681438,"byte_end":681441,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":681446,"byte_end":681453,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":681458,"byte_end":681488,"line_start":876,"line_end":876,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681493,"byte_end":681496,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ s.reserve(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":681501,"byte_end":681519,"line_start":878,"line_end":878,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681524,"byte_end":681527,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":681532,"byte_end":681564,"line_start":880,"line_end":880,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":681569,"byte_end":681576,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681581,"byte_end":681584,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This may not actually increase the capacity:","span":{"file_name":"src/liballoc/string.rs","byte_start":681589,"byte_end":681637,"line_start":883,"line_end":883,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681642,"byte_end":681645,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":681650,"byte_end":681657,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":681662,"byte_end":681704,"line_start":886,"line_end":886,"column_start":5,"column_end":47}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":681709,"byte_end":681725,"line_start":887,"line_end":887,"column_start":5,"column_end":21}},{"value":"/ s.push('b');","span":{"file_name":"src/liballoc/string.rs","byte_start":681730,"byte_end":681746,"line_start":888,"line_end":888,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681751,"byte_end":681754,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ // s now has a length of 2 and a capacity of 10","span":{"file_name":"src/liballoc/string.rs","byte_start":681759,"byte_end":681810,"line_start":890,"line_end":890,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(2, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":681815,"byte_end":681842,"line_start":891,"line_end":891,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":681847,"byte_end":681880,"line_start":892,"line_end":892,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681885,"byte_end":681888,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ // Since we already have an extra 8 capacity, calling this...","span":{"file_name":"src/liballoc/string.rs","byte_start":681893,"byte_end":681958,"line_start":894,"line_end":894,"column_start":5,"column_end":70}},{"value":"/ s.reserve(8);","span":{"file_name":"src/liballoc/string.rs","byte_start":681963,"byte_end":681980,"line_start":895,"line_end":895,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681985,"byte_end":681988,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ // ... doesn't actually increase.","span":{"file_name":"src/liballoc/string.rs","byte_start":681993,"byte_end":682030,"line_start":897,"line_end":897,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":682035,"byte_end":682068,"line_start":898,"line_end":898,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682073,"byte_end":682080,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":682085,"byte_end":682094,"line_start":900,"line_end":900,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":682099,"byte_end":682144,"line_start":901,"line_end":901,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":"src/liballoc/string.rs","byte_start":683378,"byte_end":683391,"line_start":949,"line_end":949,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<String>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that this `String`'s capacity is `additional` bytes\n larger than its length.","sig":null,"attributes":[{"value":"/ Ensures that this `String`'s capacity is `additional` bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":682244,"byte_end":682307,"line_start":906,"line_end":906,"column_start":5,"column_end":68}},{"value":"/ larger than its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":682312,"byte_end":682339,"line_start":907,"line_end":907,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682344,"byte_end":682347,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ Consider using the [`reserve`] method unless you absolutely know","span":{"file_name":"src/liballoc/string.rs","byte_start":682352,"byte_end":682420,"line_start":909,"line_end":909,"column_start":5,"column_end":73}},{"value":"/ better than the allocator.","span":{"file_name":"src/liballoc/string.rs","byte_start":682425,"byte_end":682455,"line_start":910,"line_end":910,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682460,"byte_end":682463,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/string.rs","byte_start":682468,"byte_end":682500,"line_start":912,"line_end":912,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682505,"byte_end":682508,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":682513,"byte_end":682525,"line_start":914,"line_end":914,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682530,"byte_end":682533,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/string.rs","byte_start":682538,"byte_end":682587,"line_start":916,"line_end":916,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682592,"byte_end":682595,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":682600,"byte_end":682614,"line_start":918,"line_end":918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682619,"byte_end":682622,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":682627,"byte_end":682643,"line_start":920,"line_end":920,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682648,"byte_end":682651,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682656,"byte_end":682663,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":682668,"byte_end":682698,"line_start":923,"line_end":923,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682703,"byte_end":682706,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ s.reserve_exact(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":682711,"byte_end":682735,"line_start":925,"line_end":925,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682740,"byte_end":682743,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":682748,"byte_end":682780,"line_start":927,"line_end":927,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682785,"byte_end":682792,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682797,"byte_end":682800,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ This may not actually increase the capacity:","span":{"file_name":"src/liballoc/string.rs","byte_start":682805,"byte_end":682853,"line_start":930,"line_end":930,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682858,"byte_end":682861,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682866,"byte_end":682873,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":682878,"byte_end":682920,"line_start":933,"line_end":933,"column_start":5,"column_end":47}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":682925,"byte_end":682941,"line_start":934,"line_end":934,"column_start":5,"column_end":21}},{"value":"/ s.push('b');","span":{"file_name":"src/liballoc/string.rs","byte_start":682946,"byte_end":682962,"line_start":935,"line_end":935,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682967,"byte_end":682970,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ // s now has a length of 2 and a capacity of 10","span":{"file_name":"src/liballoc/string.rs","byte_start":682975,"byte_end":683026,"line_start":937,"line_end":937,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(2, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":683031,"byte_end":683058,"line_start":938,"line_end":938,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":683063,"byte_end":683096,"line_start":939,"line_end":939,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683101,"byte_end":683104,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ // Since we already have an extra 8 capacity, calling this...","span":{"file_name":"src/liballoc/string.rs","byte_start":683109,"byte_end":683174,"line_start":941,"line_end":941,"column_start":5,"column_end":70}},{"value":"/ s.reserve_exact(8);","span":{"file_name":"src/liballoc/string.rs","byte_start":683179,"byte_end":683202,"line_start":942,"line_end":942,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683207,"byte_end":683210,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ // ... doesn't actually increase.","span":{"file_name":"src/liballoc/string.rs","byte_start":683215,"byte_end":683252,"line_start":944,"line_end":944,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":683257,"byte_end":683290,"line_start":945,"line_end":945,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":683295,"byte_end":683302,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":683307,"byte_end":683316,"line_start":947,"line_end":947,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":683321,"byte_end":683366,"line_start":948,"line_end":948,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3497},"span":{"file_name":"src/liballoc/string.rs","byte_start":684680,"byte_end":684691,"line_start":984,"line_end":984,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<String>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `String`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/string.rs","byte_start":683478,"byte_end":683562,"line_start":953,"line_end":953,"column_start":5,"column_end":89}},{"value":"/ in the given `String`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/string.rs","byte_start":683567,"byte_end":683640,"line_start":954,"line_end":954,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/string.rs","byte_start":683645,"byte_end":683714,"line_start":955,"line_end":955,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/string.rs","byte_start":683719,"byte_end":683790,"line_start":956,"line_end":956,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/string.rs","byte_start":683795,"byte_end":683830,"line_start":957,"line_end":957,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683835,"byte_end":683838,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":683843,"byte_end":683855,"line_start":959,"line_end":959,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683860,"byte_end":683863,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/string.rs","byte_start":683868,"byte_end":683948,"line_start":961,"line_end":961,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/string.rs","byte_start":683953,"byte_end":683969,"line_start":962,"line_end":962,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683974,"byte_end":683977,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":683982,"byte_end":683996,"line_start":964,"line_end":964,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684001,"byte_end":684004,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":684009,"byte_end":684016,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/string.rs","byte_start":684021,"byte_end":684049,"line_start":967,"line_end":967,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/string.rs","byte_start":684054,"byte_end":684096,"line_start":968,"line_end":968,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684101,"byte_end":684104,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &str) -> Result<String, TryReserveError> {","span":{"file_name":"src/liballoc/string.rs","byte_start":684109,"byte_end":684177,"line_start":970,"line_end":970,"column_start":5,"column_end":73}},{"value":"/     let mut output = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":684182,"byte_end":684221,"line_start":971,"line_end":971,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684226,"byte_end":684229,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/string.rs","byte_start":684234,"byte_end":684288,"line_start":973,"line_end":973,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/string.rs","byte_start":684293,"byte_end":684333,"line_start":974,"line_end":974,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684338,"byte_end":684341,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/string.rs","byte_start":684346,"byte_end":684417,"line_start":976,"line_end":976,"column_start":5,"column_end":76}},{"value":"/     output.push_str(data);","span":{"file_name":"src/liballoc/string.rs","byte_start":684422,"byte_end":684452,"line_start":977,"line_end":977,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684457,"byte_end":684460,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/string.rs","byte_start":684465,"byte_end":684483,"line_start":979,"line_end":979,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":684488,"byte_end":684493,"line_start":980,"line_end":980,"column_start":5,"column_end":10}},{"value":"/ # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");","span":{"file_name":"src/liballoc/string.rs","byte_start":684498,"byte_end":684578,"line_start":981,"line_end":981,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":684583,"byte_end":684590,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/string.rs","byte_start":684595,"byte_end":684668,"line_start":983,"line_end":983,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3498},"span":{"file_name":"src/liballoc/string.rs","byte_start":686181,"byte_end":686198,"line_start":1022,"line_end":1022,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<String>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `String`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/string.rs","byte_start":684807,"byte_end":684891,"line_start":988,"line_end":988,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `String`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/string.rs","byte_start":684896,"byte_end":684965,"line_start":989,"line_end":989,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/string.rs","byte_start":684970,"byte_end":685042,"line_start":990,"line_end":990,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/string.rs","byte_start":685047,"byte_end":685102,"line_start":991,"line_end":991,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685107,"byte_end":685110,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/string.rs","byte_start":685115,"byte_end":685185,"line_start":993,"line_end":993,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/string.rs","byte_start":685190,"byte_end":685262,"line_start":994,"line_end":994,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/string.rs","byte_start":685267,"byte_end":685331,"line_start":995,"line_end":995,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685336,"byte_end":685339,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":685344,"byte_end":685356,"line_start":997,"line_end":997,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685361,"byte_end":685364,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/string.rs","byte_start":685369,"byte_end":685449,"line_start":999,"line_end":999,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/string.rs","byte_start":685454,"byte_end":685470,"line_start":1000,"line_end":1000,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685475,"byte_end":685478,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":685483,"byte_end":685497,"line_start":1002,"line_end":1002,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685502,"byte_end":685505,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":685510,"byte_end":685517,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/string.rs","byte_start":685522,"byte_end":685550,"line_start":1005,"line_end":1005,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/string.rs","byte_start":685555,"byte_end":685597,"line_start":1006,"line_end":1006,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685602,"byte_end":685605,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &str) -> Result<String, TryReserveError> {","span":{"file_name":"src/liballoc/string.rs","byte_start":685610,"byte_end":685678,"line_start":1008,"line_end":1008,"column_start":5,"column_end":73}},{"value":"/     let mut output = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":685683,"byte_end":685722,"line_start":1009,"line_end":1009,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685727,"byte_end":685730,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/string.rs","byte_start":685735,"byte_end":685789,"line_start":1011,"line_end":1011,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/string.rs","byte_start":685794,"byte_end":685834,"line_start":1012,"line_end":1012,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685839,"byte_end":685842,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/string.rs","byte_start":685847,"byte_end":685918,"line_start":1014,"line_end":1014,"column_start":5,"column_end":76}},{"value":"/     output.push_str(data);","span":{"file_name":"src/liballoc/string.rs","byte_start":685923,"byte_end":685953,"line_start":1015,"line_end":1015,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685958,"byte_end":685961,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/string.rs","byte_start":685966,"byte_end":685984,"line_start":1017,"line_end":1017,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":685989,"byte_end":685994,"line_start":1018,"line_end":1018,"column_start":5,"column_end":10}},{"value":"/ # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");","span":{"file_name":"src/liballoc/string.rs","byte_start":685999,"byte_end":686079,"line_start":1019,"line_end":1019,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686084,"byte_end":686091,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/string.rs","byte_start":686096,"byte_end":686169,"line_start":1021,"line_end":1021,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3499},"span":{"file_name":"src/liballoc/string.rs","byte_start":686729,"byte_end":686742,"line_start":1043,"line_end":1043,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<String>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of this `String` to match its length.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of this `String` to match its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":686320,"byte_end":686382,"line_start":1026,"line_end":1026,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686387,"byte_end":686390,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":686395,"byte_end":686409,"line_start":1028,"line_end":1028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686414,"byte_end":686417,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":686422,"byte_end":686438,"line_start":1030,"line_end":1030,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686443,"byte_end":686446,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686451,"byte_end":686458,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":686463,"byte_end":686499,"line_start":1033,"line_end":1033,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686504,"byte_end":686507,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"src/liballoc/string.rs","byte_start":686512,"byte_end":686531,"line_start":1035,"line_end":1035,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"src/liballoc/string.rs","byte_start":686536,"byte_end":686569,"line_start":1036,"line_end":1036,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686574,"byte_end":686577,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to_fit();","span":{"file_name":"src/liballoc/string.rs","byte_start":686582,"byte_end":686604,"line_start":1038,"line_end":1038,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":686609,"byte_end":686641,"line_start":1039,"line_end":1039,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686646,"byte_end":686653,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":686658,"byte_end":686667,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":686672,"byte_end":686717,"line_start":1042,"line_end":1042,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3500},"span":{"file_name":"src/liballoc/string.rs","byte_start":687506,"byte_end":687515,"line_start":1071,"line_end":1071,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<String>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of this `String` with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of this `String` with a lower bound.","span":{"file_name":"src/liballoc/string.rs","byte_start":686800,"byte_end":686861,"line_start":1047,"line_end":1047,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686866,"byte_end":686869,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/string.rs","byte_start":686874,"byte_end":686939,"line_start":1049,"line_end":1049,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/string.rs","byte_start":686944,"byte_end":686971,"line_start":1050,"line_end":1050,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686976,"byte_end":686979,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/string.rs","byte_start":686984,"byte_end":687047,"line_start":1052,"line_end":1052,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":687052,"byte_end":687073,"line_start":1053,"line_end":1053,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687078,"byte_end":687081,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":687086,"byte_end":687100,"line_start":1055,"line_end":1055,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687105,"byte_end":687108,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687113,"byte_end":687120,"line_start":1057,"line_end":1057,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/string.rs","byte_start":687125,"byte_end":687151,"line_start":1058,"line_end":1058,"column_start":5,"column_end":31}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":687156,"byte_end":687192,"line_start":1059,"line_end":1059,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687197,"byte_end":687200,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"src/liballoc/string.rs","byte_start":687205,"byte_end":687224,"line_start":1061,"line_end":1061,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"src/liballoc/string.rs","byte_start":687229,"byte_end":687262,"line_start":1062,"line_end":1062,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687267,"byte_end":687270,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":687275,"byte_end":687295,"line_start":1064,"line_end":1064,"column_start":5,"column_end":25}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":687300,"byte_end":687332,"line_start":1065,"line_end":1065,"column_start":5,"column_end":37}},{"value":"/ s.shrink_to(0);","span":{"file_name":"src/liballoc/string.rs","byte_start":687337,"byte_end":687356,"line_start":1066,"line_end":1066,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":687361,"byte_end":687392,"line_start":1067,"line_end":1067,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687397,"byte_end":687404,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":687409,"byte_end":687418,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/string.rs","byte_start":687423,"byte_end":687494,"line_start":1070,"line_end":1070,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3501},"span":{"file_name":"src/liballoc/string.rs","byte_start":688034,"byte_end":688038,"line_start":1094,"line_end":1094,"column_start":12,"column_end":16},"name":"push","qualname":"<String>::push","value":"fn (&mut self, ch: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":687602,"byte_end":687661,"line_start":1075,"line_end":1075,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687666,"byte_end":687669,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":687674,"byte_end":687717,"line_start":1077,"line_end":1077,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687722,"byte_end":687725,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":687730,"byte_end":687744,"line_start":1079,"line_end":1079,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687749,"byte_end":687752,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":687757,"byte_end":687773,"line_start":1081,"line_end":1081,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687778,"byte_end":687781,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687786,"byte_end":687793,"line_start":1083,"line_end":1083,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"abc\");","span":{"file_name":"src/liballoc/string.rs","byte_start":687798,"byte_end":687834,"line_start":1084,"line_end":1084,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687839,"byte_end":687842,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ s.push('1');","span":{"file_name":"src/liballoc/string.rs","byte_start":687847,"byte_end":687863,"line_start":1086,"line_end":1086,"column_start":5,"column_end":21}},{"value":"/ s.push('2');","span":{"file_name":"src/liballoc/string.rs","byte_start":687868,"byte_end":687884,"line_start":1087,"line_end":1087,"column_start":5,"column_end":21}},{"value":"/ s.push('3');","span":{"file_name":"src/liballoc/string.rs","byte_start":687889,"byte_end":687905,"line_start":1088,"line_end":1088,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687910,"byte_end":687913,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":687918,"byte_end":687946,"line_start":1090,"line_end":1090,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687951,"byte_end":687958,"line_start":1091,"line_end":1091,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":687963,"byte_end":687972,"line_start":1092,"line_end":1092,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":687977,"byte_end":688022,"line_start":1093,"line_end":1093,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3503},"span":{"file_name":"src/liballoc/string.rs","byte_start":688676,"byte_end":688684,"line_start":1118,"line_end":1118,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<String>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this `String`'s contents.","sig":null,"attributes":[{"value":"/ Returns a byte slice of this `String`'s contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":688240,"byte_end":688293,"line_start":1101,"line_end":1101,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688298,"byte_end":688301,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ The inverse of this method is [`from_utf8`].","span":{"file_name":"src/liballoc/string.rs","byte_start":688306,"byte_end":688354,"line_start":1103,"line_end":1103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688359,"byte_end":688362,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8`]: #method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":688367,"byte_end":688403,"line_start":1105,"line_end":1105,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688408,"byte_end":688411,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":688416,"byte_end":688430,"line_start":1107,"line_end":1107,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688435,"byte_end":688438,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":688443,"byte_end":688459,"line_start":1109,"line_end":1109,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688464,"byte_end":688467,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":688472,"byte_end":688479,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":688484,"byte_end":688518,"line_start":1112,"line_end":1112,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688523,"byte_end":688526,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":688531,"byte_end":688588,"line_start":1114,"line_end":1114,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":688593,"byte_end":688600,"line_start":1115,"line_end":1115,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":688605,"byte_end":688614,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":688619,"byte_end":688664,"line_start":1117,"line_end":1117,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3504},"span":{"file_name":"src/liballoc/string.rs","byte_start":689414,"byte_end":689422,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"src/liballoc/string.rs","byte_start":688732,"byte_end":688783,"line_start":1122,"line_end":1122,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688788,"byte_end":688791,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"src/liballoc/string.rs","byte_start":688796,"byte_end":688869,"line_start":1124,"line_end":1124,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"src/liballoc/string.rs","byte_start":688874,"byte_end":688885,"line_start":1125,"line_end":1125,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688890,"byte_end":688893,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":688898,"byte_end":688963,"line_start":1127,"line_end":1127,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"src/liballoc/string.rs","byte_start":688968,"byte_end":688985,"line_start":1128,"line_end":1128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688990,"byte_end":688993,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":688998,"byte_end":689010,"line_start":1130,"line_end":1130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689015,"byte_end":689018,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":689023,"byte_end":689083,"line_start":1132,"line_end":1132,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689088,"byte_end":689091,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":689096,"byte_end":689139,"line_start":1134,"line_end":1134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689144,"byte_end":689147,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":689152,"byte_end":689166,"line_start":1136,"line_end":1136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689171,"byte_end":689174,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":689179,"byte_end":689195,"line_start":1138,"line_end":1138,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689200,"byte_end":689203,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":689208,"byte_end":689215,"line_start":1140,"line_end":1140,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":689220,"byte_end":689258,"line_start":1141,"line_end":1141,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689263,"byte_end":689266,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"src/liballoc/string.rs","byte_start":689271,"byte_end":689289,"line_start":1143,"line_end":1143,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689294,"byte_end":689297,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":689302,"byte_end":689326,"line_start":1145,"line_end":1145,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":689331,"byte_end":689338,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":689343,"byte_end":689352,"line_start":1147,"line_end":1147,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":689357,"byte_end":689402,"line_start":1148,"line_end":1148,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3505},"span":{"file_name":"src/liballoc/string.rs","byte_start":690178,"byte_end":690181,"line_start":1177,"line_end":1177,"column_start":12,"column_end":15},"name":"pop","qualname":"<String>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"src/liballoc/string.rs","byte_start":689600,"byte_end":689669,"line_start":1156,"line_end":1156,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689674,"byte_end":689677,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"src/liballoc/string.rs","byte_start":689682,"byte_end":689729,"line_start":1158,"line_end":1158,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689734,"byte_end":689737,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/string.rs","byte_start":689742,"byte_end":689802,"line_start":1160,"line_end":1160,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689807,"byte_end":689810,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":689815,"byte_end":689829,"line_start":1162,"line_end":1162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689834,"byte_end":689837,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":689842,"byte_end":689858,"line_start":1164,"line_end":1164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689863,"byte_end":689866,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":689871,"byte_end":689878,"line_start":1166,"line_end":1166,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":689883,"byte_end":689919,"line_start":1167,"line_end":1167,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":689924,"byte_end":689927,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"src/liballoc/string.rs","byte_start":689932,"byte_end":689967,"line_start":1169,"line_end":1169,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"src/liballoc/string.rs","byte_start":689972,"byte_end":690007,"line_start":1170,"line_end":1170,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"src/liballoc/string.rs","byte_start":690012,"byte_end":690047,"line_start":1171,"line_end":1171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690052,"byte_end":690055,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"src/liballoc/string.rs","byte_start":690060,"byte_end":690090,"line_start":1173,"line_end":1173,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":690095,"byte_end":690102,"line_start":1174,"line_end":1174,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":690107,"byte_end":690116,"line_start":1175,"line_end":1175,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":690121,"byte_end":690166,"line_start":1176,"line_end":1176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3506},"span":{"file_name":"src/liballoc/string.rs","byte_start":691123,"byte_end":691129,"line_start":1211,"line_end":1211,"column_start":12,"column_end":18},"name":"remove","qualname":"<String>::remove","value":"fn (&mut self, idx: usize) -> char","parent":null,"children":[],"decl_id":null,"docs":" Removes a [`char`] from this `String` at a byte position and returns it.","sig":null,"attributes":[{"value":"/ Removes a [`char`] from this `String` at a byte position and returns it.","span":{"file_name":"src/liballoc/string.rs","byte_start":690398,"byte_end":690474,"line_start":1186,"line_end":1186,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690479,"byte_end":690482,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation, as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":690487,"byte_end":690563,"line_start":1188,"line_end":1188,"column_start":5,"column_end":81}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":690568,"byte_end":690579,"line_start":1189,"line_end":1189,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690584,"byte_end":690587,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":690592,"byte_end":690604,"line_start":1191,"line_end":1191,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690609,"byte_end":690612,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than or equal to the `String`'s length,","span":{"file_name":"src/liballoc/string.rs","byte_start":690617,"byte_end":690686,"line_start":1193,"line_end":1193,"column_start":5,"column_end":74}},{"value":"/ or if it does not lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":690691,"byte_end":690740,"line_start":1194,"line_end":1194,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690745,"byte_end":690748,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":690753,"byte_end":690796,"line_start":1196,"line_end":1196,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690801,"byte_end":690804,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":690809,"byte_end":690823,"line_start":1198,"line_end":1198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690828,"byte_end":690831,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":690836,"byte_end":690852,"line_start":1200,"line_end":1200,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690857,"byte_end":690860,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":690865,"byte_end":690872,"line_start":1202,"line_end":1202,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":690877,"byte_end":690913,"line_start":1203,"line_end":1203,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":690918,"byte_end":690921,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.remove(0), 'f');","span":{"file_name":"src/liballoc/string.rs","byte_start":690926,"byte_end":690959,"line_start":1205,"line_end":1205,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.remove(1), 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":690964,"byte_end":690997,"line_start":1206,"line_end":1206,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.remove(0), 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":691002,"byte_end":691035,"line_start":1207,"line_end":1207,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":691040,"byte_end":691047,"line_start":1208,"line_end":1208,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":691052,"byte_end":691061,"line_start":1209,"line_end":1209,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":691066,"byte_end":691111,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3507},"span":{"file_name":"src/liballoc/string.rs","byte_start":692493,"byte_end":692499,"line_start":1253,"line_end":1253,"column_start":12,"column_end":18},"name":"retain","qualname":"<String>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the characters specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the characters specified by the predicate.","span":{"file_name":"src/liballoc/string.rs","byte_start":691597,"byte_end":691656,"line_start":1226,"line_end":1226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":691661,"byte_end":691664,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all characters `c` such that `f(c)` returns `false`.","span":{"file_name":"src/liballoc/string.rs","byte_start":691669,"byte_end":691748,"line_start":1228,"line_end":1228,"column_start":5,"column_end":84}},{"value":"/ This method operates in place, visiting each character exactly once in the","span":{"file_name":"src/liballoc/string.rs","byte_start":691753,"byte_end":691831,"line_start":1229,"line_end":1229,"column_start":5,"column_end":83}},{"value":"/ original order, and preserves the order of the retained characters.","span":{"file_name":"src/liballoc/string.rs","byte_start":691836,"byte_end":691907,"line_start":1230,"line_end":1230,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":691912,"byte_end":691915,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":691920,"byte_end":691934,"line_start":1232,"line_end":1232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":691939,"byte_end":691942,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":691947,"byte_end":691954,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"f_o_ob_ar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":691959,"byte_end":692001,"line_start":1235,"line_end":1235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":692006,"byte_end":692009,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ s.retain(|c| c != '_');","span":{"file_name":"src/liballoc/string.rs","byte_start":692014,"byte_end":692041,"line_start":1237,"line_end":1237,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":692046,"byte_end":692049,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"foobar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":692054,"byte_end":692082,"line_start":1239,"line_end":1239,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":692087,"byte_end":692094,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":692099,"byte_end":692102,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/string.rs","byte_start":692107,"byte_end":692184,"line_start":1242,"line_end":1242,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":692189,"byte_end":692192,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":692197,"byte_end":692204,"line_start":1244,"line_end":1244,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"abcde\");","span":{"file_name":"src/liballoc/string.rs","byte_start":692209,"byte_end":692247,"line_start":1245,"line_end":1245,"column_start":5,"column_end":43}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/string.rs","byte_start":692252,"byte_end":692300,"line_start":1246,"line_end":1246,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/string.rs","byte_start":692305,"byte_end":692323,"line_start":1247,"line_end":1247,"column_start":5,"column_end":23}},{"value":"/ s.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/string.rs","byte_start":692328,"byte_end":692366,"line_start":1248,"line_end":1248,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, \"bce\");","span":{"file_name":"src/liballoc/string.rs","byte_start":692371,"byte_end":692396,"line_start":1249,"line_end":1249,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":692401,"byte_end":692408,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":692413,"byte_end":692422,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_retain\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":692427,"byte_end":692481,"line_start":1252,"line_end":1252,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3509},"span":{"file_name":"src/liballoc/string.rs","byte_start":694094,"byte_end":694100,"line_start":1315,"line_end":1315,"column_start":12,"column_end":18},"name":"insert","qualname":"<String>::insert","value":"fn (&mut self, idx: usize, ch: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a character into this `String` at a byte position.","sig":null,"attributes":[{"value":"/ Inserts a character into this `String` at a byte position.","span":{"file_name":"src/liballoc/string.rs","byte_start":693389,"byte_end":693451,"line_start":1288,"line_end":1288,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693456,"byte_end":693459,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":693464,"byte_end":693539,"line_start":1290,"line_end":1290,"column_start":5,"column_end":80}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":693544,"byte_end":693555,"line_start":1291,"line_end":1291,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693560,"byte_end":693563,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":693568,"byte_end":693580,"line_start":1293,"line_end":1293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693585,"byte_end":693588,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than the `String`'s length, or if it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":693593,"byte_end":693668,"line_start":1295,"line_end":1295,"column_start":5,"column_end":80}},{"value":"/ lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":693673,"byte_end":693704,"line_start":1296,"line_end":1296,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693709,"byte_end":693712,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":693717,"byte_end":693760,"line_start":1298,"line_end":1298,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693765,"byte_end":693768,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":693773,"byte_end":693787,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693792,"byte_end":693795,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":693800,"byte_end":693816,"line_start":1302,"line_end":1302,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693821,"byte_end":693824,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":693829,"byte_end":693836,"line_start":1304,"line_end":1304,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(3);","span":{"file_name":"src/liballoc/string.rs","byte_start":693841,"byte_end":693882,"line_start":1305,"line_end":1305,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693887,"byte_end":693890,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ s.insert(0, 'f');","span":{"file_name":"src/liballoc/string.rs","byte_start":693895,"byte_end":693916,"line_start":1307,"line_end":1307,"column_start":5,"column_end":26}},{"value":"/ s.insert(1, 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":693921,"byte_end":693942,"line_start":1308,"line_end":1308,"column_start":5,"column_end":26}},{"value":"/ s.insert(2, 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":693947,"byte_end":693968,"line_start":1309,"line_end":1309,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":693973,"byte_end":693976,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foo\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":693981,"byte_end":694006,"line_start":1311,"line_end":1311,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":694011,"byte_end":694018,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":694023,"byte_end":694032,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":694037,"byte_end":694082,"line_start":1314,"line_end":1314,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":"src/liballoc/string.rs","byte_start":695387,"byte_end":695397,"line_start":1360,"line_end":1360,"column_start":12,"column_end":22},"name":"insert_str","qualname":"<String>::insert_str","value":"fn (&mut self, idx: usize, string: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a string slice into this `String` at a byte position.","sig":null,"attributes":[{"value":"/ Inserts a string slice into this `String` at a byte position.","span":{"file_name":"src/liballoc/string.rs","byte_start":694721,"byte_end":694786,"line_start":1335,"line_end":1335,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":694791,"byte_end":694794,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":694799,"byte_end":694874,"line_start":1337,"line_end":1337,"column_start":5,"column_end":80}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":694879,"byte_end":694890,"line_start":1338,"line_end":1338,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":694895,"byte_end":694898,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":694903,"byte_end":694915,"line_start":1340,"line_end":1340,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":694920,"byte_end":694923,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than the `String`'s length, or if it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":694928,"byte_end":695003,"line_start":1342,"line_end":1342,"column_start":5,"column_end":80}},{"value":"/ lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":695008,"byte_end":695039,"line_start":1343,"line_end":1343,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695044,"byte_end":695047,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":695052,"byte_end":695095,"line_start":1345,"line_end":1345,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695100,"byte_end":695103,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":695108,"byte_end":695122,"line_start":1347,"line_end":1347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695127,"byte_end":695130,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":695135,"byte_end":695151,"line_start":1349,"line_end":1349,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695156,"byte_end":695159,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":695164,"byte_end":695171,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"bar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":695176,"byte_end":695212,"line_start":1352,"line_end":1352,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695217,"byte_end":695220,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ s.insert_str(0, \"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":695225,"byte_end":695252,"line_start":1354,"line_end":1354,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695257,"byte_end":695260,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":695265,"byte_end":695293,"line_start":1356,"line_end":1356,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":695298,"byte_end":695305,"line_start":1357,"line_end":1357,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":695310,"byte_end":695319,"line_start":1358,"line_end":1358,"column_start":5,"column_end":14}},{"value":"stable(feature = \"insert_str\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":695324,"byte_end":695375,"line_start":1359,"line_end":1359,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3513},"span":{"file_name":"src/liballoc/string.rs","byte_start":696400,"byte_end":696410,"line_start":1394,"line_end":1394,"column_start":19,"column_end":29},"name":"as_mut_vec","qualname":"<String>::as_mut_vec","value":"fn (&mut self) -> &mut Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contents of this `String`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the contents of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":695576,"byte_end":695641,"line_start":1368,"line_end":1368,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695646,"byte_end":695649,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":695654,"byte_end":695666,"line_start":1370,"line_end":1370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695671,"byte_end":695674,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"src/liballoc/string.rs","byte_start":695679,"byte_end":695754,"line_start":1372,"line_end":1372,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"src/liballoc/string.rs","byte_start":695759,"byte_end":695830,"line_start":1373,"line_end":1373,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"src/liballoc/string.rs","byte_start":695835,"byte_end":695911,"line_start":1374,"line_end":1374,"column_start":5,"column_end":81}},{"value":"/ the standard library assumes that `String`s are valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":695916,"byte_end":695980,"line_start":1375,"line_end":1375,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":695985,"byte_end":695988,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":695993,"byte_end":696007,"line_start":1377,"line_end":1377,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696012,"byte_end":696015,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":696020,"byte_end":696036,"line_start":1379,"line_end":1379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696041,"byte_end":696044,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":696049,"byte_end":696056,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":696061,"byte_end":696099,"line_start":1382,"line_end":1382,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696104,"byte_end":696107,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":696112,"byte_end":696124,"line_start":1384,"line_end":1384,"column_start":5,"column_end":17}},{"value":"/     let vec = s.as_mut_vec();","span":{"file_name":"src/liballoc/string.rs","byte_start":696129,"byte_end":696162,"line_start":1385,"line_end":1385,"column_start":5,"column_end":38}},{"value":"/     assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);","span":{"file_name":"src/liballoc/string.rs","byte_start":696167,"byte_end":696228,"line_start":1386,"line_end":1386,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696233,"byte_end":696236,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/     vec.reverse();","span":{"file_name":"src/liballoc/string.rs","byte_start":696241,"byte_end":696263,"line_start":1388,"line_end":1388,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":696268,"byte_end":696273,"line_start":1389,"line_end":1389,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"olleh\");","span":{"file_name":"src/liballoc/string.rs","byte_start":696278,"byte_end":696305,"line_start":1390,"line_end":1390,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":696310,"byte_end":696317,"line_start":1391,"line_end":1391,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":696322,"byte_end":696331,"line_start":1392,"line_end":1392,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":696336,"byte_end":696381,"line_start":1393,"line_end":1393,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3514},"span":{"file_name":"src/liballoc/string.rs","byte_start":697017,"byte_end":697020,"line_start":1416,"line_end":1416,"column_start":12,"column_end":15},"name":"len","qualname":"<String>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this `String`, in bytes, not [`char`]s or\n graphemes. In other words, it may not be what a human considers the\n length of the string.","sig":null,"attributes":[{"value":"/ Returns the length of this `String`, in bytes, not [`char`]s or","span":{"file_name":"src/liballoc/string.rs","byte_start":696473,"byte_end":696540,"line_start":1398,"line_end":1398,"column_start":5,"column_end":72}},{"value":"/ graphemes. In other words, it may not be what a human considers the","span":{"file_name":"src/liballoc/string.rs","byte_start":696545,"byte_end":696616,"line_start":1399,"line_end":1399,"column_start":5,"column_end":76}},{"value":"/ length of the string.","span":{"file_name":"src/liballoc/string.rs","byte_start":696621,"byte_end":696646,"line_start":1400,"line_end":1400,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696651,"byte_end":696654,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":696659,"byte_end":696673,"line_start":1402,"line_end":1402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696678,"byte_end":696681,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":696686,"byte_end":696702,"line_start":1404,"line_end":1404,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696707,"byte_end":696710,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":696715,"byte_end":696722,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}},{"value":"/ let a = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":696727,"byte_end":696759,"line_start":1407,"line_end":1407,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":696764,"byte_end":696791,"line_start":1408,"line_end":1408,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":696796,"byte_end":696799,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ let fancy_f = String::from(\"ƒoo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":696804,"byte_end":696843,"line_start":1410,"line_end":1410,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(fancy_f.len(), 4);","span":{"file_name":"src/liballoc/string.rs","byte_start":696848,"byte_end":696881,"line_start":1411,"line_end":1411,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(fancy_f.chars().count(), 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":696886,"byte_end":696929,"line_start":1412,"line_end":1412,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":696934,"byte_end":696941,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":696946,"byte_end":696955,"line_start":1414,"line_end":1414,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":696960,"byte_end":697005,"line_start":1415,"line_end":1415,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3515},"span":{"file_name":"src/liballoc/string.rs","byte_start":697444,"byte_end":697452,"line_start":1435,"line_end":1435,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<String>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this `String` has a length of zero, and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this `String` has a length of zero, and `false` otherwise.","span":{"file_name":"src/liballoc/string.rs","byte_start":697073,"byte_end":697153,"line_start":1420,"line_end":1420,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697158,"byte_end":697161,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":697166,"byte_end":697180,"line_start":1422,"line_end":1422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697185,"byte_end":697188,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":697193,"byte_end":697209,"line_start":1424,"line_end":1424,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697214,"byte_end":697217,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":697222,"byte_end":697229,"line_start":1426,"line_end":1426,"column_start":5,"column_end":12}},{"value":"/ let mut v = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":697234,"byte_end":697264,"line_start":1427,"line_end":1427,"column_start":5,"column_end":35}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":697269,"byte_end":697295,"line_start":1428,"line_end":1428,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697300,"byte_end":697303,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ v.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":697308,"byte_end":697324,"line_start":1430,"line_end":1430,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":697329,"byte_end":697356,"line_start":1431,"line_end":1431,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":697361,"byte_end":697368,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":697373,"byte_end":697382,"line_start":1433,"line_end":1433,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":697387,"byte_end":697432,"line_start":1434,"line_end":1434,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3516},"span":{"file_name":"src/liballoc/string.rs","byte_start":698338,"byte_end":698347,"line_start":1464,"line_end":1464,"column_start":12,"column_end":21},"name":"split_off","qualname":"<String>::split_off","value":"fn (&mut self, at: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Splits the string into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the string into two at the given index.","span":{"file_name":"src/liballoc/string.rs","byte_start":697505,"byte_end":697555,"line_start":1439,"line_end":1439,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697560,"byte_end":697563,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and","span":{"file_name":"src/liballoc/string.rs","byte_start":697568,"byte_end":697644,"line_start":1441,"line_end":1441,"column_start":5,"column_end":81}},{"value":"/ the returned `String` contains bytes `[at, len)`. `at` must be on the","span":{"file_name":"src/liballoc/string.rs","byte_start":697649,"byte_end":697722,"line_start":1442,"line_end":1442,"column_start":5,"column_end":78}},{"value":"/ boundary of a UTF-8 code point.","span":{"file_name":"src/liballoc/string.rs","byte_start":697727,"byte_end":697762,"line_start":1443,"line_end":1443,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697767,"byte_end":697770,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of `self` does not change.","span":{"file_name":"src/liballoc/string.rs","byte_start":697775,"byte_end":697828,"line_start":1445,"line_end":1445,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697833,"byte_end":697836,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":697841,"byte_end":697853,"line_start":1447,"line_end":1447,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697858,"byte_end":697861,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is not on a `UTF-8` code point boundary, or if it is beyond the last","span":{"file_name":"src/liballoc/string.rs","byte_start":697866,"byte_end":697953,"line_start":1449,"line_end":1449,"column_start":5,"column_end":92}},{"value":"/ code point of the string.","span":{"file_name":"src/liballoc/string.rs","byte_start":697958,"byte_end":697987,"line_start":1450,"line_end":1450,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":697992,"byte_end":697995,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":698000,"byte_end":698014,"line_start":1452,"line_end":1452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698019,"byte_end":698022,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":698027,"byte_end":698034,"line_start":1454,"line_end":1454,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/string.rs","byte_start":698039,"byte_end":698056,"line_start":1455,"line_end":1455,"column_start":5,"column_end":22}},{"value":"/ let mut hello = String::from(\"Hello, World!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":698061,"byte_end":698111,"line_start":1456,"line_end":1456,"column_start":5,"column_end":55}},{"value":"/ let world = hello.split_off(7);","span":{"file_name":"src/liballoc/string.rs","byte_start":698116,"byte_end":698151,"line_start":1457,"line_end":1457,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hello, \"Hello, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":698156,"byte_end":698189,"line_start":1458,"line_end":1458,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(world, \"World!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":698194,"byte_end":698226,"line_start":1459,"line_end":1459,"column_start":5,"column_end":37}},{"value":"/ # }","span":{"file_name":"src/liballoc/string.rs","byte_start":698231,"byte_end":698238,"line_start":1460,"line_end":1460,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":698243,"byte_end":698250,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":698255,"byte_end":698264,"line_start":1462,"line_end":1462,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_split_off\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":698269,"byte_end":698326,"line_start":1463,"line_end":1463,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3517},"span":{"file_name":"src/liballoc/string.rs","byte_start":699040,"byte_end":699045,"line_start":1490,"line_end":1490,"column_start":12,"column_end":17},"name":"clear","qualname":"<String>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":698535,"byte_end":698586,"line_start":1470,"line_end":1470,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698591,"byte_end":698594,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":698599,"byte_end":698672,"line_start":1472,"line_end":1472,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":698677,"byte_end":698700,"line_start":1473,"line_end":1473,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698705,"byte_end":698708,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":698713,"byte_end":698727,"line_start":1475,"line_end":1475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698732,"byte_end":698735,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":698740,"byte_end":698756,"line_start":1477,"line_end":1477,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698761,"byte_end":698764,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":698769,"byte_end":698776,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":698781,"byte_end":698817,"line_start":1480,"line_end":1480,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698822,"byte_end":698825,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"src/liballoc/string.rs","byte_start":698830,"byte_end":698844,"line_start":1482,"line_end":1482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":698849,"byte_end":698852,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":698857,"byte_end":698883,"line_start":1484,"line_end":1484,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":698888,"byte_end":698915,"line_start":1485,"line_end":1485,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":698920,"byte_end":698952,"line_start":1486,"line_end":1486,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":698957,"byte_end":698964,"line_start":1487,"line_end":1487,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":698969,"byte_end":698978,"line_start":1488,"line_end":1488,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":698983,"byte_end":699028,"line_start":1489,"line_end":1489,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":"src/liballoc/string.rs","byte_start":700108,"byte_end":700113,"line_start":1525,"line_end":1525,"column_start":12,"column_end":17},"name":"drain","qualname":"<String>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the `String`\n and yields the removed `chars`.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":699095,"byte_end":699175,"line_start":1494,"line_end":1494,"column_start":5,"column_end":85}},{"value":"/ and yields the removed `chars`.","span":{"file_name":"src/liballoc/string.rs","byte_start":699180,"byte_end":699215,"line_start":1495,"line_end":1495,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699220,"byte_end":699223,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ Note: The element range is removed even if the iterator is not","span":{"file_name":"src/liballoc/string.rs","byte_start":699228,"byte_end":699294,"line_start":1497,"line_end":1497,"column_start":5,"column_end":71}},{"value":"/ consumed until the end.","span":{"file_name":"src/liballoc/string.rs","byte_start":699299,"byte_end":699326,"line_start":1498,"line_end":1498,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699331,"byte_end":699334,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":699339,"byte_end":699351,"line_start":1500,"line_end":1500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699356,"byte_end":699359,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point or end point do not lie on a [`char`]","span":{"file_name":"src/liballoc/string.rs","byte_start":699364,"byte_end":699434,"line_start":1502,"line_end":1502,"column_start":5,"column_end":75}},{"value":"/ boundary, or if they're out of bounds.","span":{"file_name":"src/liballoc/string.rs","byte_start":699439,"byte_end":699481,"line_start":1503,"line_end":1503,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699486,"byte_end":699489,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":699494,"byte_end":699537,"line_start":1505,"line_end":1505,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699542,"byte_end":699545,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":699550,"byte_end":699564,"line_start":1507,"line_end":1507,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699569,"byte_end":699572,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":699577,"byte_end":699593,"line_start":1509,"line_end":1509,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699598,"byte_end":699601,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":699606,"byte_end":699613,"line_start":1511,"line_end":1511,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"α is alpha, β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":699618,"byte_end":699674,"line_start":1512,"line_end":1512,"column_start":5,"column_end":59}},{"value":"/ let beta_offset = s.find('β').unwrap_or(s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":699679,"byte_end":699733,"line_start":1513,"line_end":1513,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699738,"byte_end":699741,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ // Remove the range up until the β from the string","span":{"file_name":"src/liballoc/string.rs","byte_start":699746,"byte_end":699801,"line_start":1515,"line_end":1515,"column_start":5,"column_end":59}},{"value":"/ let t: String = s.drain(..beta_offset).collect();","span":{"file_name":"src/liballoc/string.rs","byte_start":699806,"byte_end":699859,"line_start":1516,"line_end":1516,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t, \"α is alpha, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":699864,"byte_end":699899,"line_start":1517,"line_end":1517,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(s, \"β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":699904,"byte_end":699936,"line_start":1518,"line_end":1518,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":699941,"byte_end":699944,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ // A full range clears the string","span":{"file_name":"src/liballoc/string.rs","byte_start":699949,"byte_end":699986,"line_start":1520,"line_end":1520,"column_start":5,"column_end":42}},{"value":"/ s.drain(..);","span":{"file_name":"src/liballoc/string.rs","byte_start":699991,"byte_end":700007,"line_start":1521,"line_end":1521,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(s, \"\");","span":{"file_name":"src/liballoc/string.rs","byte_start":700012,"byte_end":700034,"line_start":1522,"line_end":1522,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":700039,"byte_end":700046,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":700051,"byte_end":700096,"line_start":1524,"line_end":1524,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3520},"span":{"file_name":"src/liballoc/string.rs","byte_start":702095,"byte_end":702108,"line_start":1581,"line_end":1581,"column_start":12,"column_end":25},"name":"replace_range","qualname":"<String>::replace_range","value":"fn <R> (&mut self, range: R, replace_with: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the specified range in the string,\n and replaces it with the given string.\n The given string doesn't need to be the same length as the range.","sig":null,"attributes":[{"value":"/ Removes the specified range in the string,","span":{"file_name":"src/liballoc/string.rs","byte_start":701184,"byte_end":701230,"line_start":1556,"line_end":1556,"column_start":5,"column_end":51}},{"value":"/ and replaces it with the given string.","span":{"file_name":"src/liballoc/string.rs","byte_start":701235,"byte_end":701277,"line_start":1557,"line_end":1557,"column_start":5,"column_end":47}},{"value":"/ The given string doesn't need to be the same length as the range.","span":{"file_name":"src/liballoc/string.rs","byte_start":701282,"byte_end":701351,"line_start":1558,"line_end":1558,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701356,"byte_end":701359,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":701364,"byte_end":701376,"line_start":1560,"line_end":1560,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701381,"byte_end":701384,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point or end point do not lie on a [`char`]","span":{"file_name":"src/liballoc/string.rs","byte_start":701389,"byte_end":701459,"line_start":1562,"line_end":1562,"column_start":5,"column_end":75}},{"value":"/ boundary, or if they're out of bounds.","span":{"file_name":"src/liballoc/string.rs","byte_start":701464,"byte_end":701506,"line_start":1563,"line_end":1563,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701511,"byte_end":701514,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":701519,"byte_end":701562,"line_start":1565,"line_end":1565,"column_start":5,"column_end":48}},{"value":"/ [`Vec::splice`]: ../../std/vec/struct.Vec.html#method.splice","span":{"file_name":"src/liballoc/string.rs","byte_start":701567,"byte_end":701631,"line_start":1566,"line_end":1566,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701636,"byte_end":701639,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":701644,"byte_end":701658,"line_start":1568,"line_end":1568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701663,"byte_end":701666,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":701671,"byte_end":701687,"line_start":1570,"line_end":1570,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701692,"byte_end":701695,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":701700,"byte_end":701707,"line_start":1572,"line_end":1572,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"α is alpha, β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":701712,"byte_end":701768,"line_start":1573,"line_end":1573,"column_start":5,"column_end":59}},{"value":"/ let beta_offset = s.find('β').unwrap_or(s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":701773,"byte_end":701827,"line_start":1574,"line_end":1574,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701832,"byte_end":701835,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ // Replace the range up until the β from the string","span":{"file_name":"src/liballoc/string.rs","byte_start":701840,"byte_end":701896,"line_start":1576,"line_end":1576,"column_start":5,"column_end":60}},{"value":"/ s.replace_range(..beta_offset, \"Α is capital alpha; \");","span":{"file_name":"src/liballoc/string.rs","byte_start":701901,"byte_end":701961,"line_start":1577,"line_end":1577,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(s, \"Α is capital alpha; β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":701966,"byte_end":702019,"line_start":1578,"line_end":1578,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":702024,"byte_end":702031,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"stable(feature = \"splice\", since = \"1.27.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":702036,"byte_end":702083,"line_start":1580,"line_end":1580,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3522},"span":{"file_name":"src/liballoc/string.rs","byte_start":703338,"byte_end":703352,"line_start":1622,"line_end":1622,"column_start":12,"column_end":26},"name":"into_boxed_str","qualname":"<String>::into_boxed_str","value":"fn (self) -> Box<str>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `String` into a [`Box`]`<`[`str`]`>`.","sig":null,"attributes":[{"value":"/ Converts this `String` into a [`Box`]`<`[`str`]`>`.","span":{"file_name":"src/liballoc/string.rs","byte_start":702879,"byte_end":702934,"line_start":1604,"line_end":1604,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":702939,"byte_end":702942,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ This will drop any excess capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":702947,"byte_end":702986,"line_start":1606,"line_end":1606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":702991,"byte_end":702994,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ [`Box`]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/string.rs","byte_start":702999,"byte_end":703043,"line_start":1608,"line_end":1608,"column_start":5,"column_end":49}},{"value":"/ [`str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":703048,"byte_end":703089,"line_start":1609,"line_end":1609,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703094,"byte_end":703097,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":703102,"byte_end":703116,"line_start":1611,"line_end":1611,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703121,"byte_end":703124,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":703129,"byte_end":703145,"line_start":1613,"line_end":1613,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703150,"byte_end":703153,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":703158,"byte_end":703165,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":703170,"byte_end":703204,"line_start":1616,"line_end":1616,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703209,"byte_end":703212,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ let b = s.into_boxed_str();","span":{"file_name":"src/liballoc/string.rs","byte_start":703217,"byte_end":703248,"line_start":1618,"line_end":1618,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":703253,"byte_end":703260,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_str\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":703265,"byte_end":703312,"line_start":1620,"line_end":1620,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":703317,"byte_end":703326,"line_start":1621,"line_end":1621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3524},"span":{"file_name":"src/liballoc/string.rs","byte_start":703961,"byte_end":703969,"line_start":1644,"line_end":1644,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.","sig":null,"attributes":[{"value":"/ Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":703508,"byte_end":703590,"line_start":1629,"line_end":1629,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703595,"byte_end":703598,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":703603,"byte_end":703617,"line_start":1631,"line_end":1631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703622,"byte_end":703625,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":703630,"byte_end":703646,"line_start":1633,"line_end":1633,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703651,"byte_end":703654,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":703659,"byte_end":703666,"line_start":1635,"line_end":1635,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":703671,"byte_end":703709,"line_start":1636,"line_end":1636,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":703714,"byte_end":703743,"line_start":1637,"line_end":1637,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703748,"byte_end":703751,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":703756,"byte_end":703797,"line_start":1639,"line_end":1639,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":703802,"byte_end":703805,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[0, 159], value.unwrap_err().as_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":703810,"byte_end":703867,"line_start":1641,"line_end":1641,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":703872,"byte_end":703879,"line_start":1642,"line_end":1642,"column_start":5,"column_end":12}},{"value":"stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":703884,"byte_end":703949,"line_start":1643,"line_end":1643,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3525},"span":{"file_name":"src/liballoc/string.rs","byte_start":704639,"byte_end":704649,"line_start":1667,"line_end":1667,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<FromUtf8Error>::into_bytes","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the bytes that were attempted to convert to a `String`.","sig":null,"attributes":[{"value":"/ Returns the bytes that were attempted to convert to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":704023,"byte_end":704090,"line_start":1648,"line_end":1648,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704095,"byte_end":704098,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ This method is carefully constructed to avoid allocation. It will","span":{"file_name":"src/liballoc/string.rs","byte_start":704103,"byte_end":704172,"line_start":1650,"line_end":1650,"column_start":5,"column_end":74}},{"value":"/ consume the error, moving out the bytes, so that a copy of the bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":704177,"byte_end":704249,"line_start":1651,"line_end":1651,"column_start":5,"column_end":77}},{"value":"/ does not need to be made.","span":{"file_name":"src/liballoc/string.rs","byte_start":704254,"byte_end":704283,"line_start":1652,"line_end":1652,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704288,"byte_end":704291,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":704296,"byte_end":704310,"line_start":1654,"line_end":1654,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704315,"byte_end":704318,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":704323,"byte_end":704339,"line_start":1656,"line_end":1656,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704344,"byte_end":704347,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":704352,"byte_end":704359,"line_start":1658,"line_end":1658,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":704364,"byte_end":704402,"line_start":1659,"line_end":1659,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":704407,"byte_end":704436,"line_start":1660,"line_end":1660,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704441,"byte_end":704444,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":704449,"byte_end":704490,"line_start":1662,"line_end":1662,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704495,"byte_end":704498,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":704503,"byte_end":704565,"line_start":1664,"line_end":1664,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":704570,"byte_end":704577,"line_start":1665,"line_end":1665,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":704582,"byte_end":704627,"line_start":1666,"line_end":1666,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3526},"span":{"file_name":"src/liballoc/string.rs","byte_start":705655,"byte_end":705665,"line_start":1697,"line_end":1697,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Fetch a `Utf8Error` to get more details about the conversion failure.","sig":null,"attributes":[{"value":"/ Fetch a `Utf8Error` to get more details about the conversion failure.","span":{"file_name":"src/liballoc/string.rs","byte_start":704699,"byte_end":704772,"line_start":1671,"line_end":1671,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":704777,"byte_end":704780,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ The [`Utf8Error`] type provided by [`std::str`] represents an error that may","span":{"file_name":"src/liballoc/string.rs","byte_start":704785,"byte_end":704865,"line_start":1673,"line_end":1673,"column_start":5,"column_end":85}},{"value":"/ occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's","span":{"file_name":"src/liballoc/string.rs","byte_start":704870,"byte_end":704949,"line_start":1674,"line_end":1674,"column_start":5,"column_end":84}},{"value":"/ an analogue to `FromUtf8Error`. See its documentation for more details","span":{"file_name":"src/liballoc/string.rs","byte_start":704954,"byte_end":705028,"line_start":1675,"line_end":1675,"column_start":5,"column_end":79}},{"value":"/ on using it.","span":{"file_name":"src/liballoc/string.rs","byte_start":705033,"byte_end":705049,"line_start":1676,"line_end":1676,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705054,"byte_end":705057,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ [`Utf8Error`]: ../../std/str/struct.Utf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":705062,"byte_end":705116,"line_start":1678,"line_end":1678,"column_start":5,"column_end":59}},{"value":"/ [`std::str`]: ../../std/str/index.html","span":{"file_name":"src/liballoc/string.rs","byte_start":705121,"byte_end":705163,"line_start":1679,"line_end":1679,"column_start":5,"column_end":47}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":705168,"byte_end":705207,"line_start":1680,"line_end":1680,"column_start":5,"column_end":44}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":705212,"byte_end":705254,"line_start":1681,"line_end":1681,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705259,"byte_end":705262,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":705267,"byte_end":705281,"line_start":1683,"line_end":1683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705286,"byte_end":705289,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":705294,"byte_end":705310,"line_start":1685,"line_end":1685,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705315,"byte_end":705318,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":705323,"byte_end":705330,"line_start":1687,"line_end":1687,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":705335,"byte_end":705373,"line_start":1688,"line_end":1688,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":705378,"byte_end":705407,"line_start":1689,"line_end":1689,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705412,"byte_end":705415,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ let error = String::from_utf8(bytes).unwrap_err().utf8_error();","span":{"file_name":"src/liballoc/string.rs","byte_start":705420,"byte_end":705487,"line_start":1691,"line_end":1691,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":705492,"byte_end":705495,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ // the first byte is invalid here","span":{"file_name":"src/liballoc/string.rs","byte_start":705500,"byte_end":705537,"line_start":1693,"line_end":1693,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(1, error.valid_up_to());","span":{"file_name":"src/liballoc/string.rs","byte_start":705542,"byte_end":705581,"line_start":1694,"line_end":1694,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":705586,"byte_end":705593,"line_start":1695,"line_end":1695,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":705598,"byte_end":705643,"line_start":1696,"line_end":1696,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":3634},"span":{"file_name":"src/liballoc/string.rs","byte_start":717774,"byte_end":717784,"line_start":2115,"line_end":2115,"column_start":10,"column_end":20},"name":"ParseError","qualname":"::string::ParseError","value":"core::convert::Infallible","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`Infallible`].","sig":null,"attributes":[{"value":"/ A type alias for [`Infallible`].","span":{"file_name":"src/liballoc/string.rs","byte_start":717519,"byte_end":717555,"line_start":2109,"line_end":2109,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":717556,"byte_end":717559,"line_start":2110,"line_end":2110,"column_start":1,"column_end":4}},{"value":"/ This alias exists for backwards compatibility, and may be eventually deprecated.","span":{"file_name":"src/liballoc/string.rs","byte_start":717560,"byte_end":717644,"line_start":2111,"line_end":2111,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":717645,"byte_end":717648,"line_start":2112,"line_end":2112,"column_start":1,"column_end":4}},{"value":"/ [`Infallible`]: ../../core/convert/enum.Infallible.html","span":{"file_name":"src/liballoc/string.rs","byte_start":717649,"byte_end":717708,"line_start":2113,"line_end":2113,"column_start":1,"column_end":60}},{"value":"stable(feature = \"str_parse_error\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":717709,"byte_end":717764,"line_start":2114,"line_end":2114,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":3638},"span":{"file_name":"src/liballoc/string.rs","byte_start":718459,"byte_end":718467,"line_start":2135,"line_end":2135,"column_start":11,"column_end":19},"name":"ToString","qualname":"::string::ToString","value":"ToString","parent":null,"children":[{"krate":0,"index":3639}],"decl_id":null,"docs":" A trait for converting a value to a `String`.","sig":null,"attributes":[{"value":"/ A trait for converting a value to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":718036,"byte_end":718085,"line_start":2126,"line_end":2126,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718086,"byte_end":718089,"line_start":2127,"line_end":2127,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented for any type which implements the","span":{"file_name":"src/liballoc/string.rs","byte_start":718090,"byte_end":718167,"line_start":2128,"line_end":2128,"column_start":1,"column_end":78}},{"value":"/ [`Display`] trait. As such, `ToString` shouldn't be implemented directly:","span":{"file_name":"src/liballoc/string.rs","byte_start":718168,"byte_end":718245,"line_start":2129,"line_end":2129,"column_start":1,"column_end":78}},{"value":"/ [`Display`] should be implemented instead, and you get the `ToString`","span":{"file_name":"src/liballoc/string.rs","byte_start":718246,"byte_end":718319,"line_start":2130,"line_end":2130,"column_start":1,"column_end":74}},{"value":"/ implementation for free.","span":{"file_name":"src/liballoc/string.rs","byte_start":718320,"byte_end":718348,"line_start":2131,"line_end":2131,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718349,"byte_end":718352,"line_start":2132,"line_end":2132,"column_start":1,"column_end":4}},{"value":"/ [`Display`]: ../../std/fmt/trait.Display.html","span":{"file_name":"src/liballoc/string.rs","byte_start":718353,"byte_end":718402,"line_start":2133,"line_end":2133,"column_start":1,"column_end":50}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":718403,"byte_end":718448,"line_start":2134,"line_end":2134,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"src/liballoc/string.rs","byte_start":718804,"byte_end":718813,"line_start":2150,"line_end":2150,"column_start":8,"column_end":17},"name":"to_string","qualname":"::string::ToString::to_string","value":"fn (&self) -> String","parent":{"krate":0,"index":3638},"children":[],"decl_id":null,"docs":" Converts the given value to a `String`.","sig":null,"attributes":[{"value":"/ Converts the given value to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":718474,"byte_end":718517,"line_start":2136,"line_end":2136,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718522,"byte_end":718525,"line_start":2137,"line_end":2137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":718530,"byte_end":718544,"line_start":2138,"line_end":2138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718549,"byte_end":718552,"line_start":2139,"line_end":2139,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":718557,"byte_end":718573,"line_start":2140,"line_end":2140,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718578,"byte_end":718581,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":718586,"byte_end":718593,"line_start":2142,"line_end":2142,"column_start":5,"column_end":12}},{"value":"/ let i = 5;","span":{"file_name":"src/liballoc/string.rs","byte_start":718598,"byte_end":718612,"line_start":2143,"line_end":2143,"column_start":5,"column_end":19}},{"value":"/ let five = String::from(\"5\");","span":{"file_name":"src/liballoc/string.rs","byte_start":718617,"byte_end":718650,"line_start":2144,"line_end":2144,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":718655,"byte_end":718658,"line_start":2145,"line_end":2145,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(five, i.to_string());","span":{"file_name":"src/liballoc/string.rs","byte_start":718663,"byte_end":718699,"line_start":2146,"line_end":2146,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":718704,"byte_end":718711,"line_start":2147,"line_end":2147,"column_start":5,"column_end":12}},{"value":"rustc_conversion_suggestion","span":{"file_name":"src/liballoc/string.rs","byte_start":718716,"byte_end":718746,"line_start":2148,"line_end":2148,"column_start":5,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":718751,"byte_end":718796,"line_start":2149,"line_end":2149,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3694},"span":{"file_name":"src/liballoc/string.rs","byte_start":724483,"byte_end":724488,"line_start":2375,"line_end":2375,"column_start":12,"column_end":17},"name":"Drain","qualname":"::string::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3699}],"decl_id":null,"docs":" A draining iterator for `String`.","sig":null,"attributes":[{"value":"/ A draining iterator for `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":724196,"byte_end":724233,"line_start":2367,"line_end":2367,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":724234,"byte_end":724237,"line_start":2368,"line_end":2368,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`drain`] method on [`String`]. See its","span":{"file_name":"src/liballoc/string.rs","byte_start":724238,"byte_end":724311,"line_start":2369,"line_end":2369,"column_start":1,"column_end":74}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/string.rs","byte_start":724312,"byte_end":724339,"line_start":2370,"line_end":2370,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":724340,"byte_end":724343,"line_start":2371,"line_end":2371,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.String.html#method.drain","span":{"file_name":"src/liballoc/string.rs","byte_start":724344,"byte_end":724390,"line_start":2372,"line_end":2372,"column_start":1,"column_end":47}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":724391,"byte_end":724425,"line_start":2373,"line_end":2373,"column_start":1,"column_end":35}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":724426,"byte_end":724471,"line_start":2374,"line_end":2374,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":3714},"span":{"file_name":"src/liballoc/sync.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"src/liballoc/sync.rs","parent":null,"children":[{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3726},{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3732},{"krate":0,"index":3737},{"krate":0,"index":3742},{"krate":0,"index":3743},{"krate":0,"index":3746},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3755},{"krate":0,"index":3758},{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3768},{"krate":0,"index":3769},{"krate":0,"index":3773},{"krate":0,"index":3775},{"krate":0,"index":3777},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3787},{"krate":0,"index":3790},{"krate":0,"index":3792},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3808},{"krate":0,"index":3810},{"krate":0,"index":3812},{"krate":0,"index":3820},{"krate":0,"index":3823},{"krate":0,"index":3826},{"krate":0,"index":3829},{"krate":0,"index":3840},{"krate":0,"index":3848},{"krate":0,"index":3852},{"krate":0,"index":3855},{"krate":0,"index":3869},{"krate":0,"index":3872},{"krate":0,"index":3875},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3885},{"krate":0,"index":3887},{"krate":0,"index":3890},{"krate":0,"index":3895},{"krate":0,"index":3898},{"krate":0,"index":3901},{"krate":0,"index":3907},{"krate":0,"index":3915},{"krate":0,"index":3918},{"krate":0,"index":3921},{"krate":0,"index":3924},{"krate":0,"index":3928},{"krate":0,"index":3932},{"krate":0,"index":3936},{"krate":0,"index":3940},{"krate":0,"index":3947},{"krate":0,"index":3950},{"krate":0,"index":3952},{"krate":0,"index":3955},{"krate":0,"index":3958},{"krate":0,"index":3961},{"krate":0,"index":3964},{"krate":0,"index":3968},{"krate":0,"index":3971},{"krate":0,"index":3974},{"krate":0,"index":3976},{"krate":0,"index":3978},{"krate":0,"index":3981},{"krate":0,"index":3984},{"krate":0,"index":3992},{"krate":0,"index":3996},{"krate":0,"index":4000},{"krate":0,"index":4004},{"krate":0,"index":4008},{"krate":0,"index":4012},{"krate":0,"index":4015},{"krate":0,"index":4018},{"krate":0,"index":4020},{"krate":0,"index":4022},{"krate":0,"index":4024}],"decl_id":null,"docs":" Thread-safe reference-counting pointers.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":5314,"byte_end":5347,"line_start":161,"line_end":161,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":726169,"byte_end":726215,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"! Thread-safe reference-counting pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":726217,"byte_end":726261,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/sync.rs","byte_start":726262,"byte_end":726265,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! See the [`Arc<T>`][arc] documentation for more details.","span":{"file_name":"src/liballoc/sync.rs","byte_start":726266,"byte_end":726325,"line_start":5,"line_end":5,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/sync.rs","byte_start":726326,"byte_end":726329,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! [arc]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":726330,"byte_end":726356,"line_start":7,"line_end":7,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3769},"span":{"file_name":"src/liballoc/sync.rs","byte_start":733586,"byte_end":733589,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"Arc","qualname":"::sync::Arc","value":"Arc {  }","parent":null,"children":[{"krate":0,"index":3771},{"krate":0,"index":3772}],"decl_id":null,"docs":" A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\n Reference Counted'.","sig":null,"attributes":[{"value":"/ A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically","span":{"file_name":"src/liballoc/sync.rs","byte_start":727433,"byte_end":727507,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Reference Counted'.","span":{"file_name":"src/liballoc/sync.rs","byte_start":727508,"byte_end":727531,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727532,"byte_end":727535,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The type `Arc<T>` provides shared ownership of a value of type `T`,","span":{"file_name":"src/liballoc/sync.rs","byte_start":727536,"byte_end":727607,"line_start":46,"line_end":46,"column_start":1,"column_end":72}},{"value":"/ allocated in the heap. Invoking [`clone`][clone] on `Arc` produces","span":{"file_name":"src/liballoc/sync.rs","byte_start":727608,"byte_end":727678,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ a new `Arc` instance, which points to the same allocation on the heap as the","span":{"file_name":"src/liballoc/sync.rs","byte_start":727679,"byte_end":727759,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ source `Arc`, while increasing a reference count. When the last `Arc`","span":{"file_name":"src/liballoc/sync.rs","byte_start":727760,"byte_end":727833,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/ pointer to a given allocation is destroyed, the value stored in that allocation (often","span":{"file_name":"src/liballoc/sync.rs","byte_start":727834,"byte_end":727924,"line_start":50,"line_end":50,"column_start":1,"column_end":91}},{"value":"/ referred to as \"inner value\") is also dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":727925,"byte_end":727975,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727976,"byte_end":727979,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Shared references in Rust disallow mutation by default, and `Arc` is no","span":{"file_name":"src/liballoc/sync.rs","byte_start":727980,"byte_end":728055,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ exception: you cannot generally obtain a mutable reference to something","span":{"file_name":"src/liballoc/sync.rs","byte_start":728056,"byte_end":728131,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ inside an `Arc`. If you need to mutate through an `Arc`, use","span":{"file_name":"src/liballoc/sync.rs","byte_start":728132,"byte_end":728196,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ [`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]","span":{"file_name":"src/liballoc/sync.rs","byte_start":728197,"byte_end":728271,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ types.","span":{"file_name":"src/liballoc/sync.rs","byte_start":728272,"byte_end":728282,"line_start":57,"line_end":57,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":728283,"byte_end":728286,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ## Thread Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":728287,"byte_end":728307,"line_start":59,"line_end":59,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":728308,"byte_end":728311,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":728312,"byte_end":728383,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ counting. This means that it is thread-safe. The disadvantage is that","span":{"file_name":"src/liballoc/sync.rs","byte_start":728384,"byte_end":728457,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/ atomic operations are more expensive than ordinary memory accesses. If you","span":{"file_name":"src/liballoc/sync.rs","byte_start":728458,"byte_end":728536,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ are not sharing reference-counted allocations between threads, consider using","span":{"file_name":"src/liballoc/sync.rs","byte_start":728537,"byte_end":728618,"line_start":64,"line_end":64,"column_start":1,"column_end":82}},{"value":"/ [`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the","span":{"file_name":"src/liballoc/sync.rs","byte_start":728619,"byte_end":728693,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ compiler will catch any attempt to send an [`Rc<T>`] between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":728694,"byte_end":728767,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/ However, a library might choose `Arc<T>` in order to give library consumers","span":{"file_name":"src/liballoc/sync.rs","byte_start":728768,"byte_end":728847,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ more flexibility.","span":{"file_name":"src/liballoc/sync.rs","byte_start":728848,"byte_end":728869,"line_start":68,"line_end":68,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":728870,"byte_end":728873,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ `Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements","span":{"file_name":"src/liballoc/sync.rs","byte_start":728874,"byte_end":728953,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ [`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an","span":{"file_name":"src/liballoc/sync.rs","byte_start":728954,"byte_end":729031,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ `Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at","span":{"file_name":"src/liballoc/sync.rs","byte_start":729032,"byte_end":729107,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ first: after all, isn't the point of `Arc<T>` thread safety? The key is","span":{"file_name":"src/liballoc/sync.rs","byte_start":729108,"byte_end":729183,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ this: `Arc<T>` makes it thread safe to have multiple ownership of the same","span":{"file_name":"src/liballoc/sync.rs","byte_start":729184,"byte_end":729262,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ data, but it  doesn't add thread safety to its data. Consider","span":{"file_name":"src/liballoc/sync.rs","byte_start":729263,"byte_end":729328,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/ `Arc<`[`RefCell<T>`]`>`. [`RefCell<T>`] isn't [`Sync`], and if `Arc<T>` was always","span":{"file_name":"src/liballoc/sync.rs","byte_start":729329,"byte_end":729415,"line_start":76,"line_end":76,"column_start":1,"column_end":87}},{"value":"/ [`Send`], `Arc<`[`RefCell<T>`]`>` would be as well. But then we'd have a problem:","span":{"file_name":"src/liballoc/sync.rs","byte_start":729416,"byte_end":729501,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ [`RefCell<T>`] is not thread safe; it keeps track of the borrowing count using","span":{"file_name":"src/liballoc/sync.rs","byte_start":729502,"byte_end":729584,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ non-atomic operations.","span":{"file_name":"src/liballoc/sync.rs","byte_start":729585,"byte_end":729611,"line_start":79,"line_end":79,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729612,"byte_end":729615,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ In the end, this means that you may need to pair `Arc<T>` with some sort of","span":{"file_name":"src/liballoc/sync.rs","byte_start":729616,"byte_end":729695,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ [`std::sync`] type, usually [`Mutex<T>`][mutex].","span":{"file_name":"src/liballoc/sync.rs","byte_start":729696,"byte_end":729748,"line_start":82,"line_end":82,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729749,"byte_end":729752,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ## Breaking cycles with `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":729753,"byte_end":729787,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729788,"byte_end":729791,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ The [`downgrade`][downgrade] method can be used to create a non-owning","span":{"file_name":"src/liballoc/sync.rs","byte_start":729792,"byte_end":729866,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ [`Weak`][weak] pointer. A [`Weak`][weak] pointer can be [`upgrade`][upgrade]d","span":{"file_name":"src/liballoc/sync.rs","byte_start":729867,"byte_end":729948,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/ to an `Arc`, but this will return [`None`] if the value stored in the allocation has","span":{"file_name":"src/liballoc/sync.rs","byte_start":729949,"byte_end":730037,"line_start":88,"line_end":88,"column_start":1,"column_end":89}},{"value":"/ already been dropped. In other words, `Weak` pointers do not keep the value","span":{"file_name":"src/liballoc/sync.rs","byte_start":730038,"byte_end":730117,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ inside the allocation alive; however, they *do* keep the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":730118,"byte_end":730189,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ (the backing store for the value) alive.","span":{"file_name":"src/liballoc/sync.rs","byte_start":730190,"byte_end":730234,"line_start":91,"line_end":91,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730235,"byte_end":730238,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ A cycle between `Arc` pointers will never be deallocated. For this reason,","span":{"file_name":"src/liballoc/sync.rs","byte_start":730239,"byte_end":730317,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ [`Weak`][weak] is used to break cycles. For example, a tree could have","span":{"file_name":"src/liballoc/sync.rs","byte_start":730318,"byte_end":730392,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ strong `Arc` pointers from parent nodes to children, and [`Weak`][weak]","span":{"file_name":"src/liballoc/sync.rs","byte_start":730393,"byte_end":730468,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":730469,"byte_end":730518,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730519,"byte_end":730522,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Cloning references","span":{"file_name":"src/liballoc/sync.rs","byte_start":730523,"byte_end":730547,"line_start":98,"line_end":98,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730548,"byte_end":730551,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Creating a new reference from an existing reference counted pointer is done using the","span":{"file_name":"src/liballoc/sync.rs","byte_start":730552,"byte_end":730641,"line_start":100,"line_end":100,"column_start":1,"column_end":90}},{"value":"/ `Clone` trait implemented for [`Arc<T>`][arc] and [`Weak<T>`][weak].","span":{"file_name":"src/liballoc/sync.rs","byte_start":730642,"byte_end":730714,"line_start":101,"line_end":101,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730715,"byte_end":730718,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":730719,"byte_end":730726,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":730727,"byte_end":730750,"line_start":104,"line_end":104,"column_start":1,"column_end":24}},{"value":"/ let foo = Arc::new(vec![1.0, 2.0, 3.0]);","span":{"file_name":"src/liballoc/sync.rs","byte_start":730751,"byte_end":730795,"line_start":105,"line_end":105,"column_start":1,"column_end":45}},{"value":"/ // The two syntaxes below are equivalent.","span":{"file_name":"src/liballoc/sync.rs","byte_start":730796,"byte_end":730841,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ let a = foo.clone();","span":{"file_name":"src/liballoc/sync.rs","byte_start":730842,"byte_end":730866,"line_start":107,"line_end":107,"column_start":1,"column_end":25}},{"value":"/ let b = Arc::clone(&foo);","span":{"file_name":"src/liballoc/sync.rs","byte_start":730867,"byte_end":730896,"line_start":108,"line_end":108,"column_start":1,"column_end":30}},{"value":"/ // a, b, and foo are all Arcs that point to the same memory location","span":{"file_name":"src/liballoc/sync.rs","byte_start":730897,"byte_end":730969,"line_start":109,"line_end":109,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":730970,"byte_end":730977,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730978,"byte_end":730981,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ## `Deref` behavior","span":{"file_name":"src/liballoc/sync.rs","byte_start":730982,"byte_end":731005,"line_start":112,"line_end":112,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731006,"byte_end":731009,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),","span":{"file_name":"src/liballoc/sync.rs","byte_start":731010,"byte_end":731090,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/ so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name","span":{"file_name":"src/liballoc/sync.rs","byte_start":731091,"byte_end":731167,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/ clashes with `T`'s methods, the methods of `Arc<T>` itself are associated","span":{"file_name":"src/liballoc/sync.rs","byte_start":731168,"byte_end":731245,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/ functions, called using function-like syntax:","span":{"file_name":"src/liballoc/sync.rs","byte_start":731246,"byte_end":731295,"line_start":117,"line_end":117,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731296,"byte_end":731299,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":731300,"byte_end":731307,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":731308,"byte_end":731331,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let my_arc = Arc::new(());","span":{"file_name":"src/liballoc/sync.rs","byte_start":731332,"byte_end":731362,"line_start":121,"line_end":121,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731363,"byte_end":731366,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Arc::downgrade(&my_arc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":731367,"byte_end":731395,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":731396,"byte_end":731403,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731404,"byte_end":731407,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Weak<T>`][weak] does not auto-dereference to `T`, because the inner value may have","span":{"file_name":"src/liballoc/sync.rs","byte_start":731408,"byte_end":731496,"line_start":126,"line_end":126,"column_start":1,"column_end":89}},{"value":"/ already been dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":731497,"byte_end":731522,"line_start":127,"line_end":127,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731523,"byte_end":731526,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [arc]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731527,"byte_end":731553,"line_start":129,"line_end":129,"column_start":1,"column_end":27}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731554,"byte_end":731582,"line_start":130,"line_end":130,"column_start":1,"column_end":29}},{"value":"/ [`Rc<T>`]: ../../std/rc/struct.Rc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731583,"byte_end":731625,"line_start":131,"line_end":131,"column_start":1,"column_end":43}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":731626,"byte_end":731686,"line_start":132,"line_end":132,"column_start":1,"column_end":61}},{"value":"/ [mutex]: ../../std/sync/struct.Mutex.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731687,"byte_end":731732,"line_start":133,"line_end":133,"column_start":1,"column_end":46}},{"value":"/ [rwlock]: ../../std/sync/struct.RwLock.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731733,"byte_end":731780,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/ [atomic]: ../../std/sync/atomic/index.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731781,"byte_end":731827,"line_start":135,"line_end":135,"column_start":1,"column_end":47}},{"value":"/ [`Send`]: ../../std/marker/trait.Send.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731828,"byte_end":731874,"line_start":136,"line_end":136,"column_start":1,"column_end":47}},{"value":"/ [`Sync`]: ../../std/marker/trait.Sync.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731875,"byte_end":731921,"line_start":137,"line_end":137,"column_start":1,"column_end":47}},{"value":"/ [deref]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":731922,"byte_end":731965,"line_start":138,"line_end":138,"column_start":1,"column_end":44}},{"value":"/ [downgrade]: struct.Arc.html#method.downgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":731966,"byte_end":732015,"line_start":139,"line_end":139,"column_start":1,"column_end":50}},{"value":"/ [upgrade]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":732016,"byte_end":732062,"line_start":140,"line_end":140,"column_start":1,"column_end":47}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":732063,"byte_end":732123,"line_start":141,"line_end":141,"column_start":1,"column_end":61}},{"value":"/ [`RefCell<T>`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":732124,"byte_end":732178,"line_start":142,"line_end":142,"column_start":1,"column_end":55}},{"value":"/ [`std::sync`]: ../../std/sync/index.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":732179,"byte_end":732223,"line_start":143,"line_end":143,"column_start":1,"column_end":45}},{"value":"/ [`Arc::clone(&from)`]: #method.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":732224,"byte_end":732264,"line_start":144,"line_end":144,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732265,"byte_end":732268,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":732269,"byte_end":732283,"line_start":146,"line_end":146,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732284,"byte_end":732287,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ Sharing some immutable data between threads:","span":{"file_name":"src/liballoc/sync.rs","byte_start":732288,"byte_end":732336,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732337,"byte_end":732340,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/sync.rs","byte_start":732588,"byte_end":732601,"line_start":154,"line_end":154,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":732602,"byte_end":732625,"line_start":155,"line_end":155,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"src/liballoc/sync.rs","byte_start":732626,"byte_end":732646,"line_start":156,"line_end":156,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732647,"byte_end":732650,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":732651,"byte_end":732678,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732679,"byte_end":732682,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/sync.rs","byte_start":732683,"byte_end":732703,"line_start":160,"line_end":160,"column_start":1,"column_end":21}},{"value":"/     let five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":732704,"byte_end":732741,"line_start":161,"line_end":161,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732742,"byte_end":732745,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/     thread::spawn(move || {","span":{"file_name":"src/liballoc/sync.rs","byte_start":732746,"byte_end":732777,"line_start":163,"line_end":163,"column_start":1,"column_end":32}},{"value":"/         println!(\"{:?}\", five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":732778,"byte_end":732813,"line_start":164,"line_end":164,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"src/liballoc/sync.rs","byte_start":732814,"byte_end":732825,"line_start":165,"line_end":165,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":732826,"byte_end":732831,"line_start":166,"line_end":166,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":732832,"byte_end":732839,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732840,"byte_end":732843,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Sharing a mutable [`AtomicUsize`]:","span":{"file_name":"src/liballoc/sync.rs","byte_start":732844,"byte_end":732882,"line_start":169,"line_end":169,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732883,"byte_end":732886,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ [`AtomicUsize`]: ../../std/sync/atomic/struct.AtomicUsize.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":732887,"byte_end":732953,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732954,"byte_end":732957,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/sync.rs","byte_start":732958,"byte_end":732971,"line_start":173,"line_end":173,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":732972,"byte_end":732995,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"src/liballoc/sync.rs","byte_start":732996,"byte_end":733047,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ use std::thread;","span":{"file_name":"src/liballoc/sync.rs","byte_start":733048,"byte_end":733068,"line_start":176,"line_end":176,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733069,"byte_end":733072,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ let val = Arc::new(AtomicUsize::new(5));","span":{"file_name":"src/liballoc/sync.rs","byte_start":733073,"byte_end":733117,"line_start":178,"line_end":178,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733118,"byte_end":733121,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/sync.rs","byte_start":733122,"byte_end":733142,"line_start":180,"line_end":180,"column_start":1,"column_end":21}},{"value":"/     let val = Arc::clone(&val);","span":{"file_name":"src/liballoc/sync.rs","byte_start":733143,"byte_end":733178,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733179,"byte_end":733182,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/     thread::spawn(move || {","span":{"file_name":"src/liballoc/sync.rs","byte_start":733183,"byte_end":733214,"line_start":183,"line_end":183,"column_start":1,"column_end":32}},{"value":"/         let v = val.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"src/liballoc/sync.rs","byte_start":733215,"byte_end":733270,"line_start":184,"line_end":184,"column_start":1,"column_end":56}},{"value":"/         println!(\"{:?}\", v);","span":{"file_name":"src/liballoc/sync.rs","byte_start":733271,"byte_end":733303,"line_start":185,"line_end":185,"column_start":1,"column_end":33}},{"value":"/     });","span":{"file_name":"src/liballoc/sync.rs","byte_start":733304,"byte_end":733315,"line_start":186,"line_end":186,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":733316,"byte_end":733321,"line_start":187,"line_end":187,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":733322,"byte_end":733329,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733330,"byte_end":733333,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ See the [`rc` documentation][rc_examples] for more examples of reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":733334,"byte_end":733410,"line_start":190,"line_end":190,"column_start":1,"column_end":77}},{"value":"/ counting in general.","span":{"file_name":"src/liballoc/sync.rs","byte_start":733411,"byte_end":733435,"line_start":191,"line_end":191,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733436,"byte_end":733439,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [rc_examples]: ../../std/rc/index.html#examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":733440,"byte_end":733491,"line_start":193,"line_end":193,"column_start":1,"column_end":52}},{"value":"lang = \"arc\"","span":{"file_name":"src/liballoc/sync.rs","byte_start":733514,"byte_end":733526,"line_start":194,"line_end":194,"column_start":23,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":733529,"byte_end":733574,"line_start":195,"line_end":195,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3787},"span":{"file_name":"src/liballoc/sync.rs","byte_start":735888,"byte_end":735892,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"Weak","qualname":"::sync::Weak","value":"Weak {  }","parent":null,"children":[{"krate":0,"index":3789}],"decl_id":null,"docs":" `Weak` is a version of [`Arc`] that holds a non-owning reference to the\n managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\n pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.","sig":null,"attributes":[{"value":"/ `Weak` is a version of [`Arc`] that holds a non-owning reference to the","span":{"file_name":"src/liballoc/sync.rs","byte_start":734400,"byte_end":734475,"line_start":222,"line_end":222,"column_start":1,"column_end":76}},{"value":"/ managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":734476,"byte_end":734563,"line_start":223,"line_end":223,"column_start":1,"column_end":88}},{"value":"/ pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":734564,"byte_end":734621,"line_start":224,"line_end":224,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":734622,"byte_end":734625,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Since a `Weak` reference does not count towards ownership, it will not","span":{"file_name":"src/liballoc/sync.rs","byte_start":734626,"byte_end":734700,"line_start":226,"line_end":226,"column_start":1,"column_end":75}},{"value":"/ prevent the value stored in the allocation from being dropped, and `Weak` itself makes no","span":{"file_name":"src/liballoc/sync.rs","byte_start":734701,"byte_end":734794,"line_start":227,"line_end":227,"column_start":1,"column_end":94}},{"value":"/ guarantees about the value still being present. Thus it may return [`None`]","span":{"file_name":"src/liballoc/sync.rs","byte_start":734795,"byte_end":734874,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ when [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":734875,"byte_end":734964,"line_start":229,"line_end":229,"column_start":1,"column_end":90}},{"value":"/ itself (the backing store) from being deallocated.","span":{"file_name":"src/liballoc/sync.rs","byte_start":734965,"byte_end":735019,"line_start":230,"line_end":230,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735020,"byte_end":735023,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ A `Weak` pointer is useful for keeping a temporary reference to the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":735024,"byte_end":735106,"line_start":232,"line_end":232,"column_start":1,"column_end":83}},{"value":"/ managed by [`Arc`] without preventing its inner value from being dropped. It is also used to","span":{"file_name":"src/liballoc/sync.rs","byte_start":735107,"byte_end":735203,"line_start":233,"line_end":233,"column_start":1,"column_end":97}},{"value":"/ prevent circular references between [`Arc`] pointers, since mutual owning references","span":{"file_name":"src/liballoc/sync.rs","byte_start":735204,"byte_end":735292,"line_start":234,"line_end":234,"column_start":1,"column_end":89}},{"value":"/ would never allow either [`Arc`] to be dropped. For example, a tree could","span":{"file_name":"src/liballoc/sync.rs","byte_start":735293,"byte_end":735370,"line_start":235,"line_end":235,"column_start":1,"column_end":78}},{"value":"/ have strong [`Arc`] pointers from parent nodes to children, and `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":735371,"byte_end":735445,"line_start":236,"line_end":236,"column_start":1,"column_end":75}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":735446,"byte_end":735495,"line_start":237,"line_end":237,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735496,"byte_end":735499,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ The typical way to obtain a `Weak` pointer is to call [`Arc::downgrade`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":735500,"byte_end":735577,"line_start":239,"line_end":239,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735578,"byte_end":735581,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":735582,"byte_end":735610,"line_start":241,"line_end":241,"column_start":1,"column_end":29}},{"value":"/ [`Arc::downgrade`]: struct.Arc.html#method.downgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":735611,"byte_end":735667,"line_start":242,"line_end":242,"column_start":1,"column_end":57}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":735668,"byte_end":735716,"line_start":243,"line_end":243,"column_start":1,"column_end":49}},{"value":"/ [`Option`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":735717,"byte_end":735766,"line_start":244,"line_end":244,"column_start":1,"column_end":50}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":735767,"byte_end":735827,"line_start":245,"line_end":245,"column_start":1,"column_end":61}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":735828,"byte_end":735876,"line_start":246,"line_end":246,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3814},"span":{"file_name":"src/liballoc/sync.rs","byte_start":737659,"byte_end":737662,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"new","qualname":"<Arc<T>>::new","value":"fn (data: T) -> Arc<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":737426,"byte_end":737456,"line_start":288,"line_end":288,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":737461,"byte_end":737464,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":737469,"byte_end":737483,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":737488,"byte_end":737491,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":737496,"byte_end":737503,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":737508,"byte_end":737531,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":737536,"byte_end":737539,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":737544,"byte_end":737571,"line_start":295,"line_end":295,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":737576,"byte_end":737583,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":737588,"byte_end":737597,"line_start":297,"line_end":297,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":737602,"byte_end":737647,"line_start":298,"line_end":298,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3815},"span":{"file_name":"src/liballoc/sync.rs","byte_start":738648,"byte_end":738658,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Arc<T>>::new_uninit","value":"fn () -> Arc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc` with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc` with uninitialized contents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":738069,"byte_end":738124,"line_start":310,"line_end":310,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738129,"byte_end":738132,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":738137,"byte_end":738151,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738156,"byte_end":738159,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":738164,"byte_end":738171,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":738176,"byte_end":738203,"line_start":315,"line_end":315,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":738208,"byte_end":738242,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738247,"byte_end":738250,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":738255,"byte_end":738278,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738283,"byte_end":738286,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let mut five = Arc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/sync.rs","byte_start":738291,"byte_end":738335,"line_start":320,"line_end":320,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738340,"byte_end":738343,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":738348,"byte_end":738371,"line_start":322,"line_end":322,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":738376,"byte_end":738411,"line_start":323,"line_end":323,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":738416,"byte_end":738480,"line_start":324,"line_end":324,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738485,"byte_end":738488,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":738493,"byte_end":738519,"line_start":326,"line_end":326,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":738524,"byte_end":738530,"line_start":327,"line_end":327,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738535,"byte_end":738538,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/sync.rs","byte_start":738543,"byte_end":738567,"line_start":329,"line_end":329,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":738572,"byte_end":738579,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":738584,"byte_end":738636,"line_start":331,"line_end":331,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"src/liballoc/sync.rs","byte_start":739523,"byte_end":739533,"line_start":361,"line_end":361,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Arc<T>>::new_zeroed","value":"fn () -> Arc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/sync.rs","byte_start":738882,"byte_end":738953,"line_start":340,"line_end":340,"column_start":5,"column_end":76}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/sync.rs","byte_start":738958,"byte_end":738990,"line_start":341,"line_end":341,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":738995,"byte_end":738998,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage","span":{"file_name":"src/liballoc/sync.rs","byte_start":739003,"byte_end":739086,"line_start":343,"line_end":343,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"src/liballoc/sync.rs","byte_start":739091,"byte_end":739110,"line_start":344,"line_end":344,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739115,"byte_end":739118,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":739123,"byte_end":739137,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739142,"byte_end":739145,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":739150,"byte_end":739157,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":739162,"byte_end":739189,"line_start":349,"line_end":349,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739194,"byte_end":739197,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":739202,"byte_end":739225,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739230,"byte_end":739233,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ let zero = Arc::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/sync.rs","byte_start":739238,"byte_end":739278,"line_start":353,"line_end":353,"column_start":5,"column_end":45}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/sync.rs","byte_start":739283,"byte_end":739328,"line_start":354,"line_end":354,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739333,"byte_end":739336,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/sync.rs","byte_start":739341,"byte_end":739365,"line_start":356,"line_end":356,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":739370,"byte_end":739377,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":739382,"byte_end":739385,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/sync.rs","byte_start":739390,"byte_end":739454,"line_start":359,"line_end":359,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":739459,"byte_end":739511,"line_start":360,"line_end":360,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"src/liballoc/sync.rs","byte_start":739963,"byte_end":739966,"line_start":372,"line_end":372,"column_start":12,"column_end":15},"name":"pin","qualname":"<Arc<T>>::pin","value":"fn (data: T) -> Pin<Arc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n `data` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/sync.rs","byte_start":739763,"byte_end":739838,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ `data` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/sync.rs","byte_start":739843,"byte_end":739902,"line_start":370,"line_end":370,"column_start":5,"column_end":64}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":739907,"byte_end":739951,"line_start":371,"line_end":371,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3819},"span":{"file_name":"src/liballoc/sync.rs","byte_start":740759,"byte_end":740769,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Arc<T>>::try_unwrap","value":"fn (this: Self) -> Result<T, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner value, if the `Arc` has exactly one strong reference.","sig":null,"attributes":[{"value":"/ Returns the inner value, if the `Arc` has exactly one strong reference.","span":{"file_name":"src/liballoc/sync.rs","byte_start":740058,"byte_end":740133,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740138,"byte_end":740141,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Otherwise, an [`Err`][result] is returned with the same `Arc` that was","span":{"file_name":"src/liballoc/sync.rs","byte_start":740146,"byte_end":740220,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ passed in.","span":{"file_name":"src/liballoc/sync.rs","byte_start":740225,"byte_end":740239,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740244,"byte_end":740247,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This will succeed even if there are outstanding weak references.","span":{"file_name":"src/liballoc/sync.rs","byte_start":740252,"byte_end":740320,"line_start":381,"line_end":381,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740325,"byte_end":740328,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ [result]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":740333,"byte_end":740380,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740385,"byte_end":740388,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":740393,"byte_end":740407,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740412,"byte_end":740415,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":740420,"byte_end":740427,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":740432,"byte_end":740455,"line_start":388,"line_end":388,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740460,"byte_end":740463,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":740468,"byte_end":740492,"line_start":390,"line_end":390,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Arc::try_unwrap(x), Ok(3));","span":{"file_name":"src/liballoc/sync.rs","byte_start":740497,"byte_end":740539,"line_start":391,"line_end":391,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":740544,"byte_end":740547,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":740552,"byte_end":740576,"line_start":393,"line_end":393,"column_start":5,"column_end":29}},{"value":"/ let _y = Arc::clone(&x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":740581,"byte_end":740609,"line_start":394,"line_end":394,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(*Arc::try_unwrap(x).unwrap_err(), 4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":740614,"byte_end":740666,"line_start":395,"line_end":395,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":740671,"byte_end":740678,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":740683,"byte_end":740692,"line_start":397,"line_end":397,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":740697,"byte_end":740747,"line_start":398,"line_end":398,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"src/liballoc/sync.rs","byte_start":742099,"byte_end":742115,"line_start":444,"line_end":444,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Arc<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Arc<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new reference-counted slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new reference-counted slice with uninitialized contents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":741324,"byte_end":741397,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741402,"byte_end":741405,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":741410,"byte_end":741424,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741429,"byte_end":741432,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":741437,"byte_end":741444,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":741449,"byte_end":741476,"line_start":425,"line_end":425,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":741481,"byte_end":741515,"line_start":426,"line_end":426,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741520,"byte_end":741523,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":741528,"byte_end":741551,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741556,"byte_end":741559,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let mut values = Arc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":741564,"byte_end":741619,"line_start":430,"line_end":430,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741624,"byte_end":741627,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":741632,"byte_end":741657,"line_start":432,"line_end":432,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":741662,"byte_end":741697,"line_start":433,"line_end":433,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/sync.rs","byte_start":741702,"byte_end":741771,"line_start":434,"line_end":434,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/sync.rs","byte_start":741776,"byte_end":741845,"line_start":435,"line_end":435,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":741850,"byte_end":741919,"line_start":436,"line_end":436,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741924,"byte_end":741927,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":741932,"byte_end":741960,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":741965,"byte_end":741971,"line_start":439,"line_end":439,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":741976,"byte_end":741979,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/sync.rs","byte_start":741984,"byte_end":742018,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":742023,"byte_end":742030,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":742035,"byte_end":742087,"line_start":443,"line_end":443,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"src/liballoc/sync.rs","byte_start":743242,"byte_end":743253,"line_start":483,"line_end":483,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Arc<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Arc<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Arc<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Arc<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":742271,"byte_end":742296,"line_start":450,"line_end":450,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742301,"byte_end":742304,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":742309,"byte_end":742321,"line_start":452,"line_end":452,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742326,"byte_end":742329,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":742334,"byte_end":742375,"line_start":454,"line_end":454,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":742380,"byte_end":742440,"line_start":455,"line_end":455,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/sync.rs","byte_start":742445,"byte_end":742483,"line_start":456,"line_end":456,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/sync.rs","byte_start":742488,"byte_end":742550,"line_start":457,"line_end":457,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/sync.rs","byte_start":742555,"byte_end":742595,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742600,"byte_end":742603,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/sync.rs","byte_start":742608,"byte_end":742697,"line_start":460,"line_end":460,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742702,"byte_end":742705,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":742710,"byte_end":742724,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742729,"byte_end":742732,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":742737,"byte_end":742744,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":742749,"byte_end":742776,"line_start":465,"line_end":465,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":742781,"byte_end":742815,"line_start":466,"line_end":466,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742820,"byte_end":742823,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":742828,"byte_end":742851,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742856,"byte_end":742859,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let mut five = Arc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/sync.rs","byte_start":742864,"byte_end":742908,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":742913,"byte_end":742916,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":742921,"byte_end":742944,"line_start":472,"line_end":472,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":742949,"byte_end":742984,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":742989,"byte_end":743053,"line_start":474,"line_end":474,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743058,"byte_end":743061,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":743066,"byte_end":743092,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":743097,"byte_end":743103,"line_start":477,"line_end":477,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743108,"byte_end":743111,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/sync.rs","byte_start":743116,"byte_end":743140,"line_start":479,"line_end":479,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":743145,"byte_end":743152,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":743157,"byte_end":743209,"line_start":481,"line_end":481,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":743214,"byte_end":743223,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"src/liballoc/sync.rs","byte_start":744538,"byte_end":744549,"line_start":524,"line_end":524,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Arc<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Arc<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Arc<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Arc<[T]>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743387,"byte_end":743414,"line_start":489,"line_end":489,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743419,"byte_end":743422,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":743427,"byte_end":743439,"line_start":491,"line_end":491,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743444,"byte_end":743447,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":743452,"byte_end":743493,"line_start":493,"line_end":493,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":743498,"byte_end":743558,"line_start":494,"line_end":494,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743563,"byte_end":743601,"line_start":495,"line_end":495,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/sync.rs","byte_start":743606,"byte_end":743668,"line_start":496,"line_end":496,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743673,"byte_end":743713,"line_start":497,"line_end":497,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743718,"byte_end":743721,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/sync.rs","byte_start":743726,"byte_end":743815,"line_start":499,"line_end":499,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743820,"byte_end":743823,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":743828,"byte_end":743842,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743847,"byte_end":743850,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":743855,"byte_end":743862,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":743867,"byte_end":743894,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":743899,"byte_end":743933,"line_start":505,"line_end":505,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743938,"byte_end":743941,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":743946,"byte_end":743969,"line_start":507,"line_end":507,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743974,"byte_end":743977,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ let mut values = Arc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":743982,"byte_end":744037,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744042,"byte_end":744045,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":744050,"byte_end":744075,"line_start":511,"line_end":511,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":744080,"byte_end":744115,"line_start":512,"line_end":512,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744120,"byte_end":744189,"line_start":513,"line_end":513,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744194,"byte_end":744263,"line_start":514,"line_end":514,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744268,"byte_end":744337,"line_start":515,"line_end":515,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744342,"byte_end":744345,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":744350,"byte_end":744378,"line_start":517,"line_end":517,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":744383,"byte_end":744389,"line_start":518,"line_end":518,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744394,"byte_end":744397,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/sync.rs","byte_start":744402,"byte_end":744436,"line_start":520,"line_end":520,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":744441,"byte_end":744448,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":744453,"byte_end":744505,"line_start":522,"line_end":522,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":744510,"byte_end":744519,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"src/liballoc/sync.rs","byte_start":745213,"byte_end":745221,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Arc<T>>::into_raw","value":"fn (this: Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Arc`, returning the wrapped pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Arc`, returning the wrapped pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":744678,"byte_end":744732,"line_start":530,"line_end":530,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744737,"byte_end":744740,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ To avoid a memory leak the pointer must be converted back to an `Arc` using","span":{"file_name":"src/liballoc/sync.rs","byte_start":744745,"byte_end":744824,"line_start":532,"line_end":532,"column_start":5,"column_end":84}},{"value":"/ [`Arc::from_raw`][from_raw].","span":{"file_name":"src/liballoc/sync.rs","byte_start":744829,"byte_end":744861,"line_start":533,"line_end":533,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744866,"byte_end":744869,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ [from_raw]: struct.Arc.html#method.from_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":744874,"byte_end":744921,"line_start":535,"line_end":535,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744926,"byte_end":744929,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":744934,"byte_end":744948,"line_start":537,"line_end":537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744953,"byte_end":744956,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":744961,"byte_end":744968,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":744973,"byte_end":744996,"line_start":540,"line_end":540,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":745001,"byte_end":745004,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":745009,"byte_end":745050,"line_start":542,"line_end":542,"column_start":5,"column_end":46}},{"value":"/ let x_ptr = Arc::into_raw(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":745055,"byte_end":745088,"line_start":543,"line_end":543,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(unsafe { &*x_ptr }, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":745093,"byte_end":745137,"line_start":544,"line_end":544,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":745142,"byte_end":745149,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":745154,"byte_end":745201,"line_start":546,"line_end":546,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3832},"span":{"file_name":"src/liballoc/sync.rs","byte_start":746935,"byte_end":746943,"line_start":592,"line_end":592,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Arc<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an `Arc` from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs an `Arc` from a raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":745910,"byte_end":745953,"line_start":563,"line_end":563,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":745958,"byte_end":745961,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ The raw pointer must have been previously returned by a call to a","span":{"file_name":"src/liballoc/sync.rs","byte_start":745966,"byte_end":746035,"line_start":565,"line_end":565,"column_start":5,"column_end":74}},{"value":"/ [`Arc::into_raw`][into_raw].","span":{"file_name":"src/liballoc/sync.rs","byte_start":746040,"byte_end":746072,"line_start":566,"line_end":566,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746077,"byte_end":746080,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to memory problems. For example, a","span":{"file_name":"src/liballoc/sync.rs","byte_start":746085,"byte_end":746177,"line_start":568,"line_end":568,"column_start":5,"column_end":97}},{"value":"/ double-free may occur if the function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":746182,"byte_end":746264,"line_start":569,"line_end":569,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746269,"byte_end":746272,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ [into_raw]: struct.Arc.html#method.into_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":746277,"byte_end":746324,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746329,"byte_end":746332,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":746337,"byte_end":746351,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746356,"byte_end":746359,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":746364,"byte_end":746371,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":746376,"byte_end":746399,"line_start":576,"line_end":576,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746404,"byte_end":746407,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":746412,"byte_end":746453,"line_start":578,"line_end":578,"column_start":5,"column_end":46}},{"value":"/ let x_ptr = Arc::into_raw(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":746458,"byte_end":746491,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746496,"byte_end":746499,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":746504,"byte_end":746516,"line_start":581,"line_end":581,"column_start":5,"column_end":17}},{"value":"/     // Convert back to an `Arc` to prevent leak.","span":{"file_name":"src/liballoc/sync.rs","byte_start":746521,"byte_end":746573,"line_start":582,"line_end":582,"column_start":5,"column_end":57}},{"value":"/     let x = Arc::from_raw(x_ptr);","span":{"file_name":"src/liballoc/sync.rs","byte_start":746578,"byte_end":746615,"line_start":583,"line_end":583,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(&*x, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":746620,"byte_end":746653,"line_start":584,"line_end":584,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746658,"byte_end":746661,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/     // Further calls to `Arc::from_raw(x_ptr)` would be memory-unsafe.","span":{"file_name":"src/liballoc/sync.rs","byte_start":746666,"byte_end":746740,"line_start":586,"line_end":586,"column_start":5,"column_end":79}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":746745,"byte_end":746750,"line_start":587,"line_end":587,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":746755,"byte_end":746758,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!","span":{"file_name":"src/liballoc/sync.rs","byte_start":746763,"byte_end":746852,"line_start":589,"line_end":589,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":746857,"byte_end":746864,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":746869,"byte_end":746916,"line_start":591,"line_end":591,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3833},"span":{"file_name":"src/liballoc/sync.rs","byte_start":747722,"byte_end":747739,"line_start":618,"line_end":618,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Arc<T>>::into_raw_non_null","value":"fn (this: Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":747242,"byte_end":747312,"line_start":602,"line_end":602,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747317,"byte_end":747320,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":747325,"byte_end":747339,"line_start":604,"line_end":604,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747344,"byte_end":747347,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":747352,"byte_end":747359,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ #![feature(rc_into_raw_non_null)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":747364,"byte_end":747401,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747406,"byte_end":747409,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":747414,"byte_end":747437,"line_start":609,"line_end":609,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747442,"byte_end":747445,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":747450,"byte_end":747491,"line_start":611,"line_end":611,"column_start":5,"column_end":46}},{"value":"/ let ptr = Arc::into_raw_non_null(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":747496,"byte_end":747536,"line_start":612,"line_end":612,"column_start":5,"column_end":45}},{"value":"/ let deref = unsafe { ptr.as_ref() };","span":{"file_name":"src/liballoc/sync.rs","byte_start":747541,"byte_end":747581,"line_start":613,"line_end":613,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(deref, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":747586,"byte_end":747617,"line_start":614,"line_end":614,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":747622,"byte_end":747629,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":747634,"byte_end":747696,"line_start":616,"line_end":616,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":747701,"byte_end":747710,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"src/liballoc/sync.rs","byte_start":748263,"byte_end":748272,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Arc<T>>::downgrade","value":"fn (this: &Self) -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Weak`][weak] pointer to this allocation.","sig":null,"attributes":[{"value":"/ Creates a new [`Weak`][weak] pointer to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":747915,"byte_end":747975,"line_start":623,"line_end":623,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747980,"byte_end":747983,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":747988,"byte_end":748016,"line_start":625,"line_end":625,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748021,"byte_end":748024,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":748029,"byte_end":748043,"line_start":627,"line_end":627,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748048,"byte_end":748051,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":748056,"byte_end":748063,"line_start":629,"line_end":629,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":748068,"byte_end":748091,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748096,"byte_end":748099,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":748104,"byte_end":748131,"line_start":632,"line_end":632,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748136,"byte_end":748139,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":748144,"byte_end":748186,"line_start":634,"line_end":634,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":748191,"byte_end":748198,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":748203,"byte_end":748251,"line_start":636,"line_end":636,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3835},"span":{"file_name":"src/liballoc/sync.rs","byte_start":750270,"byte_end":750280,"line_start":691,"line_end":691,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Arc<T>>::weak_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of [`Weak`][weak] pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of [`Weak`][weak] pointers to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":749472,"byte_end":749538,"line_start":667,"line_end":667,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749543,"byte_end":749546,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":749551,"byte_end":749579,"line_start":669,"line_end":669,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749584,"byte_end":749587,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":749592,"byte_end":749604,"line_start":671,"line_end":671,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749609,"byte_end":749612,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ This method by itself is safe, but using it correctly requires extra care.","span":{"file_name":"src/liballoc/sync.rs","byte_start":749617,"byte_end":749695,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/ Another thread can change the weak count at any time,","span":{"file_name":"src/liballoc/sync.rs","byte_start":749700,"byte_end":749757,"line_start":674,"line_end":674,"column_start":5,"column_end":62}},{"value":"/ including potentially between calling this method and acting on the result.","span":{"file_name":"src/liballoc/sync.rs","byte_start":749762,"byte_end":749841,"line_start":675,"line_end":675,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749846,"byte_end":749849,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":749854,"byte_end":749868,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749873,"byte_end":749876,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":749881,"byte_end":749888,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":749893,"byte_end":749916,"line_start":680,"line_end":680,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749921,"byte_end":749924,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":749929,"byte_end":749956,"line_start":682,"line_end":682,"column_start":5,"column_end":32}},{"value":"/ let _weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":749961,"byte_end":750004,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750009,"byte_end":750012,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ // This assertion is deterministic because we haven't shared","span":{"file_name":"src/liballoc/sync.rs","byte_start":750017,"byte_end":750081,"line_start":685,"line_end":685,"column_start":5,"column_end":69}},{"value":"/ // the `Arc` or `Weak` between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":750086,"byte_end":750129,"line_start":686,"line_end":686,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(1, Arc::weak_count(&five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":750134,"byte_end":750176,"line_start":687,"line_end":687,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":750181,"byte_end":750188,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":750193,"byte_end":750202,"line_start":689,"line_end":689,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":750207,"byte_end":750258,"line_start":690,"line_end":690,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3836},"span":{"file_name":"src/liballoc/sync.rs","byte_start":751284,"byte_end":751296,"line_start":720,"line_end":720,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Arc<T>>::strong_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Arc`) pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Arc`) pointers to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":750537,"byte_end":750603,"line_start":698,"line_end":698,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750608,"byte_end":750611,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":750616,"byte_end":750628,"line_start":700,"line_end":700,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750633,"byte_end":750636,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ This method by itself is safe, but using it correctly requires extra care.","span":{"file_name":"src/liballoc/sync.rs","byte_start":750641,"byte_end":750719,"line_start":702,"line_end":702,"column_start":5,"column_end":83}},{"value":"/ Another thread can change the strong count at any time,","span":{"file_name":"src/liballoc/sync.rs","byte_start":750724,"byte_end":750783,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/ including potentially between calling this method and acting on the result.","span":{"file_name":"src/liballoc/sync.rs","byte_start":750788,"byte_end":750867,"line_start":704,"line_end":704,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750872,"byte_end":750875,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":750880,"byte_end":750894,"line_start":706,"line_end":706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750899,"byte_end":750902,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":750907,"byte_end":750914,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":750919,"byte_end":750942,"line_start":709,"line_end":709,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":750947,"byte_end":750950,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":750955,"byte_end":750982,"line_start":711,"line_end":711,"column_start":5,"column_end":32}},{"value":"/ let _also_five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":750987,"byte_end":751026,"line_start":712,"line_end":712,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":751031,"byte_end":751034,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ // This assertion is deterministic because we haven't shared","span":{"file_name":"src/liballoc/sync.rs","byte_start":751039,"byte_end":751103,"line_start":714,"line_end":714,"column_start":5,"column_end":69}},{"value":"/ // the `Arc` between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":751108,"byte_end":751141,"line_start":715,"line_end":715,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(2, Arc::strong_count(&five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":751146,"byte_end":751190,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":751195,"byte_end":751202,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":751207,"byte_end":751216,"line_start":718,"line_end":718,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":751221,"byte_end":751272,"line_start":719,"line_end":719,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3839},"span":{"file_name":"src/liballoc/sync.rs","byte_start":752857,"byte_end":752863,"line_start":766,"line_end":766,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Arc<T>>::ptr_eq","value":"fn (this: &Self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Arc`s point to the same allocation\n (in a vein similar to [`ptr::eq`]).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":752300,"byte_end":752309,"line_start":747,"line_end":747,"column_start":5,"column_end":14}},{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":752314,"byte_end":752361,"line_start":748,"line_end":748,"column_start":5,"column_end":52}},{"value":"/ Returns `true` if the two `Arc`s point to the same allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":752366,"byte_end":752431,"line_start":749,"line_end":749,"column_start":5,"column_end":70}},{"value":"/ (in a vein similar to [`ptr::eq`]).","span":{"file_name":"src/liballoc/sync.rs","byte_start":752436,"byte_end":752475,"line_start":750,"line_end":750,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":752480,"byte_end":752483,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":752488,"byte_end":752502,"line_start":752,"line_end":752,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":752507,"byte_end":752510,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":752515,"byte_end":752522,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":752527,"byte_end":752550,"line_start":755,"line_end":755,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":752555,"byte_end":752558,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":752563,"byte_end":752590,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/ let same_five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":752595,"byte_end":752633,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/ let other_five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":752638,"byte_end":752671,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":752676,"byte_end":752679,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ assert!(Arc::ptr_eq(&five, &same_five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":752684,"byte_end":752728,"line_start":761,"line_end":761,"column_start":5,"column_end":49}},{"value":"/ assert!(!Arc::ptr_eq(&five, &other_five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":752733,"byte_end":752779,"line_start":762,"line_end":762,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":752784,"byte_end":752791,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":752796,"byte_end":752799,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":752804,"byte_end":752845,"line_start":765,"line_end":765,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3871},"span":{"file_name":"src/liballoc/sync.rs","byte_start":757864,"byte_end":757874,"line_start":909,"line_end":909,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::sync::ArcFromSlice::from_slice","value":"fn (slice: &[T]) -> Self","parent":{"krate":0,"index":3869},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3889},"span":{"file_name":"src/liballoc/sync.rs","byte_start":761894,"byte_end":761902,"line_start":1025,"line_end":1025,"column_start":12,"column_end":20},"name":"make_mut","qualname":"<Arc<T>>::make_mut","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Makes a mutable reference into the given `Arc`.","sig":null,"attributes":[{"value":"/ Makes a mutable reference into the given `Arc`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":760407,"byte_end":760458,"line_start":990,"line_end":990,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760463,"byte_end":760466,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ If there are other `Arc` or [`Weak`][weak] pointers to the same allocation,","span":{"file_name":"src/liballoc/sync.rs","byte_start":760471,"byte_end":760550,"line_start":992,"line_end":992,"column_start":5,"column_end":84}},{"value":"/ then `make_mut` will create a new allocation and invoke [`clone`][clone] on the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":760555,"byte_end":760650,"line_start":993,"line_end":993,"column_start":5,"column_end":100}},{"value":"/ to ensure unique ownership. This is also referred to as clone-on-write.","span":{"file_name":"src/liballoc/sync.rs","byte_start":760655,"byte_end":760730,"line_start":994,"line_end":994,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760735,"byte_end":760738,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Note that this differs from the behavior of [`Rc::make_mut`] which disassociates","span":{"file_name":"src/liballoc/sync.rs","byte_start":760743,"byte_end":760827,"line_start":996,"line_end":996,"column_start":5,"column_end":89}},{"value":"/ any remaining `Weak` pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":760832,"byte_end":760866,"line_start":997,"line_end":997,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760871,"byte_end":760874,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`][get_mut], which will fail rather than cloning.","span":{"file_name":"src/liballoc/sync.rs","byte_start":760879,"byte_end":760950,"line_start":999,"line_end":999,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760955,"byte_end":760958,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":760963,"byte_end":760991,"line_start":1001,"line_end":1001,"column_start":5,"column_end":33}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":760996,"byte_end":761056,"line_start":1002,"line_end":1002,"column_start":5,"column_end":65}},{"value":"/ [get_mut]: struct.Arc.html#method.get_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":761061,"byte_end":761106,"line_start":1003,"line_end":1003,"column_start":5,"column_end":50}},{"value":"/ [`Rc::make_mut`]: ../rc/struct.Rc.html#method.make_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":761111,"byte_end":761169,"line_start":1004,"line_end":1004,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761174,"byte_end":761177,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":761182,"byte_end":761196,"line_start":1006,"line_end":1006,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761201,"byte_end":761204,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":761209,"byte_end":761216,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":761221,"byte_end":761244,"line_start":1009,"line_end":1009,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761249,"byte_end":761252,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ let mut data = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761257,"byte_end":761288,"line_start":1011,"line_end":1011,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761293,"byte_end":761296,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":761301,"byte_end":761368,"line_start":1013,"line_end":1013,"column_start":5,"column_end":72}},{"value":"/ let mut other_data = Arc::clone(&data); // Won't clone inner data","span":{"file_name":"src/liballoc/sync.rs","byte_start":761373,"byte_end":761442,"line_start":1014,"line_end":1014,"column_start":5,"column_end":74}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Clones inner data","span":{"file_name":"src/liballoc/sync.rs","byte_start":761447,"byte_end":761511,"line_start":1015,"line_end":1015,"column_start":5,"column_end":69}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":761516,"byte_end":761583,"line_start":1016,"line_end":1016,"column_start":5,"column_end":72}},{"value":"/ *Arc::make_mut(&mut other_data) *= 2;   // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":761588,"byte_end":761655,"line_start":1017,"line_end":1017,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761660,"byte_end":761663,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ // Now `data` and `other_data` point to different allocations.","span":{"file_name":"src/liballoc/sync.rs","byte_start":761668,"byte_end":761734,"line_start":1019,"line_end":1019,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(*data, 8);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761739,"byte_end":761764,"line_start":1020,"line_end":1020,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*other_data, 12);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761769,"byte_end":761801,"line_start":1021,"line_end":1021,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":761806,"byte_end":761813,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":761818,"byte_end":761827,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":761832,"byte_end":761882,"line_start":1024,"line_end":1024,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3892},"span":{"file_name":"src/liballoc/sync.rs","byte_start":765353,"byte_end":765360,"line_start":1105,"line_end":1105,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Arc<T>>::get_mut","value":"fn (this: &mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Arc`, if there are\n no other `Arc` or [`Weak`][weak] pointers to the same allocation.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Arc`, if there are","span":{"file_name":"src/liballoc/sync.rs","byte_start":764392,"byte_end":764458,"line_start":1077,"line_end":1077,"column_start":5,"column_end":71}},{"value":"/ no other `Arc` or [`Weak`][weak] pointers to the same allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":764463,"byte_end":764532,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":764537,"byte_end":764540,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`][option] otherwise, because it is not safe to","span":{"file_name":"src/liballoc/sync.rs","byte_start":764545,"byte_end":764610,"line_start":1080,"line_end":1080,"column_start":5,"column_end":70}},{"value":"/ mutate a shared value.","span":{"file_name":"src/liballoc/sync.rs","byte_start":764615,"byte_end":764641,"line_start":1081,"line_end":1081,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":764646,"byte_end":764649,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ See also [`make_mut`][make_mut], which will [`clone`][clone]","span":{"file_name":"src/liballoc/sync.rs","byte_start":764654,"byte_end":764718,"line_start":1083,"line_end":1083,"column_start":5,"column_end":69}},{"value":"/ the inner value when there are other pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":764723,"byte_end":764773,"line_start":1084,"line_end":1084,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":764778,"byte_end":764781,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":764786,"byte_end":764814,"line_start":1086,"line_end":1086,"column_start":5,"column_end":33}},{"value":"/ [option]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":764819,"byte_end":764866,"line_start":1087,"line_end":1087,"column_start":5,"column_end":52}},{"value":"/ [make_mut]: struct.Arc.html#method.make_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":764871,"byte_end":764918,"line_start":1088,"line_end":1088,"column_start":5,"column_end":52}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":764923,"byte_end":764983,"line_start":1089,"line_end":1089,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":764988,"byte_end":764991,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":764996,"byte_end":765010,"line_start":1091,"line_end":1091,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765015,"byte_end":765018,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":765023,"byte_end":765030,"line_start":1093,"line_end":1093,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":765035,"byte_end":765058,"line_start":1094,"line_end":1094,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765063,"byte_end":765066,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ let mut x = Arc::new(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765071,"byte_end":765099,"line_start":1096,"line_end":1096,"column_start":5,"column_end":33}},{"value":"/ *Arc::get_mut(&mut x).unwrap() = 4;","span":{"file_name":"src/liballoc/sync.rs","byte_start":765104,"byte_end":765143,"line_start":1097,"line_end":1097,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(*x, 4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765148,"byte_end":765170,"line_start":1098,"line_end":1098,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765175,"byte_end":765178,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ let _y = Arc::clone(&x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765183,"byte_end":765211,"line_start":1100,"line_end":1100,"column_start":5,"column_end":33}},{"value":"/ assert!(Arc::get_mut(&mut x).is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":765216,"byte_end":765260,"line_start":1101,"line_end":1101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":765265,"byte_end":765272,"line_start":1102,"line_end":1102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":765277,"byte_end":765286,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":765291,"byte_end":765341,"line_start":1104,"line_end":1104,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3893},"span":{"file_name":"src/liballoc/sync.rs","byte_start":766818,"byte_end":766835,"line_start":1147,"line_end":1147,"column_start":19,"column_end":36},"name":"get_mut_unchecked","qualname":"<Arc<T>>::get_mut_unchecked","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Arc`,\n without any check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Arc`,","span":{"file_name":"src/liballoc/sync.rs","byte_start":765909,"byte_end":765962,"line_start":1118,"line_end":1118,"column_start":5,"column_end":58}},{"value":"/ without any check.","span":{"file_name":"src/liballoc/sync.rs","byte_start":765967,"byte_end":765989,"line_start":1119,"line_end":1119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765994,"byte_end":765997,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which is safe and does appropriate checks.","span":{"file_name":"src/liballoc/sync.rs","byte_start":766002,"byte_end":766070,"line_start":1121,"line_end":1121,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766075,"byte_end":766078,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: struct.Arc.html#method.get_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":766083,"byte_end":766130,"line_start":1123,"line_end":1123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766135,"byte_end":766138,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":766143,"byte_end":766155,"line_start":1125,"line_end":1125,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766160,"byte_end":766163,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Any other `Arc` or [`Weak`] pointers to the same allocation must not be dereferenced","span":{"file_name":"src/liballoc/sync.rs","byte_start":766168,"byte_end":766256,"line_start":1127,"line_end":1127,"column_start":5,"column_end":93}},{"value":"/ for the duration of the returned borrow.","span":{"file_name":"src/liballoc/sync.rs","byte_start":766261,"byte_end":766305,"line_start":1128,"line_end":1128,"column_start":5,"column_end":49}},{"value":"/ This is trivially the case if no such pointers exist,","span":{"file_name":"src/liballoc/sync.rs","byte_start":766310,"byte_end":766367,"line_start":1129,"line_end":1129,"column_start":5,"column_end":62}},{"value":"/ for example immediately after `Arc::new`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":766372,"byte_end":766417,"line_start":1130,"line_end":1130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766422,"byte_end":766425,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":766430,"byte_end":766444,"line_start":1132,"line_end":1132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766449,"byte_end":766452,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":766457,"byte_end":766464,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":766469,"byte_end":766503,"line_start":1135,"line_end":1135,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766508,"byte_end":766511,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":766516,"byte_end":766539,"line_start":1137,"line_end":1137,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766544,"byte_end":766547,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ let mut x = Arc::new(String::new());","span":{"file_name":"src/liballoc/sync.rs","byte_start":766552,"byte_end":766592,"line_start":1139,"line_end":1139,"column_start":5,"column_end":45}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":766597,"byte_end":766609,"line_start":1140,"line_end":1140,"column_start":5,"column_end":17}},{"value":"/     Arc::get_mut_unchecked(&mut x).push_str(\"foo\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":766614,"byte_end":766668,"line_start":1141,"line_end":1141,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":766673,"byte_end":766678,"line_start":1142,"line_end":1142,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(*x, \"foo\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":766683,"byte_end":766709,"line_start":1143,"line_end":1143,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":766714,"byte_end":766721,"line_start":1144,"line_end":1144,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":766726,"byte_end":766735,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"get_mut_unchecked\", issue = \"63292\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":766740,"byte_end":766799,"line_start":1146,"line_end":1146,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3899},"span":{"file_name":"src/liballoc/sync.rs","byte_start":771937,"byte_end":771945,"line_start":1275,"line_end":1275,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Arc<Any + Send + Sync>>::downcast","value":"fn <T> (self) -> Result<Arc<T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":771295,"byte_end":771304,"line_start":1255,"line_end":1255,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_downcast\", since = \"1.29.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":771309,"byte_end":771361,"line_start":1256,"line_end":1256,"column_start":5,"column_end":57}},{"value":"/ Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.","span":{"file_name":"src/liballoc/sync.rs","byte_start":771366,"byte_end":771442,"line_start":1257,"line_end":1257,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":771447,"byte_end":771450,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":771455,"byte_end":771469,"line_start":1259,"line_end":1259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":771474,"byte_end":771477,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":771482,"byte_end":771489,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/sync.rs","byte_start":771494,"byte_end":771516,"line_start":1262,"line_end":1262,"column_start":5,"column_end":27}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":771521,"byte_end":771544,"line_start":1263,"line_end":1263,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":771549,"byte_end":771552,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Arc<dyn Any + Send + Sync>) {","span":{"file_name":"src/liballoc/sync.rs","byte_start":771557,"byte_end":771616,"line_start":1265,"line_end":1265,"column_start":5,"column_end":64}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/sync.rs","byte_start":771621,"byte_end":771677,"line_start":1266,"line_end":1266,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/sync.rs","byte_start":771682,"byte_end":771744,"line_start":1267,"line_end":1267,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/sync.rs","byte_start":771749,"byte_end":771758,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":771763,"byte_end":771768,"line_start":1269,"line_end":1269,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":771773,"byte_end":771776,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/sync.rs","byte_start":771781,"byte_end":771827,"line_start":1271,"line_end":1271,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Arc::new(my_string));","span":{"file_name":"src/liballoc/sync.rs","byte_start":771832,"byte_end":771873,"line_start":1272,"line_end":1272,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Arc::new(0i8));","span":{"file_name":"src/liballoc/sync.rs","byte_start":771878,"byte_end":771913,"line_start":1273,"line_end":1273,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":771918,"byte_end":771925,"line_start":1274,"line_end":1274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3903},"span":{"file_name":"src/liballoc/sync.rs","byte_start":772784,"byte_end":772787,"line_start":1305,"line_end":1305,"column_start":12,"column_end":15},"name":"new","qualname":"<Weak<T>>::new","value":"fn () -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Weak<T>`, without allocating any memory.\n Calling [`upgrade`] on the return value always gives [`None`].","sig":null,"attributes":[{"value":"/ Constructs a new `Weak<T>`, without allocating any memory.","span":{"file_name":"src/liballoc/sync.rs","byte_start":772268,"byte_end":772330,"line_start":1290,"line_end":1290,"column_start":5,"column_end":67}},{"value":"/ Calling [`upgrade`] on the return value always gives [`None`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":772335,"byte_end":772401,"line_start":1291,"line_end":1291,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":772406,"byte_end":772409,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":772414,"byte_end":772462,"line_start":1293,"line_end":1293,"column_start":5,"column_end":53}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":772467,"byte_end":772527,"line_start":1294,"line_end":1294,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":772532,"byte_end":772535,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":772540,"byte_end":772554,"line_start":1296,"line_end":1296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":772559,"byte_end":772562,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":772567,"byte_end":772574,"line_start":1298,"line_end":1298,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Weak;","span":{"file_name":"src/liballoc/sync.rs","byte_start":772579,"byte_end":772603,"line_start":1299,"line_end":1299,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":772608,"byte_end":772611,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ let empty: Weak<i64> = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":772616,"byte_end":772655,"line_start":1301,"line_end":1301,"column_start":5,"column_end":44}},{"value":"/ assert!(empty.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":772660,"byte_end":772699,"line_start":1302,"line_end":1302,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":772704,"byte_end":772711,"line_start":1303,"line_end":1303,"column_start":5,"column_end":12}},{"value":"stable(feature = \"downgraded_weak\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":772716,"byte_end":772772,"line_start":1304,"line_end":1304,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3904},"span":{"file_name":"src/liballoc/sync.rs","byte_start":773943,"byte_end":773949,"line_start":1337,"line_end":1337,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<Weak<T>>::as_raw","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":772904,"byte_end":772977,"line_start":1309,"line_end":1309,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":772982,"byte_end":772985,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only if there are some strong references. The pointer may be dangling","span":{"file_name":"src/liballoc/sync.rs","byte_start":772990,"byte_end":773084,"line_start":1311,"line_end":1311,"column_start":5,"column_end":99}},{"value":"/ or even [`null`] otherwise.","span":{"file_name":"src/liballoc/sync.rs","byte_start":773089,"byte_end":773120,"line_start":1312,"line_end":1312,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773125,"byte_end":773128,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":773133,"byte_end":773147,"line_start":1314,"line_end":1314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773152,"byte_end":773155,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":773160,"byte_end":773167,"line_start":1316,"line_end":1316,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":773172,"byte_end":773202,"line_start":1317,"line_end":1317,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773207,"byte_end":773210,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":773215,"byte_end":773238,"line_start":1319,"line_end":1319,"column_start":5,"column_end":28}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/sync.rs","byte_start":773243,"byte_end":773260,"line_start":1320,"line_end":1320,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773265,"byte_end":773268,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":773273,"byte_end":773319,"line_start":1322,"line_end":1322,"column_start":5,"column_end":51}},{"value":"/ let weak = Arc::downgrade(&strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":773324,"byte_end":773363,"line_start":1323,"line_end":1323,"column_start":5,"column_end":44}},{"value":"/ // Both point to the same object","span":{"file_name":"src/liballoc/sync.rs","byte_start":773368,"byte_end":773404,"line_start":1324,"line_end":1324,"column_start":5,"column_end":41}},{"value":"/ assert!(ptr::eq(&*strong, weak.as_raw()));","span":{"file_name":"src/liballoc/sync.rs","byte_start":773409,"byte_end":773455,"line_start":1325,"line_end":1325,"column_start":5,"column_end":51}},{"value":"/ // The strong here keeps it alive, so we can still access the object.","span":{"file_name":"src/liballoc/sync.rs","byte_start":773460,"byte_end":773533,"line_start":1326,"line_end":1326,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/sync.rs","byte_start":773538,"byte_end":773590,"line_start":1327,"line_end":1327,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773595,"byte_end":773598,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":773603,"byte_end":773620,"line_start":1329,"line_end":1329,"column_start":5,"column_end":22}},{"value":"/ // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to","span":{"file_name":"src/liballoc/sync.rs","byte_start":773625,"byte_end":773714,"line_start":1330,"line_end":1330,"column_start":5,"column_end":94}},{"value":"/ // undefined behaviour.","span":{"file_name":"src/liballoc/sync.rs","byte_start":773719,"byte_end":773746,"line_start":1331,"line_end":1331,"column_start":5,"column_end":32}},{"value":"/ // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/sync.rs","byte_start":773751,"byte_end":773806,"line_start":1332,"line_end":1332,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":773811,"byte_end":773818,"line_start":1333,"line_end":1333,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":773823,"byte_end":773826,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ [`null`]: ../../std/ptr/fn.null.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":773831,"byte_end":773871,"line_start":1335,"line_end":1335,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":773876,"byte_end":773931,"line_start":1336,"line_end":1336,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3905},"span":{"file_name":"src/liballoc/sync.rs","byte_start":775601,"byte_end":775609,"line_start":1381,"line_end":1381,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Weak<T>>::into_raw","value":"fn (self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Weak<T>` and turns it into a raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Weak<T>` and turns it into a raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":774591,"byte_end":774650,"line_start":1352,"line_end":1352,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":774655,"byte_end":774658,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ This converts the weak pointer into a raw pointer, preserving the original weak count. It","span":{"file_name":"src/liballoc/sync.rs","byte_start":774663,"byte_end":774756,"line_start":1354,"line_end":1354,"column_start":5,"column_end":98}},{"value":"/ can be turned back into the `Weak<T>` with [`from_raw`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":774761,"byte_end":774821,"line_start":1355,"line_end":1355,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":774826,"byte_end":774829,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ The same restrictions of accessing the target of the pointer as with","span":{"file_name":"src/liballoc/sync.rs","byte_start":774834,"byte_end":774906,"line_start":1357,"line_end":1357,"column_start":5,"column_end":77}},{"value":"/ [`as_raw`] apply.","span":{"file_name":"src/liballoc/sync.rs","byte_start":774911,"byte_end":774932,"line_start":1358,"line_end":1358,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":774937,"byte_end":774940,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":774945,"byte_end":774959,"line_start":1360,"line_end":1360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":774964,"byte_end":774967,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":774972,"byte_end":774979,"line_start":1362,"line_end":1362,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":774984,"byte_end":775014,"line_start":1363,"line_end":1363,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775019,"byte_end":775022,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":775027,"byte_end":775058,"line_start":1365,"line_end":1365,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775063,"byte_end":775066,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":775071,"byte_end":775117,"line_start":1367,"line_end":1367,"column_start":5,"column_end":51}},{"value":"/ let weak = Arc::downgrade(&strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":775122,"byte_end":775161,"line_start":1368,"line_end":1368,"column_start":5,"column_end":44}},{"value":"/ let raw = weak.into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":775166,"byte_end":775196,"line_start":1369,"line_end":1369,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775201,"byte_end":775204,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":775209,"byte_end":775253,"line_start":1371,"line_end":1371,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(\"hello\", unsafe { &*raw });","span":{"file_name":"src/liballoc/sync.rs","byte_start":775258,"byte_end":775300,"line_start":1372,"line_end":1372,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775305,"byte_end":775308,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ drop(unsafe { Weak::from_raw(raw) });","span":{"file_name":"src/liballoc/sync.rs","byte_start":775313,"byte_end":775354,"line_start":1374,"line_end":1374,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":775359,"byte_end":775403,"line_start":1375,"line_end":1375,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":775408,"byte_end":775415,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775420,"byte_end":775423,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ [`from_raw`]: struct.Weak.html#method.from_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":775428,"byte_end":775478,"line_start":1378,"line_end":1378,"column_start":5,"column_end":55}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":775483,"byte_end":775529,"line_start":1379,"line_end":1379,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":775534,"byte_end":775589,"line_start":1380,"line_end":1380,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"src/liballoc/sync.rs","byte_start":777686,"byte_end":777694,"line_start":1437,"line_end":1437,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Weak<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a raw pointer previously created by [`into_raw`] back into\n `Weak<T>`.","sig":null,"attributes":[{"value":"/ Converts a raw pointer previously created by [`into_raw`] back into","span":{"file_name":"src/liballoc/sync.rs","byte_start":775719,"byte_end":775790,"line_start":1387,"line_end":1387,"column_start":5,"column_end":76}},{"value":"/ `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":775795,"byte_end":775809,"line_start":1388,"line_end":1388,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775814,"byte_end":775817,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely get a strong reference (by calling [`upgrade`]","span":{"file_name":"src/liballoc/sync.rs","byte_start":775822,"byte_end":775899,"line_start":1390,"line_end":1390,"column_start":5,"column_end":82}},{"value":"/ later) or to deallocate the weak count by dropping the `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":775904,"byte_end":775973,"line_start":1391,"line_end":1391,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":775978,"byte_end":775981,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ It takes ownership of one weak count (with the exception of pointers created by [`new`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":775986,"byte_end":776078,"line_start":1393,"line_end":1393,"column_start":5,"column_end":97}},{"value":"/ as these don't have any corresponding weak count).","span":{"file_name":"src/liballoc/sync.rs","byte_start":776083,"byte_end":776137,"line_start":1394,"line_end":1394,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776142,"byte_end":776145,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":776150,"byte_end":776162,"line_start":1396,"line_end":1396,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776167,"byte_end":776170,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ The pointer must have originated from the [`into_raw`] (or [`as_raw'], provided there was","span":{"file_name":"src/liballoc/sync.rs","byte_start":776175,"byte_end":776268,"line_start":1398,"line_end":1398,"column_start":5,"column_end":98}},{"value":"/ a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":776273,"byte_end":776369,"line_start":1399,"line_end":1399,"column_start":5,"column_end":101}},{"value":"/ count.","span":{"file_name":"src/liballoc/sync.rs","byte_start":776374,"byte_end":776384,"line_start":1400,"line_end":1400,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776389,"byte_end":776392,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ It is allowed for the strong count to be 0 at the time of calling this, but the weak count","span":{"file_name":"src/liballoc/sync.rs","byte_start":776397,"byte_end":776491,"line_start":1402,"line_end":1402,"column_start":5,"column_end":99}},{"value":"/ must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created","span":{"file_name":"src/liballoc/sync.rs","byte_start":776496,"byte_end":776591,"line_start":1403,"line_end":1403,"column_start":5,"column_end":100}},{"value":"/ by [`new`]).","span":{"file_name":"src/liballoc/sync.rs","byte_start":776596,"byte_end":776612,"line_start":1404,"line_end":1404,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776617,"byte_end":776620,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":776625,"byte_end":776639,"line_start":1406,"line_end":1406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776644,"byte_end":776647,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":776652,"byte_end":776659,"line_start":1408,"line_end":1408,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":776664,"byte_end":776694,"line_start":1409,"line_end":1409,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776699,"byte_end":776702,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":776707,"byte_end":776738,"line_start":1411,"line_end":1411,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776743,"byte_end":776746,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":776751,"byte_end":776797,"line_start":1413,"line_end":1413,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776802,"byte_end":776805,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ let raw_1 = Arc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":776810,"byte_end":776861,"line_start":1415,"line_end":1415,"column_start":5,"column_end":56}},{"value":"/ let raw_2 = Arc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":776866,"byte_end":776917,"line_start":1416,"line_end":1416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776922,"byte_end":776925,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":776930,"byte_end":776974,"line_start":1418,"line_end":1418,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":776979,"byte_end":776982,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());","span":{"file_name":"src/liballoc/sync.rs","byte_start":776987,"byte_end":777066,"line_start":1420,"line_end":1420,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(1, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":777071,"byte_end":777115,"line_start":1421,"line_end":1421,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":777120,"byte_end":777123,"line_start":1422,"line_end":1422,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":777128,"byte_end":777145,"line_start":1423,"line_end":1423,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":777150,"byte_end":777153,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ // Decrement the last weak count.","span":{"file_name":"src/liballoc/sync.rs","byte_start":777158,"byte_end":777195,"line_start":1425,"line_end":1425,"column_start":5,"column_end":42}},{"value":"/ assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":777200,"byte_end":777266,"line_start":1426,"line_end":1426,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":777271,"byte_end":777278,"line_start":1427,"line_end":1427,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":777283,"byte_end":777286,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":777291,"byte_end":777337,"line_start":1429,"line_end":1429,"column_start":5,"column_end":51}},{"value":"/ [`new`]: struct.Weak.html#method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":777342,"byte_end":777382,"line_start":1430,"line_end":1430,"column_start":5,"column_end":45}},{"value":"/ [`into_raw`]: struct.Weak.html#method.into_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":777387,"byte_end":777437,"line_start":1431,"line_end":1431,"column_start":5,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":777442,"byte_end":777490,"line_start":1432,"line_end":1432,"column_start":5,"column_end":53}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":777495,"byte_end":777525,"line_start":1433,"line_end":1433,"column_start":5,"column_end":35}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":777530,"byte_end":777558,"line_start":1434,"line_end":1434,"column_start":5,"column_end":33}},{"value":"/ [`forget`]: ../../std/mem/fn.forget.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":777563,"byte_end":777607,"line_start":1435,"line_end":1435,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":777612,"byte_end":777667,"line_start":1436,"line_end":1436,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3909},"span":{"file_name":"src/liballoc/sync.rs","byte_start":778954,"byte_end":778961,"line_start":1478,"line_end":1478,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<Weak<T>>::upgrade","value":"fn (&self) -> Option<Arc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n dropping of the inner value if successful.","sig":null,"attributes":[{"value":"/ Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying","span":{"file_name":"src/liballoc/sync.rs","byte_start":778146,"byte_end":778212,"line_start":1451,"line_end":1451,"column_start":5,"column_end":71}},{"value":"/ dropping of the inner value if successful.","span":{"file_name":"src/liballoc/sync.rs","byte_start":778217,"byte_end":778263,"line_start":1452,"line_end":1452,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778268,"byte_end":778271,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if the inner value has since been dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":778276,"byte_end":778339,"line_start":1454,"line_end":1454,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778344,"byte_end":778347,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":778352,"byte_end":778380,"line_start":1456,"line_end":1456,"column_start":5,"column_end":33}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":778385,"byte_end":778445,"line_start":1457,"line_end":1457,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778450,"byte_end":778453,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":778458,"byte_end":778472,"line_start":1459,"line_end":1459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778477,"byte_end":778480,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":778485,"byte_end":778492,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":778497,"byte_end":778520,"line_start":1462,"line_end":1462,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778525,"byte_end":778528,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":778533,"byte_end":778560,"line_start":1464,"line_end":1464,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778565,"byte_end":778568,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":778573,"byte_end":778615,"line_start":1466,"line_end":1466,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778620,"byte_end":778623,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ let strong_five: Option<Arc<_>> = weak_five.upgrade();","span":{"file_name":"src/liballoc/sync.rs","byte_start":778628,"byte_end":778686,"line_start":1468,"line_end":1468,"column_start":5,"column_end":63}},{"value":"/ assert!(strong_five.is_some());","span":{"file_name":"src/liballoc/sync.rs","byte_start":778691,"byte_end":778726,"line_start":1469,"line_end":1469,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778731,"byte_end":778734,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ // Destroy all strong pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":778739,"byte_end":778774,"line_start":1471,"line_end":1471,"column_start":5,"column_end":40}},{"value":"/ drop(strong_five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":778779,"byte_end":778801,"line_start":1472,"line_end":1472,"column_start":5,"column_end":27}},{"value":"/ drop(five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":778806,"byte_end":778821,"line_start":1473,"line_end":1473,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":778826,"byte_end":778829,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ assert!(weak_five.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":778834,"byte_end":778877,"line_start":1475,"line_end":1475,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":778882,"byte_end":778889,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":778894,"byte_end":778942,"line_start":1477,"line_end":1477,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"src/liballoc/sync.rs","byte_start":780328,"byte_end":780340,"line_start":1515,"line_end":1515,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Weak<T>>::strong_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Arc`) pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Arc`) pointers pointing to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":780062,"byte_end":780137,"line_start":1509,"line_end":1509,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780142,"byte_end":780145,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], this will return 0.","span":{"file_name":"src/liballoc/sync.rs","byte_start":780150,"byte_end":780216,"line_start":1511,"line_end":1511,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780221,"byte_end":780224,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":780229,"byte_end":780259,"line_start":1513,"line_end":1513,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":780264,"byte_end":780316,"line_start":1514,"line_end":1514,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3911},"span":{"file_name":"src/liballoc/sync.rs","byte_start":781029,"byte_end":781039,"line_start":1533,"line_end":1533,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Weak<T>>::weak_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets an approximation of the number of `Weak` pointers pointing to this\n allocation.","sig":null,"attributes":[{"value":"/ Gets an approximation of the number of `Weak` pointers pointing to this","span":{"file_name":"src/liballoc/sync.rs","byte_start":780453,"byte_end":780528,"line_start":1519,"line_end":1519,"column_start":5,"column_end":80}},{"value":"/ allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":780533,"byte_end":780548,"line_start":1520,"line_end":1520,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780553,"byte_end":780556,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], or if there are no remaining","span":{"file_name":"src/liballoc/sync.rs","byte_start":780561,"byte_end":780636,"line_start":1522,"line_end":1522,"column_start":5,"column_end":80}},{"value":"/ strong pointers, this will return 0.","span":{"file_name":"src/liballoc/sync.rs","byte_start":780641,"byte_end":780681,"line_start":1523,"line_end":1523,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780686,"byte_end":780689,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ # Accuracy","span":{"file_name":"src/liballoc/sync.rs","byte_start":780694,"byte_end":780708,"line_start":1525,"line_end":1525,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780713,"byte_end":780716,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ Due to implementation details, the returned value can be off by 1 in","span":{"file_name":"src/liballoc/sync.rs","byte_start":780721,"byte_end":780793,"line_start":1527,"line_end":1527,"column_start":5,"column_end":77}},{"value":"/ either direction when other threads are manipulating any `Arc`s or","span":{"file_name":"src/liballoc/sync.rs","byte_start":780798,"byte_end":780868,"line_start":1528,"line_end":1528,"column_start":5,"column_end":75}},{"value":"/ `Weak`s pointing to the same allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":780873,"byte_end":780917,"line_start":1529,"line_end":1529,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":780922,"byte_end":780925,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":780930,"byte_end":780960,"line_start":1531,"line_end":1531,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":780965,"byte_end":781017,"line_start":1532,"line_end":1532,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"src/liballoc/sync.rs","byte_start":783360,"byte_end":783366,"line_start":1602,"line_end":1602,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Weak<T>>::ptr_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Weak`s point to the same allocation (similar to\n [`ptr::eq`]), or if both don't point to any allocation\n (because they were created with `Weak::new()`).","sig":null,"attributes":[{"value":"/ Returns `true` if the two `Weak`s point to the same allocation (similar to","span":{"file_name":"src/liballoc/sync.rs","byte_start":782083,"byte_end":782161,"line_start":1559,"line_end":1559,"column_start":5,"column_end":83}},{"value":"/ [`ptr::eq`]), or if both don't point to any allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":782166,"byte_end":782224,"line_start":1560,"line_end":1560,"column_start":5,"column_end":63}},{"value":"/ (because they were created with `Weak::new()`).","span":{"file_name":"src/liballoc/sync.rs","byte_start":782229,"byte_end":782280,"line_start":1561,"line_end":1561,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782285,"byte_end":782288,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"src/liballoc/sync.rs","byte_start":782293,"byte_end":782304,"line_start":1563,"line_end":1563,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782309,"byte_end":782312,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ Since this compares pointers it means that `Weak::new()` will equal each","span":{"file_name":"src/liballoc/sync.rs","byte_start":782317,"byte_end":782393,"line_start":1565,"line_end":1565,"column_start":5,"column_end":81}},{"value":"/ other, even though they don't point to any allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":782398,"byte_end":782456,"line_start":1566,"line_end":1566,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782461,"byte_end":782464,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":782469,"byte_end":782483,"line_start":1568,"line_end":1568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782488,"byte_end":782491,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":782496,"byte_end":782503,"line_start":1570,"line_end":1570,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":782508,"byte_end":782531,"line_start":1571,"line_end":1571,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782536,"byte_end":782539,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ let first_rc = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":782544,"byte_end":782575,"line_start":1573,"line_end":1573,"column_start":5,"column_end":36}},{"value":"/ let first = Arc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":782580,"byte_end":782622,"line_start":1574,"line_end":1574,"column_start":5,"column_end":47}},{"value":"/ let second = Arc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":782627,"byte_end":782670,"line_start":1575,"line_end":1575,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782675,"byte_end":782678,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/sync.rs","byte_start":782683,"byte_end":782718,"line_start":1577,"line_end":1577,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782723,"byte_end":782726,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":782731,"byte_end":782762,"line_start":1579,"line_end":1579,"column_start":5,"column_end":36}},{"value":"/ let third = Arc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":782767,"byte_end":782809,"line_start":1580,"line_end":1580,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782814,"byte_end":782817,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/sync.rs","byte_start":782822,"byte_end":782857,"line_start":1582,"line_end":1582,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":782862,"byte_end":782869,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782874,"byte_end":782877,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ Comparing `Weak::new`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":782882,"byte_end":782908,"line_start":1585,"line_end":1585,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782913,"byte_end":782916,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":782921,"byte_end":782928,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":782933,"byte_end":782964,"line_start":1588,"line_end":1588,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":782969,"byte_end":782972,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ let first = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":782977,"byte_end":783005,"line_start":1590,"line_end":1590,"column_start":5,"column_end":33}},{"value":"/ let second = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":783010,"byte_end":783039,"line_start":1591,"line_end":1591,"column_start":5,"column_end":34}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/sync.rs","byte_start":783044,"byte_end":783079,"line_start":1592,"line_end":1592,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":783084,"byte_end":783087,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Arc::new(());","span":{"file_name":"src/liballoc/sync.rs","byte_start":783092,"byte_end":783124,"line_start":1594,"line_end":1594,"column_start":5,"column_end":37}},{"value":"/ let third = Arc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":783129,"byte_end":783171,"line_start":1595,"line_end":1595,"column_start":5,"column_end":47}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/sync.rs","byte_start":783176,"byte_end":783211,"line_start":1596,"line_end":1596,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":783216,"byte_end":783223,"line_start":1597,"line_end":1597,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":783228,"byte_end":783231,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":783236,"byte_end":783277,"line_start":1599,"line_end":1599,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":783282,"byte_end":783291,"line_start":1600,"line_end":1600,"column_start":5,"column_end":14}},{"value":"stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":783296,"byte_end":783348,"line_start":1601,"line_end":1601,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"src/liballoc/sync.rs","byte_start":786787,"byte_end":786789,"line_start":1712,"line_end":1712,"column_start":8,"column_end":10},"name":"eq","qualname":"::sync::ArcEqIdent::eq","value":"fn (&self, other: &Arc<T>) -> bool","parent":{"krate":0,"index":3924},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"src/liballoc/sync.rs","byte_start":786829,"byte_end":786831,"line_start":1713,"line_end":1713,"column_start":8,"column_end":10},"name":"ne","qualname":"::sync::ArcEqIdent::ne","value":"fn (&self, other: &Arc<T>) -> bool","parent":{"krate":0,"index":3924},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3999},"span":{"file_name":"src/liballoc/sync.rs","byte_start":796707,"byte_end":796716,"line_start":2068,"line_end":2068,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::sync::ArcFromIter::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":3996},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4025},"span":{"file_name":"src/liballoc/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"src/liballoc/vec.rs","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4034},{"krate":0,"index":4037},{"krate":0,"index":4041},{"krate":0,"index":4042},{"krate":0,"index":4043},{"krate":0,"index":4047},{"krate":0,"index":4052},{"krate":0,"index":4055},{"krate":0,"index":4058},{"krate":0,"index":4061},{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4068},{"krate":0,"index":4113},{"krate":0,"index":4117},{"krate":0,"index":4120},{"krate":0,"index":4124},{"krate":0,"index":4128},{"krate":0,"index":4132},{"krate":0,"index":4134},{"krate":0,"index":4138},{"krate":0,"index":4142},{"krate":0,"index":4147},{"krate":0,"index":4151},{"krate":0,"index":4155},{"krate":0,"index":4159},{"krate":0,"index":4161},{"krate":0,"index":4165},{"krate":0,"index":4170},{"krate":0,"index":4172},{"krate":0,"index":4174},{"krate":0,"index":4177},{"krate":0,"index":4179},{"krate":0,"index":4182},{"krate":0,"index":4184},{"krate":0,"index":4814},{"krate":0,"index":4817},{"krate":0,"index":4820},{"krate":0,"index":4823},{"krate":0,"index":4826},{"krate":0,"index":4829},{"krate":0,"index":4832},{"krate":0,"index":4835},{"krate":0,"index":4838},{"krate":0,"index":4841},{"krate":0,"index":4844},{"krate":0,"index":4847},{"krate":0,"index":4850},{"krate":0,"index":4853},{"krate":0,"index":4856},{"krate":0,"index":4185},{"krate":0,"index":4188},{"krate":0,"index":4191},{"krate":0,"index":4194},{"krate":0,"index":4197},{"krate":0,"index":4200},{"krate":0,"index":4204},{"krate":0,"index":4208},{"krate":0,"index":4213},{"krate":0,"index":4217},{"krate":0,"index":4221},{"krate":0,"index":4224},{"krate":0,"index":4228},{"krate":0,"index":4233},{"krate":0,"index":4239},{"krate":0,"index":4245},{"krate":0,"index":4249},{"krate":0,"index":4254},{"krate":0,"index":4259},{"krate":0,"index":4265},{"krate":0,"index":4269},{"krate":0,"index":4275},{"krate":0,"index":4279},{"krate":0,"index":4288},{"krate":0,"index":4293},{"krate":0,"index":4859},{"krate":0,"index":4864},{"krate":0,"index":4869},{"krate":0,"index":4874},{"krate":0,"index":4879},{"krate":0,"index":4884},{"krate":0,"index":4889},{"krate":0,"index":4899},{"krate":0,"index":4294},{"krate":0,"index":4297},{"krate":0,"index":4299},{"krate":0,"index":4302},{"krate":0,"index":4305},{"krate":0,"index":4308},{"krate":0,"index":4311},{"krate":0,"index":4314},{"krate":0,"index":4317},{"krate":0,"index":4320},{"krate":0,"index":4323},{"krate":0,"index":4326},{"krate":0,"index":4329},{"krate":0,"index":4333},{"krate":0,"index":4336},{"krate":0,"index":4339},{"krate":0,"index":4341},{"krate":0,"index":4345},{"krate":0,"index":4349},{"krate":0,"index":4353},{"krate":0,"index":4358},{"krate":0,"index":4365},{"krate":0,"index":4368},{"krate":0,"index":4372},{"krate":0,"index":4374},{"krate":0,"index":4376},{"krate":0,"index":4382},{"krate":0,"index":4385},{"krate":0,"index":4388},{"krate":0,"index":4390},{"krate":0,"index":4392},{"krate":0,"index":4395},{"krate":0,"index":4398},{"krate":0,"index":4405},{"krate":0,"index":4408},{"krate":0,"index":4412},{"krate":0,"index":4414},{"krate":0,"index":4416},{"krate":0,"index":4422},{"krate":0,"index":4426},{"krate":0,"index":4440},{"krate":0,"index":4443},{"krate":0,"index":4445},{"krate":0,"index":4909},{"krate":0,"index":4914},{"krate":0,"index":4447},{"krate":0,"index":4452},{"krate":0,"index":4455},{"krate":0,"index":4457},{"krate":0,"index":4460},{"krate":0,"index":4918},{"krate":0,"index":4928},{"krate":0,"index":4465},{"krate":0,"index":4471}],"decl_id":null,"docs":" A contiguous growable array type with heap-allocated contents, written\n `Vec<T>`.","sig":null,"attributes":[{"value":"! A contiguous growable array type with heap-allocated contents, written","span":{"file_name":"src/liballoc/vec.rs","byte_start":799501,"byte_end":799575,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"! `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":799576,"byte_end":799589,"line_start":2,"line_end":2,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799590,"byte_end":799593,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and","span":{"file_name":"src/liballoc/vec.rs","byte_start":799594,"byte_end":799666,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"! `O(1)` pop (from the end).","span":{"file_name":"src/liballoc/vec.rs","byte_start":799667,"byte_end":799697,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799698,"byte_end":799701,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! Vectors ensure they never allocate more than `isize::MAX` bytes.","span":{"file_name":"src/liballoc/vec.rs","byte_start":799702,"byte_end":799770,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799771,"byte_end":799774,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":799775,"byte_end":799789,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799790,"byte_end":799793,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! You can explicitly create a [`Vec<T>`] with [`new`]:","span":{"file_name":"src/liballoc/vec.rs","byte_start":799794,"byte_end":799850,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799851,"byte_end":799854,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799855,"byte_end":799862,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"! let v: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":799863,"byte_end":799896,"line_start":14,"line_end":14,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799897,"byte_end":799904,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799905,"byte_end":799908,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! ...or by using the [`vec!`] macro:","span":{"file_name":"src/liballoc/vec.rs","byte_start":799909,"byte_end":799947,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799948,"byte_end":799951,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799952,"byte_end":799959,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"! let v: Vec<i32> = vec![];","span":{"file_name":"src/liballoc/vec.rs","byte_start":799960,"byte_end":799989,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":799990,"byte_end":799993,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! let v = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":799994,"byte_end":800026,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800027,"byte_end":800030,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! let v = vec![0; 10]; // ten zeroes","span":{"file_name":"src/liballoc/vec.rs","byte_start":800031,"byte_end":800069,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800070,"byte_end":800077,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800078,"byte_end":800081,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! You can [`push`] values onto the end of a vector (which will grow the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":800082,"byte_end":800162,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"! as needed):","span":{"file_name":"src/liballoc/vec.rs","byte_start":800163,"byte_end":800178,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800179,"byte_end":800182,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800183,"byte_end":800190,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":800191,"byte_end":800218,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800219,"byte_end":800222,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! v.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":800223,"byte_end":800237,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800238,"byte_end":800245,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800246,"byte_end":800249,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! Popping values works in much the same way:","span":{"file_name":"src/liballoc/vec.rs","byte_start":800250,"byte_end":800296,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800297,"byte_end":800300,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800301,"byte_end":800308,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":800309,"byte_end":800336,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800337,"byte_end":800340,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! let two = v.pop();","span":{"file_name":"src/liballoc/vec.rs","byte_start":800341,"byte_end":800363,"line_start":41,"line_end":41,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800364,"byte_end":800371,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800372,"byte_end":800375,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Vectors also support indexing (through the [`Index`] and [`IndexMut`] traits):","span":{"file_name":"src/liballoc/vec.rs","byte_start":800376,"byte_end":800458,"line_start":44,"line_end":44,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800459,"byte_end":800462,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800463,"byte_end":800470,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":800471,"byte_end":800501,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"! let three = v[2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":800502,"byte_end":800523,"line_start":48,"line_end":48,"column_start":1,"column_end":22}},{"value":"! v[1] = v[1] + 5;","span":{"file_name":"src/liballoc/vec.rs","byte_start":800524,"byte_end":800544,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800545,"byte_end":800552,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":800553,"byte_end":800556,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! [`Vec<T>`]: ../../std/vec/struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":800557,"byte_end":800602,"line_start":52,"line_end":52,"column_start":1,"column_end":46}},{"value":"! [`new`]: ../../std/vec/struct.Vec.html#method.new","span":{"file_name":"src/liballoc/vec.rs","byte_start":800603,"byte_end":800656,"line_start":53,"line_end":53,"column_start":1,"column_end":54}},{"value":"! [`push`]: ../../std/vec/struct.Vec.html#method.push","span":{"file_name":"src/liballoc/vec.rs","byte_start":800657,"byte_end":800712,"line_start":54,"line_end":54,"column_start":1,"column_end":56}},{"value":"! [`Index`]: ../../std/ops/trait.Index.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":800713,"byte_end":800758,"line_start":55,"line_end":55,"column_start":1,"column_end":46}},{"value":"! [`IndexMut`]: ../../std/ops/trait.IndexMut.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":800759,"byte_end":800810,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"! [`vec!`]: ../../std/macro.vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":800811,"byte_end":800849,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":800851,"byte_end":800897,"line_start":59,"line_end":59,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":4064},"span":{"file_name":"src/liballoc/vec.rs","byte_start":810818,"byte_end":810821,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":4066},{"krate":0,"index":4067}],"decl_id":null,"docs":" A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.","sig":null,"attributes":[{"value":"/ A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.","span":{"file_name":"src/liballoc/vec.rs","byte_start":801467,"byte_end":801546,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801547,"byte_end":801550,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":801551,"byte_end":801565,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801566,"byte_end":801569,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":801570,"byte_end":801577,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ let mut vec = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":801578,"byte_end":801607,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/ vec.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801608,"byte_end":801624,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801625,"byte_end":801641,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801642,"byte_end":801645,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801646,"byte_end":801675,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801676,"byte_end":801702,"line_start":89,"line_end":89,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801703,"byte_end":801706,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"src/liballoc/vec.rs","byte_start":801707,"byte_end":801742,"line_start":91,"line_end":91,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801743,"byte_end":801772,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801773,"byte_end":801776,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"src/liballoc/vec.rs","byte_start":801777,"byte_end":801792,"line_start":94,"line_end":94,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801793,"byte_end":801819,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801820,"byte_end":801823,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().copied());","span":{"file_name":"src/liballoc/vec.rs","byte_start":801824,"byte_end":801866,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801867,"byte_end":801870,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"src/liballoc/vec.rs","byte_start":801871,"byte_end":801890,"line_start":99,"line_end":99,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801891,"byte_end":801917,"line_start":100,"line_end":100,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":801918,"byte_end":801923,"line_start":101,"line_end":101,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec, [7, 1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801924,"byte_end":801958,"line_start":102,"line_end":102,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":801959,"byte_end":801966,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801967,"byte_end":801970,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ The [`vec!`] macro is provided to make initialization more convenient:","span":{"file_name":"src/liballoc/vec.rs","byte_start":801971,"byte_end":802045,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802046,"byte_end":802049,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802050,"byte_end":802057,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":802058,"byte_end":802090,"line_start":108,"line_end":108,"column_start":1,"column_end":33}},{"value":"/ vec.push(4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802091,"byte_end":802107,"line_start":109,"line_end":109,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802108,"byte_end":802142,"line_start":110,"line_end":110,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802143,"byte_end":802150,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802151,"byte_end":802154,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ It can also initialize each element of a `Vec<T>` with a given value.","span":{"file_name":"src/liballoc/vec.rs","byte_start":802155,"byte_end":802228,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ This may be more efficient than performing allocation and initialization","span":{"file_name":"src/liballoc/vec.rs","byte_start":802229,"byte_end":802305,"line_start":114,"line_end":114,"column_start":1,"column_end":77}},{"value":"/ in separate steps, especially when initializing a vector of zeros:","span":{"file_name":"src/liballoc/vec.rs","byte_start":802306,"byte_end":802376,"line_start":115,"line_end":115,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802377,"byte_end":802380,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802381,"byte_end":802388,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ let vec = vec![0; 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":802389,"byte_end":802414,"line_start":118,"line_end":118,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(vec, [0, 0, 0, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802415,"byte_end":802452,"line_start":119,"line_end":119,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802453,"byte_end":802456,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // The following is equivalent, but potentially slower:","span":{"file_name":"src/liballoc/vec.rs","byte_start":802457,"byte_end":802516,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ let mut vec1 = Vec::with_capacity(5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802517,"byte_end":802558,"line_start":122,"line_end":122,"column_start":1,"column_end":42}},{"value":"/ vec1.resize(5, 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802559,"byte_end":802581,"line_start":123,"line_end":123,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802582,"byte_end":802589,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802590,"byte_end":802593,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ Use a `Vec<T>` as an efficient stack:","span":{"file_name":"src/liballoc/vec.rs","byte_start":802594,"byte_end":802635,"line_start":126,"line_end":126,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802636,"byte_end":802639,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802640,"byte_end":802647,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ let mut stack = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":802648,"byte_end":802679,"line_start":129,"line_end":129,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802680,"byte_end":802683,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ stack.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802684,"byte_end":802702,"line_start":131,"line_end":131,"column_start":1,"column_end":19}},{"value":"/ stack.push(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802703,"byte_end":802721,"line_start":132,"line_end":132,"column_start":1,"column_end":19}},{"value":"/ stack.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802722,"byte_end":802740,"line_start":133,"line_end":133,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802741,"byte_end":802744,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ while let Some(top) = stack.pop() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":802745,"byte_end":802784,"line_start":135,"line_end":135,"column_start":1,"column_end":40}},{"value":"/     // Prints 3, 2, 1","span":{"file_name":"src/liballoc/vec.rs","byte_start":802785,"byte_end":802810,"line_start":136,"line_end":136,"column_start":1,"column_end":26}},{"value":"/     println!(\"{}\", top);","span":{"file_name":"src/liballoc/vec.rs","byte_start":802811,"byte_end":802839,"line_start":137,"line_end":137,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":802840,"byte_end":802845,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802846,"byte_end":802853,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802854,"byte_end":802857,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ # Indexing","span":{"file_name":"src/liballoc/vec.rs","byte_start":802858,"byte_end":802872,"line_start":141,"line_end":141,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802873,"byte_end":802876,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ The `Vec` type allows to access values by index, because it implements the","span":{"file_name":"src/liballoc/vec.rs","byte_start":802877,"byte_end":802955,"line_start":143,"line_end":143,"column_start":1,"column_end":79}},{"value":"/ [`Index`] trait. An example will be more explicit:","span":{"file_name":"src/liballoc/vec.rs","byte_start":802956,"byte_end":803010,"line_start":144,"line_end":144,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803011,"byte_end":803014,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803015,"byte_end":803022,"line_start":146,"line_end":146,"column_start":1,"column_end":8}},{"value":"/ let v = vec![0, 2, 4, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":803023,"byte_end":803052,"line_start":147,"line_end":147,"column_start":1,"column_end":30}},{"value":"/ println!(\"{}\", v[1]); // it will display '2'","span":{"file_name":"src/liballoc/vec.rs","byte_start":803053,"byte_end":803101,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803102,"byte_end":803109,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803110,"byte_end":803113,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ However be careful: if you try to access an index which isn't in the `Vec`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":803114,"byte_end":803193,"line_start":151,"line_end":151,"column_start":1,"column_end":80}},{"value":"/ your software will panic! You cannot do this:","span":{"file_name":"src/liballoc/vec.rs","byte_start":803194,"byte_end":803243,"line_start":152,"line_end":152,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803244,"byte_end":803247,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/vec.rs","byte_start":803248,"byte_end":803267,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/ let v = vec![0, 2, 4, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":803268,"byte_end":803297,"line_start":155,"line_end":155,"column_start":1,"column_end":30}},{"value":"/ println!(\"{}\", v[6]); // it will panic!","span":{"file_name":"src/liballoc/vec.rs","byte_start":803298,"byte_end":803341,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803342,"byte_end":803349,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803350,"byte_end":803353,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ Use [`get`] and [`get_mut`] if you want to check whether the index is in","span":{"file_name":"src/liballoc/vec.rs","byte_start":803354,"byte_end":803430,"line_start":159,"line_end":159,"column_start":1,"column_end":77}},{"value":"/ the `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803431,"byte_end":803445,"line_start":160,"line_end":160,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803446,"byte_end":803449,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ # Slicing","span":{"file_name":"src/liballoc/vec.rs","byte_start":803450,"byte_end":803463,"line_start":162,"line_end":162,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803464,"byte_end":803467,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ A `Vec` can be mutable. Slices, on the other hand, are read-only objects.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803468,"byte_end":803545,"line_start":164,"line_end":164,"column_start":1,"column_end":78}},{"value":"/ To get a slice, use `&`. Example:","span":{"file_name":"src/liballoc/vec.rs","byte_start":803546,"byte_end":803583,"line_start":165,"line_end":165,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803584,"byte_end":803587,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803588,"byte_end":803595,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ fn read_slice(slice: &[usize]) {","span":{"file_name":"src/liballoc/vec.rs","byte_start":803596,"byte_end":803632,"line_start":168,"line_end":168,"column_start":1,"column_end":37}},{"value":"/     // ...","span":{"file_name":"src/liballoc/vec.rs","byte_start":803633,"byte_end":803647,"line_start":169,"line_end":169,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":803648,"byte_end":803653,"line_start":170,"line_end":170,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803654,"byte_end":803657,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ let v = vec![0, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":803658,"byte_end":803681,"line_start":172,"line_end":172,"column_start":1,"column_end":24}},{"value":"/ read_slice(&v);","span":{"file_name":"src/liballoc/vec.rs","byte_start":803682,"byte_end":803701,"line_start":173,"line_end":173,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803702,"byte_end":803705,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ // ... and that's all!","span":{"file_name":"src/liballoc/vec.rs","byte_start":803706,"byte_end":803732,"line_start":175,"line_end":175,"column_start":1,"column_end":27}},{"value":"/ // you can also do it like this:","span":{"file_name":"src/liballoc/vec.rs","byte_start":803733,"byte_end":803769,"line_start":176,"line_end":176,"column_start":1,"column_end":37}},{"value":"/ let x : &[usize] = &v;","span":{"file_name":"src/liballoc/vec.rs","byte_start":803770,"byte_end":803796,"line_start":177,"line_end":177,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803797,"byte_end":803804,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803805,"byte_end":803808,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ In Rust, it's more common to pass slices as arguments rather than vectors","span":{"file_name":"src/liballoc/vec.rs","byte_start":803809,"byte_end":803886,"line_start":180,"line_end":180,"column_start":1,"column_end":78}},{"value":"/ when you just want to provide read access. The same goes for [`String`] and","span":{"file_name":"src/liballoc/vec.rs","byte_start":803887,"byte_end":803966,"line_start":181,"line_end":181,"column_start":1,"column_end":80}},{"value":"/ [`&str`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":803967,"byte_end":803980,"line_start":182,"line_end":182,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803981,"byte_end":803984,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ # Capacity and reallocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":803985,"byte_end":804016,"line_start":184,"line_end":184,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804017,"byte_end":804020,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ The capacity of a vector is the amount of space allocated for any future","span":{"file_name":"src/liballoc/vec.rs","byte_start":804021,"byte_end":804097,"line_start":186,"line_end":186,"column_start":1,"column_end":77}},{"value":"/ elements that will be added onto the vector. This is not to be confused with","span":{"file_name":"src/liballoc/vec.rs","byte_start":804098,"byte_end":804178,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/ the *length* of a vector, which specifies the number of actual elements","span":{"file_name":"src/liballoc/vec.rs","byte_start":804179,"byte_end":804254,"line_start":188,"line_end":188,"column_start":1,"column_end":76}},{"value":"/ within the vector. If a vector's length exceeds its capacity, its capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":804255,"byte_end":804333,"line_start":189,"line_end":189,"column_start":1,"column_end":79}},{"value":"/ will automatically be increased, but its elements will have to be","span":{"file_name":"src/liballoc/vec.rs","byte_start":804334,"byte_end":804403,"line_start":190,"line_end":190,"column_start":1,"column_end":70}},{"value":"/ reallocated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":804404,"byte_end":804420,"line_start":191,"line_end":191,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804421,"byte_end":804424,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ For example, a vector with capacity 10 and length 0 would be an empty vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":804425,"byte_end":804505,"line_start":193,"line_end":193,"column_start":1,"column_end":81}},{"value":"/ with space for 10 more elements. Pushing 10 or fewer elements onto the","span":{"file_name":"src/liballoc/vec.rs","byte_start":804506,"byte_end":804580,"line_start":194,"line_end":194,"column_start":1,"column_end":75}},{"value":"/ vector will not change its capacity or cause reallocation to occur. However,","span":{"file_name":"src/liballoc/vec.rs","byte_start":804581,"byte_end":804661,"line_start":195,"line_end":195,"column_start":1,"column_end":81}},{"value":"/ if the vector's length is increased to 11, it will have to reallocate, which","span":{"file_name":"src/liballoc/vec.rs","byte_start":804662,"byte_end":804742,"line_start":196,"line_end":196,"column_start":1,"column_end":81}},{"value":"/ can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":804743,"byte_end":804824,"line_start":197,"line_end":197,"column_start":1,"column_end":82}},{"value":"/ whenever possible to specify how big the vector is expected to get.","span":{"file_name":"src/liballoc/vec.rs","byte_start":804825,"byte_end":804896,"line_start":198,"line_end":198,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804897,"byte_end":804900,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ # Guarantees","span":{"file_name":"src/liballoc/vec.rs","byte_start":804901,"byte_end":804917,"line_start":200,"line_end":200,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804918,"byte_end":804921,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees","span":{"file_name":"src/liballoc/vec.rs","byte_start":804922,"byte_end":804999,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"/ about its design. This ensures that it's as low-overhead as possible in","span":{"file_name":"src/liballoc/vec.rs","byte_start":805000,"byte_end":805075,"line_start":203,"line_end":203,"column_start":1,"column_end":76}},{"value":"/ the general case, and can be correctly manipulated in primitive ways","span":{"file_name":"src/liballoc/vec.rs","byte_start":805076,"byte_end":805148,"line_start":204,"line_end":204,"column_start":1,"column_end":73}},{"value":"/ by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805149,"byte_end":805229,"line_start":205,"line_end":205,"column_start":1,"column_end":81}},{"value":"/ If additional type parameters are added (e.g., to support custom allocators),","span":{"file_name":"src/liballoc/vec.rs","byte_start":805230,"byte_end":805311,"line_start":206,"line_end":206,"column_start":1,"column_end":82}},{"value":"/ overriding their defaults may change the behavior.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805312,"byte_end":805366,"line_start":207,"line_end":207,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805367,"byte_end":805370,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)","span":{"file_name":"src/liballoc/vec.rs","byte_start":805371,"byte_end":805452,"line_start":209,"line_end":209,"column_start":1,"column_end":82}},{"value":"/ triplet. No more, no less. The order of these fields is completely","span":{"file_name":"src/liballoc/vec.rs","byte_start":805453,"byte_end":805523,"line_start":210,"line_end":210,"column_start":1,"column_end":71}},{"value":"/ unspecified, and you should use the appropriate methods to modify these.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805524,"byte_end":805600,"line_start":211,"line_end":211,"column_start":1,"column_end":77}},{"value":"/ The pointer will never be null, so this type is null-pointer-optimized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805601,"byte_end":805676,"line_start":212,"line_end":212,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805677,"byte_end":805680,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ However, the pointer may not actually point to allocated memory. In particular,","span":{"file_name":"src/liballoc/vec.rs","byte_start":805681,"byte_end":805764,"line_start":214,"line_end":214,"column_start":1,"column_end":84}},{"value":"/ if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],","span":{"file_name":"src/liballoc/vec.rs","byte_start":805765,"byte_end":805847,"line_start":215,"line_end":215,"column_start":1,"column_end":83}},{"value":"/ [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":805848,"byte_end":805932,"line_start":216,"line_end":216,"column_start":1,"column_end":85}},{"value":"/ on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized","span":{"file_name":"src/liballoc/vec.rs","byte_start":805933,"byte_end":806017,"line_start":217,"line_end":217,"column_start":1,"column_end":85}},{"value":"/ types inside a `Vec`, it will not allocate space for them. *Note that in this case","span":{"file_name":"src/liballoc/vec.rs","byte_start":806018,"byte_end":806104,"line_start":218,"line_end":218,"column_start":1,"column_end":87}},{"value":"/ the `Vec` may not report a [`capacity`] of 0*. `Vec` will allocate if and only","span":{"file_name":"src/liballoc/vec.rs","byte_start":806105,"byte_end":806187,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"/ if [`mem::size_of::<T>`]`() * capacity() > 0`. In general, `Vec`'s allocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":806188,"byte_end":806269,"line_start":220,"line_end":220,"column_start":1,"column_end":82}},{"value":"/ details are very subtle &mdash; if you intend to allocate memory using a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":806270,"byte_end":806352,"line_start":221,"line_end":221,"column_start":1,"column_end":83}},{"value":"/ and use it for something else (either to pass to unsafe code, or to build your","span":{"file_name":"src/liballoc/vec.rs","byte_start":806353,"byte_end":806435,"line_start":222,"line_end":222,"column_start":1,"column_end":83}},{"value":"/ own memory-backed collection), be sure to deallocate this memory by using","span":{"file_name":"src/liballoc/vec.rs","byte_start":806436,"byte_end":806513,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/ `from_raw_parts` to recover the `Vec` and then dropping it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":806514,"byte_end":806577,"line_start":224,"line_end":224,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806578,"byte_end":806581,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ If a `Vec` *has* allocated memory, then the memory it points to is on the heap","span":{"file_name":"src/liballoc/vec.rs","byte_start":806582,"byte_end":806664,"line_start":226,"line_end":226,"column_start":1,"column_end":83}},{"value":"/ (as defined by the allocator Rust is configured to use by default), and its","span":{"file_name":"src/liballoc/vec.rs","byte_start":806665,"byte_end":806744,"line_start":227,"line_end":227,"column_start":1,"column_end":80}},{"value":"/ pointer points to [`len`] initialized, contiguous elements in order (what","span":{"file_name":"src/liballoc/vec.rs","byte_start":806745,"byte_end":806822,"line_start":228,"line_end":228,"column_start":1,"column_end":78}},{"value":"/ you would see if you coerced it to a slice), followed by [`capacity`]` -","span":{"file_name":"src/liballoc/vec.rs","byte_start":806823,"byte_end":806899,"line_start":229,"line_end":229,"column_start":1,"column_end":77}},{"value":"/ `[`len`] logically uninitialized, contiguous elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":806900,"byte_end":806958,"line_start":230,"line_end":230,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806959,"byte_end":806962,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ `Vec` will never perform a \"small optimization\" where elements are actually","span":{"file_name":"src/liballoc/vec.rs","byte_start":806963,"byte_end":807042,"line_start":232,"line_end":232,"column_start":1,"column_end":80}},{"value":"/ stored on the stack for two reasons:","span":{"file_name":"src/liballoc/vec.rs","byte_start":807043,"byte_end":807083,"line_start":233,"line_end":233,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807084,"byte_end":807087,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ * It would make it more difficult for unsafe code to correctly manipulate","span":{"file_name":"src/liballoc/vec.rs","byte_start":807088,"byte_end":807165,"line_start":235,"line_end":235,"column_start":1,"column_end":78}},{"value":"/   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were","span":{"file_name":"src/liballoc/vec.rs","byte_start":807166,"byte_end":807246,"line_start":236,"line_end":236,"column_start":1,"column_end":81}},{"value":"/   only moved, and it would be more difficult to determine if a `Vec` had","span":{"file_name":"src/liballoc/vec.rs","byte_start":807247,"byte_end":807323,"line_start":237,"line_end":237,"column_start":1,"column_end":77}},{"value":"/   actually allocated memory.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807324,"byte_end":807356,"line_start":238,"line_end":238,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807357,"byte_end":807360,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ * It would penalize the general case, incurring an additional branch","span":{"file_name":"src/liballoc/vec.rs","byte_start":807361,"byte_end":807433,"line_start":240,"line_end":240,"column_start":1,"column_end":73}},{"value":"/   on every access.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807434,"byte_end":807456,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807457,"byte_end":807460,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ `Vec` will never automatically shrink itself, even if completely empty. This","span":{"file_name":"src/liballoc/vec.rs","byte_start":807461,"byte_end":807541,"line_start":243,"line_end":243,"column_start":1,"column_end":81}},{"value":"/ ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":807542,"byte_end":807621,"line_start":244,"line_end":244,"column_start":1,"column_end":80}},{"value":"/ and then filling it back up to the same [`len`] should incur no calls to","span":{"file_name":"src/liballoc/vec.rs","byte_start":807622,"byte_end":807698,"line_start":245,"line_end":245,"column_start":1,"column_end":77}},{"value":"/ the allocator. If you wish to free up unused memory, use","span":{"file_name":"src/liballoc/vec.rs","byte_start":807699,"byte_end":807759,"line_start":246,"line_end":246,"column_start":1,"column_end":61}},{"value":"/ [`shrink_to_fit`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":807760,"byte_end":807782,"line_start":247,"line_end":247,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807783,"byte_end":807786,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ [`push`] and [`insert`] will never (re)allocate if the reported capacity is","span":{"file_name":"src/liballoc/vec.rs","byte_start":807787,"byte_end":807866,"line_start":249,"line_end":249,"column_start":1,"column_end":80}},{"value":"/ sufficient. [`push`] and [`insert`] *will* (re)allocate if","span":{"file_name":"src/liballoc/vec.rs","byte_start":807867,"byte_end":807929,"line_start":250,"line_end":250,"column_start":1,"column_end":63}},{"value":"/ [`len`]` == `[`capacity`]. That is, the reported capacity is completely","span":{"file_name":"src/liballoc/vec.rs","byte_start":807930,"byte_end":808005,"line_start":251,"line_end":251,"column_start":1,"column_end":76}},{"value":"/ accurate, and can be relied on. It can even be used to manually free the memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":808006,"byte_end":808089,"line_start":252,"line_end":252,"column_start":1,"column_end":84}},{"value":"/ allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even","span":{"file_name":"src/liballoc/vec.rs","byte_start":808090,"byte_end":808172,"line_start":253,"line_end":253,"column_start":1,"column_end":83}},{"value":"/ when not necessary.","span":{"file_name":"src/liballoc/vec.rs","byte_start":808173,"byte_end":808196,"line_start":254,"line_end":254,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808197,"byte_end":808200,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ `Vec` does not guarantee any particular growth strategy when reallocating","span":{"file_name":"src/liballoc/vec.rs","byte_start":808201,"byte_end":808278,"line_start":256,"line_end":256,"column_start":1,"column_end":78}},{"value":"/ when full, nor when [`reserve`] is called. The current strategy is basic","span":{"file_name":"src/liballoc/vec.rs","byte_start":808279,"byte_end":808355,"line_start":257,"line_end":257,"column_start":1,"column_end":77}},{"value":"/ and it may prove desirable to use a non-constant growth factor. Whatever","span":{"file_name":"src/liballoc/vec.rs","byte_start":808356,"byte_end":808432,"line_start":258,"line_end":258,"column_start":1,"column_end":77}},{"value":"/ strategy is used will of course guarantee `O(1)` amortized [`push`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":808433,"byte_end":808505,"line_start":259,"line_end":259,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808506,"byte_end":808509,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ `vec![x; n]`, `vec![a, b, c, d]`, and","span":{"file_name":"src/liballoc/vec.rs","byte_start":808510,"byte_end":808551,"line_start":261,"line_end":261,"column_start":1,"column_end":42}},{"value":"/ [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":808552,"byte_end":808629,"line_start":262,"line_end":262,"column_start":1,"column_end":78}},{"value":"/ with exactly the requested capacity. If [`len`]` == `[`capacity`],","span":{"file_name":"src/liballoc/vec.rs","byte_start":808630,"byte_end":808700,"line_start":263,"line_end":263,"column_start":1,"column_end":71}},{"value":"/ (as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to","span":{"file_name":"src/liballoc/vec.rs","byte_start":808701,"byte_end":808781,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/ and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":808782,"byte_end":808867,"line_start":265,"line_end":265,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808868,"byte_end":808871,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ `Vec` will not specifically overwrite any data that is removed from it,","span":{"file_name":"src/liballoc/vec.rs","byte_start":808872,"byte_end":808947,"line_start":267,"line_end":267,"column_start":1,"column_end":76}},{"value":"/ but also won't specifically preserve it. Its uninitialized memory is","span":{"file_name":"src/liballoc/vec.rs","byte_start":808948,"byte_end":809020,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"/ scratch space that it may use however it wants. It will generally just do","span":{"file_name":"src/liballoc/vec.rs","byte_start":809021,"byte_end":809098,"line_start":269,"line_end":269,"column_start":1,"column_end":78}},{"value":"/ whatever is most efficient or otherwise easy to implement. Do not rely on","span":{"file_name":"src/liballoc/vec.rs","byte_start":809099,"byte_end":809176,"line_start":270,"line_end":270,"column_start":1,"column_end":78}},{"value":"/ removed data to be erased for security purposes. Even if you drop a `Vec`, its","span":{"file_name":"src/liballoc/vec.rs","byte_start":809177,"byte_end":809259,"line_start":271,"line_end":271,"column_start":1,"column_end":83}},{"value":"/ buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":809260,"byte_end":809343,"line_start":272,"line_end":272,"column_start":1,"column_end":84}},{"value":"/ first, that may not actually happen because the optimizer does not consider","span":{"file_name":"src/liballoc/vec.rs","byte_start":809344,"byte_end":809423,"line_start":273,"line_end":273,"column_start":1,"column_end":80}},{"value":"/ this a side-effect that must be preserved. There is one case which we will","span":{"file_name":"src/liballoc/vec.rs","byte_start":809424,"byte_end":809502,"line_start":274,"line_end":274,"column_start":1,"column_end":79}},{"value":"/ not break, however: using `unsafe` code to write to the excess capacity,","span":{"file_name":"src/liballoc/vec.rs","byte_start":809503,"byte_end":809579,"line_start":275,"line_end":275,"column_start":1,"column_end":77}},{"value":"/ and then increasing the length to match, is always valid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809580,"byte_end":809641,"line_start":276,"line_end":276,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809642,"byte_end":809645,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ `Vec` does not currently guarantee the order in which elements are dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809646,"byte_end":809725,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/ The order has changed in the past and may change again.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809726,"byte_end":809785,"line_start":279,"line_end":279,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809786,"byte_end":809789,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ [`vec!`]: ../../std/macro.vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":809790,"byte_end":809828,"line_start":281,"line_end":281,"column_start":1,"column_end":39}},{"value":"/ [`get`]: ../../std/vec/struct.Vec.html#method.get","span":{"file_name":"src/liballoc/vec.rs","byte_start":809829,"byte_end":809882,"line_start":282,"line_end":282,"column_start":1,"column_end":54}},{"value":"/ [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut","span":{"file_name":"src/liballoc/vec.rs","byte_start":809883,"byte_end":809944,"line_start":283,"line_end":283,"column_start":1,"column_end":62}},{"value":"/ [`Index`]: ../../std/ops/trait.Index.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":809945,"byte_end":809990,"line_start":284,"line_end":284,"column_start":1,"column_end":46}},{"value":"/ [`String`]: ../../std/string/struct.String.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":809991,"byte_end":810042,"line_start":285,"line_end":285,"column_start":1,"column_end":52}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":810043,"byte_end":810085,"line_start":286,"line_end":286,"column_start":1,"column_end":43}},{"value":"/ [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":810086,"byte_end":810164,"line_start":287,"line_end":287,"column_start":1,"column_end":79}},{"value":"/ [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new","span":{"file_name":"src/liballoc/vec.rs","byte_start":810165,"byte_end":810223,"line_start":288,"line_end":288,"column_start":1,"column_end":59}},{"value":"/ [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit","span":{"file_name":"src/liballoc/vec.rs","byte_start":810224,"byte_end":810297,"line_start":289,"line_end":289,"column_start":1,"column_end":74}},{"value":"/ [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":810298,"byte_end":810361,"line_start":290,"line_end":290,"column_start":1,"column_end":64}},{"value":"/ [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":810362,"byte_end":810418,"line_start":291,"line_end":291,"column_start":1,"column_end":57}},{"value":"/ [`len`]: ../../std/vec/struct.Vec.html#method.len","span":{"file_name":"src/liballoc/vec.rs","byte_start":810419,"byte_end":810472,"line_start":292,"line_end":292,"column_start":1,"column_end":54}},{"value":"/ [`push`]: ../../std/vec/struct.Vec.html#method.push","span":{"file_name":"src/liballoc/vec.rs","byte_start":810473,"byte_end":810528,"line_start":293,"line_end":293,"column_start":1,"column_end":56}},{"value":"/ [`insert`]: ../../std/vec/struct.Vec.html#method.insert","span":{"file_name":"src/liballoc/vec.rs","byte_start":810529,"byte_end":810588,"line_start":294,"line_end":294,"column_start":1,"column_end":60}},{"value":"/ [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve","span":{"file_name":"src/liballoc/vec.rs","byte_start":810589,"byte_end":810650,"line_start":295,"line_end":295,"column_start":1,"column_end":62}},{"value":"/ [owned slice]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":810651,"byte_end":810701,"line_start":296,"line_end":296,"column_start":1,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":810702,"byte_end":810747,"line_start":297,"line_end":297,"column_start":1,"column_end":46}},{"value":"rustc_diagnostic_item = \"vec_type\"","span":{"file_name":"src/liballoc/vec.rs","byte_start":810770,"byte_end":810804,"line_start":298,"line_end":298,"column_start":23,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4070},"span":{"file_name":"src/liballoc/vec.rs","byte_start":811475,"byte_end":811478,"line_start":322,"line_end":322,"column_start":18,"column_end":21},"name":"new","qualname":"<Vec<T>>::new","value":"fn () -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `Vec<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811070,"byte_end":811107,"line_start":309,"line_end":309,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811112,"byte_end":811115,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ The vector will not allocate until elements are pushed onto it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811120,"byte_end":811187,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811192,"byte_end":811195,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":811200,"byte_end":811214,"line_start":313,"line_end":313,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811219,"byte_end":811222,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":811227,"byte_end":811234,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ # #![allow(unused_mut)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":811239,"byte_end":811266,"line_start":316,"line_end":316,"column_start":5,"column_end":32}},{"value":"/ let mut vec: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":811271,"byte_end":811310,"line_start":317,"line_end":317,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":811315,"byte_end":811322,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":811327,"byte_end":811336,"line_start":319,"line_end":319,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":811341,"byte_end":811407,"line_start":320,"line_end":320,"column_start":5,"column_end":71}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":811412,"byte_end":811457,"line_start":321,"line_end":321,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4071},"span":{"file_name":"src/liballoc/vec.rs","byte_start":812612,"byte_end":812625,"line_start":356,"line_end":356,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Vec<T>>::with_capacity","value":"fn (capacity: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `Vec<T>` with the specified capacity.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `Vec<T>` with the specified capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811545,"byte_end":811610,"line_start":326,"line_end":326,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811615,"byte_end":811618,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ The vector will be able to hold exactly `capacity` elements without","span":{"file_name":"src/liballoc/vec.rs","byte_start":811623,"byte_end":811694,"line_start":328,"line_end":328,"column_start":5,"column_end":76}},{"value":"/ reallocating. If `capacity` is 0, the vector will not allocate.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811699,"byte_end":811766,"line_start":329,"line_end":329,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811771,"byte_end":811774,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ It is important to note that although the returned vector has the","span":{"file_name":"src/liballoc/vec.rs","byte_start":811779,"byte_end":811848,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"/ *capacity* specified, the vector will have a zero *length*. For an","span":{"file_name":"src/liballoc/vec.rs","byte_start":811853,"byte_end":811923,"line_start":332,"line_end":332,"column_start":5,"column_end":75}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"src/liballoc/vec.rs","byte_start":811928,"byte_end":811994,"line_start":333,"line_end":333,"column_start":5,"column_end":71}},{"value":"/ *[Capacity and reallocation]*.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811999,"byte_end":812033,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812038,"byte_end":812041,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [Capacity and reallocation]: #capacity-and-reallocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":812046,"byte_end":812105,"line_start":336,"line_end":336,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812110,"byte_end":812113,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":812118,"byte_end":812132,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812137,"byte_end":812140,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":812145,"byte_end":812152,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812157,"byte_end":812198,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812203,"byte_end":812206,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ // The vector contains no items, even though it has capacity for more","span":{"file_name":"src/liballoc/vec.rs","byte_start":812211,"byte_end":812284,"line_start":343,"line_end":343,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(vec.len(), 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812289,"byte_end":812318,"line_start":344,"line_end":344,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812323,"byte_end":812326,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"src/liballoc/vec.rs","byte_start":812331,"byte_end":812380,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/ for i in 0..10 {","span":{"file_name":"src/liballoc/vec.rs","byte_start":812385,"byte_end":812405,"line_start":347,"line_end":347,"column_start":5,"column_end":25}},{"value":"/     vec.push(i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812410,"byte_end":812430,"line_start":348,"line_end":348,"column_start":5,"column_end":25}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":812435,"byte_end":812440,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812445,"byte_end":812448,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ // ...but this may make the vector reallocate","span":{"file_name":"src/liballoc/vec.rs","byte_start":812453,"byte_end":812502,"line_start":351,"line_end":351,"column_start":5,"column_end":54}},{"value":"/ vec.push(11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812507,"byte_end":812524,"line_start":352,"line_end":352,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":812529,"byte_end":812536,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":812541,"byte_end":812550,"line_start":354,"line_end":354,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":812555,"byte_end":812600,"line_start":355,"line_end":355,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4072},"span":{"file_name":"src/liballoc/vec.rs","byte_start":814056,"byte_end":814070,"line_start":393,"line_end":393,"column_start":12,"column_end":26},"name":"into_raw_parts","qualname":"<Vec<T>>::into_raw_parts","value":"fn (self) -> (*mut T, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `Vec<T>` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `Vec<T>` into its raw components.","span":{"file_name":"src/liballoc/vec.rs","byte_start":812727,"byte_end":812777,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812782,"byte_end":812785,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns the raw pointer to the underlying data, the length of","span":{"file_name":"src/liballoc/vec.rs","byte_start":812790,"byte_end":812855,"line_start":362,"line_end":362,"column_start":5,"column_end":70}},{"value":"/ the vector (in elements), and the allocated capacity of the","span":{"file_name":"src/liballoc/vec.rs","byte_start":812860,"byte_end":812923,"line_start":363,"line_end":363,"column_start":5,"column_end":68}},{"value":"/ data (in elements). These are the same arguments in the same","span":{"file_name":"src/liballoc/vec.rs","byte_start":812928,"byte_end":812992,"line_start":364,"line_end":364,"column_start":5,"column_end":69}},{"value":"/ order as the arguments to [`from_raw_parts`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":812997,"byte_end":813046,"line_start":365,"line_end":365,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813051,"byte_end":813054,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/vec.rs","byte_start":813059,"byte_end":813125,"line_start":367,"line_end":367,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Vec`. The only way to do","span":{"file_name":"src/liballoc/vec.rs","byte_start":813130,"byte_end":813192,"line_start":368,"line_end":368,"column_start":5,"column_end":67}},{"value":"/ this is to convert the raw pointer, length, and capacity back","span":{"file_name":"src/liballoc/vec.rs","byte_start":813197,"byte_end":813262,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/ into a `Vec` with the [`from_raw_parts`] function, allowing","span":{"file_name":"src/liballoc/vec.rs","byte_start":813267,"byte_end":813330,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ the destructor to perform the cleanup.","span":{"file_name":"src/liballoc/vec.rs","byte_start":813335,"byte_end":813377,"line_start":371,"line_end":371,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813382,"byte_end":813385,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ [`from_raw_parts`]: #method.from_raw_parts","span":{"file_name":"src/liballoc/vec.rs","byte_start":813390,"byte_end":813436,"line_start":373,"line_end":373,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813441,"byte_end":813444,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":813449,"byte_end":813463,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813468,"byte_end":813471,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":813476,"byte_end":813483,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_into_raw_parts)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":813488,"byte_end":813523,"line_start":378,"line_end":378,"column_start":5,"column_end":40}},{"value":"/ let v: Vec<i32> = vec![-1, 0, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":813528,"byte_end":813565,"line_start":379,"line_end":379,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813570,"byte_end":813573,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let (ptr, len, cap) = v.into_raw_parts();","span":{"file_name":"src/liballoc/vec.rs","byte_start":813578,"byte_end":813623,"line_start":381,"line_end":381,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813628,"byte_end":813631,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let rebuilt = unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":813636,"byte_end":813662,"line_start":383,"line_end":383,"column_start":5,"column_end":31}},{"value":"/     // We can now make changes to the components, such as","span":{"file_name":"src/liballoc/vec.rs","byte_start":813667,"byte_end":813728,"line_start":384,"line_end":384,"column_start":5,"column_end":66}},{"value":"/     // transmuting the raw pointer to a compatible type.","span":{"file_name":"src/liballoc/vec.rs","byte_start":813733,"byte_end":813793,"line_start":385,"line_end":385,"column_start":5,"column_end":65}},{"value":"/     let ptr = ptr as *mut u32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":813798,"byte_end":813832,"line_start":386,"line_end":386,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813837,"byte_end":813840,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/     Vec::from_raw_parts(ptr, len, cap)","span":{"file_name":"src/liballoc/vec.rs","byte_start":813845,"byte_end":813887,"line_start":388,"line_end":388,"column_start":5,"column_end":47}},{"value":"/ };","span":{"file_name":"src/liballoc/vec.rs","byte_start":813892,"byte_end":813898,"line_start":389,"line_end":389,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(rebuilt, [4294967295, 0, 1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":813903,"byte_end":813947,"line_start":390,"line_end":390,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":813952,"byte_end":813959,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n           \"65816\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":813964,"byte_end":814044,"line_start":392,"line_end":392,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"src/liballoc/vec.rs","byte_start":816994,"byte_end":817008,"line_start":461,"line_end":461,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<Vec<T>>::from_raw_parts","value":"fn (ptr: *mut T, length: usize, capacity: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Vec<T>` directly from the raw components of another vector.","sig":null,"attributes":[{"value":"/ Creates a `Vec<T>` directly from the raw components of another vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814218,"byte_end":814292,"line_start":398,"line_end":398,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":814297,"byte_end":814300,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/vec.rs","byte_start":814305,"byte_end":814317,"line_start":400,"line_end":400,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":814322,"byte_end":814325,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ This is highly unsafe, due to the number of invariants that aren't","span":{"file_name":"src/liballoc/vec.rs","byte_start":814330,"byte_end":814400,"line_start":402,"line_end":402,"column_start":5,"column_end":75}},{"value":"/ checked:","span":{"file_name":"src/liballoc/vec.rs","byte_start":814405,"byte_end":814417,"line_start":403,"line_end":403,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":814422,"byte_end":814425,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`","span":{"file_name":"src/liballoc/vec.rs","byte_start":814430,"byte_end":814505,"line_start":405,"line_end":405,"column_start":5,"column_end":80}},{"value":"/   (at least, it's highly likely to be incorrect if it wasn't).","span":{"file_name":"src/liballoc/vec.rs","byte_start":814510,"byte_end":814576,"line_start":406,"line_end":406,"column_start":5,"column_end":71}},{"value":"/ * `T` needs to have the same size and alignment as what `ptr` was allocated with.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814581,"byte_end":814666,"line_start":407,"line_end":407,"column_start":5,"column_end":90}},{"value":"/   (`T` having a less strict alignment is not sufficient, the alignment really","span":{"file_name":"src/liballoc/vec.rs","byte_start":814671,"byte_end":814752,"line_start":408,"line_end":408,"column_start":5,"column_end":86}},{"value":"/   needs to be equal to satsify the [`dealloc`] requirement that memory must be","span":{"file_name":"src/liballoc/vec.rs","byte_start":814757,"byte_end":814839,"line_start":409,"line_end":409,"column_start":5,"column_end":87}},{"value":"/   allocated and deallocated with the same layout.)","span":{"file_name":"src/liballoc/vec.rs","byte_start":814844,"byte_end":814898,"line_start":410,"line_end":410,"column_start":5,"column_end":59}},{"value":"/ * `length` needs to be less than or equal to `capacity`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814903,"byte_end":814963,"line_start":411,"line_end":411,"column_start":5,"column_end":65}},{"value":"/ * `capacity` needs to be the capacity that the pointer was allocated with.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814968,"byte_end":815046,"line_start":412,"line_end":412,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815051,"byte_end":815054,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Violating these may cause problems like corrupting the allocator's","span":{"file_name":"src/liballoc/vec.rs","byte_start":815059,"byte_end":815129,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ internal data structures. For example it is **not** safe","span":{"file_name":"src/liballoc/vec.rs","byte_start":815134,"byte_end":815194,"line_start":415,"line_end":415,"column_start":5,"column_end":65}},{"value":"/ to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815199,"byte_end":815280,"line_start":416,"line_end":416,"column_start":5,"column_end":86}},{"value":"/ It's also not safe to build one from a `Vec<u16>` and its length, because","span":{"file_name":"src/liballoc/vec.rs","byte_start":815285,"byte_end":815362,"line_start":417,"line_end":417,"column_start":5,"column_end":82}},{"value":"/ the allocator cares about the alignment, and these two types have different","span":{"file_name":"src/liballoc/vec.rs","byte_start":815367,"byte_end":815446,"line_start":418,"line_end":418,"column_start":5,"column_end":84}},{"value":"/ alignments. The buffer was allocated with alignment 2 (for `u16`), but after","span":{"file_name":"src/liballoc/vec.rs","byte_start":815451,"byte_end":815531,"line_start":419,"line_end":419,"column_start":5,"column_end":85}},{"value":"/ turning it into a `Vec<u8>` it'll be deallocated with alignment 1.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815536,"byte_end":815606,"line_start":420,"line_end":420,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815611,"byte_end":815614,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The ownership of `ptr` is effectively transferred to the","span":{"file_name":"src/liballoc/vec.rs","byte_start":815619,"byte_end":815679,"line_start":422,"line_end":422,"column_start":5,"column_end":65}},{"value":"/ `Vec<T>` which may then deallocate, reallocate or change the","span":{"file_name":"src/liballoc/vec.rs","byte_start":815684,"byte_end":815748,"line_start":423,"line_end":423,"column_start":5,"column_end":69}},{"value":"/ contents of memory pointed to by the pointer at will. Ensure","span":{"file_name":"src/liballoc/vec.rs","byte_start":815753,"byte_end":815817,"line_start":424,"line_end":424,"column_start":5,"column_end":69}},{"value":"/ that nothing else uses the pointer after calling this","span":{"file_name":"src/liballoc/vec.rs","byte_start":815822,"byte_end":815879,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ function.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815884,"byte_end":815897,"line_start":426,"line_end":426,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815902,"byte_end":815905,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ [`String`]: ../../std/string/struct.String.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":815910,"byte_end":815961,"line_start":428,"line_end":428,"column_start":5,"column_end":56}},{"value":"/ [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc","span":{"file_name":"src/liballoc/vec.rs","byte_start":815966,"byte_end":816040,"line_start":429,"line_end":429,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816045,"byte_end":816048,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":816053,"byte_end":816067,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816072,"byte_end":816075,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":816080,"byte_end":816087,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/vec.rs","byte_start":816092,"byte_end":816109,"line_start":434,"line_end":434,"column_start":5,"column_end":22}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/vec.rs","byte_start":816114,"byte_end":816131,"line_start":435,"line_end":435,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816136,"byte_end":816139,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":816144,"byte_end":816170,"line_start":437,"line_end":437,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816175,"byte_end":816178,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ // Prevent running `v`'s destructor so we are in complete control","span":{"file_name":"src/liballoc/vec.rs","byte_start":816246,"byte_end":816315,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ // of the allocation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":816320,"byte_end":816345,"line_start":441,"line_end":441,"column_start":5,"column_end":30}},{"value":"/ let mut v = mem::ManuallyDrop::new(v);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816350,"byte_end":816392,"line_start":442,"line_end":442,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816397,"byte_end":816400,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ // Pull out the various important pieces of information about `v`","span":{"file_name":"src/liballoc/vec.rs","byte_start":816405,"byte_end":816474,"line_start":444,"line_end":444,"column_start":5,"column_end":74}},{"value":"/ let p = v.as_mut_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":816479,"byte_end":816506,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/ let len = v.len();","span":{"file_name":"src/liballoc/vec.rs","byte_start":816511,"byte_end":816533,"line_start":446,"line_end":446,"column_start":5,"column_end":27}},{"value":"/ let cap = v.capacity();","span":{"file_name":"src/liballoc/vec.rs","byte_start":816538,"byte_end":816565,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816570,"byte_end":816573,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":816578,"byte_end":816590,"line_start":449,"line_end":449,"column_start":5,"column_end":17}},{"value":"/     // Overwrite memory with 4, 5, 6","span":{"file_name":"src/liballoc/vec.rs","byte_start":816595,"byte_end":816635,"line_start":450,"line_end":450,"column_start":5,"column_end":45}},{"value":"/     for i in 0..len as isize {","span":{"file_name":"src/liballoc/vec.rs","byte_start":816640,"byte_end":816674,"line_start":451,"line_end":451,"column_start":5,"column_end":39}},{"value":"/         ptr::write(p.offset(i), 4 + i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816679,"byte_end":816722,"line_start":452,"line_end":452,"column_start":5,"column_end":48}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":816727,"byte_end":816736,"line_start":453,"line_end":453,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816741,"byte_end":816744,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/     // Put everything back together into a Vec","span":{"file_name":"src/liballoc/vec.rs","byte_start":816749,"byte_end":816799,"line_start":455,"line_end":455,"column_start":5,"column_end":55}},{"value":"/     let rebuilt = Vec::from_raw_parts(p, len, cap);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816804,"byte_end":816859,"line_start":456,"line_end":456,"column_start":5,"column_end":60}},{"value":"/     assert_eq!(rebuilt, [4, 5, 6]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816864,"byte_end":816903,"line_start":457,"line_end":457,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":816908,"byte_end":816913,"line_start":458,"line_end":458,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":816918,"byte_end":816925,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":816930,"byte_end":816975,"line_start":460,"line_end":460,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4074},"span":{"file_name":"src/liballoc/vec.rs","byte_start":817460,"byte_end":817468,"line_start":476,"line_end":476,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the vector can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the vector can hold without","span":{"file_name":"src/liballoc/vec.rs","byte_start":817149,"byte_end":817211,"line_start":465,"line_end":465,"column_start":5,"column_end":67}},{"value":"/ reallocating.","span":{"file_name":"src/liballoc/vec.rs","byte_start":817216,"byte_end":817233,"line_start":466,"line_end":466,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817238,"byte_end":817241,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":817246,"byte_end":817260,"line_start":468,"line_end":468,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817265,"byte_end":817268,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":817273,"byte_end":817280,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"/ let vec: Vec<i32> = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817285,"byte_end":817332,"line_start":471,"line_end":471,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817337,"byte_end":817372,"line_start":472,"line_end":472,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":817377,"byte_end":817384,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":817389,"byte_end":817398,"line_start":474,"line_end":474,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":817403,"byte_end":817448,"line_start":475,"line_end":475,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4075},"span":{"file_name":"src/liballoc/vec.rs","byte_start":818173,"byte_end":818180,"line_start":498,"line_end":498,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Vec<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the given `Vec<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/vec.rs","byte_start":817526,"byte_end":817602,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/ in the given `Vec<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/vec.rs","byte_start":817607,"byte_end":817680,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/vec.rs","byte_start":817685,"byte_end":817754,"line_start":482,"line_end":482,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/vec.rs","byte_start":817759,"byte_end":817830,"line_start":483,"line_end":483,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":817835,"byte_end":817870,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817875,"byte_end":817878,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":817883,"byte_end":817895,"line_start":486,"line_end":486,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817900,"byte_end":817903,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":817908,"byte_end":817957,"line_start":488,"line_end":488,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817962,"byte_end":817965,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":817970,"byte_end":817984,"line_start":490,"line_end":490,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817989,"byte_end":817992,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":817997,"byte_end":818004,"line_start":492,"line_end":492,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":818009,"byte_end":818035,"line_start":493,"line_end":493,"column_start":5,"column_end":31}},{"value":"/ vec.reserve(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818040,"byte_end":818060,"line_start":494,"line_end":494,"column_start":5,"column_end":25}},{"value":"/ assert!(vec.capacity() >= 11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818065,"byte_end":818099,"line_start":495,"line_end":495,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":818104,"byte_end":818111,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":818116,"byte_end":818161,"line_start":497,"line_end":497,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4076},"span":{"file_name":"src/liballoc/vec.rs","byte_start":819096,"byte_end":819109,"line_start":523,"line_end":523,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<Vec<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/vec.rs","byte_start":818272,"byte_end":818347,"line_start":502,"line_end":502,"column_start":5,"column_end":80}},{"value":"/ be inserted in the given `Vec<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":818352,"byte_end":818421,"line_start":503,"line_end":503,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818426,"byte_end":818498,"line_start":504,"line_end":504,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818503,"byte_end":818558,"line_start":505,"line_end":505,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818563,"byte_end":818566,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/vec.rs","byte_start":818571,"byte_end":818641,"line_start":507,"line_end":507,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/vec.rs","byte_start":818646,"byte_end":818718,"line_start":508,"line_end":508,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818723,"byte_end":818787,"line_start":509,"line_end":509,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818792,"byte_end":818795,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":818800,"byte_end":818812,"line_start":511,"line_end":511,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818817,"byte_end":818820,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818825,"byte_end":818874,"line_start":513,"line_end":513,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818879,"byte_end":818882,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":818887,"byte_end":818901,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818906,"byte_end":818909,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":818914,"byte_end":818921,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":818926,"byte_end":818952,"line_start":518,"line_end":518,"column_start":5,"column_end":31}},{"value":"/ vec.reserve_exact(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818957,"byte_end":818983,"line_start":519,"line_end":519,"column_start":5,"column_end":31}},{"value":"/ assert!(vec.capacity() >= 11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818988,"byte_end":819022,"line_start":520,"line_end":520,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":819027,"byte_end":819034,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":819039,"byte_end":819084,"line_start":522,"line_end":522,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4077},"span":{"file_name":"src/liballoc/vec.rs","byte_start":820496,"byte_end":820507,"line_start":560,"line_end":560,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<Vec<T>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `Vec<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/vec.rs","byte_start":819207,"byte_end":819291,"line_start":527,"line_end":527,"column_start":5,"column_end":89}},{"value":"/ in the given `Vec<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/vec.rs","byte_start":819296,"byte_end":819369,"line_start":528,"line_end":528,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/vec.rs","byte_start":819374,"byte_end":819443,"line_start":529,"line_end":529,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/vec.rs","byte_start":819448,"byte_end":819519,"line_start":530,"line_end":530,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819524,"byte_end":819559,"line_start":531,"line_end":531,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819564,"byte_end":819567,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/vec.rs","byte_start":819572,"byte_end":819584,"line_start":533,"line_end":533,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819589,"byte_end":819592,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/vec.rs","byte_start":819597,"byte_end":819677,"line_start":535,"line_end":535,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819682,"byte_end":819698,"line_start":536,"line_end":536,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819703,"byte_end":819706,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":819711,"byte_end":819725,"line_start":538,"line_end":538,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819730,"byte_end":819733,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":819738,"byte_end":819745,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":819750,"byte_end":819778,"line_start":541,"line_end":541,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/vec.rs","byte_start":819783,"byte_end":819825,"line_start":542,"line_end":542,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819830,"byte_end":819833,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":819838,"byte_end":819910,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/     let mut output = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":819915,"byte_end":819951,"line_start":545,"line_end":545,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819956,"byte_end":819959,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/vec.rs","byte_start":819964,"byte_end":820018,"line_start":547,"line_end":547,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/vec.rs","byte_start":820023,"byte_end":820063,"line_start":548,"line_end":548,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820068,"byte_end":820071,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/vec.rs","byte_start":820076,"byte_end":820147,"line_start":550,"line_end":550,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/vec.rs","byte_start":820152,"byte_end":820198,"line_start":551,"line_end":551,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/vec.rs","byte_start":820203,"byte_end":820246,"line_start":552,"line_end":552,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/vec.rs","byte_start":820251,"byte_end":820263,"line_start":553,"line_end":553,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820268,"byte_end":820271,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/vec.rs","byte_start":820276,"byte_end":820294,"line_start":555,"line_end":555,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":820299,"byte_end":820304,"line_start":556,"line_end":556,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":820309,"byte_end":820394,"line_start":557,"line_end":557,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":820399,"byte_end":820406,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":820411,"byte_end":820484,"line_start":559,"line_end":559,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4078},"span":{"file_name":"src/liballoc/vec.rs","byte_start":822094,"byte_end":822111,"line_start":600,"line_end":600,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<Vec<T>>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/vec.rs","byte_start":820633,"byte_end":820717,"line_start":564,"line_end":564,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `Vec<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":820722,"byte_end":820791,"line_start":565,"line_end":565,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":820796,"byte_end":820868,"line_start":566,"line_end":566,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":820873,"byte_end":820928,"line_start":567,"line_end":567,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820933,"byte_end":820936,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/vec.rs","byte_start":820941,"byte_end":821011,"line_start":569,"line_end":569,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/vec.rs","byte_start":821016,"byte_end":821088,"line_start":570,"line_end":570,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/vec.rs","byte_start":821093,"byte_end":821157,"line_start":571,"line_end":571,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821162,"byte_end":821165,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/vec.rs","byte_start":821170,"byte_end":821182,"line_start":573,"line_end":573,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821187,"byte_end":821190,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/vec.rs","byte_start":821195,"byte_end":821275,"line_start":575,"line_end":575,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/vec.rs","byte_start":821280,"byte_end":821296,"line_start":576,"line_end":576,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821301,"byte_end":821304,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":821309,"byte_end":821323,"line_start":578,"line_end":578,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821328,"byte_end":821331,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":821336,"byte_end":821343,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":821348,"byte_end":821376,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/vec.rs","byte_start":821381,"byte_end":821423,"line_start":582,"line_end":582,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821428,"byte_end":821431,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":821436,"byte_end":821508,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/     let mut output = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":821513,"byte_end":821549,"line_start":585,"line_end":585,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821554,"byte_end":821557,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/vec.rs","byte_start":821562,"byte_end":821616,"line_start":587,"line_end":587,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/vec.rs","byte_start":821621,"byte_end":821661,"line_start":588,"line_end":588,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821666,"byte_end":821669,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/vec.rs","byte_start":821674,"byte_end":821745,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/vec.rs","byte_start":821750,"byte_end":821796,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/vec.rs","byte_start":821801,"byte_end":821844,"line_start":592,"line_end":592,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/vec.rs","byte_start":821849,"byte_end":821861,"line_start":593,"line_end":593,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821866,"byte_end":821869,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/vec.rs","byte_start":821874,"byte_end":821892,"line_start":595,"line_end":595,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":821897,"byte_end":821902,"line_start":596,"line_end":596,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":821907,"byte_end":821992,"line_start":597,"line_end":597,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":821997,"byte_end":822004,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":822009,"byte_end":822082,"line_start":599,"line_end":599,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4079},"span":{"file_name":"src/liballoc/vec.rs","byte_start":822791,"byte_end":822804,"line_start":619,"line_end":619,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Vec<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector as much as possible.","span":{"file_name":"src/liballoc/vec.rs","byte_start":822243,"byte_end":822302,"line_start":604,"line_end":604,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822307,"byte_end":822310,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ It will drop down as close as possible to the length but the allocator","span":{"file_name":"src/liballoc/vec.rs","byte_start":822315,"byte_end":822389,"line_start":606,"line_end":606,"column_start":5,"column_end":79}},{"value":"/ may still inform the vector that there is space for a few more elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":822394,"byte_end":822470,"line_start":607,"line_end":607,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822475,"byte_end":822478,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":822483,"byte_end":822497,"line_start":609,"line_end":609,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822502,"byte_end":822505,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":822510,"byte_end":822517,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":822522,"byte_end":822563,"line_start":612,"line_end":612,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":822568,"byte_end":822610,"line_start":613,"line_end":613,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":822615,"byte_end":822650,"line_start":614,"line_end":614,"column_start":5,"column_end":40}},{"value":"/ vec.shrink_to_fit();","span":{"file_name":"src/liballoc/vec.rs","byte_start":822655,"byte_end":822679,"line_start":615,"line_end":615,"column_start":5,"column_end":29}},{"value":"/ assert!(vec.capacity() >= 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":822684,"byte_end":822717,"line_start":616,"line_end":616,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":822722,"byte_end":822729,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":822734,"byte_end":822779,"line_start":618,"line_end":618,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4080},"span":{"file_name":"src/liballoc/vec.rs","byte_start":823660,"byte_end":823669,"line_start":648,"line_end":648,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<Vec<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector with a lower bound.","span":{"file_name":"src/liballoc/vec.rs","byte_start":822926,"byte_end":822984,"line_start":625,"line_end":625,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822989,"byte_end":822992,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/vec.rs","byte_start":822997,"byte_end":823062,"line_start":627,"line_end":627,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823067,"byte_end":823094,"line_start":628,"line_end":628,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823099,"byte_end":823102,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":823107,"byte_end":823119,"line_start":630,"line_end":630,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823124,"byte_end":823127,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/vec.rs","byte_start":823132,"byte_end":823195,"line_start":632,"line_end":632,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823200,"byte_end":823221,"line_start":633,"line_end":633,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823226,"byte_end":823229,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":823234,"byte_end":823248,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823253,"byte_end":823256,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":823261,"byte_end":823268,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":823273,"byte_end":823299,"line_start":638,"line_end":638,"column_start":5,"column_end":31}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823304,"byte_end":823345,"line_start":639,"line_end":639,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":823350,"byte_end":823392,"line_start":640,"line_end":640,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823397,"byte_end":823432,"line_start":641,"line_end":641,"column_start":5,"column_end":40}},{"value":"/ vec.shrink_to(4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823437,"byte_end":823458,"line_start":642,"line_end":642,"column_start":5,"column_end":26}},{"value":"/ assert!(vec.capacity() >= 4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823463,"byte_end":823496,"line_start":643,"line_end":643,"column_start":5,"column_end":38}},{"value":"/ vec.shrink_to(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823501,"byte_end":823522,"line_start":644,"line_end":644,"column_start":5,"column_end":26}},{"value":"/ assert!(vec.capacity() >= 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823527,"byte_end":823560,"line_start":645,"line_end":645,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":823565,"byte_end":823572,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":823577,"byte_end":823648,"line_start":647,"line_end":647,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4081},"span":{"file_name":"src/liballoc/vec.rs","byte_start":824480,"byte_end":824496,"line_start":677,"line_end":677,"column_start":12,"column_end":28},"name":"into_boxed_slice","qualname":"<Vec<T>>::into_boxed_slice","value":"fn (mut self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`Box<[T]>`][owned slice].","sig":null,"attributes":[{"value":"/ Converts the vector into [`Box<[T]>`][owned slice].","span":{"file_name":"src/liballoc/vec.rs","byte_start":823781,"byte_end":823836,"line_start":652,"line_end":652,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823841,"byte_end":823844,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823849,"byte_end":823898,"line_start":654,"line_end":654,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823903,"byte_end":823906,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ [owned slice]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":823911,"byte_end":823961,"line_start":656,"line_end":656,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823966,"byte_end":823969,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":823974,"byte_end":823988,"line_start":658,"line_end":658,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823993,"byte_end":823996,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":824001,"byte_end":824008,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/ let v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":824013,"byte_end":824039,"line_start":661,"line_end":661,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824044,"byte_end":824047,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let slice = v.into_boxed_slice();","span":{"file_name":"src/liballoc/vec.rs","byte_start":824052,"byte_end":824089,"line_start":663,"line_end":663,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":824094,"byte_end":824101,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824106,"byte_end":824109,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"src/liballoc/vec.rs","byte_start":824114,"byte_end":824149,"line_start":666,"line_end":666,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824154,"byte_end":824157,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":824162,"byte_end":824169,"line_start":668,"line_end":668,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824174,"byte_end":824215,"line_start":669,"line_end":669,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":824220,"byte_end":824262,"line_start":670,"line_end":670,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824267,"byte_end":824270,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824275,"byte_end":824310,"line_start":672,"line_end":672,"column_start":5,"column_end":40}},{"value":"/ let slice = vec.into_boxed_slice();","span":{"file_name":"src/liballoc/vec.rs","byte_start":824315,"byte_end":824354,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(slice.into_vec().capacity(), 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824359,"byte_end":824406,"line_start":674,"line_end":674,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":824411,"byte_end":824418,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":824423,"byte_end":824468,"line_start":676,"line_end":676,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4082},"span":{"file_name":"src/liballoc/vec.rs","byte_start":825931,"byte_end":825939,"line_start":729,"line_end":729,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping\n the rest.","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping","span":{"file_name":"src/liballoc/vec.rs","byte_start":824695,"byte_end":824765,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ the rest.","span":{"file_name":"src/liballoc/vec.rs","byte_start":824770,"byte_end":824783,"line_start":687,"line_end":687,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824788,"byte_end":824791,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the vector's current length, this has no","span":{"file_name":"src/liballoc/vec.rs","byte_start":824796,"byte_end":824865,"line_start":689,"line_end":689,"column_start":5,"column_end":74}},{"value":"/ effect.","span":{"file_name":"src/liballoc/vec.rs","byte_start":824870,"byte_end":824881,"line_start":690,"line_end":690,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824886,"byte_end":824889,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess","span":{"file_name":"src/liballoc/vec.rs","byte_start":824894,"byte_end":824964,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ elements to be returned instead of dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":824969,"byte_end":825016,"line_start":693,"line_end":693,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825021,"byte_end":825024,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":825029,"byte_end":825094,"line_start":695,"line_end":695,"column_start":5,"column_end":70}},{"value":"/ of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":825099,"byte_end":825117,"line_start":696,"line_end":696,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825122,"byte_end":825125,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":825130,"byte_end":825144,"line_start":698,"line_end":698,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825149,"byte_end":825152,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Truncating a five element vector to two elements:","span":{"file_name":"src/liballoc/vec.rs","byte_start":825157,"byte_end":825210,"line_start":700,"line_end":700,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825215,"byte_end":825218,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825223,"byte_end":825230,"line_start":702,"line_end":702,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":825235,"byte_end":825273,"line_start":703,"line_end":703,"column_start":5,"column_end":43}},{"value":"/ vec.truncate(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825278,"byte_end":825298,"line_start":704,"line_end":704,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825303,"byte_end":825331,"line_start":705,"line_end":705,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825336,"byte_end":825343,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825348,"byte_end":825351,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ No truncation occurs when `len` is greater than the vector's current","span":{"file_name":"src/liballoc/vec.rs","byte_start":825356,"byte_end":825428,"line_start":708,"line_end":708,"column_start":5,"column_end":77}},{"value":"/ length:","span":{"file_name":"src/liballoc/vec.rs","byte_start":825433,"byte_end":825444,"line_start":709,"line_end":709,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825449,"byte_end":825452,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825457,"byte_end":825464,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":825469,"byte_end":825501,"line_start":712,"line_end":712,"column_start":5,"column_end":37}},{"value":"/ vec.truncate(8);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825506,"byte_end":825526,"line_start":713,"line_end":713,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, [1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825531,"byte_end":825562,"line_start":714,"line_end":714,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825567,"byte_end":825574,"line_start":715,"line_end":715,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825579,"byte_end":825582,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":825587,"byte_end":825656,"line_start":717,"line_end":717,"column_start":5,"column_end":74}},{"value":"/ method.","span":{"file_name":"src/liballoc/vec.rs","byte_start":825661,"byte_end":825672,"line_start":718,"line_end":718,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825677,"byte_end":825680,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825685,"byte_end":825692,"line_start":720,"line_end":720,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":825697,"byte_end":825729,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/ vec.truncate(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825734,"byte_end":825754,"line_start":722,"line_end":722,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, []);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825759,"byte_end":825783,"line_start":723,"line_end":723,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825788,"byte_end":825795,"line_start":724,"line_end":724,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825800,"byte_end":825803,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"src/liballoc/vec.rs","byte_start":825808,"byte_end":825836,"line_start":726,"line_end":726,"column_start":5,"column_end":33}},{"value":"/ [`drain`]: #method.drain","span":{"file_name":"src/liballoc/vec.rs","byte_start":825841,"byte_end":825869,"line_start":727,"line_end":727,"column_start":5,"column_end":33}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":825874,"byte_end":825919,"line_start":728,"line_end":728,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4083},"span":{"file_name":"src/liballoc/vec.rs","byte_start":826972,"byte_end":826980,"line_start":760,"line_end":760,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Vec<T>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a slice containing the entire vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":826608,"byte_end":826658,"line_start":747,"line_end":747,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":826663,"byte_end":826666,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `&s[..]`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":826671,"byte_end":826698,"line_start":749,"line_end":749,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":826703,"byte_end":826706,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":826711,"byte_end":826725,"line_start":751,"line_end":751,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":826730,"byte_end":826733,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":826738,"byte_end":826745,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"src/liballoc/vec.rs","byte_start":826750,"byte_end":826781,"line_start":754,"line_end":754,"column_start":5,"column_end":36}},{"value":"/ let buffer = vec![1, 2, 3, 5, 8];","span":{"file_name":"src/liballoc/vec.rs","byte_start":826786,"byte_end":826823,"line_start":755,"line_end":755,"column_start":5,"column_end":42}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":826828,"byte_end":826877,"line_start":756,"line_end":756,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":826882,"byte_end":826889,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":826894,"byte_end":826903,"line_start":758,"line_end":758,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_as_slice\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":826908,"byte_end":826960,"line_start":759,"line_end":759,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4084},"span":{"file_name":"src/liballoc/vec.rs","byte_start":827400,"byte_end":827412,"line_start":777,"line_end":777,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<Vec<T>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827022,"byte_end":827072,"line_start":764,"line_end":764,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827077,"byte_end":827080,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `&mut s[..]`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827085,"byte_end":827116,"line_start":766,"line_end":766,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827121,"byte_end":827124,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":827129,"byte_end":827143,"line_start":768,"line_end":768,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827148,"byte_end":827151,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827156,"byte_end":827163,"line_start":770,"line_end":770,"column_start":5,"column_end":12}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"src/liballoc/vec.rs","byte_start":827168,"byte_end":827198,"line_start":771,"line_end":771,"column_start":5,"column_end":35}},{"value":"/ let mut buffer = vec![0; 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":827203,"byte_end":827235,"line_start":772,"line_end":772,"column_start":5,"column_end":37}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":827240,"byte_end":827305,"line_start":773,"line_end":773,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827310,"byte_end":827317,"line_start":774,"line_end":774,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":827322,"byte_end":827331,"line_start":775,"line_end":775,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_as_slice\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":827336,"byte_end":827388,"line_start":776,"line_end":776,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4085},"span":{"file_name":"src/liballoc/vec.rs","byte_start":828467,"byte_end":828473,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Vec<T>>::as_ptr","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector's buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector's buffer.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827462,"byte_end":827511,"line_start":781,"line_end":781,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827516,"byte_end":827519,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"src/liballoc/vec.rs","byte_start":827524,"byte_end":827592,"line_start":783,"line_end":783,"column_start":5,"column_end":73}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827597,"byte_end":827662,"line_start":784,"line_end":784,"column_start":5,"column_end":70}},{"value":"/ Modifying the vector may cause its buffer to be reallocated,","span":{"file_name":"src/liballoc/vec.rs","byte_start":827667,"byte_end":827731,"line_start":785,"line_end":785,"column_start":5,"column_end":69}},{"value":"/ which would also make any pointers to it invalid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827736,"byte_end":827789,"line_start":786,"line_end":786,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827794,"byte_end":827797,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ The caller must also ensure that the memory the pointer (non-transitively) points to","span":{"file_name":"src/liballoc/vec.rs","byte_start":827802,"byte_end":827890,"line_start":788,"line_end":788,"column_start":5,"column_end":93}},{"value":"/ is never written to (except inside an `UnsafeCell`) using this pointer or any pointer","span":{"file_name":"src/liballoc/vec.rs","byte_start":827895,"byte_end":827984,"line_start":789,"line_end":789,"column_start":5,"column_end":94}},{"value":"/ derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":827989,"byte_end":828078,"line_start":790,"line_end":790,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828083,"byte_end":828086,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":828091,"byte_end":828105,"line_start":792,"line_end":792,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828110,"byte_end":828113,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828118,"byte_end":828125,"line_start":794,"line_end":794,"column_start":5,"column_end":12}},{"value":"/ let x = vec![1, 2, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":828130,"byte_end":828156,"line_start":795,"line_end":795,"column_start":5,"column_end":31}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":828161,"byte_end":828188,"line_start":796,"line_end":796,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828193,"byte_end":828196,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":828201,"byte_end":828213,"line_start":798,"line_end":798,"column_start":5,"column_end":17}},{"value":"/     for i in 0..x.len() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":828218,"byte_end":828247,"line_start":799,"line_end":799,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(*x_ptr.add(i), 1 << i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":828252,"byte_end":828298,"line_start":800,"line_end":800,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":828303,"byte_end":828312,"line_start":801,"line_end":801,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":828317,"byte_end":828322,"line_start":802,"line_end":802,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828327,"byte_end":828334,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828339,"byte_end":828342,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ [`as_mut_ptr`]: #method.as_mut_ptr","span":{"file_name":"src/liballoc/vec.rs","byte_start":828347,"byte_end":828385,"line_start":805,"line_end":805,"column_start":5,"column_end":43}},{"value":"stable(feature = \"vec_as_ptr\", since = \"1.37.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":828390,"byte_end":828441,"line_start":806,"line_end":806,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":828446,"byte_end":828455,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4086},"span":{"file_name":"src/liballoc/vec.rs","byte_start":829662,"byte_end":829672,"line_start":844,"line_end":844,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Vec<T>>::as_mut_ptr","value":"fn (&mut self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector's buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector's buffer.","span":{"file_name":"src/liballoc/vec.rs","byte_start":828754,"byte_end":828815,"line_start":818,"line_end":818,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828820,"byte_end":828823,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"src/liballoc/vec.rs","byte_start":828828,"byte_end":828896,"line_start":820,"line_end":820,"column_start":5,"column_end":73}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"src/liballoc/vec.rs","byte_start":828901,"byte_end":828966,"line_start":821,"line_end":821,"column_start":5,"column_end":70}},{"value":"/ Modifying the vector may cause its buffer to be reallocated,","span":{"file_name":"src/liballoc/vec.rs","byte_start":828971,"byte_end":829035,"line_start":822,"line_end":822,"column_start":5,"column_end":69}},{"value":"/ which would also make any pointers to it invalid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829040,"byte_end":829093,"line_start":823,"line_end":823,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829098,"byte_end":829101,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":829106,"byte_end":829120,"line_start":825,"line_end":825,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829125,"byte_end":829128,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":829133,"byte_end":829140,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ // Allocate vector big enough for 4 elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829145,"byte_end":829194,"line_start":828,"line_end":828,"column_start":5,"column_end":54}},{"value":"/ let size = 4;","span":{"file_name":"src/liballoc/vec.rs","byte_start":829199,"byte_end":829216,"line_start":829,"line_end":829,"column_start":5,"column_end":22}},{"value":"/ let mut x: Vec<i32> = Vec::with_capacity(size);","span":{"file_name":"src/liballoc/vec.rs","byte_start":829221,"byte_end":829272,"line_start":830,"line_end":830,"column_start":5,"column_end":56}},{"value":"/ let x_ptr = x.as_mut_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":829277,"byte_end":829308,"line_start":831,"line_end":831,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829313,"byte_end":829316,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ // Initialize elements via raw pointer writes, then set length.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829321,"byte_end":829388,"line_start":833,"line_end":833,"column_start":5,"column_end":72}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":829393,"byte_end":829405,"line_start":834,"line_end":834,"column_start":5,"column_end":17}},{"value":"/     for i in 0..size {","span":{"file_name":"src/liballoc/vec.rs","byte_start":829410,"byte_end":829436,"line_start":835,"line_end":835,"column_start":5,"column_end":31}},{"value":"/         *x_ptr.add(i) = i as i32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":829441,"byte_end":829478,"line_start":836,"line_end":836,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":829483,"byte_end":829492,"line_start":837,"line_end":837,"column_start":5,"column_end":14}},{"value":"/     x.set_len(size);","span":{"file_name":"src/liballoc/vec.rs","byte_start":829497,"byte_end":829521,"line_start":838,"line_end":838,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":829526,"byte_end":829531,"line_start":839,"line_end":839,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(&*x, &[0,1,2,3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":829536,"byte_end":829568,"line_start":840,"line_end":840,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":829573,"byte_end":829580,"line_start":841,"line_end":841,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_as_ptr\", since = \"1.37.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":829585,"byte_end":829636,"line_start":842,"line_end":842,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":829641,"byte_end":829650,"line_start":843,"line_end":843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4087},"span":{"file_name":"src/liballoc/vec.rs","byte_start":833071,"byte_end":833078,"line_start":934,"line_end":934,"column_start":19,"column_end":26},"name":"set_len","qualname":"<Vec<T>>::set_len","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829959,"byte_end":830008,"line_start":854,"line_end":854,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830013,"byte_end":830016,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"src/liballoc/vec.rs","byte_start":830021,"byte_end":830088,"line_start":856,"line_end":856,"column_start":5,"column_end":72}},{"value":"/ invariants of the type. Normally changing the length of a vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":830093,"byte_end":830161,"line_start":857,"line_end":857,"column_start":5,"column_end":73}},{"value":"/ is done using one of the safe operations instead, such as","span":{"file_name":"src/liballoc/vec.rs","byte_start":830166,"byte_end":830227,"line_start":858,"line_end":858,"column_start":5,"column_end":66}},{"value":"/ [`truncate`], [`resize`], [`extend`], or [`clear`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":830232,"byte_end":830287,"line_start":859,"line_end":859,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830292,"byte_end":830295,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"src/liballoc/vec.rs","byte_start":830300,"byte_end":830334,"line_start":861,"line_end":861,"column_start":5,"column_end":39}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":830339,"byte_end":830369,"line_start":862,"line_end":862,"column_start":5,"column_end":35}},{"value":"/ [`extend`]: ../../std/iter/trait.Extend.html#tymethod.extend","span":{"file_name":"src/liballoc/vec.rs","byte_start":830374,"byte_end":830438,"line_start":863,"line_end":863,"column_start":5,"column_end":69}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"src/liballoc/vec.rs","byte_start":830443,"byte_end":830471,"line_start":864,"line_end":864,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830476,"byte_end":830479,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/vec.rs","byte_start":830484,"byte_end":830496,"line_start":866,"line_end":866,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830501,"byte_end":830504,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":830509,"byte_end":830570,"line_start":868,"line_end":868,"column_start":5,"column_end":66}},{"value":"/ - The elements at `old_len..new_len` must be initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":830575,"byte_end":830636,"line_start":869,"line_end":869,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830641,"byte_end":830644,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":830649,"byte_end":830685,"line_start":871,"line_end":871,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830690,"byte_end":830693,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":830698,"byte_end":830712,"line_start":873,"line_end":873,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830717,"byte_end":830720,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ This method can be useful for situations in which the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":830725,"byte_end":830789,"line_start":875,"line_end":875,"column_start":5,"column_end":69}},{"value":"/ is serving as a buffer for other code, particularly over FFI:","span":{"file_name":"src/liballoc/vec.rs","byte_start":830794,"byte_end":830859,"line_start":876,"line_end":876,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830864,"byte_end":830867,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/vec.rs","byte_start":830872,"byte_end":830885,"line_start":878,"line_end":878,"column_start":5,"column_end":18}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":830890,"byte_end":830916,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ # // This is just a minimal skeleton for the doc example;","span":{"file_name":"src/liballoc/vec.rs","byte_start":830921,"byte_end":830982,"line_start":880,"line_end":880,"column_start":5,"column_end":66}},{"value":"/ # // don't use this as a starting point for a real library.","span":{"file_name":"src/liballoc/vec.rs","byte_start":830987,"byte_end":831050,"line_start":881,"line_end":881,"column_start":5,"column_end":68}},{"value":"/ # pub struct StreamWrapper { strm: *mut std::ffi::c_void }","span":{"file_name":"src/liballoc/vec.rs","byte_start":831055,"byte_end":831117,"line_start":882,"line_end":882,"column_start":5,"column_end":67}},{"value":"/ # const Z_OK: i32 = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":831122,"byte_end":831148,"line_start":883,"line_end":883,"column_start":5,"column_end":31}},{"value":"/ # extern \"C\" {","span":{"file_name":"src/liballoc/vec.rs","byte_start":831153,"byte_end":831171,"line_start":884,"line_end":884,"column_start":5,"column_end":23}},{"value":"/ #     fn deflateGetDictionary(","span":{"file_name":"src/liballoc/vec.rs","byte_start":831176,"byte_end":831210,"line_start":885,"line_end":885,"column_start":5,"column_end":39}},{"value":"/ #         strm: *mut std::ffi::c_void,","span":{"file_name":"src/liballoc/vec.rs","byte_start":831215,"byte_end":831257,"line_start":886,"line_end":886,"column_start":5,"column_end":47}},{"value":"/ #         dictionary: *mut u8,","span":{"file_name":"src/liballoc/vec.rs","byte_start":831262,"byte_end":831296,"line_start":887,"line_end":887,"column_start":5,"column_end":39}},{"value":"/ #         dictLength: *mut usize,","span":{"file_name":"src/liballoc/vec.rs","byte_start":831301,"byte_end":831338,"line_start":888,"line_end":888,"column_start":5,"column_end":42}},{"value":"/ #     ) -> i32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":831343,"byte_end":831362,"line_start":889,"line_end":889,"column_start":5,"column_end":24}},{"value":"/ # }","span":{"file_name":"src/liballoc/vec.rs","byte_start":831367,"byte_end":831374,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ # impl StreamWrapper {","span":{"file_name":"src/liballoc/vec.rs","byte_start":831379,"byte_end":831405,"line_start":891,"line_end":891,"column_start":5,"column_end":31}},{"value":"/ pub fn get_dictionary(&self) -> Option<Vec<u8>> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":831410,"byte_end":831463,"line_start":892,"line_end":892,"column_start":5,"column_end":58}},{"value":"/     // Per the FFI method's docs, \"32768 bytes is always enough\".","span":{"file_name":"src/liballoc/vec.rs","byte_start":831468,"byte_end":831537,"line_start":893,"line_end":893,"column_start":5,"column_end":74}},{"value":"/     let mut dict = Vec::with_capacity(32_768);","span":{"file_name":"src/liballoc/vec.rs","byte_start":831542,"byte_end":831592,"line_start":894,"line_end":894,"column_start":5,"column_end":55}},{"value":"/     let mut dict_length = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":831597,"byte_end":831629,"line_start":895,"line_end":895,"column_start":5,"column_end":37}},{"value":"/     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:","span":{"file_name":"src/liballoc/vec.rs","byte_start":831634,"byte_end":831711,"line_start":896,"line_end":896,"column_start":5,"column_end":82}},{"value":"/     // 1. `dict_length` elements were initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":831716,"byte_end":831770,"line_start":897,"line_end":897,"column_start":5,"column_end":59}},{"value":"/     // 2. `dict_length` <= the capacity (32_768)","span":{"file_name":"src/liballoc/vec.rs","byte_start":831775,"byte_end":831827,"line_start":898,"line_end":898,"column_start":5,"column_end":57}},{"value":"/     // which makes `set_len` safe to call.","span":{"file_name":"src/liballoc/vec.rs","byte_start":831832,"byte_end":831878,"line_start":899,"line_end":899,"column_start":5,"column_end":51}},{"value":"/     unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":831883,"byte_end":831899,"line_start":900,"line_end":900,"column_start":5,"column_end":21}},{"value":"/         // Make the FFI call...","span":{"file_name":"src/liballoc/vec.rs","byte_start":831904,"byte_end":831939,"line_start":901,"line_end":901,"column_start":5,"column_end":40}},{"value":"/         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);","span":{"file_name":"src/liballoc/vec.rs","byte_start":831944,"byte_end":832033,"line_start":902,"line_end":902,"column_start":5,"column_end":94}},{"value":"/         if r == Z_OK {","span":{"file_name":"src/liballoc/vec.rs","byte_start":832038,"byte_end":832064,"line_start":903,"line_end":903,"column_start":5,"column_end":31}},{"value":"/             // ...and update the length to what was initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832069,"byte_end":832137,"line_start":904,"line_end":904,"column_start":5,"column_end":73}},{"value":"/             dict.set_len(dict_length);","span":{"file_name":"src/liballoc/vec.rs","byte_start":832142,"byte_end":832184,"line_start":905,"line_end":905,"column_start":5,"column_end":47}},{"value":"/             Some(dict)","span":{"file_name":"src/liballoc/vec.rs","byte_start":832189,"byte_end":832215,"line_start":906,"line_end":906,"column_start":5,"column_end":31}},{"value":"/         } else {","span":{"file_name":"src/liballoc/vec.rs","byte_start":832220,"byte_end":832240,"line_start":907,"line_end":907,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"src/liballoc/vec.rs","byte_start":832245,"byte_end":832265,"line_start":908,"line_end":908,"column_start":5,"column_end":25}},{"value":"/         }","span":{"file_name":"src/liballoc/vec.rs","byte_start":832270,"byte_end":832283,"line_start":909,"line_end":909,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":832288,"byte_end":832297,"line_start":910,"line_end":910,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":832302,"byte_end":832307,"line_start":911,"line_end":911,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"src/liballoc/vec.rs","byte_start":832312,"byte_end":832319,"line_start":912,"line_end":912,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":832324,"byte_end":832331,"line_start":913,"line_end":913,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832336,"byte_end":832339,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ While the following example is sound, there is a memory leak since","span":{"file_name":"src/liballoc/vec.rs","byte_start":832344,"byte_end":832414,"line_start":915,"line_end":915,"column_start":5,"column_end":75}},{"value":"/ the inner vectors were not freed prior to the `set_len` call:","span":{"file_name":"src/liballoc/vec.rs","byte_start":832419,"byte_end":832484,"line_start":916,"line_end":916,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832489,"byte_end":832492,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":832497,"byte_end":832504,"line_start":918,"line_end":918,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![vec![1, 0, 0],","span":{"file_name":"src/liballoc/vec.rs","byte_start":832509,"byte_end":832546,"line_start":919,"line_end":919,"column_start":5,"column_end":42}},{"value":"/                    vec![0, 1, 0],","span":{"file_name":"src/liballoc/vec.rs","byte_start":832551,"byte_end":832588,"line_start":920,"line_end":920,"column_start":5,"column_end":42}},{"value":"/                    vec![0, 0, 1]];","span":{"file_name":"src/liballoc/vec.rs","byte_start":832593,"byte_end":832631,"line_start":921,"line_end":921,"column_start":5,"column_end":43}},{"value":"/ // SAFETY:","span":{"file_name":"src/liballoc/vec.rs","byte_start":832636,"byte_end":832650,"line_start":922,"line_end":922,"column_start":5,"column_end":19}},{"value":"/ // 1. `old_len..0` is empty so no elements need to be initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832655,"byte_end":832725,"line_start":923,"line_end":923,"column_start":5,"column_end":75}},{"value":"/ // 2. `0 <= capacity` always holds whatever `capacity` is.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832730,"byte_end":832792,"line_start":924,"line_end":924,"column_start":5,"column_end":67}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":832797,"byte_end":832809,"line_start":925,"line_end":925,"column_start":5,"column_end":17}},{"value":"/     vec.set_len(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":832814,"byte_end":832837,"line_start":926,"line_end":926,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":832842,"byte_end":832847,"line_start":927,"line_end":927,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":832852,"byte_end":832859,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832864,"byte_end":832867,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ Normally, here, one would use [`clear`] instead to correctly drop","span":{"file_name":"src/liballoc/vec.rs","byte_start":832872,"byte_end":832941,"line_start":930,"line_end":930,"column_start":5,"column_end":74}},{"value":"/ the contents and thus not leak memory.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832946,"byte_end":832988,"line_start":931,"line_end":931,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":832993,"byte_end":833002,"line_start":932,"line_end":932,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":833007,"byte_end":833052,"line_start":933,"line_end":933,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4088},"span":{"file_name":"src/liballoc/vec.rs","byte_start":833855,"byte_end":833866,"line_start":963,"line_end":963,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T>>::swap_remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":833199,"byte_end":833253,"line_start":940,"line_end":940,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833258,"byte_end":833261,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":833266,"byte_end":833336,"line_start":942,"line_end":942,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833341,"byte_end":833344,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/vec.rs","byte_start":833349,"byte_end":833398,"line_start":944,"line_end":944,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833403,"byte_end":833406,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":833411,"byte_end":833423,"line_start":946,"line_end":946,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833428,"byte_end":833431,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"src/liballoc/vec.rs","byte_start":833436,"byte_end":833475,"line_start":948,"line_end":948,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833480,"byte_end":833483,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":833488,"byte_end":833502,"line_start":950,"line_end":950,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833507,"byte_end":833510,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":833515,"byte_end":833522,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":833527,"byte_end":833576,"line_start":953,"line_end":953,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833581,"byte_end":833584,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":833589,"byte_end":833629,"line_start":955,"line_end":955,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":833634,"byte_end":833675,"line_start":956,"line_end":956,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833680,"byte_end":833683,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":833688,"byte_end":833728,"line_start":958,"line_end":958,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v, [\"baz\", \"qux\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":833733,"byte_end":833767,"line_start":959,"line_end":959,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":833772,"byte_end":833779,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":833784,"byte_end":833793,"line_start":961,"line_end":961,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":833798,"byte_end":833843,"line_start":962,"line_end":962,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4089},"span":{"file_name":"src/liballoc/vec.rs","byte_start":834791,"byte_end":834797,"line_start":992,"line_end":992,"column_start":12,"column_end":18},"name":"insert","qualname":"<Vec<T>>::insert","value":"fn (&mut self, index: usize, element: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts an element at position `index` within the vector, shifting all\n elements after it to the right.","sig":null,"attributes":[{"value":"/ Inserts an element at position `index` within the vector, shifting all","span":{"file_name":"src/liballoc/vec.rs","byte_start":834320,"byte_end":834394,"line_start":975,"line_end":975,"column_start":5,"column_end":79}},{"value":"/ elements after it to the right.","span":{"file_name":"src/liballoc/vec.rs","byte_start":834399,"byte_end":834434,"line_start":976,"line_end":976,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834439,"byte_end":834442,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":834447,"byte_end":834459,"line_start":978,"line_end":978,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834464,"byte_end":834467,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ Panics if `index > len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":834472,"byte_end":834500,"line_start":980,"line_end":980,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834505,"byte_end":834508,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":834513,"byte_end":834527,"line_start":982,"line_end":982,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834532,"byte_end":834535,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":834540,"byte_end":834547,"line_start":984,"line_end":984,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":834552,"byte_end":834584,"line_start":985,"line_end":985,"column_start":5,"column_end":37}},{"value":"/ vec.insert(1, 4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834589,"byte_end":834610,"line_start":986,"line_end":986,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 4, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834615,"byte_end":834649,"line_start":987,"line_end":987,"column_start":5,"column_end":39}},{"value":"/ vec.insert(4, 5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834654,"byte_end":834675,"line_start":988,"line_end":988,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 4, 2, 3, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834680,"byte_end":834717,"line_start":989,"line_end":989,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":834722,"byte_end":834729,"line_start":990,"line_end":990,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":834734,"byte_end":834779,"line_start":991,"line_end":991,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4090},"span":{"file_name":"src/liballoc/vec.rs","byte_start":836008,"byte_end":836014,"line_start":1032,"line_end":1032,"column_start":12,"column_end":18},"name":"remove","qualname":"<Vec<T>>::remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the element at position `index` within the vector,\n shifting all elements after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the element at position `index` within the vector,","span":{"file_name":"src/liballoc/vec.rs","byte_start":835582,"byte_end":835656,"line_start":1017,"line_end":1017,"column_start":5,"column_end":79}},{"value":"/ shifting all elements after it to the left.","span":{"file_name":"src/liballoc/vec.rs","byte_start":835661,"byte_end":835708,"line_start":1018,"line_end":1018,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":835713,"byte_end":835716,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":835721,"byte_end":835733,"line_start":1020,"line_end":1020,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":835738,"byte_end":835741,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"src/liballoc/vec.rs","byte_start":835746,"byte_end":835785,"line_start":1022,"line_end":1022,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":835790,"byte_end":835793,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":835798,"byte_end":835812,"line_start":1024,"line_end":1024,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":835817,"byte_end":835820,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":835825,"byte_end":835832,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":835837,"byte_end":835867,"line_start":1027,"line_end":1027,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(v.remove(1), 2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":835872,"byte_end":835903,"line_start":1028,"line_end":1028,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v, [1, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":835908,"byte_end":835934,"line_start":1029,"line_end":1029,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":835939,"byte_end":835946,"line_start":1030,"line_end":1030,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":835951,"byte_end":835996,"line_start":1031,"line_end":1031,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4091},"span":{"file_name":"src/liballoc/vec.rs","byte_start":837534,"byte_end":837540,"line_start":1077,"line_end":1077,"column_start":12,"column_end":18},"name":"retain","qualname":"<Vec<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"src/liballoc/vec.rs","byte_start":836678,"byte_end":836735,"line_start":1053,"line_end":1053,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":836740,"byte_end":836743,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":836748,"byte_end":836826,"line_start":1055,"line_end":1055,"column_start":5,"column_end":83}},{"value":"/ This method operates in place, visiting each element exactly once in the","span":{"file_name":"src/liballoc/vec.rs","byte_start":836831,"byte_end":836907,"line_start":1056,"line_end":1056,"column_start":5,"column_end":81}},{"value":"/ original order, and preserves the order of the retained elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":836912,"byte_end":836981,"line_start":1057,"line_end":1057,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":836986,"byte_end":836989,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":836994,"byte_end":837008,"line_start":1059,"line_end":1059,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":837013,"byte_end":837016,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":837021,"byte_end":837028,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":837033,"byte_end":837068,"line_start":1062,"line_end":1062,"column_start":5,"column_end":40}},{"value":"/ vec.retain(|&x| x % 2 == 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":837073,"byte_end":837105,"line_start":1063,"line_end":1063,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec, [2, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":837110,"byte_end":837138,"line_start":1064,"line_end":1064,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":837143,"byte_end":837150,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":837155,"byte_end":837158,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/vec.rs","byte_start":837163,"byte_end":837240,"line_start":1067,"line_end":1067,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":837245,"byte_end":837248,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":837253,"byte_end":837260,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":837265,"byte_end":837303,"line_start":1070,"line_end":1070,"column_start":5,"column_end":43}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/vec.rs","byte_start":837308,"byte_end":837356,"line_start":1071,"line_end":1071,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":837361,"byte_end":837379,"line_start":1072,"line_end":1072,"column_start":5,"column_end":23}},{"value":"/ vec.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":837384,"byte_end":837424,"line_start":1073,"line_end":1073,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec, [2, 3, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":837429,"byte_end":837460,"line_start":1074,"line_end":1074,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":837465,"byte_end":837472,"line_start":1075,"line_end":1075,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":837477,"byte_end":837522,"line_start":1076,"line_end":1076,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4093},"span":{"file_name":"src/liballoc/vec.rs","byte_start":838459,"byte_end":838471,"line_start":1115,"line_end":1115,"column_start":12,"column_end":24},"name":"dedup_by_key","qualname":"<Vec<T>>::dedup_by_key","value":"fn <F, K> (&mut self, mut key: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all but the first of consecutive elements in the vector that resolve to the same\n key.","sig":null,"attributes":[{"value":"/ Removes all but the first of consecutive elements in the vector that resolve to the same","span":{"file_name":"src/liballoc/vec.rs","byte_start":837999,"byte_end":838091,"line_start":1099,"line_end":1099,"column_start":5,"column_end":97}},{"value":"/ key.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838096,"byte_end":838104,"line_start":1100,"line_end":1100,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838109,"byte_end":838112,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838117,"byte_end":838174,"line_start":1102,"line_end":1102,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838179,"byte_end":838182,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":838187,"byte_end":838201,"line_start":1104,"line_end":1104,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838206,"byte_end":838209,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":838214,"byte_end":838221,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![10, 20, 21, 30, 20];","span":{"file_name":"src/liballoc/vec.rs","byte_start":838226,"byte_end":838269,"line_start":1107,"line_end":1107,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838274,"byte_end":838277,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ vec.dedup_by_key(|i| *i / 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":838282,"byte_end":838316,"line_start":1109,"line_end":1109,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838321,"byte_end":838324,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [10, 20, 30, 20]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":838329,"byte_end":838367,"line_start":1111,"line_end":1111,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":838372,"byte_end":838379,"line_start":1112,"line_end":1112,"column_start":5,"column_end":12}},{"value":"stable(feature = \"dedup_by\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":838384,"byte_end":838433,"line_start":1113,"line_end":1113,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":838438,"byte_end":838447,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4097},"span":{"file_name":"src/liballoc/vec.rs","byte_start":839419,"byte_end":839427,"line_start":1142,"line_end":1142,"column_start":12,"column_end":20},"name":"dedup_by","qualname":"<Vec<T>>::dedup_by","value":"fn <F> (&mut self, same_bucket: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all but the first of consecutive elements in the vector satisfying a given equality\n relation.","sig":null,"attributes":[{"value":"/ Removes all but the first of consecutive elements in the vector satisfying a given equality","span":{"file_name":"src/liballoc/vec.rs","byte_start":838628,"byte_end":838723,"line_start":1123,"line_end":1123,"column_start":5,"column_end":100}},{"value":"/ relation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838728,"byte_end":838741,"line_start":1124,"line_end":1124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838746,"byte_end":838749,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ The `same_bucket` function is passed references to two elements from the vector and","span":{"file_name":"src/liballoc/vec.rs","byte_start":838754,"byte_end":838841,"line_start":1126,"line_end":1126,"column_start":5,"column_end":92}},{"value":"/ must determine if the elements compare equal. The elements are passed in opposite order","span":{"file_name":"src/liballoc/vec.rs","byte_start":838846,"byte_end":838937,"line_start":1127,"line_end":1127,"column_start":5,"column_end":96}},{"value":"/ from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838942,"byte_end":839034,"line_start":1128,"line_end":1128,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839039,"byte_end":839042,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":839047,"byte_end":839104,"line_start":1130,"line_end":1130,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839109,"byte_end":839112,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":839117,"byte_end":839131,"line_start":1132,"line_end":1132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839136,"byte_end":839139,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":839144,"byte_end":839151,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":839156,"byte_end":839214,"line_start":1135,"line_end":1135,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839219,"byte_end":839222,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));","span":{"file_name":"src/liballoc/vec.rs","byte_start":839227,"byte_end":839278,"line_start":1137,"line_end":1137,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839283,"byte_end":839286,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":839291,"byte_end":839341,"line_start":1139,"line_end":1139,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":839346,"byte_end":839353,"line_start":1140,"line_end":1140,"column_start":5,"column_end":12}},{"value":"stable(feature = \"dedup_by\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":839358,"byte_end":839407,"line_start":1141,"line_end":1141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4099},"span":{"file_name":"src/liballoc/vec.rs","byte_start":840078,"byte_end":840082,"line_start":1168,"line_end":1168,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T>>::push","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends an element to the back of a collection.","span":{"file_name":"src/liballoc/vec.rs","byte_start":839692,"byte_end":839743,"line_start":1153,"line_end":1153,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839748,"byte_end":839751,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":839756,"byte_end":839768,"line_start":1155,"line_end":1155,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839773,"byte_end":839776,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ Panics if the number of elements in the vector overflows a `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":839781,"byte_end":839852,"line_start":1157,"line_end":1157,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839857,"byte_end":839860,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":839865,"byte_end":839879,"line_start":1159,"line_end":1159,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839884,"byte_end":839887,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":839892,"byte_end":839899,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":839904,"byte_end":839933,"line_start":1162,"line_end":1162,"column_start":5,"column_end":34}},{"value":"/ vec.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":839938,"byte_end":839954,"line_start":1163,"line_end":1163,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(vec, [1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":839959,"byte_end":839990,"line_start":1164,"line_end":1164,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":839995,"byte_end":840002,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":840007,"byte_end":840016,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":840021,"byte_end":840066,"line_start":1167,"line_end":1167,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4100},"span":{"file_name":"src/liballoc/vec.rs","byte_start":840909,"byte_end":840912,"line_start":1195,"line_end":1195,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and returns it, or [`None`] if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and returns it, or [`None`] if it","span":{"file_name":"src/liballoc/vec.rs","byte_start":840497,"byte_end":840573,"line_start":1181,"line_end":1181,"column_start":5,"column_end":81}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/vec.rs","byte_start":840578,"byte_end":840591,"line_start":1182,"line_end":1182,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":840596,"byte_end":840599,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/vec.rs","byte_start":840604,"byte_end":840664,"line_start":1184,"line_end":1184,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":840669,"byte_end":840672,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":840677,"byte_end":840691,"line_start":1186,"line_end":1186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":840696,"byte_end":840699,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":840704,"byte_end":840711,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":840716,"byte_end":840748,"line_start":1189,"line_end":1189,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec.pop(), Some(3));","span":{"file_name":"src/liballoc/vec.rs","byte_start":840753,"byte_end":840788,"line_start":1190,"line_end":1190,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":840793,"byte_end":840821,"line_start":1191,"line_end":1191,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":840826,"byte_end":840833,"line_start":1192,"line_end":1192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":840838,"byte_end":840847,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":840852,"byte_end":840897,"line_start":1194,"line_end":1194,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4101},"span":{"file_name":"src/liballoc/vec.rs","byte_start":841650,"byte_end":841656,"line_start":1223,"line_end":1223,"column_start":12,"column_end":18},"name":"append","qualname":"<Vec<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/vec.rs","byte_start":841151,"byte_end":841224,"line_start":1206,"line_end":1206,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":841229,"byte_end":841232,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":841237,"byte_end":841249,"line_start":1208,"line_end":1208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":841254,"byte_end":841257,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ Panics if the number of elements in the vector overflows a `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":841262,"byte_end":841333,"line_start":1210,"line_end":1210,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":841338,"byte_end":841341,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":841346,"byte_end":841360,"line_start":1212,"line_end":1212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":841365,"byte_end":841368,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":841373,"byte_end":841380,"line_start":1214,"line_end":1214,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":841385,"byte_end":841417,"line_start":1215,"line_end":1215,"column_start":5,"column_end":37}},{"value":"/ let mut vec2 = vec![4, 5, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":841422,"byte_end":841455,"line_start":1216,"line_end":1216,"column_start":5,"column_end":38}},{"value":"/ vec.append(&mut vec2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":841460,"byte_end":841486,"line_start":1217,"line_end":1217,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4, 5, 6]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":841491,"byte_end":841531,"line_start":1218,"line_end":1218,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec2, []);","span":{"file_name":"src/liballoc/vec.rs","byte_start":841536,"byte_end":841561,"line_start":1219,"line_end":1219,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":841566,"byte_end":841573,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":841578,"byte_end":841587,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}},{"value":"stable(feature = \"append\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":841592,"byte_end":841638,"line_start":1222,"line_end":1222,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4103},"span":{"file_name":"src/liballoc/vec.rs","byte_start":843071,"byte_end":843076,"line_start":1267,"line_end":1267,"column_start":12,"column_end":17},"name":"drain","qualname":"<Vec<T>>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the vector\n and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":842160,"byte_end":842238,"line_start":1240,"line_end":1240,"column_start":5,"column_end":83}},{"value":"/ and yields the removed items.","span":{"file_name":"src/liballoc/vec.rs","byte_start":842243,"byte_end":842276,"line_start":1241,"line_end":1241,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842281,"byte_end":842284,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ Note 1: The element range is removed even if the iterator is only","span":{"file_name":"src/liballoc/vec.rs","byte_start":842289,"byte_end":842358,"line_start":1243,"line_end":1243,"column_start":5,"column_end":74}},{"value":"/ partially consumed or not consumed at all.","span":{"file_name":"src/liballoc/vec.rs","byte_start":842363,"byte_end":842409,"line_start":1244,"line_end":1244,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842414,"byte_end":842417,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ Note 2: It is unspecified how many elements are removed from the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":842422,"byte_end":842497,"line_start":1246,"line_end":1246,"column_start":5,"column_end":80}},{"value":"/ if the `Drain` value is leaked.","span":{"file_name":"src/liballoc/vec.rs","byte_start":842502,"byte_end":842537,"line_start":1247,"line_end":1247,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842542,"byte_end":842545,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":842550,"byte_end":842562,"line_start":1249,"line_end":1249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842567,"byte_end":842570,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/vec.rs","byte_start":842575,"byte_end":842643,"line_start":1251,"line_end":1251,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":842648,"byte_end":842707,"line_start":1252,"line_end":1252,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842712,"byte_end":842715,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":842720,"byte_end":842734,"line_start":1254,"line_end":1254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842739,"byte_end":842742,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":842747,"byte_end":842754,"line_start":1256,"line_end":1256,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":842759,"byte_end":842789,"line_start":1257,"line_end":1257,"column_start":5,"column_end":35}},{"value":"/ let u: Vec<_> = v.drain(1..).collect();","span":{"file_name":"src/liballoc/vec.rs","byte_start":842794,"byte_end":842837,"line_start":1258,"line_end":1258,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v, &[1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":842842,"byte_end":842866,"line_start":1259,"line_end":1259,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(u, &[2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":842871,"byte_end":842898,"line_start":1260,"line_end":1260,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":842903,"byte_end":842906,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ // A full range clears the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":842911,"byte_end":842948,"line_start":1262,"line_end":1262,"column_start":5,"column_end":42}},{"value":"/ v.drain(..);","span":{"file_name":"src/liballoc/vec.rs","byte_start":842953,"byte_end":842969,"line_start":1263,"line_end":1263,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v, &[]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":842974,"byte_end":842997,"line_start":1264,"line_end":1264,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":843002,"byte_end":843009,"line_start":1265,"line_end":1265,"column_start":5,"column_end":12}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":843014,"byte_end":843059,"line_start":1266,"line_end":1266,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4105},"span":{"file_name":"src/liballoc/vec.rs","byte_start":845010,"byte_end":845015,"line_start":1326,"line_end":1326,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"src/liballoc/vec.rs","byte_start":844630,"byte_end":844673,"line_start":1310,"line_end":1310,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":844678,"byte_end":844681,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":844686,"byte_end":844751,"line_start":1312,"line_end":1312,"column_start":5,"column_end":70}},{"value":"/ of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":844756,"byte_end":844774,"line_start":1313,"line_end":1313,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":844779,"byte_end":844782,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":844787,"byte_end":844801,"line_start":1315,"line_end":1315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":844806,"byte_end":844809,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":844814,"byte_end":844821,"line_start":1317,"line_end":1317,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":844826,"byte_end":844856,"line_start":1318,"line_end":1318,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":844861,"byte_end":844864,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/vec.rs","byte_start":844869,"byte_end":844883,"line_start":1320,"line_end":1320,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":844888,"byte_end":844891,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":844896,"byte_end":844922,"line_start":1322,"line_end":1322,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":844927,"byte_end":844934,"line_start":1323,"line_end":1323,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":844939,"byte_end":844948,"line_start":1324,"line_end":1324,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":844953,"byte_end":844998,"line_start":1325,"line_end":1325,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4106},"span":{"file_name":"src/liballoc/vec.rs","byte_start":845354,"byte_end":845357,"line_start":1341,"line_end":1341,"column_start":12,"column_end":15},"name":"len","qualname":"<Vec<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the vector, also referred to\n as its 'length'.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the vector, also referred to","span":{"file_name":"src/liballoc/vec.rs","byte_start":845065,"byte_end":845131,"line_start":1330,"line_end":1330,"column_start":5,"column_end":71}},{"value":"/ as its 'length'.","span":{"file_name":"src/liballoc/vec.rs","byte_start":845136,"byte_end":845156,"line_start":1331,"line_end":1331,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845161,"byte_end":845164,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":845169,"byte_end":845183,"line_start":1333,"line_end":1333,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845188,"byte_end":845191,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":845196,"byte_end":845203,"line_start":1335,"line_end":1335,"column_start":5,"column_end":12}},{"value":"/ let a = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":845208,"byte_end":845234,"line_start":1336,"line_end":1336,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":845239,"byte_end":845266,"line_start":1337,"line_end":1337,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":845271,"byte_end":845278,"line_start":1338,"line_end":1338,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":845283,"byte_end":845292,"line_start":1339,"line_end":1339,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":845297,"byte_end":845342,"line_start":1340,"line_end":1340,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4107},"span":{"file_name":"src/liballoc/vec.rs","byte_start":845701,"byte_end":845709,"line_start":1357,"line_end":1357,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vec<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the vector contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the vector contains no elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":845404,"byte_end":845458,"line_start":1345,"line_end":1345,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845463,"byte_end":845466,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":845471,"byte_end":845485,"line_start":1347,"line_end":1347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845490,"byte_end":845493,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":845498,"byte_end":845505,"line_start":1349,"line_end":1349,"column_start":5,"column_end":12}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":845510,"byte_end":845537,"line_start":1350,"line_end":1350,"column_start":5,"column_end":32}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":845542,"byte_end":845568,"line_start":1351,"line_end":1351,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845573,"byte_end":845576,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ v.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":845581,"byte_end":845595,"line_start":1353,"line_end":1353,"column_start":5,"column_end":19}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":845600,"byte_end":845627,"line_start":1354,"line_end":1354,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":845632,"byte_end":845639,"line_start":1355,"line_end":1355,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":845644,"byte_end":845689,"line_start":1356,"line_end":1356,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":"src/liballoc/vec.rs","byte_start":846390,"byte_end":846399,"line_start":1381,"line_end":1381,"column_start":12,"column_end":21},"name":"split_off","qualname":"<Vec<T>>::split_off","value":"fn (&mut self, at: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"src/liballoc/vec.rs","byte_start":845762,"byte_end":845816,"line_start":1361,"line_end":1361,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":845821,"byte_end":845824,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated vector containing the elements in the range","span":{"file_name":"src/liballoc/vec.rs","byte_start":845829,"byte_end":845902,"line_start":1363,"line_end":1363,"column_start":5,"column_end":78}},{"value":"/ `[at, len)`. After the call, the original vector will be left containing","span":{"file_name":"src/liballoc/vec.rs","byte_start":845907,"byte_end":845983,"line_start":1364,"line_end":1364,"column_start":5,"column_end":81}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"src/liballoc/vec.rs","byte_start":845988,"byte_end":846052,"line_start":1365,"line_end":1365,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":846057,"byte_end":846060,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":846065,"byte_end":846077,"line_start":1367,"line_end":1367,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":846082,"byte_end":846085,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":846090,"byte_end":846115,"line_start":1369,"line_end":1369,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":846120,"byte_end":846123,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":846128,"byte_end":846142,"line_start":1371,"line_end":1371,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":846147,"byte_end":846150,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":846155,"byte_end":846162,"line_start":1373,"line_end":1373,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1,2,3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":846167,"byte_end":846197,"line_start":1374,"line_end":1374,"column_start":5,"column_end":35}},{"value":"/ let vec2 = vec.split_off(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":846202,"byte_end":846234,"line_start":1375,"line_end":1375,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec, [1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":846239,"byte_end":846264,"line_start":1376,"line_end":1376,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(vec2, [2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":846269,"byte_end":846298,"line_start":1377,"line_end":1377,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":846303,"byte_end":846310,"line_start":1378,"line_end":1378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":846315,"byte_end":846324,"line_start":1379,"line_end":1379,"column_start":5,"column_end":14}},{"value":"stable(feature = \"split_off\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":846329,"byte_end":846378,"line_start":1380,"line_end":1380,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4109},"span":{"file_name":"src/liballoc/vec.rs","byte_start":848069,"byte_end":848080,"line_start":1427,"line_end":1427,"column_start":12,"column_end":23},"name":"resize_with","qualname":"<Vec<T>>::resize_with","value":"fn <F> (&mut self, new_len: usize, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":846857,"byte_end":846924,"line_start":1397,"line_end":1397,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":846929,"byte_end":846932,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":846937,"byte_end":847005,"line_start":1399,"line_end":1399,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of","span":{"file_name":"src/liballoc/vec.rs","byte_start":847010,"byte_end":847077,"line_start":1400,"line_end":1400,"column_start":5,"column_end":72}},{"value":"/ calling the closure `f`. The return values from `f` will end up","span":{"file_name":"src/liballoc/vec.rs","byte_start":847082,"byte_end":847149,"line_start":1401,"line_end":1401,"column_start":5,"column_end":72}},{"value":"/ in the `Vec` in the order they have been generated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":847154,"byte_end":847209,"line_start":1402,"line_end":1402,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847214,"byte_end":847217,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":847222,"byte_end":847289,"line_start":1404,"line_end":1404,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847294,"byte_end":847297,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ This method uses a closure to create new values on every push. If","span":{"file_name":"src/liballoc/vec.rs","byte_start":847302,"byte_end":847371,"line_start":1406,"line_end":1406,"column_start":5,"column_end":74}},{"value":"/ you'd rather [`Clone`] a given value, use [`resize`]. If you want","span":{"file_name":"src/liballoc/vec.rs","byte_start":847376,"byte_end":847445,"line_start":1407,"line_end":1407,"column_start":5,"column_end":74}},{"value":"/ to use the [`Default`] trait to generate values, you can pass","span":{"file_name":"src/liballoc/vec.rs","byte_start":847450,"byte_end":847515,"line_start":1408,"line_end":1408,"column_start":5,"column_end":70}},{"value":"/ [`Default::default()`] as the second argument.","span":{"file_name":"src/liballoc/vec.rs","byte_start":847520,"byte_end":847570,"line_start":1409,"line_end":1409,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847575,"byte_end":847578,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":847583,"byte_end":847597,"line_start":1411,"line_end":1411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847602,"byte_end":847605,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":847610,"byte_end":847617,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":847622,"byte_end":847654,"line_start":1414,"line_end":1414,"column_start":5,"column_end":37}},{"value":"/ vec.resize_with(5, Default::default);","span":{"file_name":"src/liballoc/vec.rs","byte_start":847659,"byte_end":847700,"line_start":1415,"line_end":1415,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec, [1, 2, 3, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":847705,"byte_end":847742,"line_start":1416,"line_end":1416,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847747,"byte_end":847750,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"src/liballoc/vec.rs","byte_start":847755,"byte_end":847780,"line_start":1418,"line_end":1418,"column_start":5,"column_end":30}},{"value":"/ let mut p = 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":847785,"byte_end":847803,"line_start":1419,"line_end":1419,"column_start":5,"column_end":23}},{"value":"/ vec.resize_with(4, || { p *= 2; p });","span":{"file_name":"src/liballoc/vec.rs","byte_start":847808,"byte_end":847849,"line_start":1420,"line_end":1420,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec, [2, 4, 8, 16]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":847854,"byte_end":847889,"line_start":1421,"line_end":1421,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":847894,"byte_end":847901,"line_start":1422,"line_end":1422,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":847906,"byte_end":847909,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":847914,"byte_end":847944,"line_start":1424,"line_end":1424,"column_start":5,"column_end":35}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":847949,"byte_end":847996,"line_start":1425,"line_end":1425,"column_start":5,"column_end":52}},{"value":"stable(feature = \"vec_resize_with\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":848001,"byte_end":848057,"line_start":1426,"line_end":1426,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4111},"span":{"file_name":"src/liballoc/vec.rs","byte_start":849255,"byte_end":849259,"line_start":1464,"line_end":1464,"column_start":12,"column_end":16},"name":"leak","qualname":"<Vec<T>>::leak","value":"fn <'a> (vec: Vec<T>) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n `'a`. If the type has only static references, or none at all, then this\n may be chosen to be `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `Vec`, returning a mutable reference to the contents,","span":{"file_name":"src/liballoc/vec.rs","byte_start":848349,"byte_end":848429,"line_start":1439,"line_end":1439,"column_start":5,"column_end":85}},{"value":"/ `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime","span":{"file_name":"src/liballoc/vec.rs","byte_start":848434,"byte_end":848508,"line_start":1440,"line_end":1440,"column_start":5,"column_end":79}},{"value":"/ `'a`. If the type has only static references, or none at all, then this","span":{"file_name":"src/liballoc/vec.rs","byte_start":848513,"byte_end":848588,"line_start":1441,"line_end":1441,"column_start":5,"column_end":80}},{"value":"/ may be chosen to be `'static`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":848593,"byte_end":848627,"line_start":1442,"line_end":1442,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848632,"byte_end":848635,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ This function is similar to the `leak` function on `Box`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":848640,"byte_end":848701,"line_start":1444,"line_end":1444,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848706,"byte_end":848709,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"src/liballoc/vec.rs","byte_start":848714,"byte_end":848789,"line_start":1446,"line_end":1446,"column_start":5,"column_end":80}},{"value":"/ the program's life. Dropping the returned reference will cause a memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":848794,"byte_end":848869,"line_start":1447,"line_end":1447,"column_start":5,"column_end":80}},{"value":"/ leak.","span":{"file_name":"src/liballoc/vec.rs","byte_start":848874,"byte_end":848883,"line_start":1448,"line_end":1448,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848888,"byte_end":848891,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":848896,"byte_end":848910,"line_start":1450,"line_end":1450,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848915,"byte_end":848918,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ Simple usage:","span":{"file_name":"src/liballoc/vec.rs","byte_start":848923,"byte_end":848940,"line_start":1452,"line_end":1452,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848945,"byte_end":848948,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":848953,"byte_end":848960,"line_start":1454,"line_end":1454,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_leak)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":848965,"byte_end":848990,"line_start":1455,"line_end":1455,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":848995,"byte_end":848998,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":849003,"byte_end":849029,"line_start":1457,"line_end":1457,"column_start":5,"column_end":31}},{"value":"/ let static_ref: &'static mut [usize] = Vec::leak(x);","span":{"file_name":"src/liballoc/vec.rs","byte_start":849034,"byte_end":849090,"line_start":1458,"line_end":1458,"column_start":5,"column_end":61}},{"value":"/ static_ref[0] += 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":849095,"byte_end":849118,"line_start":1459,"line_end":1459,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(static_ref, &[2, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":849123,"byte_end":849162,"line_start":1460,"line_end":1460,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":849167,"byte_end":849174,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_leak\", issue = \"62195\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":849179,"byte_end":849229,"line_start":1462,"line_end":1462,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":849234,"byte_end":849243,"line_start":1463,"line_end":1463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4115},"span":{"file_name":"src/liballoc/vec.rs","byte_start":850501,"byte_end":850507,"line_start":1500,"line_end":1500,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":849454,"byte_end":849521,"line_start":1473,"line_end":1473,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":849526,"byte_end":849529,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":849534,"byte_end":849602,"line_start":1475,"line_end":1475,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":849607,"byte_end":849669,"line_start":1476,"line_end":1476,"column_start":5,"column_end":67}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":849674,"byte_end":849741,"line_start":1477,"line_end":1477,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":849746,"byte_end":849749,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ This method requires `T` to implement [`Clone`],","span":{"file_name":"src/liballoc/vec.rs","byte_start":849754,"byte_end":849806,"line_start":1479,"line_end":1479,"column_start":5,"column_end":57}},{"value":"/ in order to be able to clone the passed value.","span":{"file_name":"src/liballoc/vec.rs","byte_start":849811,"byte_end":849861,"line_start":1480,"line_end":1480,"column_start":5,"column_end":55}},{"value":"/ If you need more flexibility (or want to rely on [`Default`] instead of","span":{"file_name":"src/liballoc/vec.rs","byte_start":849866,"byte_end":849941,"line_start":1481,"line_end":1481,"column_start":5,"column_end":80}},{"value":"/ [`Clone`]), use [`resize_with`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":849946,"byte_end":849982,"line_start":1482,"line_end":1482,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":849987,"byte_end":849990,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":849995,"byte_end":850009,"line_start":1484,"line_end":1484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":850014,"byte_end":850017,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":850022,"byte_end":850029,"line_start":1486,"line_end":1486,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![\"hello\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":850034,"byte_end":850066,"line_start":1487,"line_end":1487,"column_start":5,"column_end":37}},{"value":"/ vec.resize(3, \"world\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":850071,"byte_end":850098,"line_start":1488,"line_end":1488,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec, [\"hello\", \"world\", \"world\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":850103,"byte_end":850152,"line_start":1489,"line_end":1489,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":850157,"byte_end":850160,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":850165,"byte_end":850200,"line_start":1491,"line_end":1491,"column_start":5,"column_end":40}},{"value":"/ vec.resize(2, 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":850205,"byte_end":850226,"line_start":1492,"line_end":1492,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":850231,"byte_end":850259,"line_start":1493,"line_end":1493,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":850264,"byte_end":850271,"line_start":1494,"line_end":1494,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":850276,"byte_end":850279,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":850284,"byte_end":850331,"line_start":1496,"line_end":1496,"column_start":5,"column_end":52}},{"value":"/ [`Default`]: ../../std/default/trait.Default.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":850336,"byte_end":850389,"line_start":1497,"line_end":1497,"column_start":5,"column_end":58}},{"value":"/ [`resize_with`]: #method.resize_with","span":{"file_name":"src/liballoc/vec.rs","byte_start":850394,"byte_end":850434,"line_start":1498,"line_end":1498,"column_start":5,"column_end":45}},{"value":"stable(feature = \"vec_resize\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":850439,"byte_end":850489,"line_start":1499,"line_end":1499,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"src/liballoc/vec.rs","byte_start":851498,"byte_end":851515,"line_start":1530,"line_end":1530,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T>>::extend_from_slice","value":"fn (&mut self, other: &[T]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":850745,"byte_end":850805,"line_start":1510,"line_end":1510,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":850810,"byte_end":850813,"line_start":1511,"line_end":1511,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"src/liballoc/vec.rs","byte_start":850818,"byte_end":850892,"line_start":1512,"line_end":1512,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"src/liballoc/vec.rs","byte_start":850897,"byte_end":850960,"line_start":1513,"line_end":1513,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":850965,"byte_end":850968,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ Note that this function is same as [`extend`] except that it is","span":{"file_name":"src/liballoc/vec.rs","byte_start":850973,"byte_end":851040,"line_start":1515,"line_end":1515,"column_start":5,"column_end":72}},{"value":"/ specialized to work with slices instead. If and when Rust gets","span":{"file_name":"src/liballoc/vec.rs","byte_start":851045,"byte_end":851111,"line_start":1516,"line_end":1516,"column_start":5,"column_end":71}},{"value":"/ specialization this function will likely be deprecated (but still","span":{"file_name":"src/liballoc/vec.rs","byte_start":851116,"byte_end":851185,"line_start":1517,"line_end":1517,"column_start":5,"column_end":74}},{"value":"/ available).","span":{"file_name":"src/liballoc/vec.rs","byte_start":851190,"byte_end":851205,"line_start":1518,"line_end":1518,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":851210,"byte_end":851213,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":851218,"byte_end":851232,"line_start":1520,"line_end":1520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":851237,"byte_end":851240,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":851245,"byte_end":851252,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":851257,"byte_end":851283,"line_start":1523,"line_end":1523,"column_start":5,"column_end":31}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":851288,"byte_end":851326,"line_start":1524,"line_end":1524,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":851331,"byte_end":851365,"line_start":1525,"line_end":1525,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":851370,"byte_end":851377,"line_start":1526,"line_end":1526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":851382,"byte_end":851385,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"src/liballoc/vec.rs","byte_start":851390,"byte_end":851420,"line_start":1528,"line_end":1528,"column_start":5,"column_end":35}},{"value":"stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":851425,"byte_end":851486,"line_start":1529,"line_end":1529,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4119},"span":{"file_name":"src/liballoc/vec.rs","byte_start":852980,"byte_end":852994,"line_start":1571,"line_end":1571,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T>>::resize_default","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":851620,"byte_end":851687,"line_start":1536,"line_end":1536,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":851692,"byte_end":851695,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":851700,"byte_end":851768,"line_start":1538,"line_end":1538,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with [`Default::default()`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":851773,"byte_end":851850,"line_start":1539,"line_end":1539,"column_start":5,"column_end":82}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":851855,"byte_end":851922,"line_start":1540,"line_end":1540,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":851927,"byte_end":851930,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Default`] to create new values on every push. If","span":{"file_name":"src/liballoc/vec.rs","byte_start":851935,"byte_end":852006,"line_start":1542,"line_end":1542,"column_start":5,"column_end":76}},{"value":"/ you'd rather [`Clone`] a given value, use [`resize`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":852011,"byte_end":852068,"line_start":1543,"line_end":1543,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852073,"byte_end":852076,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":852081,"byte_end":852095,"line_start":1545,"line_end":1545,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852100,"byte_end":852103,"line_start":1546,"line_end":1546,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":852108,"byte_end":852115,"line_start":1547,"line_end":1547,"column_start":5,"column_end":12}},{"value":"/ # #![allow(deprecated)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":852120,"byte_end":852147,"line_start":1548,"line_end":1548,"column_start":5,"column_end":32}},{"value":"/ #![feature(vec_resize_default)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":852152,"byte_end":852187,"line_start":1549,"line_end":1549,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852192,"byte_end":852195,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":852200,"byte_end":852232,"line_start":1551,"line_end":1551,"column_start":5,"column_end":37}},{"value":"/ vec.resize_default(5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":852237,"byte_end":852263,"line_start":1552,"line_end":1552,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2, 3, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":852268,"byte_end":852305,"line_start":1553,"line_end":1553,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852310,"byte_end":852313,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":852318,"byte_end":852353,"line_start":1555,"line_end":1555,"column_start":5,"column_end":40}},{"value":"/ vec.resize_default(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":852358,"byte_end":852384,"line_start":1556,"line_end":1556,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":852389,"byte_end":852417,"line_start":1557,"line_end":1557,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":852422,"byte_end":852429,"line_start":1558,"line_end":1558,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852434,"byte_end":852437,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":852442,"byte_end":852472,"line_start":1560,"line_end":1560,"column_start":5,"column_end":35}},{"value":"/ [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default","span":{"file_name":"src/liballoc/vec.rs","byte_start":852477,"byte_end":852558,"line_start":1561,"line_end":1561,"column_start":5,"column_end":86}},{"value":"/ [`Default`]: ../../std/default/trait.Default.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":852563,"byte_end":852616,"line_start":1562,"line_end":1562,"column_start":5,"column_end":58}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":852621,"byte_end":852668,"line_start":1563,"line_end":1563,"column_start":5,"column_end":52}},{"value":"unstable(feature = \"vec_resize_default\", issue = \"41758\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":852673,"byte_end":852733,"line_start":1564,"line_end":1564,"column_start":5,"column_end":65}},{"value":"rustc_deprecated(reason =\n                   \"This is moving towards being removed in favor \\\n        of `.resize_with(Default::default)`.  If you disagree, please comment \\\n        in the tracking issue.\",\n                   since = \"1.33.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":852738,"byte_end":852968,"line_start":1565,"line_end":1570,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":4122},"span":{"file_name":"src/liballoc/vec.rs","byte_start":853301,"byte_end":853305,"line_start":1584,"line_end":1584,"column_start":8,"column_end":12},"name":"next","qualname":"::vec::ExtendWith::next","value":"fn (&mut self) -> T","parent":{"krate":0,"index":4120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4123},"span":{"file_name":"src/liballoc/vec.rs","byte_start":853330,"byte_end":853334,"line_start":1585,"line_end":1585,"column_start":8,"column_end":12},"name":"last","qualname":"::vec::ExtendWith::last","value":"fn (self) -> T","parent":{"krate":0,"index":4120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4163},"span":{"file_name":"src/liballoc/vec.rs","byte_start":856217,"byte_end":856222,"line_start":1695,"line_end":1695,"column_start":12,"column_end":17},"name":"dedup","qualname":"<Vec<T>>::dedup","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes consecutive repeated elements in the vector according to the\n [`PartialEq`] trait implementation.","sig":null,"attributes":[{"value":"/ Removes consecutive repeated elements in the vector according to the","span":{"file_name":"src/liballoc/vec.rs","byte_start":855777,"byte_end":855849,"line_start":1679,"line_end":1679,"column_start":5,"column_end":77}},{"value":"/ [`PartialEq`] trait implementation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":855854,"byte_end":855893,"line_start":1680,"line_end":1680,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":855898,"byte_end":855901,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":855906,"byte_end":855963,"line_start":1682,"line_end":1682,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":855968,"byte_end":855971,"line_start":1683,"line_end":1683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":855976,"byte_end":855990,"line_start":1684,"line_end":1684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":855995,"byte_end":855998,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":856003,"byte_end":856010,"line_start":1686,"line_end":1686,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 2, 3, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":856015,"byte_end":856053,"line_start":1687,"line_end":1687,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856058,"byte_end":856061,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ vec.dedup();","span":{"file_name":"src/liballoc/vec.rs","byte_start":856066,"byte_end":856082,"line_start":1689,"line_end":1689,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856087,"byte_end":856090,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [1, 2, 3, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":856095,"byte_end":856129,"line_start":1691,"line_end":1691,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":856134,"byte_end":856141,"line_start":1692,"line_end":1692,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":856146,"byte_end":856191,"line_start":1693,"line_end":1693,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":856196,"byte_end":856205,"line_start":1694,"line_end":1694,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4167},"span":{"file_name":"src/liballoc/vec.rs","byte_start":856703,"byte_end":856714,"line_start":1714,"line_end":1714,"column_start":12,"column_end":23},"name":"remove_item","qualname":"<Vec<T>>::remove_item","value":"fn <V> (&mut self, item: &V) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first instance of `item` from the vector if the item exists.","sig":null,"attributes":[{"value":"/ Removes the first instance of `item` from the vector if the item exists.","span":{"file_name":"src/liballoc/vec.rs","byte_start":856303,"byte_end":856379,"line_start":1701,"line_end":1701,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856384,"byte_end":856387,"line_start":1702,"line_end":1702,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":856392,"byte_end":856406,"line_start":1703,"line_end":1703,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856411,"byte_end":856414,"line_start":1704,"line_end":1704,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":856419,"byte_end":856426,"line_start":1705,"line_end":1705,"column_start":5,"column_end":12}},{"value":"/ # #![feature(vec_remove_item)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":856431,"byte_end":856465,"line_start":1706,"line_end":1706,"column_start":5,"column_end":39}},{"value":"/ let mut vec = vec![1, 2, 3, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":856470,"byte_end":856505,"line_start":1707,"line_end":1707,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856510,"byte_end":856513,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ vec.remove_item(&1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":856518,"byte_end":856542,"line_start":1709,"line_end":1709,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":856547,"byte_end":856550,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![2, 3, 1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":856555,"byte_end":856590,"line_start":1711,"line_end":1711,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":856595,"byte_end":856602,"line_start":1712,"line_end":1712,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_remove_item\", reason = \"recently added\", issue =\n           \"40062\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":856607,"byte_end":856691,"line_start":1713,"line_end":1713,"column_start":5,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":4170},"span":{"file_name":"src/liballoc/vec.rs","byte_start":857156,"byte_end":857165,"line_start":1729,"line_end":1729,"column_start":8,"column_end":17},"name":"from_elem","qualname":"::vec::from_elem","value":"fn <T> (elem: T, n: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":857103,"byte_end":857148,"line_start":1728,"line_end":1728,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4173},"span":{"file_name":"src/liballoc/vec.rs","byte_start":857337,"byte_end":857346,"line_start":1735,"line_end":1735,"column_start":8,"column_end":17},"name":"from_elem","qualname":"::vec::SpecFromElem::from_elem","value":"fn (elem: Self, n: usize) -> Vec<Self>","parent":{"krate":0,"index":4172},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4183},"span":{"file_name":"src/liballoc/vec.rs","byte_start":858359,"byte_end":858366,"line_start":1775,"line_end":1775,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::vec::IsZero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Whether this value is zero\n","sig":null,"attributes":[{"value":"/ Whether this value is zero","span":{"file_name":"src/liballoc/vec.rs","byte_start":858321,"byte_end":858351,"line_start":1774,"line_end":1774,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4252},"span":{"file_name":"src/liballoc/vec.rs","byte_start":864548,"byte_end":864557,"line_start":2000,"line_end":2000,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::vec::SpecExtend::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":4249},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4253},"span":{"file_name":"src/liballoc/vec.rs","byte_start":864583,"byte_end":864594,"line_start":2001,"line_end":2001,"column_start":8,"column_end":19},"name":"spec_extend","qualname":"::vec::SpecExtend::spec_extend","value":"fn (&mut self, iter: I) -> ()","parent":{"krate":0,"index":4249},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4283},"span":{"file_name":"src/liballoc/vec.rs","byte_start":870785,"byte_end":870791,"line_start":2187,"line_end":2187,"column_start":12,"column_end":18},"name":"splice","qualname":"<Vec<T>>::splice","value":"fn <R, I> (&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the vector\n with the given `replace_with` iterator and yields the removed items.\n `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":869394,"byte_end":869473,"line_start":2152,"line_end":2152,"column_start":5,"column_end":84}},{"value":"/ with the given `replace_with` iterator and yields the removed items.","span":{"file_name":"src/liballoc/vec.rs","byte_start":869478,"byte_end":869550,"line_start":2153,"line_end":2153,"column_start":5,"column_end":77}},{"value":"/ `replace_with` does not need to be the same length as `range`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":869555,"byte_end":869621,"line_start":2154,"line_end":2154,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":869626,"byte_end":869629,"line_start":2155,"line_end":2155,"column_start":5,"column_end":8}},{"value":"/ The element range is removed even if the iterator is not consumed until the end.","span":{"file_name":"src/liballoc/vec.rs","byte_start":869634,"byte_end":869718,"line_start":2156,"line_end":2156,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":869723,"byte_end":869726,"line_start":2157,"line_end":2157,"column_start":5,"column_end":8}},{"value":"/ It is unspecified how many elements are removed from the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":869731,"byte_end":869798,"line_start":2158,"line_end":2158,"column_start":5,"column_end":72}},{"value":"/ if the `Splice` value is leaked.","span":{"file_name":"src/liballoc/vec.rs","byte_start":869803,"byte_end":869839,"line_start":2159,"line_end":2159,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":869844,"byte_end":869847,"line_start":2160,"line_end":2160,"column_start":5,"column_end":8}},{"value":"/ The input iterator `replace_with` is only consumed when the `Splice` value is dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":869852,"byte_end":869942,"line_start":2161,"line_end":2161,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":869947,"byte_end":869950,"line_start":2162,"line_end":2162,"column_start":5,"column_end":8}},{"value":"/ This is optimal if:","span":{"file_name":"src/liballoc/vec.rs","byte_start":869955,"byte_end":869978,"line_start":2163,"line_end":2163,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":869983,"byte_end":869986,"line_start":2164,"line_end":2164,"column_start":5,"column_end":8}},{"value":"/ * The tail (elements in the vector after `range`) is empty,","span":{"file_name":"src/liballoc/vec.rs","byte_start":869991,"byte_end":870054,"line_start":2165,"line_end":2165,"column_start":5,"column_end":68}},{"value":"/ * or `replace_with` yields fewer elements than `range`’s length","span":{"file_name":"src/liballoc/vec.rs","byte_start":870059,"byte_end":870128,"line_start":2166,"line_end":2166,"column_start":5,"column_end":72}},{"value":"/ * or the lower bound of its `size_hint()` is exact.","span":{"file_name":"src/liballoc/vec.rs","byte_start":870133,"byte_end":870188,"line_start":2167,"line_end":2167,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870193,"byte_end":870196,"line_start":2168,"line_end":2168,"column_start":5,"column_end":8}},{"value":"/ Otherwise, a temporary vector is allocated and the tail is moved twice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":870201,"byte_end":870276,"line_start":2169,"line_end":2169,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870281,"byte_end":870284,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":870289,"byte_end":870301,"line_start":2171,"line_end":2171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870306,"byte_end":870309,"line_start":2172,"line_end":2172,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/vec.rs","byte_start":870314,"byte_end":870382,"line_start":2173,"line_end":2173,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":870387,"byte_end":870446,"line_start":2174,"line_end":2174,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870451,"byte_end":870454,"line_start":2175,"line_end":2175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":870459,"byte_end":870473,"line_start":2176,"line_end":2176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870478,"byte_end":870481,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":870486,"byte_end":870493,"line_start":2178,"line_end":2178,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":870498,"byte_end":870528,"line_start":2179,"line_end":2179,"column_start":5,"column_end":35}},{"value":"/ let new = [7, 8];","span":{"file_name":"src/liballoc/vec.rs","byte_start":870533,"byte_end":870554,"line_start":2180,"line_end":2180,"column_start":5,"column_end":26}},{"value":"/ let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();","span":{"file_name":"src/liballoc/vec.rs","byte_start":870559,"byte_end":870624,"line_start":2181,"line_end":2181,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(v, &[7, 8, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":870629,"byte_end":870659,"line_start":2182,"line_end":2182,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(u, &[1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":870664,"byte_end":870691,"line_start":2183,"line_end":2183,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":870696,"byte_end":870703,"line_start":2184,"line_end":2184,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":870708,"byte_end":870717,"line_start":2185,"line_end":2185,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_splice\", since = \"1.21.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":870722,"byte_end":870773,"line_start":2186,"line_end":2186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4286},"span":{"file_name":"src/liballoc/vec.rs","byte_start":872775,"byte_end":872787,"line_start":2241,"line_end":2241,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<Vec<T>>::drain_filter","value":"fn <F> (&mut self, filter: F) -> DrainFilter<'_, T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator which uses a closure to determine if an element should be removed.","sig":null,"attributes":[{"value":"/ Creates an iterator which uses a closure to determine if an element should be removed.","span":{"file_name":"src/liballoc/vec.rs","byte_start":871040,"byte_end":871130,"line_start":2195,"line_end":2195,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":871135,"byte_end":871138,"line_start":2196,"line_end":2196,"column_start":5,"column_end":8}},{"value":"/ If the closure returns true, then the element is removed and yielded.","span":{"file_name":"src/liballoc/vec.rs","byte_start":871143,"byte_end":871216,"line_start":2197,"line_end":2197,"column_start":5,"column_end":78}},{"value":"/ If the closure returns false, the element will remain in the vector and will not be yielded","span":{"file_name":"src/liballoc/vec.rs","byte_start":871221,"byte_end":871316,"line_start":2198,"line_end":2198,"column_start":5,"column_end":100}},{"value":"/ by the iterator.","span":{"file_name":"src/liballoc/vec.rs","byte_start":871321,"byte_end":871341,"line_start":2199,"line_end":2199,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":871346,"byte_end":871349,"line_start":2200,"line_end":2200,"column_start":5,"column_end":8}},{"value":"/ Using this method is equivalent to the following code:","span":{"file_name":"src/liballoc/vec.rs","byte_start":871354,"byte_end":871412,"line_start":2201,"line_end":2201,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":871417,"byte_end":871420,"line_start":2202,"line_end":2202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":871425,"byte_end":871432,"line_start":2203,"line_end":2203,"column_start":5,"column_end":12}},{"value":"/ # let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };","span":{"file_name":"src/liballoc/vec.rs","byte_start":871437,"byte_end":871512,"line_start":2204,"line_end":2204,"column_start":5,"column_end":80}},{"value":"/ # let mut vec = vec![1, 2, 3, 4, 5, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":871517,"byte_end":871560,"line_start":2205,"line_end":2205,"column_start":5,"column_end":48}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":871565,"byte_end":871583,"line_start":2206,"line_end":2206,"column_start":5,"column_end":23}},{"value":"/ while i != vec.len() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":871588,"byte_end":871614,"line_start":2207,"line_end":2207,"column_start":5,"column_end":31}},{"value":"/     if some_predicate(&mut vec[i]) {","span":{"file_name":"src/liballoc/vec.rs","byte_start":871619,"byte_end":871659,"line_start":2208,"line_end":2208,"column_start":5,"column_end":45}},{"value":"/         let val = vec.remove(i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":871664,"byte_end":871700,"line_start":2209,"line_end":2209,"column_start":5,"column_end":41}},{"value":"/         // your code here","span":{"file_name":"src/liballoc/vec.rs","byte_start":871705,"byte_end":871734,"line_start":2210,"line_end":2210,"column_start":5,"column_end":34}},{"value":"/     } else {","span":{"file_name":"src/liballoc/vec.rs","byte_start":871739,"byte_end":871755,"line_start":2211,"line_end":2211,"column_start":5,"column_end":21}},{"value":"/         i += 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":871760,"byte_end":871779,"line_start":2212,"line_end":2212,"column_start":5,"column_end":24}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":871784,"byte_end":871793,"line_start":2213,"line_end":2213,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":871798,"byte_end":871803,"line_start":2214,"line_end":2214,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":871808,"byte_end":871811,"line_start":2215,"line_end":2215,"column_start":5,"column_end":8}},{"value":"/ # assert_eq!(vec, vec![1, 4, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":871816,"byte_end":871853,"line_start":2216,"line_end":2216,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":871858,"byte_end":871865,"line_start":2217,"line_end":2217,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":871870,"byte_end":871873,"line_start":2218,"line_end":2218,"column_start":5,"column_end":8}},{"value":"/ But `drain_filter` is easier to use. `drain_filter` is also more efficient,","span":{"file_name":"src/liballoc/vec.rs","byte_start":871878,"byte_end":871957,"line_start":2219,"line_end":2219,"column_start":5,"column_end":84}},{"value":"/ because it can backshift the elements of the array in bulk.","span":{"file_name":"src/liballoc/vec.rs","byte_start":871962,"byte_end":872025,"line_start":2220,"line_end":2220,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872030,"byte_end":872033,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ Note that `drain_filter` also lets you mutate every element in the filter closure,","span":{"file_name":"src/liballoc/vec.rs","byte_start":872038,"byte_end":872124,"line_start":2222,"line_end":2222,"column_start":5,"column_end":91}},{"value":"/ regardless of whether you choose to keep or remove it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":872129,"byte_end":872187,"line_start":2223,"line_end":2223,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872192,"byte_end":872195,"line_start":2224,"line_end":2224,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872200,"byte_end":872203,"line_start":2225,"line_end":2225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":872208,"byte_end":872222,"line_start":2226,"line_end":2226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872227,"byte_end":872230,"line_start":2227,"line_end":2227,"column_start":5,"column_end":8}},{"value":"/ Splitting an array into evens and odds, reusing the original allocation:","span":{"file_name":"src/liballoc/vec.rs","byte_start":872235,"byte_end":872311,"line_start":2228,"line_end":2228,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872316,"byte_end":872319,"line_start":2229,"line_end":2229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":872324,"byte_end":872331,"line_start":2230,"line_end":2230,"column_start":5,"column_end":12}},{"value":"/ #![feature(drain_filter)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":872336,"byte_end":872365,"line_start":2231,"line_end":2231,"column_start":5,"column_end":34}},{"value":"/ let mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];","span":{"file_name":"src/liballoc/vec.rs","byte_start":872370,"byte_end":872437,"line_start":2232,"line_end":2232,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872442,"byte_end":872445,"line_start":2233,"line_end":2233,"column_start":5,"column_end":8}},{"value":"/ let evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<Vec<_>>();","span":{"file_name":"src/liballoc/vec.rs","byte_start":872450,"byte_end":872524,"line_start":2234,"line_end":2234,"column_start":5,"column_end":79}},{"value":"/ let odds = numbers;","span":{"file_name":"src/liballoc/vec.rs","byte_start":872529,"byte_end":872552,"line_start":2235,"line_end":2235,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":872557,"byte_end":872560,"line_start":2236,"line_end":2236,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![2, 4, 6, 8, 14]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":872565,"byte_end":872609,"line_start":2237,"line_end":2237,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":872614,"byte_end":872665,"line_start":2238,"line_end":2238,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":872670,"byte_end":872677,"line_start":2239,"line_end":2239,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":872682,"byte_end":872763,"line_start":2240,"line_end":2240,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4358},"span":{"file_name":"src/liballoc/vec.rs","byte_start":879720,"byte_end":879728,"line_start":2482,"line_end":2482,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4364}],"decl_id":null,"docs":" An iterator that moves out of a vector.","sig":null,"attributes":[{"value":"/ An iterator that moves out of a vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":879409,"byte_end":879452,"line_start":2474,"line_end":2474,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":879453,"byte_end":879456,"line_start":2475,"line_end":2475,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the `into_iter` method on [`Vec`] (provided","span":{"file_name":"src/liballoc/vec.rs","byte_start":879457,"byte_end":879532,"line_start":2476,"line_end":2476,"column_start":1,"column_end":76}},{"value":"/ by the [`IntoIterator`] trait).","span":{"file_name":"src/liballoc/vec.rs","byte_start":879533,"byte_end":879568,"line_start":2477,"line_end":2477,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":879569,"byte_end":879572,"line_start":2478,"line_end":2478,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":879573,"byte_end":879601,"line_start":2479,"line_end":2479,"column_start":1,"column_end":29}},{"value":"/ [`IntoIterator`]: ../../std/iter/trait.IntoIterator.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":879602,"byte_end":879662,"line_start":2480,"line_end":2480,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":879663,"byte_end":879708,"line_start":2481,"line_end":2481,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4370},"span":{"file_name":"src/liballoc/vec.rs","byte_start":880556,"byte_end":880564,"line_start":2510,"line_end":2510,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<IntoIter<T>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":880115,"byte_end":880175,"line_start":2498,"line_end":2498,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":880180,"byte_end":880183,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":880188,"byte_end":880202,"line_start":2500,"line_end":2500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":880207,"byte_end":880210,"line_start":2501,"line_end":2501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":880215,"byte_end":880222,"line_start":2502,"line_end":2502,"column_start":5,"column_end":12}},{"value":"/ let vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":880227,"byte_end":880261,"line_start":2503,"line_end":2503,"column_start":5,"column_end":39}},{"value":"/ let mut into_iter = vec.into_iter();","span":{"file_name":"src/liballoc/vec.rs","byte_start":880266,"byte_end":880306,"line_start":2504,"line_end":2504,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":880311,"byte_end":880366,"line_start":2505,"line_end":2505,"column_start":5,"column_end":60}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":880371,"byte_end":880409,"line_start":2506,"line_end":2506,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(into_iter.as_slice(), &['b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":880414,"byte_end":880464,"line_start":2507,"line_end":2507,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":880469,"byte_end":880476,"line_start":2508,"line_end":2508,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":880481,"byte_end":880544,"line_start":2509,"line_end":2509,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"src/liballoc/vec.rs","byte_start":881206,"byte_end":881218,"line_start":2528,"line_end":2528,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<IntoIter<T>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a mutable slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":880656,"byte_end":880724,"line_start":2514,"line_end":2514,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":880729,"byte_end":880732,"line_start":2515,"line_end":2515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":880737,"byte_end":880751,"line_start":2516,"line_end":2516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":880756,"byte_end":880759,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":880764,"byte_end":880771,"line_start":2518,"line_end":2518,"column_start":5,"column_end":12}},{"value":"/ let vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":880776,"byte_end":880810,"line_start":2519,"line_end":2519,"column_start":5,"column_end":39}},{"value":"/ let mut into_iter = vec.into_iter();","span":{"file_name":"src/liballoc/vec.rs","byte_start":880815,"byte_end":880855,"line_start":2520,"line_end":2520,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":880860,"byte_end":880915,"line_start":2521,"line_end":2521,"column_start":5,"column_end":60}},{"value":"/ into_iter.as_mut_slice()[2] = 'z';","span":{"file_name":"src/liballoc/vec.rs","byte_start":880920,"byte_end":880958,"line_start":2522,"line_end":2522,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'a');","span":{"file_name":"src/liballoc/vec.rs","byte_start":880963,"byte_end":881010,"line_start":2523,"line_end":2523,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'b');","span":{"file_name":"src/liballoc/vec.rs","byte_start":881015,"byte_end":881062,"line_start":2524,"line_end":2524,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'z');","span":{"file_name":"src/liballoc/vec.rs","byte_start":881067,"byte_end":881114,"line_start":2525,"line_end":2525,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":881119,"byte_end":881126,"line_start":2526,"line_end":2526,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":881131,"byte_end":881194,"line_start":2527,"line_end":2527,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4398},"span":{"file_name":"src/liballoc/vec.rs","byte_start":884627,"byte_end":884632,"line_start":2646,"line_end":2646,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4401},{"krate":0,"index":4402},{"krate":0,"index":4403},{"krate":0,"index":4404}],"decl_id":null,"docs":" A draining iterator for `Vec<T>`.","sig":null,"attributes":[{"value":"/ A draining iterator for `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":884386,"byte_end":884423,"line_start":2639,"line_end":2639,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":884424,"byte_end":884427,"line_start":2640,"line_end":2640,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`Vec`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":884428,"byte_end":884492,"line_start":2641,"line_end":2641,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":884493,"byte_end":884496,"line_start":2642,"line_end":2642,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.Vec.html#method.drain","span":{"file_name":"src/liballoc/vec.rs","byte_start":884497,"byte_end":884540,"line_start":2643,"line_end":2643,"column_start":1,"column_end":44}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":884541,"byte_end":884569,"line_start":2644,"line_end":2644,"column_start":1,"column_end":29}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":884570,"byte_end":884615,"line_start":2645,"line_end":2645,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4411},"span":{"file_name":"src/liballoc/vec.rs","byte_start":885621,"byte_end":885629,"line_start":2677,"line_end":2677,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Drain>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":885128,"byte_end":885188,"line_start":2664,"line_end":2664,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":885193,"byte_end":885196,"line_start":2665,"line_end":2665,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":885201,"byte_end":885215,"line_start":2666,"line_end":2666,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":885220,"byte_end":885223,"line_start":2667,"line_end":2667,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":885228,"byte_end":885235,"line_start":2668,"line_end":2668,"column_start":5,"column_end":12}},{"value":"/ # #![feature(vec_drain_as_slice)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":885240,"byte_end":885277,"line_start":2669,"line_end":2669,"column_start":5,"column_end":42}},{"value":"/ let mut vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":885282,"byte_end":885320,"line_start":2670,"line_end":2670,"column_start":5,"column_end":43}},{"value":"/ let mut drain = vec.drain(..);","span":{"file_name":"src/liballoc/vec.rs","byte_start":885325,"byte_end":885359,"line_start":2671,"line_end":2671,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(drain.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":885364,"byte_end":885415,"line_start":2672,"line_end":2672,"column_start":5,"column_end":56}},{"value":"/ let _ = drain.next().unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":885420,"byte_end":885454,"line_start":2673,"line_end":2673,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(drain.as_slice(), &['b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":885459,"byte_end":885505,"line_start":2674,"line_end":2674,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":885510,"byte_end":885517,"line_start":2675,"line_end":2675,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_drain_as_slice\", reason = \"recently added\", issue =\n           \"58957\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":885522,"byte_end":885609,"line_start":2676,"line_end":2676,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":4909},"span":{"file_name":"src/liballoc/vec.rs","byte_start":888682,"byte_end":888688,"line_start":2773,"line_end":2773,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":4912},{"krate":0,"index":4913}],"decl_id":null,"docs":" A splicing iterator for `Vec`.","sig":null,"attributes":[{"value":"/ A splicing iterator for `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":888380,"byte_end":888414,"line_start":2764,"line_end":2764,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":888415,"byte_end":888418,"line_start":2765,"line_end":2765,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`splice()`] method on [`Vec`]. See its","span":{"file_name":"src/liballoc/vec.rs","byte_start":888419,"byte_end":888492,"line_start":2766,"line_end":2766,"column_start":1,"column_end":74}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/vec.rs","byte_start":888493,"byte_end":888520,"line_start":2767,"line_end":2767,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":888521,"byte_end":888524,"line_start":2768,"line_end":2768,"column_start":1,"column_end":4}},{"value":"/ [`splice()`]: struct.Vec.html#method.splice","span":{"file_name":"src/liballoc/vec.rs","byte_start":888525,"byte_end":888572,"line_start":2769,"line_end":2769,"column_start":1,"column_end":48}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":888573,"byte_end":888601,"line_start":2770,"line_end":2770,"column_start":1,"column_end":29}},{"value":"stable(feature = \"vec_splice\", since = \"1.21.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":888619,"byte_end":888670,"line_start":2772,"line_end":2772,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4918},"span":{"file_name":"src/liballoc/vec.rs","byte_start":892633,"byte_end":892644,"line_start":2883,"line_end":2883,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::vec::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":4922},{"krate":0,"index":4923},{"krate":0,"index":4924},{"krate":0,"index":4925},{"krate":0,"index":4926},{"krate":0,"index":4927}],"decl_id":null,"docs":" An iterator produced by calling `drain_filter` on Vec.\n","sig":null,"attributes":[{"value":"/ An iterator produced by calling `drain_filter` on Vec.","span":{"file_name":"src/liballoc/vec.rs","byte_start":892464,"byte_end":892522,"line_start":2880,"line_end":2880,"column_start":1,"column_end":59}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":892523,"byte_end":892604,"line_start":2881,"line_end":2881,"column_start":1,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":4489},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5584,"byte_end":5592,"line_start":174,"line_end":174,"column_start":9,"column_end":17},"name":"__export","qualname":"::__export","value":"src/liballoc/lib.rs","parent":null,"children":[{"krate":0,"index":4490}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"liballoc_internals\", issue = \"none\", reason =\n           \"implementation detail\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":5482,"byte_end":5575,"line_start":173,"line_end":173,"column_start":1,"column_end":94}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14579,"byte_end":14585,"line_start":166,"line_end":166,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24010,"byte_end":24013,"line_start":162,"line_end":162,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26355,"byte_end":26358,"line_start":245,"line_end":245,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27446,"byte_end":27449,"line_start":280,"line_end":280,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28448,"byte_end":28451,"line_start":316,"line_end":316,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29578,"byte_end":29581,"line_start":354,"line_end":354,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37255,"byte_end":37258,"line_start":553,"line_end":553,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37444,"byte_end":37447,"line_start":560,"line_end":560,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37648,"byte_end":37651,"line_start":568,"line_end":568,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37806,"byte_end":37809,"line_start":575,"line_end":575,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37993,"byte_end":37996,"line_start":582,"line_end":582,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4500},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39061,"byte_end":39064,"line_start":627,"line_end":627,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39343,"byte_end":39346,"line_start":636,"line_end":636,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39652,"byte_end":39655,"line_start":647,"line_end":647,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40294,"byte_end":40297,"line_start":670,"line_end":670,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40483,"byte_end":40486,"line_start":677,"line_end":677,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40572,"byte_end":40575,"line_start":680,"line_end":680,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40765,"byte_end":40768,"line_start":687,"line_end":687,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":41889,"byte_end":41892,"line_start":733,"line_end":733,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":42340,"byte_end":42343,"line_start":752,"line_end":752,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":42647,"byte_end":42650,"line_start":762,"line_end":762,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43400,"byte_end":43403,"line_start":787,"line_end":787,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43889,"byte_end":43892,"line_start":805,"line_end":805,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44719,"byte_end":44722,"line_start":829,"line_end":829,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45055,"byte_end":45058,"line_start":844,"line_end":844,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45935,"byte_end":45938,"line_start":876,"line_end":876,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46882,"byte_end":46885,"line_start":905,"line_end":905,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47091,"byte_end":47094,"line_start":912,"line_end":912,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47287,"byte_end":47290,"line_start":919,"line_end":919,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47657,"byte_end":47660,"line_start":929,"line_end":929,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47816,"byte_end":47819,"line_start":938,"line_end":938,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47979,"byte_end":47982,"line_start":945,"line_end":945,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48076,"byte_end":48079,"line_start":948,"line_end":948,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48544,"byte_end":48547,"line_start":969,"line_end":969,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48947,"byte_end":48950,"line_start":984,"line_end":984,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49135,"byte_end":49138,"line_start":991,"line_end":991,"column_start":63,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49427,"byte_end":49430,"line_start":1000,"line_end":1000,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49661,"byte_end":49664,"line_start":1010,"line_end":1010,"column_start":51,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49778,"byte_end":49781,"line_start":1013,"line_end":1013,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50063,"byte_end":50066,"line_start":1022,"line_end":1022,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50298,"byte_end":50301,"line_start":1029,"line_end":1029,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50542,"byte_end":50545,"line_start":1036,"line_end":1036,"column_start":66,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50679,"byte_end":50682,"line_start":1039,"line_end":1039,"column_start":68,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50781,"byte_end":50784,"line_start":1042,"line_end":1042,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51009,"byte_end":51012,"line_start":1049,"line_end":1049,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51189,"byte_end":51192,"line_start":1056,"line_end":1056,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51344,"byte_end":51347,"line_start":1063,"line_end":1063,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51509,"byte_end":51512,"line_start":1070,"line_end":1070,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51658,"byte_end":51661,"line_start":1077,"line_end":1077,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":52894,"byte_end":52897,"line_start":1106,"line_end":1106,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":53694,"byte_end":53697,"line_start":1132,"line_end":1132,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":54041,"byte_end":54044,"line_start":1143,"line_end":1143,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":54354,"byte_end":54357,"line_start":1153,"line_end":1153,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54947,"byte_end":54950,"line_start":18,"line_end":18,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56766,"byte_end":56767,"line_start":80,"line_end":80,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59918,"byte_end":59921,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60406,"byte_end":60409,"line_start":204,"line_end":204,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63548,"byte_end":63551,"line_start":321,"line_end":321,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63813,"byte_end":63816,"line_start":333,"line_end":333,"column_start":24,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63920,"byte_end":63923,"line_start":336,"line_end":336,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64173,"byte_end":64176,"line_start":347,"line_end":347,"column_start":62,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64431,"byte_end":64434,"line_start":359,"line_end":359,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64698,"byte_end":64701,"line_start":370,"line_end":370,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":65053,"byte_end":65056,"line_start":383,"line_end":383,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":65414,"byte_end":65417,"line_start":396,"line_end":396,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":65710,"byte_end":65713,"line_start":407,"line_end":407,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":65942,"byte_end":65945,"line_start":418,"line_end":418,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":66081,"byte_end":66084,"line_start":425,"line_end":425,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":66319,"byte_end":66322,"line_start":436,"line_end":436,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":66563,"byte_end":66566,"line_start":447,"line_end":447,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":67081,"byte_end":67084,"line_start":463,"line_end":463,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79078,"byte_end":79085,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79319,"byte_end":79326,"line_start":275,"line_end":275,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79524,"byte_end":79531,"line_start":284,"line_end":284,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79850,"byte_end":79857,"line_start":294,"line_end":294,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80100,"byte_end":80107,"line_start":302,"line_end":302,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80465,"byte_end":80475,"line_start":313,"line_end":313,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80735,"byte_end":80745,"line_start":324,"line_end":324,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80970,"byte_end":80980,"line_start":333,"line_end":333,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81124,"byte_end":81134,"line_start":339,"line_end":339,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91582,"byte_end":91592,"line_start":672,"line_end":672,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99669,"byte_end":99673,"line_start":972,"line_end":972,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101115,"byte_end":101119,"line_start":1019,"line_end":1019,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101815,"byte_end":101819,"line_start":1043,"line_end":1043,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102088,"byte_end":102092,"line_start":1051,"line_end":1051,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102253,"byte_end":102257,"line_start":1058,"line_end":1058,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102649,"byte_end":102653,"line_start":1078,"line_end":1078,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102839,"byte_end":102843,"line_start":1086,"line_end":1086,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102997,"byte_end":103001,"line_start":1093,"line_end":1093,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103546,"byte_end":103554,"line_start":1109,"line_end":1109,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103771,"byte_end":103779,"line_start":1116,"line_end":1116,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104072,"byte_end":104080,"line_start":1131,"line_end":1131,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104258,"byte_end":104266,"line_start":1139,"line_end":1139,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104416,"byte_end":104424,"line_start":1146,"line_end":1146,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104684,"byte_end":104698,"line_start":1155,"line_end":1155,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105056,"byte_end":105070,"line_start":1171,"line_end":1171,"column_start":36,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105180,"byte_end":105194,"line_start":1174,"line_end":1174,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105291,"byte_end":105305,"line_start":1177,"line_end":1177,"column_start":36,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105776,"byte_end":105781,"line_start":1193,"line_end":1193,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106078,"byte_end":106083,"line_start":1208,"line_end":1208,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106265,"byte_end":106270,"line_start":1216,"line_end":1216,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106424,"byte_end":106429,"line_start":1223,"line_end":1223,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106984,"byte_end":106995,"line_start":1239,"line_end":1239,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107184,"byte_end":107193,"line_start":1244,"line_end":1244,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107582,"byte_end":107593,"line_start":1259,"line_end":1259,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107951,"byte_end":107962,"line_start":1275,"line_end":1275,"column_start":36,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108072,"byte_end":108083,"line_start":1278,"line_end":1278,"column_start":32,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108184,"byte_end":108195,"line_start":1281,"line_end":1281,"column_start":36,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108299,"byte_end":108309,"line_start":1284,"line_end":1284,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108682,"byte_end":108685,"line_start":1296,"line_end":1296,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108842,"byte_end":108852,"line_start":1303,"line_end":1303,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":109073,"byte_end":109083,"line_start":1310,"line_end":1310,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110074,"byte_end":110084,"line_start":1348,"line_end":1348,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110292,"byte_end":110302,"line_start":1355,"line_end":1355,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110458,"byte_end":110468,"line_start":1361,"line_end":1361,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110586,"byte_end":110596,"line_start":1367,"line_end":1367,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110957,"byte_end":110967,"line_start":1379,"line_end":1379,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117385,"byte_end":117393,"line_start":130,"line_end":130,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117591,"byte_end":117599,"line_start":139,"line_end":139,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120575,"byte_end":120583,"line_start":221,"line_end":221,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120731,"byte_end":120739,"line_start":227,"line_end":227,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122342,"byte_end":122350,"line_start":266,"line_end":266,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123935,"byte_end":123939,"line_start":318,"line_end":318,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125168,"byte_end":125176,"line_start":353,"line_end":353,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125846,"byte_end":125850,"line_start":373,"line_end":373,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126453,"byte_end":126459,"line_start":392,"line_end":392,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127643,"byte_end":127648,"line_start":425,"line_end":425,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128508,"byte_end":128516,"line_start":448,"line_end":448,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129487,"byte_end":129492,"line_start":473,"line_end":473,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130254,"byte_end":130265,"line_start":497,"line_end":497,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130924,"byte_end":130937,"line_start":518,"line_end":518,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131299,"byte_end":131307,"line_start":530,"line_end":530,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":851},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":156812,"byte_end":156816,"line_start":1349,"line_end":1349,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157341,"byte_end":157345,"line_start":1371,"line_end":1371,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157453,"byte_end":157457,"line_start":1374,"line_end":1374,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157780,"byte_end":157784,"line_start":1386,"line_end":1386,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157922,"byte_end":157926,"line_start":1393,"line_end":1393,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158390,"byte_end":158397,"line_start":1410,"line_end":1410,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159018,"byte_end":159025,"line_start":1433,"line_end":1433,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159419,"byte_end":159426,"line_start":1446,"line_end":1446,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159573,"byte_end":159580,"line_start":1453,"line_end":1453,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159669,"byte_end":159677,"line_start":1456,"line_end":1456,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160154,"byte_end":160162,"line_start":1471,"line_end":1471,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160289,"byte_end":160298,"line_start":1475,"line_end":1475,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161684,"byte_end":161692,"line_start":1512,"line_end":1512,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162120,"byte_end":162128,"line_start":1530,"line_end":1530,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162438,"byte_end":162446,"line_start":1542,"line_end":1542,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162589,"byte_end":162597,"line_start":1549,"line_end":1549,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162682,"byte_end":162686,"line_start":1552,"line_end":1552,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163064,"byte_end":163068,"line_start":1569,"line_end":1569,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163263,"byte_end":163267,"line_start":1576,"line_end":1576,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163419,"byte_end":163423,"line_start":1583,"line_end":1583,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163505,"byte_end":163509,"line_start":1586,"line_end":1586,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163678,"byte_end":163684,"line_start":1593,"line_end":1593,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164062,"byte_end":164068,"line_start":1610,"line_end":1610,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164263,"byte_end":164269,"line_start":1617,"line_end":1617,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164421,"byte_end":164427,"line_start":1624,"line_end":1624,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164509,"byte_end":164515,"line_start":1627,"line_end":1627,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164693,"byte_end":164698,"line_start":1634,"line_end":1634,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165054,"byte_end":165063,"line_start":1647,"line_end":1647,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165463,"byte_end":165472,"line_start":1664,"line_end":1664,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165681,"byte_end":165690,"line_start":1671,"line_end":1671,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165842,"byte_end":165851,"line_start":1678,"line_end":1678,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165881,"byte_end":165886,"line_start":1680,"line_end":1680,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166168,"byte_end":166173,"line_start":1691,"line_end":1691,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166355,"byte_end":166360,"line_start":1697,"line_end":1697,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166563,"byte_end":166568,"line_start":1704,"line_end":1704,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166657,"byte_end":166662,"line_start":1707,"line_end":1707,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166848,"byte_end":166856,"line_start":1714,"line_end":1714,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167262,"byte_end":167270,"line_start":1731,"line_end":1731,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167560,"byte_end":167568,"line_start":1742,"line_end":1742,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167922,"byte_end":167930,"line_start":1754,"line_end":1754,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167960,"byte_end":167968,"line_start":1756,"line_end":1756,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168190,"byte_end":168198,"line_start":1763,"line_end":1763,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168452,"byte_end":168460,"line_start":1772,"line_end":1772,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168764,"byte_end":168772,"line_start":1782,"line_end":1782,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169018,"byte_end":169026,"line_start":1789,"line_end":1789,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169230,"byte_end":169238,"line_start":1798,"line_end":1798,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169453,"byte_end":169461,"line_start":1806,"line_end":1806,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169683,"byte_end":169691,"line_start":1813,"line_end":1813,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169798,"byte_end":169806,"line_start":1816,"line_end":1816,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170031,"byte_end":170039,"line_start":1824,"line_end":1824,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170246,"byte_end":170254,"line_start":1832,"line_end":1832,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170474,"byte_end":170482,"line_start":1839,"line_end":1839,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173850,"byte_end":173858,"line_start":1946,"line_end":1946,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178470,"byte_end":178475,"line_start":2121,"line_end":2121,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181369,"byte_end":181374,"line_start":2219,"line_end":2219,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182086,"byte_end":182097,"line_start":2242,"line_end":2242,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184863,"byte_end":184876,"line_start":2336,"line_end":2336,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":192483,"byte_end":192492,"line_start":2583,"line_end":2583,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193415,"byte_end":193421,"line_start":6,"line_end":6,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197120,"byte_end":197126,"line_start":91,"line_end":91,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198178,"byte_end":198184,"line_start":115,"line_end":115,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199811,"byte_end":199817,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202227,"byte_end":202234,"line_start":191,"line_end":191,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203360,"byte_end":203366,"line_start":219,"line_end":219,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208324,"byte_end":208332,"line_start":98,"line_end":98,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208967,"byte_end":208977,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209189,"byte_end":209199,"line_start":121,"line_end":121,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210284,"byte_end":210296,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211647,"byte_end":211656,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212424,"byte_end":212428,"line_start":195,"line_end":195,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212477,"byte_end":212481,"line_start":196,"line_end":196,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212503,"byte_end":212507,"line_start":198,"line_end":198,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217702,"byte_end":217709,"line_start":325,"line_end":325,"column_start":39,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217783,"byte_end":217790,"line_start":326,"line_end":326,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217934,"byte_end":217941,"line_start":332,"line_end":332,"column_start":58,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218029,"byte_end":218036,"line_start":334,"line_end":334,"column_start":60,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218130,"byte_end":218137,"line_start":335,"line_end":335,"column_start":60,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218215,"byte_end":218222,"line_start":336,"line_end":336,"column_start":46,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218277,"byte_end":218284,"line_start":338,"line_end":338,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218467,"byte_end":218474,"line_start":344,"line_end":344,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218692,"byte_end":218699,"line_start":350,"line_end":350,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223024,"byte_end":223031,"line_start":460,"line_end":460,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223863,"byte_end":223870,"line_start":483,"line_end":483,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226183,"byte_end":226190,"line_start":527,"line_end":527,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227162,"byte_end":227169,"line_start":549,"line_end":549,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229110,"byte_end":229117,"line_start":591,"line_end":591,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1464},{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229986,"byte_end":229993,"line_start":621,"line_end":621,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":232141,"byte_end":232148,"line_start":682,"line_end":682,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234868,"byte_end":234875,"line_start":753,"line_end":753,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236368,"byte_end":236374,"line_start":793,"line_end":793,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236589,"byte_end":236595,"line_start":796,"line_end":796,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236680,"byte_end":236686,"line_start":802,"line_end":802,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236889,"byte_end":236895,"line_start":809,"line_end":809,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237646,"byte_end":237652,"line_start":828,"line_end":828,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237885,"byte_end":237891,"line_start":836,"line_end":836,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238157,"byte_end":238163,"line_start":844,"line_end":844,"column_start":5,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1531}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238607,"byte_end":238613,"line_start":853,"line_end":853,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239715,"byte_end":239721,"line_start":872,"line_end":872,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240617,"byte_end":240623,"line_start":898,"line_end":898,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":242648,"byte_end":242654,"line_start":947,"line_end":947,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246040,"byte_end":246046,"line_start":1031,"line_end":1031,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246687,"byte_end":246693,"line_start":1048,"line_end":1048,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246995,"byte_end":247001,"line_start":1057,"line_end":1057,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247317,"byte_end":247323,"line_start":1066,"line_end":1066,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247638,"byte_end":247644,"line_start":1075,"line_end":1075,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249705,"byte_end":249711,"line_start":1126,"line_end":1126,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262272,"byte_end":262278,"line_start":1429,"line_end":1429,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262565,"byte_end":262571,"line_start":1437,"line_end":1437,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262862,"byte_end":262868,"line_start":1445,"line_end":1445,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263165,"byte_end":263171,"line_start":1454,"line_end":1454,"column_start":5,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263886,"byte_end":263892,"line_start":1474,"line_end":1474,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271739,"byte_end":271747,"line_start":66,"line_end":66,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272373,"byte_end":272377,"line_start":89,"line_end":89,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273784,"byte_end":273798,"line_start":141,"line_end":141,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275052,"byte_end":275066,"line_start":182,"line_end":182,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276215,"byte_end":276225,"line_start":219,"line_end":219,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276913,"byte_end":276932,"line_start":236,"line_end":236,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278013,"byte_end":278025,"line_start":269,"line_end":269,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278641,"byte_end":278646,"line_start":286,"line_end":286,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279220,"byte_end":279228,"line_start":300,"line_end":300,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1821},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1827},{"krate":0,"index":1829},{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299536,"byte_end":299544,"line_start":949,"line_end":949,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301506,"byte_end":301514,"line_start":1018,"line_end":1018,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1839}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301747,"byte_end":301755,"line_start":1027,"line_end":1027,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":302548,"byte_end":302556,"line_start":1059,"line_end":1059,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":302843,"byte_end":302851,"line_start":1069,"line_end":1069,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":303052,"byte_end":303060,"line_start":1076,"line_end":1076,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306115,"byte_end":306123,"line_start":1176,"line_end":1176,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306317,"byte_end":306321,"line_start":1183,"line_end":1183,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306481,"byte_end":306485,"line_start":1189,"line_end":1189,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306836,"byte_end":306840,"line_start":1203,"line_end":1203,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307011,"byte_end":307015,"line_start":1209,"line_end":1209,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307160,"byte_end":307164,"line_start":1216,"line_end":1216,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307243,"byte_end":307251,"line_start":1219,"line_end":1219,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307530,"byte_end":307538,"line_start":1230,"line_end":1230,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1911}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307717,"byte_end":307725,"line_start":1236,"line_end":1236,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307866,"byte_end":307874,"line_start":1243,"line_end":1243,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307953,"byte_end":307958,"line_start":1246,"line_end":1246,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308127,"byte_end":308132,"line_start":1253,"line_end":1253,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308420,"byte_end":308425,"line_start":1266,"line_end":1266,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308610,"byte_end":308615,"line_start":1273,"line_end":1273,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308691,"byte_end":308701,"line_start":1276,"line_end":1276,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1937}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":309392,"byte_end":309402,"line_start":1293,"line_end":1293,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311032,"byte_end":311042,"line_start":1336,"line_end":1336,"column_start":32,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311118,"byte_end":311137,"line_start":1339,"line_end":1339,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311305,"byte_end":311324,"line_start":1345,"line_end":1345,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312018,"byte_end":312037,"line_start":1367,"line_end":1367,"column_start":32,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312113,"byte_end":312125,"line_start":1370,"line_end":1370,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312759,"byte_end":312771,"line_start":1386,"line_end":1386,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314118,"byte_end":314130,"line_start":1423,"line_end":1423,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314206,"byte_end":314211,"line_start":1426,"line_end":1426,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1971}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314365,"byte_end":314370,"line_start":1432,"line_end":1432,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314822,"byte_end":314827,"line_start":1448,"line_end":1448,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316769,"byte_end":316773,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2023}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317030,"byte_end":317034,"line_start":75,"line_end":75,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317936,"byte_end":317943,"line_start":100,"line_end":100,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318632,"byte_end":318640,"line_start":120,"line_end":120,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318787,"byte_end":318791,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318987,"byte_end":318997,"line_start":137,"line_end":137,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326708,"byte_end":326718,"line_start":363,"line_end":363,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326844,"byte_end":326854,"line_start":371,"line_end":371,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2077},{"krate":0,"index":2079},{"krate":0,"index":2081},{"krate":0,"index":2083},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344721,"byte_end":344731,"line_start":967,"line_end":967,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344848,"byte_end":344857,"line_start":971,"line_end":971,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345390,"byte_end":345394,"line_start":988,"line_end":988,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346096,"byte_end":346100,"line_start":1018,"line_end":1018,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346582,"byte_end":346586,"line_start":1036,"line_end":1036,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346671,"byte_end":346675,"line_start":1039,"line_end":1039,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346758,"byte_end":346765,"line_start":1042,"line_end":1042,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2129}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347487,"byte_end":347494,"line_start":1072,"line_end":1072,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347988,"byte_end":347995,"line_start":1090,"line_end":1090,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348080,"byte_end":348087,"line_start":1093,"line_end":1093,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348107,"byte_end":348114,"line_start":1095,"line_end":1095,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351671,"byte_end":351677,"line_start":1201,"line_end":1201,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352730,"byte_end":352739,"line_start":1225,"line_end":1225,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352916,"byte_end":352922,"line_start":1231,"line_end":1231,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356898,"byte_end":356907,"line_start":1328,"line_end":1328,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361443,"byte_end":361452,"line_start":1437,"line_end":1437,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":367433,"byte_end":367444,"line_start":1580,"line_end":1580,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368226,"byte_end":368237,"line_start":1609,"line_end":1609,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368470,"byte_end":368479,"line_start":1618,"line_end":1618,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368934,"byte_end":368945,"line_start":1636,"line_end":1636,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2235}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369197,"byte_end":369205,"line_start":1646,"line_end":1646,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369518,"byte_end":369526,"line_start":1661,"line_end":1661,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369703,"byte_end":369711,"line_start":1669,"line_end":1669,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369792,"byte_end":369800,"line_start":1672,"line_end":1672,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369882,"byte_end":369892,"line_start":1675,"line_end":1675,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2250}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":370117,"byte_end":370127,"line_start":1684,"line_end":1684,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":370880,"byte_end":370890,"line_start":1716,"line_end":1716,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2271}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371066,"byte_end":371076,"line_start":1722,"line_end":1722,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2275}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371251,"byte_end":371261,"line_start":1728,"line_end":1728,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2279}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371458,"byte_end":371468,"line_start":1735,"line_end":1735,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2283}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371677,"byte_end":371687,"line_start":1742,"line_end":1742,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2287},{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371974,"byte_end":371984,"line_start":1753,"line_end":1753,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372073,"byte_end":372083,"line_start":1756,"line_end":1756,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372266,"byte_end":372276,"line_start":1763,"line_end":1763,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2296}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372453,"byte_end":372463,"line_start":1771,"line_end":1771,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373028,"byte_end":373038,"line_start":1791,"line_end":1791,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2303}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373231,"byte_end":373241,"line_start":1798,"line_end":1798,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373865,"byte_end":373875,"line_start":1822,"line_end":1822,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373959,"byte_end":373969,"line_start":1825,"line_end":1825,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374053,"byte_end":374057,"line_start":1828,"line_end":1828,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374145,"byte_end":374149,"line_start":1831,"line_end":1831,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374237,"byte_end":374244,"line_start":1834,"line_end":1834,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374332,"byte_end":374339,"line_start":1837,"line_end":1837,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469791,"byte_end":469796,"line_start":23,"line_end":23,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2383}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470112,"byte_end":470117,"line_start":34,"line_end":34,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470204,"byte_end":470209,"line_start":36,"line_end":36,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470284,"byte_end":470289,"line_start":39,"line_end":39,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470417,"byte_end":470426,"line_start":43,"line_end":43,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":472511,"byte_end":472516,"line_start":100,"line_end":100,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":472850,"byte_end":472855,"line_start":115,"line_end":115,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":473074,"byte_end":473079,"line_start":123,"line_end":123,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":473164,"byte_end":473169,"line_start":126,"line_end":126,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377164,"byte_end":377174,"line_start":86,"line_end":86,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377599,"byte_end":377609,"line_start":102,"line_end":102,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2444},{"krate":0,"index":2445}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378385,"byte_end":378393,"line_start":127,"line_end":127,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2448},{"krate":0,"index":2449}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378975,"byte_end":378983,"line_start":149,"line_end":149,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379212,"byte_end":379219,"line_start":155,"line_end":155,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2461}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379687,"byte_end":379695,"line_start":174,"line_end":174,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379830,"byte_end":379838,"line_start":182,"line_end":182,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389231,"byte_end":389239,"line_start":458,"line_end":458,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403631,"byte_end":403638,"line_start":878,"line_end":878,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445670,"byte_end":445678,"line_start":2155,"line_end":2155,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2544}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448399,"byte_end":448403,"line_start":2249,"line_end":2249,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2568}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448756,"byte_end":448760,"line_start":2258,"line_end":2258,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448947,"byte_end":448951,"line_start":2265,"line_end":2265,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2581},{"krate":0,"index":2585},{"krate":0,"index":2586}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":451169,"byte_end":451173,"line_start":2335,"line_end":2335,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2594}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452722,"byte_end":452726,"line_start":2380,"line_end":2380,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452882,"byte_end":452886,"line_start":2387,"line_end":2387,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453398,"byte_end":453405,"line_start":2404,"line_end":2404,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2611}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453715,"byte_end":453722,"line_start":2412,"line_end":2412,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2621},{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":455085,"byte_end":455092,"line_start":2461,"line_end":2461,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2626},{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":455842,"byte_end":455849,"line_start":2486,"line_end":2486,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456005,"byte_end":456012,"line_start":2493,"line_end":2493,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456543,"byte_end":456551,"line_start":2509,"line_end":2509,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2637}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456758,"byte_end":456766,"line_start":2516,"line_end":2516,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457096,"byte_end":457104,"line_start":2532,"line_end":2532,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457282,"byte_end":457290,"line_start":2540,"line_end":2540,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457441,"byte_end":457449,"line_start":2547,"line_end":2547,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457536,"byte_end":457544,"line_start":2550,"line_end":2550,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":459039,"byte_end":459047,"line_start":2589,"line_end":2589,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460167,"byte_end":460175,"line_start":2619,"line_end":2619,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2659}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460372,"byte_end":460380,"line_start":2626,"line_end":2626,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460569,"byte_end":460577,"line_start":2634,"line_end":2634,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2665}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460853,"byte_end":460861,"line_start":2644,"line_end":2644,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2669},{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461083,"byte_end":461091,"line_start":2654,"line_end":2654,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2673}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461307,"byte_end":461315,"line_start":2662,"line_end":2662,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461655,"byte_end":461663,"line_start":2673,"line_end":2673,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":462426,"byte_end":462434,"line_start":2705,"line_end":2705,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2697}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463221,"byte_end":463229,"line_start":2729,"line_end":2729,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463440,"byte_end":463448,"line_start":2736,"line_end":2736,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2706}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463663,"byte_end":463671,"line_start":2743,"line_end":2743,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2709}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":464954,"byte_end":464957,"line_start":2775,"line_end":2775,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2712}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":69492,"byte_end":69507,"line_start":73,"line_end":73,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500586,"byte_end":500592,"line_start":51,"line_end":51,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502417,"byte_end":502423,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2807},{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2810}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504495,"byte_end":504501,"line_start":151,"line_end":151,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505080,"byte_end":505086,"line_start":164,"line_end":164,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2817},{"krate":0,"index":2818}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505913,"byte_end":505919,"line_start":186,"line_end":186,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2829},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2839}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":523542,"byte_end":523548,"line_start":627,"line_end":627,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525766,"byte_end":525772,"line_start":687,"line_end":687,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526574,"byte_end":526580,"line_start":707,"line_end":707,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2863}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":527008,"byte_end":527014,"line_start":719,"line_end":719,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":539143,"byte_end":539145,"line_start":287,"line_end":287,"column_start":35,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":539232,"byte_end":539234,"line_start":289,"line_end":289,"column_start":35,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":539363,"byte_end":539365,"line_start":292,"line_end":292,"column_start":65,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":539498,"byte_end":539500,"line_start":295,"line_end":295,"column_start":67,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":539524,"byte_end":539526,"line_start":297,"line_end":297,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2939},{"krate":0,"index":2940}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":539758,"byte_end":539760,"line_start":307,"line_end":307,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":543784,"byte_end":543786,"line_start":439,"line_end":439,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2951}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":544704,"byte_end":544706,"line_start":469,"line_end":469,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2954}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":545809,"byte_end":545811,"line_start":508,"line_end":508,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2957}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":547109,"byte_end":547111,"line_start":549,"line_end":549,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":554821,"byte_end":554823,"line_start":800,"line_end":800,"column_start":16,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":557741,"byte_end":557743,"line_start":877,"line_end":877,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":2974}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":558639,"byte_end":558641,"line_start":909,"line_end":909,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2981},{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":560805,"byte_end":560807,"line_start":969,"line_end":969,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":561487,"byte_end":561489,"line_start":987,"line_end":987,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2993},{"krate":0,"index":2994}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":562482,"byte_end":562487,"line_start":1013,"line_end":1013,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":563528,"byte_end":563530,"line_start":1051,"line_end":1051,"column_start":35,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3010}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":563708,"byte_end":563710,"line_start":1058,"line_end":1058,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3013}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":563892,"byte_end":563894,"line_start":1066,"line_end":1066,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3016},{"krate":0,"index":3017}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":564094,"byte_end":564096,"line_start":1076,"line_end":1076,"column_start":30,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":564196,"byte_end":564198,"line_start":1079,"line_end":1079,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3022}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":565528,"byte_end":565530,"line_start":1127,"line_end":1127,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3025}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":566051,"byte_end":566053,"line_start":1150,"line_end":1150,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3028}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":566638,"byte_end":566640,"line_start":1174,"line_end":1174,"column_start":46,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3035},{"krate":0,"index":3036}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":567445,"byte_end":567447,"line_start":1194,"line_end":1194,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3039},{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":567776,"byte_end":567778,"line_start":1207,"line_end":1207,"column_start":43,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3043},{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":568974,"byte_end":568976,"line_start":1255,"line_end":1255,"column_start":29,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":569074,"byte_end":569076,"line_start":1258,"line_end":1258,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":571224,"byte_end":571226,"line_start":1352,"line_end":1352,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3056}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":571746,"byte_end":571748,"line_start":1374,"line_end":1374,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3059}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":571934,"byte_end":571936,"line_start":1381,"line_end":1381,"column_start":49,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572142,"byte_end":572144,"line_start":1388,"line_end":1388,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3066}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572337,"byte_end":572339,"line_start":1395,"line_end":1395,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3069}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572544,"byte_end":572546,"line_start":1402,"line_end":1402,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572697,"byte_end":572699,"line_start":1409,"line_end":1409,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3075}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572891,"byte_end":572893,"line_start":1417,"line_end":1417,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3077}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573152,"byte_end":573154,"line_start":1426,"line_end":1426,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3079}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573338,"byte_end":573340,"line_start":1434,"line_end":1434,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3082}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573511,"byte_end":573513,"line_start":1442,"line_end":1442,"column_start":26,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3085}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573885,"byte_end":573887,"line_start":1457,"line_end":1457,"column_start":46,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3091},{"krate":0,"index":3092}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":574303,"byte_end":574305,"line_start":1473,"line_end":1473,"column_start":35,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3096}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576078,"byte_end":576080,"line_start":1522,"line_end":1522,"column_start":53,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3105}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576241,"byte_end":576243,"line_start":1528,"line_end":1528,"column_start":61,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576993,"byte_end":576995,"line_start":1551,"line_end":1551,"column_start":67,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3113}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":579477,"byte_end":579481,"line_start":1600,"line_end":1600,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":579570,"byte_end":579574,"line_start":1602,"line_end":1602,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":579705,"byte_end":579709,"line_start":1605,"line_end":1605,"column_start":67,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":579844,"byte_end":579848,"line_start":1608,"line_end":1608,"column_start":69,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":579864,"byte_end":579868,"line_start":1610,"line_end":1610,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":585816,"byte_end":585820,"line_start":1775,"line_end":1775,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3141},{"krate":0,"index":3142}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":589465,"byte_end":589469,"line_start":1895,"line_end":1895,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":590568,"byte_end":590572,"line_start":1935,"line_end":1935,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":591121,"byte_end":591125,"line_start":1957,"line_end":1957,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":591308,"byte_end":591312,"line_start":1964,"line_end":1964,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3154}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":593841,"byte_end":593843,"line_start":2050,"line_end":2050,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3166}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":593984,"byte_end":593989,"line_start":2057,"line_end":2057,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":594158,"byte_end":594160,"line_start":2065,"line_end":2065,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3172}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":594306,"byte_end":594308,"line_start":2072,"line_end":2072,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3175}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":594439,"byte_end":594441,"line_start":2079,"line_end":2079,"column_start":27,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":619922,"byte_end":619925,"line_start":709,"line_end":709,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3296}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":620062,"byte_end":620065,"line_start":716,"line_end":716,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3299}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":623796,"byte_end":623809,"line_start":811,"line_end":811,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3314}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":627706,"byte_end":627715,"line_start":917,"line_end":917,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3329}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"src/liballoc/str.rs","byte_start":640365,"byte_end":640371,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3413}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"src/liballoc/str.rs","byte_start":640529,"byte_end":640535,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3415}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Inherent","span":{"file_name":"src/liballoc/string.rs","byte_start":663941,"byte_end":663947,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3487},{"krate":0,"index":3488},{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491},{"krate":0,"index":3492},{"krate":0,"index":3493},{"krate":0,"index":3494},{"krate":0,"index":3495},{"krate":0,"index":3496},{"krate":0,"index":3497},{"krate":0,"index":3498},{"krate":0,"index":3499},{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3503},{"krate":0,"index":3504},{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3507},{"krate":0,"index":3509},{"krate":0,"index":3511},{"krate":0,"index":3512},{"krate":0,"index":3513},{"krate":0,"index":3514},{"krate":0,"index":3515},{"krate":0,"index":3516},{"krate":0,"index":3517},{"krate":0,"index":3518},{"krate":0,"index":3520},{"krate":0,"index":3522}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Inherent","span":{"file_name":"src/liballoc/string.rs","byte_start":703488,"byte_end":703501,"line_start":1628,"line_end":1628,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705784,"byte_end":705797,"line_start":1703,"line_end":1703,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3528}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705982,"byte_end":705996,"line_start":1710,"line_end":1710,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3530}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706201,"byte_end":706207,"line_start":1717,"line_end":1717,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3532},{"krate":0,"index":3533}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706459,"byte_end":706465,"line_start":1728,"line_end":1728,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3535}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706721,"byte_end":706727,"line_start":1737,"line_end":1737,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706967,"byte_end":706973,"line_start":1746,"line_end":1746,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3543}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":707215,"byte_end":707221,"line_start":1755,"line_end":1755,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3546}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":707824,"byte_end":707830,"line_start":1773,"line_end":1773,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3550}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708447,"byte_end":708453,"line_start":1792,"line_end":1792,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3553}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708791,"byte_end":708797,"line_start":1802,"line_end":1802,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3558}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":709002,"byte_end":709008,"line_start":1809,"line_end":1809,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3562}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":709229,"byte_end":709235,"line_start":1816,"line_end":1816,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3566}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":709463,"byte_end":709469,"line_start":1823,"line_end":1823,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3571}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":710346,"byte_end":710352,"line_start":1854,"line_end":1854,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3582},{"krate":0,"index":3583}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":711701,"byte_end":711707,"line_start":1902,"line_end":1902,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":711887,"byte_end":711893,"line_start":1911,"line_end":1911,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3588}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":712086,"byte_end":712092,"line_start":1919,"line_end":1919,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3590}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":712283,"byte_end":712289,"line_start":1927,"line_end":1927,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":713667,"byte_end":713673,"line_start":1972,"line_end":1972,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3595},{"krate":0,"index":3596}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":714040,"byte_end":714046,"line_start":1986,"line_end":1986,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3598}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":714231,"byte_end":714237,"line_start":1994,"line_end":1994,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3600},{"krate":0,"index":3601}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":714454,"byte_end":714460,"line_start":2003,"line_end":2003,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3603},{"krate":0,"index":3604}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":714681,"byte_end":714687,"line_start":2012,"line_end":2012,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":714903,"byte_end":714909,"line_start":2021,"line_end":2021,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3609},{"krate":0,"index":3610}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":715172,"byte_end":715178,"line_start":2030,"line_end":2030,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3613}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":715436,"byte_end":715442,"line_start":2039,"line_end":2039,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3615},{"krate":0,"index":3616}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":715698,"byte_end":715704,"line_start":2049,"line_end":2049,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3618}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":715930,"byte_end":715936,"line_start":2056,"line_end":2056,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3620}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":716166,"byte_end":716172,"line_start":2063,"line_end":2063,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3622}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":716397,"byte_end":716403,"line_start":2070,"line_end":2070,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3624}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":716666,"byte_end":716672,"line_start":2077,"line_end":2077,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3626}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":716932,"byte_end":716938,"line_start":2084,"line_end":2084,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3628}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":717157,"byte_end":717163,"line_start":2092,"line_end":2092,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3630},{"krate":0,"index":3631}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":717381,"byte_end":717387,"line_start":2102,"line_end":2102,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3633}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":717878,"byte_end":717884,"line_start":2118,"line_end":2118,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3636},{"krate":0,"index":3637}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":719176,"byte_end":719177,"line_start":2160,"line_end":2160,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3642}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":719748,"byte_end":719751,"line_start":2181,"line_end":2181,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":719941,"byte_end":719947,"line_start":2189,"line_end":2189,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3649}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720099,"byte_end":720105,"line_start":2197,"line_end":2197,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3651}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720250,"byte_end":720256,"line_start":2205,"line_end":2205,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3653}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720401,"byte_end":720407,"line_start":2213,"line_end":2213,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3655}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720555,"byte_end":720561,"line_start":2221,"line_end":2221,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3657}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720721,"byte_end":720727,"line_start":2229,"line_end":2229,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3659}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":720962,"byte_end":720968,"line_start":2239,"line_end":2239,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3661}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":721509,"byte_end":721512,"line_start":2260,"line_end":2260,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3663}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":722033,"byte_end":722039,"line_start":2280,"line_end":2280,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3666}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":722188,"byte_end":722191,"line_start":2287,"line_end":2287,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3669}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":722365,"byte_end":722368,"line_start":2295,"line_end":2295,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3672}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":722557,"byte_end":722560,"line_start":2303,"line_end":2303,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3675}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":722765,"byte_end":722768,"line_start":2311,"line_end":2311,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3678}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":723007,"byte_end":723010,"line_start":2318,"line_end":2318,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3683}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":723247,"byte_end":723250,"line_start":2325,"line_end":2325,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3687}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":723479,"byte_end":723482,"line_start":2332,"line_end":2332,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3690}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":723956,"byte_end":723962,"line_start":2353,"line_end":2353,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3692},{"krate":0,"index":3693}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":724817,"byte_end":724822,"line_start":2387,"line_end":2387,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3701}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":724998,"byte_end":725003,"line_start":2394,"line_end":2394,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":725078,"byte_end":725083,"line_start":2396,"line_end":2396,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":725152,"byte_end":725157,"line_start":2399,"line_end":2399,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3705}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":725600,"byte_end":725605,"line_start":2413,"line_end":2413,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3710}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":725974,"byte_end":725979,"line_start":2432,"line_end":2432,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3712}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":726155,"byte_end":726160,"line_start":2440,"line_end":2440,"column_start":24,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":733768,"byte_end":733771,"line_start":202,"line_end":202,"column_start":47,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":733870,"byte_end":733873,"line_start":204,"line_end":204,"column_start":47,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":734003,"byte_end":734006,"line_start":207,"line_end":207,"column_start":66,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":734140,"byte_end":734143,"line_start":210,"line_end":210,"column_start":68,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":734167,"byte_end":734170,"line_start":212,"line_end":212,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3785},{"krate":0,"index":3786}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":736370,"byte_end":736374,"line_start":257,"line_end":257,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":736476,"byte_end":736480,"line_start":259,"line_end":259,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":736611,"byte_end":736615,"line_start":262,"line_end":262,"column_start":67,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":736749,"byte_end":736753,"line_start":264,"line_end":264,"column_start":69,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":736854,"byte_end":736858,"line_start":267,"line_end":267,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3802}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":737328,"byte_end":737336,"line_start":284,"line_end":284,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":737389,"byte_end":737397,"line_start":285,"line_end":285,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":737413,"byte_end":737416,"line_start":287,"line_end":287,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3817},{"krate":0,"index":3818},{"krate":0,"index":3819}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":741309,"byte_end":741312,"line_start":419,"line_end":419,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3822}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":742240,"byte_end":742243,"line_start":449,"line_end":449,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3825}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":743354,"byte_end":743357,"line_start":488,"line_end":488,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3828}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":744665,"byte_end":744668,"line_start":529,"line_end":529,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3831},{"krate":0,"index":3832},{"krate":0,"index":3833},{"krate":0,"index":3834},{"krate":0,"index":3835},{"krate":0,"index":3836},{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":752974,"byte_end":752977,"line_start":771,"line_end":771,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3842},{"krate":0,"index":3845},{"krate":0,"index":3847}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":755178,"byte_end":755181,"line_start":830,"line_end":830,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3850}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":755870,"byte_end":755873,"line_start":848,"line_end":848,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3857},{"krate":0,"index":3858}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":756873,"byte_end":756878,"line_start":874,"line_end":874,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3868}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":757935,"byte_end":757938,"line_start":912,"line_end":912,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3874}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":758117,"byte_end":758120,"line_start":919,"line_end":919,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3877}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":758303,"byte_end":758306,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3880}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":760174,"byte_end":760177,"line_start":977,"line_end":977,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3883},{"krate":0,"index":3884}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":760368,"byte_end":760371,"line_start":987,"line_end":987,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":760394,"byte_end":760397,"line_start":989,"line_end":989,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3889}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":764379,"byte_end":764382,"line_start":1076,"line_end":1076,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3892},{"krate":0,"index":3893},{"krate":0,"index":3894}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":768388,"byte_end":768391,"line_start":1181,"line_end":1181,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3897}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":771262,"byte_end":771265,"line_start":1254,"line_end":1254,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":3899}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":772254,"byte_end":772258,"line_start":1289,"line_end":1289,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3906}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":778132,"byte_end":778136,"line_start":1450,"line_end":1450,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3913},{"krate":0,"index":3914}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":783530,"byte_end":783534,"line_start":1608,"line_end":1608,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3917}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":784659,"byte_end":784663,"line_start":1645,"line_end":1645,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3920}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":785276,"byte_end":785280,"line_start":1667,"line_end":1667,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3923}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":786959,"byte_end":786962,"line_start":1717,"line_end":1717,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3930},{"krate":0,"index":3931}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":787771,"byte_end":787774,"line_start":1736,"line_end":1736,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3934},{"krate":0,"index":3935}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":788107,"byte_end":788110,"line_start":1749,"line_end":1749,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3938},{"krate":0,"index":3939}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":789321,"byte_end":789324,"line_start":1795,"line_end":1795,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3944},{"krate":0,"index":3945},{"krate":0,"index":3946}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":791412,"byte_end":791415,"line_start":1883,"line_end":1883,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3949}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":791923,"byte_end":791926,"line_start":1903,"line_end":1903,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":792028,"byte_end":792031,"line_start":1906,"line_end":1906,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3954}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":792237,"byte_end":792240,"line_start":1913,"line_end":1913,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3957}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":792433,"byte_end":792436,"line_start":1920,"line_end":1920,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3960}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":792642,"byte_end":792645,"line_start":1927,"line_end":1927,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3963}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":793038,"byte_end":793041,"line_start":1944,"line_end":1944,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3966}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":793206,"byte_end":793209,"line_start":1951,"line_end":1951,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3970}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":793361,"byte_end":793364,"line_start":1958,"line_end":1958,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3973}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":793558,"byte_end":793561,"line_start":1966,"line_end":1966,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3975}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":793826,"byte_end":793829,"line_start":1975,"line_end":1975,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3977}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":794015,"byte_end":794018,"line_start":1983,"line_end":1983,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3980}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":794191,"byte_end":794194,"line_start":1991,"line_end":1991,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3983}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":794571,"byte_end":794574,"line_start":2006,"line_end":2006,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3989},{"krate":0,"index":3990}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":794994,"byte_end":794997,"line_start":2022,"line_end":2022,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3994}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":796791,"byte_end":796794,"line_start":2071,"line_end":2071,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4003}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":796956,"byte_end":796959,"line_start":2077,"line_end":2077,"column_start":62,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4007}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":797711,"byte_end":797714,"line_start":2100,"line_end":2100,"column_start":68,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":798339,"byte_end":798342,"line_start":2115,"line_end":2115,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4014}],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":798488,"byte_end":798491,"line_start":2122,"line_end":2122,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":798622,"byte_end":798625,"line_start":2129,"line_end":2129,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":811057,"byte_end":811060,"line_start":308,"line_end":308,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4070},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4085},{"krate":0,"index":4086},{"krate":0,"index":4087},{"krate":0,"index":4088},{"krate":0,"index":4089},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4093},{"krate":0,"index":4097},{"krate":0,"index":4099},{"krate":0,"index":4100},{"krate":0,"index":4101},{"krate":0,"index":4102},{"krate":0,"index":4103},{"krate":0,"index":4105},{"krate":0,"index":4106},{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4109},{"krate":0,"index":4111}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":849441,"byte_end":849444,"line_start":1472,"line_end":1472,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4115},{"krate":0,"index":4116}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":851607,"byte_end":851610,"line_start":1535,"line_end":1535,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4119}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":853411,"byte_end":853424,"line_start":1589,"line_end":1589,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4130},{"krate":0,"index":4131}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":853595,"byte_end":853608,"line_start":1599,"line_end":1599,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4136},{"krate":0,"index":4137}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":853803,"byte_end":853813,"line_start":1609,"line_end":1609,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4145},{"krate":0,"index":4146}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":853939,"byte_end":853942,"line_start":1618,"line_end":1618,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4149}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":855389,"byte_end":855401,"line_start":1659,"line_end":1659,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4157},{"krate":0,"index":4158}],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":855642,"byte_end":855654,"line_start":1671,"line_end":1671,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4160}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":855764,"byte_end":855767,"line_start":1678,"line_end":1678,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4163}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":856290,"byte_end":856293,"line_start":1700,"line_end":1700,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4167}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":857418,"byte_end":857419,"line_start":1738,"line_end":1738,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4176}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858009,"byte_end":858010,"line_start":1761,"line_end":1761,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4181}],"docs":"","sig":null,"attributes":[]},{"id":628,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859688,"byte_end":859694,"line_start":1826,"line_end":1826,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4193}],"docs":"","sig":null,"attributes":[]},{"id":629,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859813,"byte_end":859819,"line_start":1833,"line_end":1833,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4196}],"docs":"","sig":null,"attributes":[]},{"id":630,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859942,"byte_end":859948,"line_start":1840,"line_end":1840,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4199}],"docs":"","sig":null,"attributes":[]},{"id":631,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860311,"byte_end":860314,"line_start":1852,"line_end":1852,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4202},{"krate":0,"index":4203}],"docs":"","sig":null,"attributes":[]},{"id":632,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860975,"byte_end":860978,"line_start":1873,"line_end":1873,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4206}],"docs":"","sig":null,"attributes":[]},{"id":633,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861354,"byte_end":861357,"line_start":1885,"line_end":1885,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4211},{"krate":0,"index":4212}],"docs":"","sig":null,"attributes":[]},{"id":634,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861764,"byte_end":861767,"line_start":1899,"line_end":1899,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4216}],"docs":"","sig":null,"attributes":[]},{"id":635,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861974,"byte_end":861977,"line_start":1907,"line_end":1907,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4219},{"krate":0,"index":4220}],"docs":"","sig":null,"attributes":[]},{"id":636,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":862184,"byte_end":862187,"line_start":1916,"line_end":1916,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4223}],"docs":"","sig":null,"attributes":[]},{"id":637,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":862392,"byte_end":862395,"line_start":1923,"line_end":1923,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4226}],"docs":"","sig":null,"attributes":[]},{"id":638,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":862634,"byte_end":862637,"line_start":1931,"line_end":1931,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4232}],"docs":"","sig":null,"attributes":[]},{"id":639,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":864275,"byte_end":864278,"line_start":1991,"line_end":1991,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4247}],"docs":"","sig":null,"attributes":[]},{"id":640,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":864651,"byte_end":864654,"line_start":2004,"line_end":2004,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4257},{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":641,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":865756,"byte_end":865759,"line_start":2035,"line_end":2035,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4262},{"krate":0,"index":4263}],"docs":"","sig":null,"attributes":[]},{"id":642,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":867010,"byte_end":867013,"line_start":2074,"line_end":2074,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4267},{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":643,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":867898,"byte_end":867901,"line_start":2100,"line_end":2100,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4273},{"krate":0,"index":4274}],"docs":"","sig":null,"attributes":[]},{"id":644,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868226,"byte_end":868229,"line_start":2114,"line_end":2114,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4278}],"docs":"","sig":null,"attributes":[]},{"id":645,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":868581,"byte_end":868584,"line_start":2129,"line_end":2129,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4281},{"krate":0,"index":4283},{"krate":0,"index":4286}],"docs":"","sig":null,"attributes":[]},{"id":646,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":873557,"byte_end":873560,"line_start":2263,"line_end":2263,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4291}],"docs":"","sig":null,"attributes":[]},{"id":655,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":875222,"byte_end":875225,"line_start":2303,"line_end":2303,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4296}],"docs":"","sig":null,"attributes":[]},{"id":656,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":875434,"byte_end":875437,"line_start":2311,"line_end":2311,"column_start":20,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":657,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":875567,"byte_end":875570,"line_start":2315,"line_end":2315,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4301}],"docs":"","sig":null,"attributes":[]},{"id":658,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":875767,"byte_end":875770,"line_start":2323,"line_end":2323,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4304}],"docs":"","sig":null,"attributes":[]},{"id":659,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876021,"byte_end":876024,"line_start":2334,"line_end":2334,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4307}],"docs":"","sig":null,"attributes":[]},{"id":660,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876203,"byte_end":876206,"line_start":2342,"line_end":2342,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4310}],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876392,"byte_end":876395,"line_start":2349,"line_end":2349,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4313}],"docs":"","sig":null,"attributes":[]},{"id":662,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876534,"byte_end":876537,"line_start":2356,"line_end":2356,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4316}],"docs":"","sig":null,"attributes":[]},{"id":663,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876676,"byte_end":876679,"line_start":2363,"line_end":2363,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4319}],"docs":"","sig":null,"attributes":[]},{"id":664,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876812,"byte_end":876815,"line_start":2370,"line_end":2370,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4322}],"docs":"","sig":null,"attributes":[]},{"id":665,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876958,"byte_end":876961,"line_start":2377,"line_end":2377,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4325}],"docs":"","sig":null,"attributes":[]},{"id":666,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":877226,"byte_end":877229,"line_start":2389,"line_end":2389,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4328}],"docs":"","sig":null,"attributes":[]},{"id":667,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":877509,"byte_end":877512,"line_start":2401,"line_end":2401,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4332}],"docs":"","sig":null,"attributes":[]},{"id":668,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":877786,"byte_end":877789,"line_start":2413,"line_end":2413,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4335}],"docs":"","sig":null,"attributes":[]},{"id":669,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":878015,"byte_end":878018,"line_start":2422,"line_end":2422,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4338}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":878167,"byte_end":878170,"line_start":2429,"line_end":2429,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4340}],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":878524,"byte_end":878527,"line_start":2440,"line_end":2440,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4344}],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":878704,"byte_end":878707,"line_start":2447,"line_end":2447,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4348}],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":878889,"byte_end":878892,"line_start":2454,"line_end":2454,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4352}],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":879072,"byte_end":879075,"line_start":2461,"line_end":2461,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4356}],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":879936,"byte_end":879944,"line_start":2491,"line_end":2491,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4367}],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":880097,"byte_end":880105,"line_start":2497,"line_end":2497,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4370},{"krate":0,"index":4371}],"docs":"","sig":null,"attributes":[]},{"id":677,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":881406,"byte_end":881414,"line_start":2534,"line_end":2534,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":678,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":881497,"byte_end":881505,"line_start":2536,"line_end":2536,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":679,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":881580,"byte_end":881588,"line_start":2539,"line_end":2539,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4381}],"docs":"","sig":null,"attributes":[]},{"id":680,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":882841,"byte_end":882849,"line_start":2583,"line_end":2583,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4384}],"docs":"","sig":null,"attributes":[]},{"id":681,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":883546,"byte_end":883554,"line_start":2607,"line_end":2607,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4387}],"docs":"","sig":null,"attributes":[]},{"id":682,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":883704,"byte_end":883712,"line_start":2614,"line_end":2614,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":683,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":883804,"byte_end":883812,"line_start":2617,"line_end":2617,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":684,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":883905,"byte_end":883913,"line_start":2620,"line_end":2620,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4394}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":884096,"byte_end":884104,"line_start":2627,"line_end":2627,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4397}],"docs":"","sig":null,"attributes":[]},{"id":686,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":884941,"byte_end":884946,"line_start":2657,"line_end":2657,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4407}],"docs":"","sig":null,"attributes":[]},{"id":687,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":885109,"byte_end":885114,"line_start":2663,"line_end":2663,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4411}],"docs":"","sig":null,"attributes":[]},{"id":688,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":885761,"byte_end":885766,"line_start":2683,"line_end":2683,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":689,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":885853,"byte_end":885858,"line_start":2685,"line_end":2685,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":690,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":885937,"byte_end":885942,"line_start":2688,"line_end":2688,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4418},{"krate":0,"index":4419},{"krate":0,"index":4421}],"docs":"","sig":null,"attributes":[]},{"id":691,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":886274,"byte_end":886279,"line_start":2702,"line_end":2702,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4424}],"docs":"","sig":null,"attributes":[]},{"id":692,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":886497,"byte_end":886502,"line_start":2710,"line_end":2710,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4428}],"docs":"","sig":null,"attributes":[]},{"id":693,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":886785,"byte_end":886794,"line_start":2716,"line_end":2716,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4439}],"docs":"","sig":null,"attributes":[]},{"id":694,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":888103,"byte_end":888108,"line_start":2752,"line_end":2752,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4442}],"docs":"","sig":null,"attributes":[]},{"id":695,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":888273,"byte_end":888278,"line_start":2759,"line_end":2759,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":696,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":888363,"byte_end":888368,"line_start":2762,"line_end":2762,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":697,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":888851,"byte_end":888857,"line_start":2779,"line_end":2779,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451}],"docs":"","sig":null,"attributes":[]},{"id":698,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":889159,"byte_end":889165,"line_start":2792,"line_end":2792,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4454}],"docs":"","sig":null,"attributes":[]},{"id":699,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":889359,"byte_end":889365,"line_start":2799,"line_end":2799,"column_start":41,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":700,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":889456,"byte_end":889462,"line_start":2802,"line_end":2802,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4459}],"docs":"","sig":null,"attributes":[]},{"id":701,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":891007,"byte_end":891012,"line_start":2843,"line_end":2843,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4462},{"krate":0,"index":4464}],"docs":"","sig":null,"attributes":[]},{"id":702,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":893510,"byte_end":893521,"line_start":2905,"line_end":2905,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4468},{"krate":0,"index":4469},{"krate":0,"index":4470}],"docs":"","sig":null,"attributes":[]},{"id":703,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":894812,"byte_end":894823,"line_start":2943,"line_end":2943,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4474}],"docs":"","sig":null,"attributes":[]},{"id":704,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":895101,"byte_end":895116,"line_start":2955,"line_end":2955,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4486}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":4842,"byte_end":4847,"line_start":139,"line_end":139,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5111,"byte_end":5116,"line_start":147,"line_end":147,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":39}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5182,"byte_end":5188,"line_start":152,"line_end":152,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":298}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5198,"byte_end":5209,"line_start":153,"line_end":153,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67583,"byte_end":67594,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":395}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111105,"byte_end":111108,"line_start":1,"line_end":1,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":635}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":111154,"byte_end":111157,"line_start":5,"line_end":5,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1715}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67615,"byte_end":67626,"line_start":7,"line_end":7,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1989}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67636,"byte_end":67645,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2328}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5219,"byte_end":5222,"line_start":154,"line_end":154,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2730}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5232,"byte_end":5239,"line_start":155,"line_end":155,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2763}},{"kind":"Mod","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":497840,"byte_end":497842,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2764}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5249,"byte_end":5256,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2771}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5266,"byte_end":5268,"line_start":157,"line_end":157,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2870}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5278,"byte_end":5283,"line_start":158,"line_end":158,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3183}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5293,"byte_end":5296,"line_start":159,"line_end":159,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3336}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5306,"byte_end":5312,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3442}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5356,"byte_end":5360,"line_start":162,"line_end":162,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3714}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5394,"byte_end":5397,"line_start":165,"line_end":165,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4025}}],"macro_refs":[],"relations":[{"span":{"file_name":"src/liballoc/alloc.rs","byte_start":14579,"byte_end":14585,"line_start":166,"line_end":166,"column_start":26,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4491},"to":{"krate":1,"index":8221}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24010,"byte_end":24013,"line_start":162,"line_end":162,"column_start":9,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":26355,"byte_end":26358,"line_start":245,"line_end":245,"column_start":9,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":27446,"byte_end":27449,"line_start":280,"line_end":280,"column_start":9,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":28448,"byte_end":28451,"line_start":316,"line_end":316,"column_start":9,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":29578,"byte_end":29581,"line_start":354,"line_end":354,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37255,"byte_end":37258,"line_start":553,"line_end":553,"column_start":47,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37444,"byte_end":37447,"line_start":560,"line_end":560,"column_start":30,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37648,"byte_end":37651,"line_start":568,"line_end":568,"column_start":21,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37806,"byte_end":37809,"line_start":575,"line_end":575,"column_start":18,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37993,"byte_end":37996,"line_start":582,"line_end":582,"column_start":26,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39061,"byte_end":39064,"line_start":627,"line_end":627,"column_start":16,"column_end":19},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39343,"byte_end":39346,"line_start":636,"line_end":636,"column_start":43,"column_end":46},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39652,"byte_end":39655,"line_start":647,"line_end":647,"column_start":45,"column_end":48},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40294,"byte_end":40297,"line_start":670,"line_end":670,"column_start":31,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40483,"byte_end":40486,"line_start":677,"line_end":677,"column_start":29,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40572,"byte_end":40575,"line_start":680,"line_end":680,"column_start":33,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40765,"byte_end":40768,"line_start":687,"line_end":687,"column_start":37,"column_end":40},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":6176}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":41889,"byte_end":41892,"line_start":733,"line_end":733,"column_start":21,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":42340,"byte_end":42343,"line_start":752,"line_end":752,"column_start":34,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":29415},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":42647,"byte_end":42650,"line_start":762,"line_end":762,"column_start":30,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":43400,"byte_end":43403,"line_start":787,"line_end":787,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":43889,"byte_end":43892,"line_start":805,"line_end":805,"column_start":25,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":44719,"byte_end":44722,"line_start":829,"line_end":829,"column_start":47,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1813}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45055,"byte_end":45058,"line_start":844,"line_end":844,"column_start":6,"column_end":9},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45935,"byte_end":45938,"line_start":876,"line_end":876,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46882,"byte_end":46885,"line_start":905,"line_end":905,"column_start":49,"column_end":52},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47091,"byte_end":47094,"line_start":912,"line_end":912,"column_start":45,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47287,"byte_end":47290,"line_start":919,"line_end":919,"column_start":34,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":5992}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47657,"byte_end":47660,"line_start":929,"line_end":929,"column_start":27,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47816,"byte_end":47819,"line_start":938,"line_end":938,"column_start":30,"column_end":33},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2064}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47979,"byte_end":47982,"line_start":945,"line_end":945,"column_start":30,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2069}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48076,"byte_end":48079,"line_start":948,"line_end":948,"column_start":41,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48544,"byte_end":48547,"line_start":969,"line_end":969,"column_start":40,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":220}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48947,"byte_end":48950,"line_start":984,"line_end":984,"column_start":31,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":220}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49135,"byte_end":49138,"line_start":991,"line_end":991,"column_start":63,"column_end":66},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49427,"byte_end":49430,"line_start":1000,"line_end":1000,"column_start":59,"column_end":62},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49661,"byte_end":49664,"line_start":1010,"line_end":1010,"column_start":51,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49778,"byte_end":49781,"line_start":1013,"line_end":1013,"column_start":46,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2084}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50063,"byte_end":50066,"line_start":1022,"line_end":1022,"column_start":44,"column_end":47},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2081}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50298,"byte_end":50301,"line_start":1029,"line_end":1029,"column_start":38,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2078}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50542,"byte_end":50545,"line_start":1036,"line_end":1036,"column_start":66,"column_end":69},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2273}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50679,"byte_end":50682,"line_start":1039,"line_end":1039,"column_start":68,"column_end":71},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2310}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50781,"byte_end":50784,"line_start":1042,"line_end":1042,"column_start":29,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51009,"byte_end":51012,"line_start":1049,"line_end":1049,"column_start":26,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51189,"byte_end":51192,"line_start":1056,"line_end":1056,"column_start":39,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51344,"byte_end":51347,"line_start":1063,"line_end":1063,"column_start":42,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1573}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51509,"byte_end":51512,"line_start":1070,"line_end":1070,"column_start":30,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51658,"byte_end":51661,"line_start":1077,"line_end":1077,"column_start":30,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1800}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":52894,"byte_end":52897,"line_start":1106,"line_end":1106,"column_start":27,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1921}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":53694,"byte_end":53697,"line_start":1132,"line_end":1132,"column_start":60,"column_end":63},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2114}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":54041,"byte_end":54044,"line_start":1143,"line_end":1143,"column_start":52,"column_end":55},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":29415},"to":{"krate":1,"index":2114}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":54354,"byte_end":54357,"line_start":1153,"line_end":1153,"column_start":45,"column_end":48},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":8075}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":54947,"byte_end":54950,"line_start":18,"line_end":18,"column_start":35,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":56766,"byte_end":56767,"line_start":80,"line_end":80,"column_start":21,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":322},"to":{"krate":0,"index":317}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59918,"byte_end":59921,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":60406,"byte_end":60409,"line_start":204,"line_end":204,"column_start":27,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63548,"byte_end":63551,"line_start":321,"line_end":321,"column_start":37,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63813,"byte_end":63816,"line_start":333,"line_end":333,"column_start":24,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63920,"byte_end":63923,"line_start":336,"line_end":336,"column_start":25,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64173,"byte_end":64176,"line_start":347,"line_end":347,"column_start":62,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64431,"byte_end":64434,"line_start":359,"line_end":359,"column_start":36,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64698,"byte_end":64701,"line_start":370,"line_end":370,"column_start":32,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":65053,"byte_end":65056,"line_start":383,"line_end":383,"column_start":34,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":65414,"byte_end":65417,"line_start":396,"line_end":396,"column_start":29,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":65710,"byte_end":65713,"line_start":407,"line_end":407,"column_start":26,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":65942,"byte_end":65945,"line_start":418,"line_end":418,"column_start":40,"column_end":43},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":66081,"byte_end":66084,"line_start":425,"line_end":425,"column_start":27,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1945}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":66319,"byte_end":66322,"line_start":436,"line_end":436,"column_start":32,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1945}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":66563,"byte_end":66566,"line_start":447,"line_end":447,"column_start":33,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1978}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":67081,"byte_end":67084,"line_start":463,"line_end":463,"column_start":38,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1978}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79078,"byte_end":79085,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":418},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79319,"byte_end":79326,"line_start":275,"line_end":275,"column_start":23,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":418},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79524,"byte_end":79531,"line_start":284,"line_end":284,"column_start":24,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":418},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79850,"byte_end":79857,"line_start":294,"line_end":294,"column_start":27,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":418},"to":{"krate":1,"index":2064}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80100,"byte_end":80107,"line_start":302,"line_end":302,"column_start":18,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80465,"byte_end":80475,"line_start":313,"line_end":313,"column_start":26,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80735,"byte_end":80745,"line_start":324,"line_end":324,"column_start":26,"column_end":36},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80970,"byte_end":80980,"line_start":333,"line_end":333,"column_start":36,"column_end":46},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81124,"byte_end":81134,"line_start":339,"line_end":339,"column_start":14,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91582,"byte_end":91592,"line_start":672,"line_end":672,"column_start":9,"column_end":19},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99669,"byte_end":99673,"line_start":972,"line_end":972,"column_start":13,"column_end":17},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101115,"byte_end":101119,"line_start":1019,"line_end":1019,"column_start":18,"column_end":22},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":483},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101815,"byte_end":101819,"line_start":1043,"line_end":1043,"column_start":36,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102088,"byte_end":102092,"line_start":1051,"line_end":1051,"column_start":19,"column_end":23},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102253,"byte_end":102257,"line_start":1058,"line_end":1058,"column_start":26,"column_end":30},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102649,"byte_end":102653,"line_start":1078,"line_end":1078,"column_start":37,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102839,"byte_end":102843,"line_start":1086,"line_end":1086,"column_start":31,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102997,"byte_end":103001,"line_start":1093,"line_end":1093,"column_start":27,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103546,"byte_end":103554,"line_start":1109,"line_end":1109,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4501},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103771,"byte_end":103779,"line_start":1116,"line_end":1116,"column_start":22,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4501},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104072,"byte_end":104080,"line_start":1131,"line_end":1131,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4501},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104258,"byte_end":104266,"line_start":1139,"line_end":1139,"column_start":31,"column_end":39},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4501},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104416,"byte_end":104424,"line_start":1146,"line_end":1146,"column_start":27,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4501},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104684,"byte_end":104698,"line_start":1155,"line_end":1155,"column_start":27,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4507},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105056,"byte_end":105070,"line_start":1171,"line_end":1171,"column_start":36,"column_end":50},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4507},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105180,"byte_end":105194,"line_start":1174,"line_end":1174,"column_start":32,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4507},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105291,"byte_end":105305,"line_start":1177,"line_end":1177,"column_start":36,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4507},"to":{"krate":1,"index":5038}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105776,"byte_end":105781,"line_start":1193,"line_end":1193,"column_start":22,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4516},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106078,"byte_end":106083,"line_start":1208,"line_end":1208,"column_start":33,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4516},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106265,"byte_end":106270,"line_start":1216,"line_end":1216,"column_start":31,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4516},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106424,"byte_end":106429,"line_start":1223,"line_end":1223,"column_start":27,"column_end":32},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4516},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106984,"byte_end":106995,"line_start":1239,"line_end":1239,"column_start":27,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4524},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107184,"byte_end":107193,"line_start":1244,"line_end":1244,"column_start":39,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":570},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107582,"byte_end":107593,"line_start":1259,"line_end":1259,"column_start":27,"column_end":38},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4524},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107951,"byte_end":107962,"line_start":1275,"line_end":1275,"column_start":36,"column_end":47},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4524},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108072,"byte_end":108083,"line_start":1278,"line_end":1278,"column_start":32,"column_end":43},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4524},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108184,"byte_end":108195,"line_start":1281,"line_end":1281,"column_start":36,"column_end":47},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4524},"to":{"krate":1,"index":5038}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108299,"byte_end":108309,"line_start":1284,"line_end":1284,"column_start":31,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108682,"byte_end":108685,"line_start":1296,"line_end":1296,"column_start":33,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108842,"byte_end":108852,"line_start":1303,"line_end":1303,"column_start":34,"column_end":44},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":109073,"byte_end":109083,"line_start":1310,"line_end":1310,"column_start":26,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110074,"byte_end":110084,"line_start":1348,"line_end":1348,"column_start":28,"column_end":38},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110292,"byte_end":110302,"line_start":1355,"line_end":1355,"column_start":59,"column_end":69},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":415},"to":{"krate":0,"index":2727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110458,"byte_end":110468,"line_start":1361,"line_end":1361,"column_start":44,"column_end":54},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":415},"to":{"krate":0,"index":2727}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110586,"byte_end":110596,"line_start":1367,"line_end":1367,"column_start":14,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":110957,"byte_end":110967,"line_start":1379,"line_end":1379,"column_start":48,"column_end":58},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117385,"byte_end":117393,"line_start":130,"line_end":130,"column_start":56,"column_end":64},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117591,"byte_end":117599,"line_start":139,"line_end":139,"column_start":36,"column_end":44},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120575,"byte_end":120583,"line_start":221,"line_end":221,"column_start":41,"column_end":49},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":671},"to":{"krate":0,"index":689}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120731,"byte_end":120739,"line_start":227,"line_end":227,"column_start":47,"column_end":55},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":671},"to":{"krate":0,"index":689}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122342,"byte_end":122350,"line_start":266,"line_end":266,"column_start":42,"column_end":50},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":671},"to":{"krate":0,"index":1980}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123935,"byte_end":123939,"line_start":318,"line_end":318,"column_start":51,"column_end":55},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125168,"byte_end":125176,"line_start":353,"line_end":353,"column_start":51,"column_end":59},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125846,"byte_end":125850,"line_start":373,"line_end":373,"column_start":39,"column_end":43},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126453,"byte_end":126459,"line_start":392,"line_end":392,"column_start":39,"column_end":45},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127643,"byte_end":127648,"line_start":425,"line_end":425,"column_start":51,"column_end":56},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128508,"byte_end":128516,"line_start":448,"line_end":448,"column_start":51,"column_end":59},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129487,"byte_end":129492,"line_start":473,"line_end":473,"column_start":42,"column_end":47},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":768},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130254,"byte_end":130265,"line_start":497,"line_end":497,"column_start":35,"column_end":46},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":782},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130924,"byte_end":130937,"line_start":518,"line_end":518,"column_start":42,"column_end":55},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131299,"byte_end":131307,"line_start":530,"line_end":530,"column_start":17,"column_end":25},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":156812,"byte_end":156816,"line_start":1349,"line_end":1349,"column_start":37,"column_end":41},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157341,"byte_end":157345,"line_start":1371,"line_end":1371,"column_start":30,"column_end":34},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157453,"byte_end":157457,"line_start":1374,"line_end":1374,"column_start":48,"column_end":52},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157780,"byte_end":157784,"line_start":1386,"line_end":1386,"column_start":34,"column_end":38},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157922,"byte_end":157926,"line_start":1393,"line_end":1393,"column_start":22,"column_end":26},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":709},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158390,"byte_end":158397,"line_start":1410,"line_end":1410,"column_start":37,"column_end":44},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4532},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159018,"byte_end":159025,"line_start":1433,"line_end":1433,"column_start":48,"column_end":55},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4532},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159419,"byte_end":159426,"line_start":1446,"line_end":1446,"column_start":34,"column_end":41},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4532},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159573,"byte_end":159580,"line_start":1453,"line_end":1453,"column_start":30,"column_end":37},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4532},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159669,"byte_end":159677,"line_start":1456,"line_end":1456,"column_start":29,"column_end":37},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160154,"byte_end":160162,"line_start":1471,"line_end":1471,"column_start":21,"column_end":29},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160289,"byte_end":160298,"line_start":1475,"line_end":1475,"column_start":33,"column_end":42},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161684,"byte_end":161692,"line_start":1512,"line_end":1512,"column_start":25,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162120,"byte_end":162128,"line_start":1530,"line_end":1530,"column_start":36,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162438,"byte_end":162446,"line_start":1542,"line_end":1542,"column_start":34,"column_end":42},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162589,"byte_end":162597,"line_start":1549,"line_end":1549,"column_start":30,"column_end":38},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":719},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162682,"byte_end":162686,"line_start":1552,"line_end":1552,"column_start":29,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163064,"byte_end":163068,"line_start":1569,"line_end":1569,"column_start":40,"column_end":44},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163263,"byte_end":163267,"line_start":1576,"line_end":1576,"column_start":34,"column_end":38},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163419,"byte_end":163423,"line_start":1583,"line_end":1583,"column_start":30,"column_end":34},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163505,"byte_end":163509,"line_start":1586,"line_end":1586,"column_start":22,"column_end":26},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":729},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163678,"byte_end":163684,"line_start":1593,"line_end":1593,"column_start":29,"column_end":35},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164062,"byte_end":164068,"line_start":1610,"line_end":1610,"column_start":40,"column_end":46},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164263,"byte_end":164269,"line_start":1617,"line_end":1617,"column_start":34,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164421,"byte_end":164427,"line_start":1624,"line_end":1624,"column_start":30,"column_end":36},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164509,"byte_end":164515,"line_start":1627,"line_end":1627,"column_start":22,"column_end":28},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":738},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164693,"byte_end":164698,"line_start":1634,"line_end":1634,"column_start":29,"column_end":34},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165054,"byte_end":165063,"line_start":1647,"line_end":1647,"column_start":29,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4543},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165463,"byte_end":165472,"line_start":1664,"line_end":1664,"column_start":40,"column_end":49},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4543},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165681,"byte_end":165690,"line_start":1671,"line_end":1671,"column_start":34,"column_end":43},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4543},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165842,"byte_end":165851,"line_start":1678,"line_end":1678,"column_start":30,"column_end":39},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4543},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165881,"byte_end":165886,"line_start":1680,"line_end":1680,"column_start":16,"column_end":21},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166168,"byte_end":166173,"line_start":1691,"line_end":1691,"column_start":40,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166355,"byte_end":166360,"line_start":1697,"line_end":1697,"column_start":16,"column_end":21},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166563,"byte_end":166568,"line_start":1704,"line_end":1704,"column_start":30,"column_end":35},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166657,"byte_end":166662,"line_start":1707,"line_end":1707,"column_start":22,"column_end":27},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":166848,"byte_end":166856,"line_start":1714,"line_end":1714,"column_start":29,"column_end":37},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167262,"byte_end":167270,"line_start":1731,"line_end":1731,"column_start":16,"column_end":24},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167560,"byte_end":167568,"line_start":1742,"line_end":1742,"column_start":40,"column_end":48},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167922,"byte_end":167930,"line_start":1754,"line_end":1754,"column_start":30,"column_end":38},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167960,"byte_end":167968,"line_start":1756,"line_end":1756,"column_start":16,"column_end":24},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168190,"byte_end":168198,"line_start":1763,"line_end":1763,"column_start":42,"column_end":50},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168452,"byte_end":168460,"line_start":1772,"line_end":1772,"column_start":36,"column_end":44},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168764,"byte_end":168772,"line_start":1782,"line_end":1782,"column_start":61,"column_end":69},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169018,"byte_end":169026,"line_start":1789,"line_end":1789,"column_start":33,"column_end":41},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169230,"byte_end":169238,"line_start":1798,"line_end":1798,"column_start":29,"column_end":37},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169453,"byte_end":169461,"line_start":1806,"line_end":1806,"column_start":48,"column_end":56},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169683,"byte_end":169691,"line_start":1813,"line_end":1813,"column_start":27,"column_end":35},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169798,"byte_end":169806,"line_start":1816,"line_end":1816,"column_start":51,"column_end":59},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170031,"byte_end":170039,"line_start":1824,"line_end":1824,"column_start":30,"column_end":38},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170246,"byte_end":170254,"line_start":1832,"line_end":1832,"column_start":36,"column_end":44},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":170474,"byte_end":170482,"line_start":1839,"line_end":1839,"column_start":42,"column_end":50},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":671},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":173850,"byte_end":173858,"line_start":1946,"line_end":1946,"column_start":12,"column_end":20},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178470,"byte_end":178475,"line_start":2121,"line_end":2121,"column_start":21,"column_end":26},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181369,"byte_end":181374,"line_start":2219,"line_end":2219,"column_start":30,"column_end":35},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182086,"byte_end":182097,"line_start":2242,"line_end":2242,"column_start":21,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":184863,"byte_end":184876,"line_start":2336,"line_end":2336,"column_start":21,"column_end":34},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":192483,"byte_end":192492,"line_start":2583,"line_end":2583,"column_start":58,"column_end":67},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":193415,"byte_end":193421,"line_start":6,"line_end":6,"column_start":24,"column_end":30},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":197120,"byte_end":197126,"line_start":91,"line_end":91,"column_start":16,"column_end":22},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":198178,"byte_end":198184,"line_start":115,"line_end":115,"column_start":16,"column_end":22},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":199811,"byte_end":199817,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":202227,"byte_end":202234,"line_start":191,"line_end":191,"column_start":24,"column_end":31},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/navigate.rs","byte_start":203360,"byte_end":203366,"line_start":219,"line_end":219,"column_start":24,"column_end":30},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208324,"byte_end":208332,"line_start":98,"line_end":98,"column_start":12,"column_end":20},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208967,"byte_end":208977,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209189,"byte_end":209199,"line_start":121,"line_end":121,"column_start":22,"column_end":32},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210284,"byte_end":210296,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211647,"byte_end":211656,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212424,"byte_end":212428,"line_start":195,"line_end":195,"column_start":40,"column_end":44},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1338},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212477,"byte_end":212481,"line_start":196,"line_end":196,"column_start":40,"column_end":44},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1338},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212503,"byte_end":212507,"line_start":198,"line_end":198,"column_start":12,"column_end":16},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217702,"byte_end":217709,"line_start":325,"line_end":325,"column_start":39,"column_end":46},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1892}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217783,"byte_end":217790,"line_start":326,"line_end":326,"column_start":40,"column_end":47},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217934,"byte_end":217941,"line_start":332,"line_end":332,"column_start":58,"column_end":65},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218029,"byte_end":218036,"line_start":334,"line_end":334,"column_start":60,"column_end":67},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218130,"byte_end":218137,"line_start":335,"line_end":335,"column_start":60,"column_end":67},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218215,"byte_end":218222,"line_start":336,"line_end":336,"column_start":46,"column_end":53},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218277,"byte_end":218284,"line_start":338,"line_end":338,"column_start":24,"column_end":31},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218467,"byte_end":218474,"line_start":344,"line_end":344,"column_start":16,"column_end":23},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218692,"byte_end":218699,"line_start":350,"line_end":350,"column_start":30,"column_end":37},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223024,"byte_end":223031,"line_start":460,"line_end":460,"column_start":12,"column_end":19},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223863,"byte_end":223870,"line_start":483,"line_end":483,"column_start":22,"column_end":29},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226183,"byte_end":226190,"line_start":527,"line_end":527,"column_start":30,"column_end":37},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227162,"byte_end":227169,"line_start":549,"line_end":549,"column_start":30,"column_end":37},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229110,"byte_end":229117,"line_start":591,"line_end":591,"column_start":16,"column_end":23},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229986,"byte_end":229993,"line_start":621,"line_end":621,"column_start":16,"column_end":23},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":232141,"byte_end":232148,"line_start":682,"line_end":682,"column_start":16,"column_end":23},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234868,"byte_end":234875,"line_start":753,"line_end":753,"column_start":24,"column_end":31},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236368,"byte_end":236374,"line_start":793,"line_end":793,"column_start":33,"column_end":39},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":1892}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236589,"byte_end":236595,"line_start":796,"line_end":796,"column_start":34,"column_end":40},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236680,"byte_end":236686,"line_start":802,"line_end":802,"column_start":18,"column_end":24},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236889,"byte_end":236895,"line_start":809,"line_end":809,"column_start":34,"column_end":40},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237646,"byte_end":237652,"line_start":828,"line_end":828,"column_start":9,"column_end":15},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237885,"byte_end":237891,"line_start":836,"line_end":836,"column_start":9,"column_end":15},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238157,"byte_end":238163,"line_start":844,"line_end":844,"column_start":5,"column_end":11},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238607,"byte_end":238613,"line_start":853,"line_end":853,"column_start":38,"column_end":44},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":239715,"byte_end":239721,"line_start":872,"line_end":872,"column_start":34,"column_end":40},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240617,"byte_end":240623,"line_start":898,"line_end":898,"column_start":16,"column_end":22},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":242648,"byte_end":242654,"line_start":947,"line_end":947,"column_start":16,"column_end":22},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246040,"byte_end":246046,"line_start":1031,"line_end":1031,"column_start":24,"column_end":30},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246687,"byte_end":246693,"line_start":1048,"line_end":1048,"column_start":34,"column_end":40},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":246995,"byte_end":247001,"line_start":1057,"line_end":1057,"column_start":34,"column_end":40},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247317,"byte_end":247323,"line_start":1066,"line_end":1066,"column_start":26,"column_end":32},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247638,"byte_end":247644,"line_start":1075,"line_end":1075,"column_start":16,"column_end":22},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":249705,"byte_end":249711,"line_start":1126,"line_end":1126,"column_start":16,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262272,"byte_end":262278,"line_start":1429,"line_end":1429,"column_start":24,"column_end":30},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262565,"byte_end":262571,"line_start":1437,"line_end":1437,"column_start":24,"column_end":30},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":262862,"byte_end":262868,"line_start":1445,"line_end":1445,"column_start":24,"column_end":30},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263165,"byte_end":263171,"line_start":1454,"line_end":1454,"column_start":5,"column_end":11},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":263886,"byte_end":263892,"line_start":1474,"line_end":1474,"column_start":16,"column_end":22},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271739,"byte_end":271747,"line_start":66,"line_end":66,"column_start":26,"column_end":34},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272373,"byte_end":272377,"line_start":89,"line_end":89,"column_start":36,"column_end":40},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273784,"byte_end":273798,"line_start":141,"line_end":141,"column_start":9,"column_end":23},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":4601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275052,"byte_end":275066,"line_start":182,"line_end":182,"column_start":19,"column_end":33},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":4601},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276215,"byte_end":276225,"line_start":219,"line_end":219,"column_start":36,"column_end":46},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1761},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276913,"byte_end":276932,"line_start":236,"line_end":236,"column_start":36,"column_end":55},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278013,"byte_end":278025,"line_start":269,"line_end":269,"column_start":36,"column_end":48},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1776},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278641,"byte_end":278646,"line_start":286,"line_end":286,"column_start":36,"column_end":41},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1783},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279220,"byte_end":279228,"line_start":300,"line_end":300,"column_start":14,"column_end":22},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":4559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299536,"byte_end":299544,"line_start":949,"line_end":949,"column_start":9,"column_end":17},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":4559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301506,"byte_end":301514,"line_start":1018,"line_end":1018,"column_start":34,"column_end":42},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301747,"byte_end":301755,"line_start":1027,"line_end":1027,"column_start":26,"column_end":34},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":302548,"byte_end":302556,"line_start":1059,"line_end":1059,"column_start":28,"column_end":36},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":302843,"byte_end":302851,"line_start":1069,"line_end":1069,"column_start":48,"column_end":56},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":303052,"byte_end":303060,"line_start":1076,"line_end":1076,"column_start":26,"column_end":34},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306115,"byte_end":306123,"line_start":1176,"line_end":1176,"column_start":26,"column_end":34},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":4559},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306317,"byte_end":306321,"line_start":1183,"line_end":1183,"column_start":19,"column_end":23},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306481,"byte_end":306485,"line_start":1189,"line_end":1189,"column_start":26,"column_end":30},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":306836,"byte_end":306840,"line_start":1203,"line_end":1203,"column_start":37,"column_end":41},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307011,"byte_end":307015,"line_start":1209,"line_end":1209,"column_start":31,"column_end":35},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307160,"byte_end":307164,"line_start":1216,"line_end":1216,"column_start":27,"column_end":31},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1746},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307243,"byte_end":307251,"line_start":1219,"line_end":1219,"column_start":22,"column_end":30},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":4587},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307530,"byte_end":307538,"line_start":1230,"line_end":1230,"column_start":33,"column_end":41},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":4587},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307717,"byte_end":307725,"line_start":1236,"line_end":1236,"column_start":31,"column_end":39},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":4587},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307866,"byte_end":307874,"line_start":1243,"line_end":1243,"column_start":27,"column_end":35},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":4587},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":307953,"byte_end":307958,"line_start":1246,"line_end":1246,"column_start":19,"column_end":24},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":4593},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308127,"byte_end":308132,"line_start":1253,"line_end":1253,"column_start":26,"column_end":31},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":4593},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308420,"byte_end":308425,"line_start":1266,"line_end":1266,"column_start":37,"column_end":42},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":4593},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308610,"byte_end":308615,"line_start":1273,"line_end":1273,"column_start":27,"column_end":32},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":4593},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":308691,"byte_end":308701,"line_start":1276,"line_end":1276,"column_start":19,"column_end":29},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1761},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":309392,"byte_end":309402,"line_start":1293,"line_end":1293,"column_start":31,"column_end":41},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1761},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311032,"byte_end":311042,"line_start":1336,"line_end":1336,"column_start":32,"column_end":42},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1761},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311118,"byte_end":311137,"line_start":1339,"line_end":1339,"column_start":19,"column_end":38},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":311305,"byte_end":311324,"line_start":1345,"line_end":1345,"column_start":31,"column_end":50},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312018,"byte_end":312037,"line_start":1367,"line_end":1367,"column_start":32,"column_end":51},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312113,"byte_end":312125,"line_start":1370,"line_end":1370,"column_start":19,"column_end":31},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1776},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":312759,"byte_end":312771,"line_start":1386,"line_end":1386,"column_start":31,"column_end":43},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1776},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314118,"byte_end":314130,"line_start":1423,"line_end":1423,"column_start":32,"column_end":44},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1776},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314206,"byte_end":314211,"line_start":1426,"line_end":1426,"column_start":19,"column_end":24},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1783},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314365,"byte_end":314370,"line_start":1432,"line_end":1432,"column_start":31,"column_end":36},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1783},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":314822,"byte_end":314827,"line_start":1448,"line_end":1448,"column_start":32,"column_end":37},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":1783},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316769,"byte_end":316773,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317030,"byte_end":317034,"line_start":75,"line_end":75,"column_start":19,"column_end":23},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317936,"byte_end":317943,"line_start":100,"line_end":100,"column_start":36,"column_end":43},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318632,"byte_end":318640,"line_start":120,"line_end":120,"column_start":36,"column_end":44},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":4657},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318787,"byte_end":318791,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318987,"byte_end":318997,"line_start":137,"line_end":137,"column_start":9,"column_end":19},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326708,"byte_end":326718,"line_start":363,"line_end":363,"column_start":21,"column_end":31},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326844,"byte_end":326854,"line_start":371,"line_end":371,"column_start":9,"column_end":19},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344721,"byte_end":344731,"line_start":967,"line_end":967,"column_start":39,"column_end":49},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344848,"byte_end":344857,"line_start":971,"line_end":971,"column_start":30,"column_end":39},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2096},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345390,"byte_end":345394,"line_start":988,"line_end":988,"column_start":26,"column_end":30},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346096,"byte_end":346100,"line_start":1018,"line_end":1018,"column_start":37,"column_end":41},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346582,"byte_end":346586,"line_start":1036,"line_end":1036,"column_start":31,"column_end":35},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346671,"byte_end":346675,"line_start":1039,"line_end":1039,"column_start":27,"column_end":31},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346758,"byte_end":346765,"line_start":1042,"line_end":1042,"column_start":26,"column_end":33},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347487,"byte_end":347494,"line_start":1072,"line_end":1072,"column_start":37,"column_end":44},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347988,"byte_end":347995,"line_start":1090,"line_end":1090,"column_start":31,"column_end":38},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348080,"byte_end":348087,"line_start":1093,"line_end":1093,"column_start":27,"column_end":34},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348107,"byte_end":348114,"line_start":1095,"line_end":1095,"column_start":9,"column_end":16},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":2027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351671,"byte_end":351677,"line_start":1201,"line_end":1201,"column_start":36,"column_end":42},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":2144},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352730,"byte_end":352739,"line_start":1225,"line_end":1225,"column_start":36,"column_end":45},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":2153},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352916,"byte_end":352922,"line_start":1231,"line_end":1231,"column_start":13,"column_end":19},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":2144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356898,"byte_end":356907,"line_start":1328,"line_end":1328,"column_start":13,"column_end":22},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":2153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":361443,"byte_end":361452,"line_start":1437,"line_end":1437,"column_start":13,"column_end":22},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":367433,"byte_end":367444,"line_start":1580,"line_end":1580,"column_start":25,"column_end":36},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":2200},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368226,"byte_end":368237,"line_start":1609,"line_end":1609,"column_start":21,"column_end":32},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":2200},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368470,"byte_end":368479,"line_start":1618,"line_end":1618,"column_start":37,"column_end":46},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":368934,"byte_end":368945,"line_start":1636,"line_end":1636,"column_start":39,"column_end":50},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2200},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369197,"byte_end":369205,"line_start":1646,"line_end":1646,"column_start":22,"column_end":30},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":4657},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369518,"byte_end":369526,"line_start":1661,"line_end":1661,"column_start":33,"column_end":41},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":4657},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369703,"byte_end":369711,"line_start":1669,"line_end":1669,"column_start":31,"column_end":39},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":4657},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369792,"byte_end":369800,"line_start":1672,"line_end":1672,"column_start":27,"column_end":35},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":4657},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":369882,"byte_end":369892,"line_start":1675,"line_end":1675,"column_start":29,"column_end":39},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":370117,"byte_end":370127,"line_start":1684,"line_end":1684,"column_start":26,"column_end":36},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":370880,"byte_end":370890,"line_start":1716,"line_end":1716,"column_start":23,"column_end":33},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371066,"byte_end":371076,"line_start":1722,"line_end":1722,"column_start":41,"column_end":51},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2003},"to":{"krate":0,"index":2727}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371251,"byte_end":371261,"line_start":1728,"line_end":1728,"column_start":39,"column_end":49},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2003},"to":{"krate":0,"index":2727}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371458,"byte_end":371468,"line_start":1735,"line_end":1735,"column_start":42,"column_end":52},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371677,"byte_end":371687,"line_start":1742,"line_end":1742,"column_start":34,"column_end":44},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":371974,"byte_end":371984,"line_start":1753,"line_end":1753,"column_start":20,"column_end":30},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372073,"byte_end":372083,"line_start":1756,"line_end":1756,"column_start":36,"column_end":46},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372266,"byte_end":372276,"line_start":1763,"line_end":1763,"column_start":22,"column_end":32},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":372453,"byte_end":372463,"line_start":1771,"line_end":1771,"column_start":26,"column_end":36},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373028,"byte_end":373038,"line_start":1791,"line_end":1791,"column_start":36,"column_end":46},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373231,"byte_end":373241,"line_start":1798,"line_end":1798,"column_start":24,"column_end":34},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373865,"byte_end":373875,"line_start":1822,"line_end":1822,"column_start":31,"column_end":41},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":373959,"byte_end":373969,"line_start":1825,"line_end":1825,"column_start":31,"column_end":41},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2003},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374053,"byte_end":374057,"line_start":1828,"line_end":1828,"column_start":31,"column_end":35},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374145,"byte_end":374149,"line_start":1831,"line_end":1831,"column_start":31,"column_end":35},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":2014},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374237,"byte_end":374244,"line_start":1834,"line_end":1834,"column_start":31,"column_end":38},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":374332,"byte_end":374339,"line_start":1837,"line_end":1837,"column_start":31,"column_end":38},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":469791,"byte_end":469796,"line_start":23,"line_end":23,"column_start":36,"column_end":41},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470112,"byte_end":470117,"line_start":34,"line_end":34,"column_start":31,"column_end":36},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470204,"byte_end":470209,"line_start":36,"line_end":36,"column_start":31,"column_end":36},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470284,"byte_end":470289,"line_start":39,"line_end":39,"column_start":18,"column_end":23},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":470417,"byte_end":470426,"line_start":43,"line_end":43,"column_start":34,"column_end":43},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2391},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":472511,"byte_end":472516,"line_start":100,"line_end":100,"column_start":22,"column_end":27},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":472850,"byte_end":472855,"line_start":115,"line_end":115,"column_start":33,"column_end":38},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":473074,"byte_end":473079,"line_start":123,"line_end":123,"column_start":31,"column_end":36},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/vec_deque/drain.rs","byte_start":473164,"byte_end":473169,"line_start":126,"line_end":126,"column_start":27,"column_end":32},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":2374},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377164,"byte_end":377174,"line_start":86,"line_end":86,"column_start":17,"column_end":27},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":2424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377599,"byte_end":377609,"line_start":102,"line_end":102,"column_start":30,"column_end":40},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":2424},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378385,"byte_end":378393,"line_start":127,"line_end":127,"column_start":26,"column_end":34},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378975,"byte_end":378983,"line_start":149,"line_end":149,"column_start":39,"column_end":47},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379212,"byte_end":379219,"line_start":155,"line_end":155,"column_start":30,"column_end":37},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":2453},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379687,"byte_end":379695,"line_start":174,"line_end":174,"column_start":21,"column_end":29},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379830,"byte_end":379838,"line_start":182,"line_end":182,"column_start":9,"column_end":17},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389231,"byte_end":389239,"line_start":458,"line_end":458,"column_start":9,"column_end":17},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403631,"byte_end":403638,"line_start":878,"line_end":878,"column_start":30,"column_end":37},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2499},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445670,"byte_end":445678,"line_start":2155,"line_end":2155,"column_start":16,"column_end":24},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446797,"byte_end":446802,"line_start":2192,"line_end":2192,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1887},"to":{"krate":0,"index":2547}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448399,"byte_end":448403,"line_start":2249,"line_end":2249,"column_start":36,"column_end":40},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448756,"byte_end":448760,"line_start":2258,"line_end":2258,"column_start":19,"column_end":23},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448947,"byte_end":448951,"line_start":2265,"line_end":2265,"column_start":26,"column_end":30},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":451169,"byte_end":451173,"line_start":2335,"line_end":2335,"column_start":37,"column_end":41},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452722,"byte_end":452726,"line_start":2380,"line_end":2380,"column_start":31,"column_end":35},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452882,"byte_end":452886,"line_start":2387,"line_end":2387,"column_start":27,"column_end":31},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":2560},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453398,"byte_end":453405,"line_start":2404,"line_end":2404,"column_start":36,"column_end":43},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":453715,"byte_end":453722,"line_start":2412,"line_end":2412,"column_start":26,"column_end":33},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":455085,"byte_end":455092,"line_start":2461,"line_end":2461,"column_start":37,"column_end":44},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":455842,"byte_end":455849,"line_start":2486,"line_end":2486,"column_start":31,"column_end":38},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456005,"byte_end":456012,"line_start":2493,"line_end":2493,"column_start":27,"column_end":34},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2603},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456543,"byte_end":456551,"line_start":2509,"line_end":2509,"column_start":36,"column_end":44},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":4663},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":456758,"byte_end":456766,"line_start":2516,"line_end":2516,"column_start":22,"column_end":30},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":4663},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457096,"byte_end":457104,"line_start":2532,"line_end":2532,"column_start":33,"column_end":41},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4663},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457282,"byte_end":457290,"line_start":2540,"line_end":2540,"column_start":31,"column_end":39},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4663},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457441,"byte_end":457449,"line_start":2547,"line_end":2547,"column_start":27,"column_end":35},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4663},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":457536,"byte_end":457544,"line_start":2550,"line_end":2550,"column_start":34,"column_end":42},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":459039,"byte_end":459047,"line_start":2589,"line_end":2589,"column_start":20,"column_end":28},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460167,"byte_end":460175,"line_start":2619,"line_end":2619,"column_start":36,"column_end":44},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460372,"byte_end":460380,"line_start":2626,"line_end":2626,"column_start":22,"column_end":30},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460569,"byte_end":460577,"line_start":2634,"line_end":2634,"column_start":24,"column_end":32},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":460853,"byte_end":460861,"line_start":2644,"line_end":2644,"column_start":26,"column_end":34},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461083,"byte_end":461091,"line_start":2654,"line_end":2654,"column_start":29,"column_end":37},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461307,"byte_end":461315,"line_start":2662,"line_end":2662,"column_start":29,"column_end":37},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":461655,"byte_end":461663,"line_start":2673,"line_end":2673,"column_start":26,"column_end":34},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":462426,"byte_end":462434,"line_start":2705,"line_end":2705,"column_start":23,"column_end":31},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463221,"byte_end":463229,"line_start":2729,"line_end":2729,"column_start":42,"column_end":50},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463440,"byte_end":463448,"line_start":2736,"line_end":2736,"column_start":36,"column_end":44},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":463663,"byte_end":463671,"line_start":2743,"line_end":2743,"column_start":26,"column_end":34},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2419},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":464954,"byte_end":464957,"line_start":2775,"line_end":2775,"column_start":31,"column_end":34},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":69492,"byte_end":69507,"line_start":73,"line_end":73,"column_start":26,"column_end":41},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":4705},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500586,"byte_end":500592,"line_start":51,"line_end":51,"column_start":22,"column_end":28},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":502417,"byte_end":502423,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504495,"byte_end":504501,"line_start":151,"line_end":151,"column_start":22,"column_end":28},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505080,"byte_end":505086,"line_start":164,"line_end":164,"column_start":9,"column_end":15},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":505913,"byte_end":505919,"line_start":186,"line_end":186,"column_start":22,"column_end":28},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":523542,"byte_end":523548,"line_start":627,"line_end":627,"column_start":22,"column_end":28},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":525766,"byte_end":525772,"line_start":687,"line_end":687,"column_start":9,"column_end":15},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":526574,"byte_end":526580,"line_start":707,"line_end":707,"column_start":22,"column_end":28},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":527008,"byte_end":527014,"line_start":719,"line_end":719,"column_start":52,"column_end":58},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2790},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539143,"byte_end":539145,"line_start":287,"line_end":287,"column_start":35,"column_end":37},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539232,"byte_end":539234,"line_start":289,"line_end":289,"column_start":35,"column_end":37},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539363,"byte_end":539365,"line_start":292,"line_end":292,"column_start":65,"column_end":67},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2273}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539498,"byte_end":539500,"line_start":295,"line_end":295,"column_start":67,"column_end":69},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2310}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539524,"byte_end":539526,"line_start":297,"line_end":297,"column_start":17,"column_end":19},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":539758,"byte_end":539760,"line_start":307,"line_end":307,"column_start":9,"column_end":11},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":543784,"byte_end":543786,"line_start":439,"line_end":439,"column_start":9,"column_end":11},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":544704,"byte_end":544706,"line_start":469,"line_end":469,"column_start":9,"column_end":11},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":545809,"byte_end":545811,"line_start":508,"line_end":508,"column_start":9,"column_end":11},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":547109,"byte_end":547111,"line_start":549,"line_end":549,"column_start":17,"column_end":19},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":554821,"byte_end":554823,"line_start":800,"line_end":800,"column_start":16,"column_end":18},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":557741,"byte_end":557743,"line_start":877,"line_end":877,"column_start":6,"column_end":8},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":558639,"byte_end":558641,"line_start":909,"line_end":909,"column_start":17,"column_end":19},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":560805,"byte_end":560807,"line_start":969,"line_end":969,"column_start":9,"column_end":11},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":561487,"byte_end":561489,"line_start":987,"line_end":987,"column_start":9,"column_end":11},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562482,"byte_end":562487,"line_start":1013,"line_end":1013,"column_start":26,"column_end":31},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2996},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":563528,"byte_end":563530,"line_start":1051,"line_end":1051,"column_start":35,"column_end":37},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3005}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":563708,"byte_end":563710,"line_start":1058,"line_end":1058,"column_start":34,"column_end":36},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3005}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":563892,"byte_end":563894,"line_start":1066,"line_end":1066,"column_start":27,"column_end":29},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":564094,"byte_end":564096,"line_start":1076,"line_end":1076,"column_start":30,"column_end":32},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2069}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":564196,"byte_end":564198,"line_start":1079,"line_end":1079,"column_start":47,"column_end":49},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":565528,"byte_end":565530,"line_start":1127,"line_end":1127,"column_start":27,"column_end":29},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":566051,"byte_end":566053,"line_start":1150,"line_end":1150,"column_start":30,"column_end":32},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":566638,"byte_end":566640,"line_start":1174,"line_end":1174,"column_start":46,"column_end":48},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3029}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":567445,"byte_end":567447,"line_start":1194,"line_end":1194,"column_start":39,"column_end":41},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3029}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":567776,"byte_end":567778,"line_start":1207,"line_end":1207,"column_start":43,"column_end":45},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":568974,"byte_end":568976,"line_start":1255,"line_end":1255,"column_start":29,"column_end":31},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":569074,"byte_end":569076,"line_start":1258,"line_end":1258,"column_start":45,"column_end":47},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":571224,"byte_end":571226,"line_start":1352,"line_end":1352,"column_start":31,"column_end":33},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":571746,"byte_end":571748,"line_start":1374,"line_end":1374,"column_start":33,"column_end":35},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":571934,"byte_end":571936,"line_start":1381,"line_end":1381,"column_start":49,"column_end":51},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572142,"byte_end":572144,"line_start":1388,"line_end":1388,"column_start":45,"column_end":47},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572337,"byte_end":572339,"line_start":1395,"line_end":1395,"column_start":34,"column_end":36},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":5992}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572544,"byte_end":572546,"line_start":1402,"line_end":1402,"column_start":21,"column_end":23},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572697,"byte_end":572699,"line_start":1409,"line_end":1409,"column_start":31,"column_end":33},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572891,"byte_end":572893,"line_start":1417,"line_end":1417,"column_start":21,"column_end":23},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573152,"byte_end":573154,"line_start":1426,"line_end":1426,"column_start":23,"column_end":25},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573338,"byte_end":573340,"line_start":1434,"line_end":1434,"column_start":34,"column_end":36},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573511,"byte_end":573513,"line_start":1442,"line_end":1442,"column_start":26,"column_end":28},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573885,"byte_end":573887,"line_start":1457,"line_end":1457,"column_start":46,"column_end":48},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1813}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":574303,"byte_end":574305,"line_start":1473,"line_end":1473,"column_start":35,"column_end":37},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576078,"byte_end":576080,"line_start":1522,"line_end":1522,"column_start":53,"column_end":55},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3098}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576241,"byte_end":576243,"line_start":1528,"line_end":1528,"column_start":61,"column_end":63},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3098}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576993,"byte_end":576995,"line_start":1551,"line_end":1551,"column_start":67,"column_end":69},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3098}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":579477,"byte_end":579481,"line_start":1600,"line_end":1600,"column_start":35,"column_end":39},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":579570,"byte_end":579574,"line_start":1602,"line_end":1602,"column_start":35,"column_end":39},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":579705,"byte_end":579709,"line_start":1605,"line_end":1605,"column_start":67,"column_end":71},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":2273}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":579844,"byte_end":579848,"line_start":1608,"line_end":1608,"column_start":69,"column_end":73},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":2310}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":579864,"byte_end":579868,"line_start":1610,"line_end":1610,"column_start":9,"column_end":13},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":3114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":585816,"byte_end":585820,"line_start":1775,"line_end":1775,"column_start":17,"column_end":21},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":3114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":589465,"byte_end":589469,"line_start":1895,"line_end":1895,"column_start":26,"column_end":30},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":590568,"byte_end":590572,"line_start":1935,"line_end":1935,"column_start":27,"column_end":31},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":591121,"byte_end":591125,"line_start":1957,"line_end":1957,"column_start":45,"column_end":49},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":591308,"byte_end":591312,"line_start":1964,"line_end":1964,"column_start":21,"column_end":25},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":593841,"byte_end":593843,"line_start":2050,"line_end":2050,"column_start":33,"column_end":35},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":3155}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":593984,"byte_end":593989,"line_start":2057,"line_end":2057,"column_start":33,"column_end":38},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":2918},"to":{"krate":0,"index":3155}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":594158,"byte_end":594160,"line_start":2065,"line_end":2065,"column_start":39,"column_end":41},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":594306,"byte_end":594308,"line_start":2072,"line_end":2072,"column_start":30,"column_end":32},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":594439,"byte_end":594441,"line_start":2079,"line_end":2079,"column_start":27,"column_end":29},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":1921}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":619922,"byte_end":619925,"line_start":709,"line_end":709,"column_start":25,"column_end":28},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":620062,"byte_end":620065,"line_start":716,"line_end":716,"column_start":28,"column_end":31},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1573}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":623796,"byte_end":623809,"line_start":811,"line_end":811,"column_start":22,"column_end":35},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":3308},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":627706,"byte_end":627715,"line_start":917,"line_end":917,"column_start":22,"column_end":31},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":3322},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/str.rs","byte_start":640365,"byte_end":640371,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/str.rs","byte_start":640529,"byte_end":640535,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1573}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":663941,"byte_end":663947,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":4732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703488,"byte_end":703501,"line_start":1628,"line_end":1628,"column_start":6,"column_end":19},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":4745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705784,"byte_end":705797,"line_start":1703,"line_end":1703,"column_start":23,"column_end":36},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":4745},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705982,"byte_end":705996,"line_start":1710,"line_end":1710,"column_start":23,"column_end":37},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":4759},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706201,"byte_end":706207,"line_start":1717,"line_end":1717,"column_start":16,"column_end":22},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706459,"byte_end":706465,"line_start":1728,"line_end":1728,"column_start":29,"column_end":35},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706721,"byte_end":706727,"line_start":1737,"line_end":1737,"column_start":37,"column_end":43},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706967,"byte_end":706973,"line_start":1746,"line_end":1746,"column_start":36,"column_end":42},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":707215,"byte_end":707221,"line_start":1755,"line_end":1755,"column_start":31,"column_end":37},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":707824,"byte_end":707830,"line_start":1773,"line_end":1773,"column_start":41,"column_end":47},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708447,"byte_end":708453,"line_start":1792,"line_end":1792,"column_start":23,"column_end":29},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708791,"byte_end":708797,"line_start":1802,"line_end":1802,"column_start":31,"column_end":37},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":709002,"byte_end":709008,"line_start":1809,"line_end":1809,"column_start":30,"column_end":36},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":709229,"byte_end":709235,"line_start":1816,"line_end":1816,"column_start":25,"column_end":31},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":709463,"byte_end":709469,"line_start":1823,"line_end":1823,"column_start":35,"column_end":41},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":710346,"byte_end":710352,"line_start":1854,"line_end":1854,"column_start":20,"column_end":26},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":711701,"byte_end":711707,"line_start":1902,"line_end":1902,"column_start":18,"column_end":24},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":711887,"byte_end":711893,"line_start":1911,"line_end":1911,"column_start":23,"column_end":29},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":712086,"byte_end":712092,"line_start":1919,"line_end":1919,"column_start":21,"column_end":27},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":712283,"byte_end":712289,"line_start":1927,"line_end":1927,"column_start":21,"column_end":27},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":713667,"byte_end":713673,"line_start":1972,"line_end":1972,"column_start":20,"column_end":26},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1945}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":714040,"byte_end":714046,"line_start":1986,"line_end":1986,"column_start":26,"column_end":32},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1978}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":714231,"byte_end":714237,"line_start":1994,"line_end":1994,"column_start":40,"column_end":46},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":714454,"byte_end":714460,"line_start":2003,"line_end":2003,"column_start":42,"column_end":48},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":714681,"byte_end":714687,"line_start":2012,"line_end":2012,"column_start":44,"column_end":50},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":714903,"byte_end":714909,"line_start":2021,"line_end":2021,"column_start":37,"column_end":43},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":715172,"byte_end":715178,"line_start":2030,"line_end":2030,"column_start":49,"column_end":55},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":715436,"byte_end":715442,"line_start":2039,"line_end":2039,"column_start":51,"column_end":57},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":715698,"byte_end":715704,"line_start":2049,"line_end":2049,"column_start":43,"column_end":49},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":715930,"byte_end":715936,"line_start":2056,"line_end":2056,"column_start":45,"column_end":51},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":716166,"byte_end":716172,"line_start":2063,"line_end":2063,"column_start":47,"column_end":53},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":716397,"byte_end":716403,"line_start":2070,"line_end":2070,"column_start":40,"column_end":46},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":716666,"byte_end":716672,"line_start":2077,"line_end":2077,"column_start":52,"column_end":58},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":716932,"byte_end":716938,"line_start":2084,"line_end":2084,"column_start":54,"column_end":60},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":717157,"byte_end":717163,"line_start":2092,"line_end":2092,"column_start":21,"column_end":27},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":717381,"byte_end":717387,"line_start":2102,"line_end":2102,"column_start":24,"column_end":30},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":2064}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":717878,"byte_end":717884,"line_start":2118,"line_end":2118,"column_start":18,"column_end":24},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":7497}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":719176,"byte_end":719177,"line_start":2160,"line_end":2160,"column_start":45,"column_end":46},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3641},"to":{"krate":0,"index":3638}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":719748,"byte_end":719751,"line_start":2181,"line_end":2181,"column_start":19,"column_end":22},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":326},"to":{"krate":0,"index":3638}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":719941,"byte_end":719947,"line_start":2189,"line_end":2189,"column_start":19,"column_end":25},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":4732},"to":{"krate":0,"index":3638}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720099,"byte_end":720105,"line_start":2197,"line_end":2197,"column_start":21,"column_end":27},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720250,"byte_end":720256,"line_start":2205,"line_end":2205,"column_start":21,"column_end":27},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1800}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720401,"byte_end":720407,"line_start":2213,"line_end":2213,"column_start":22,"column_end":28},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720555,"byte_end":720561,"line_start":2221,"line_end":2221,"column_start":21,"column_end":27},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720721,"byte_end":720727,"line_start":2229,"line_end":2229,"column_start":24,"column_end":30},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":720962,"byte_end":720968,"line_start":2239,"line_end":2239,"column_start":25,"column_end":31},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":721509,"byte_end":721512,"line_start":2260,"line_end":2260,"column_start":23,"column_end":26},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":722033,"byte_end":722039,"line_start":2280,"line_end":2280,"column_start":33,"column_end":39},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":722188,"byte_end":722191,"line_start":2287,"line_end":2287,"column_start":28,"column_end":31},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":722365,"byte_end":722368,"line_start":2295,"line_end":2295,"column_start":27,"column_end":30},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":722557,"byte_end":722560,"line_start":2303,"line_end":2303,"column_start":31,"column_end":34},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":722765,"byte_end":722768,"line_start":2311,"line_end":2311,"column_start":33,"column_end":36},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":723007,"byte_end":723010,"line_start":2318,"line_end":2318,"column_start":40,"column_end":43},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":723247,"byte_end":723250,"line_start":2325,"line_end":2325,"column_start":35,"column_end":38},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":723479,"byte_end":723482,"line_start":2332,"line_end":2332,"column_start":23,"column_end":26},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":723956,"byte_end":723962,"line_start":2353,"line_end":2353,"column_start":21,"column_end":27},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":4732},"to":{"krate":1,"index":5938}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":724817,"byte_end":724822,"line_start":2387,"line_end":2387,"column_start":21,"column_end":26},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":724998,"byte_end":725003,"line_start":2394,"line_end":2394,"column_start":22,"column_end":27},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":725078,"byte_end":725083,"line_start":2396,"line_end":2396,"column_start":22,"column_end":27},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":725152,"byte_end":725157,"line_start":2399,"line_end":2399,"column_start":15,"column_end":20},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":725600,"byte_end":725605,"line_start":2413,"line_end":2413,"column_start":19,"column_end":24},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":725974,"byte_end":725979,"line_start":2432,"line_end":2432,"column_start":30,"column_end":35},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":726155,"byte_end":726160,"line_start":2440,"line_end":2440,"column_start":24,"column_end":29},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":733768,"byte_end":733771,"line_start":202,"line_end":202,"column_start":47,"column_end":50},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":733870,"byte_end":733873,"line_start":204,"line_end":204,"column_start":47,"column_end":50},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":734003,"byte_end":734006,"line_start":207,"line_end":207,"column_start":66,"column_end":69},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":2273}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":734140,"byte_end":734143,"line_start":210,"line_end":210,"column_start":68,"column_end":71},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":2310}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":734167,"byte_end":734170,"line_start":212,"line_end":212,"column_start":17,"column_end":20},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":736370,"byte_end":736374,"line_start":257,"line_end":257,"column_start":47,"column_end":51},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":736476,"byte_end":736480,"line_start":259,"line_end":259,"column_start":47,"column_end":51},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":736611,"byte_end":736615,"line_start":262,"line_end":262,"column_start":67,"column_end":71},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":2273}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":736749,"byte_end":736753,"line_start":264,"line_end":264,"column_start":69,"column_end":73},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":2310}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":736854,"byte_end":736858,"line_start":267,"line_end":267,"column_start":45,"column_end":49},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":737328,"byte_end":737336,"line_start":284,"line_end":284,"column_start":47,"column_end":55},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":3803},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":737389,"byte_end":737397,"line_start":285,"line_end":285,"column_start":47,"column_end":55},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":3803},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":737413,"byte_end":737416,"line_start":287,"line_end":287,"column_start":9,"column_end":12},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":741309,"byte_end":741312,"line_start":419,"line_end":419,"column_start":9,"column_end":12},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":742240,"byte_end":742243,"line_start":449,"line_end":449,"column_start":9,"column_end":12},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":743354,"byte_end":743357,"line_start":488,"line_end":488,"column_start":9,"column_end":12},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":744665,"byte_end":744668,"line_start":529,"line_end":529,"column_start":17,"column_end":20},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":752974,"byte_end":752977,"line_start":771,"line_end":771,"column_start":17,"column_end":20},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":755178,"byte_end":755181,"line_start":830,"line_end":830,"column_start":9,"column_end":12},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":755870,"byte_end":755873,"line_start":848,"line_end":848,"column_start":9,"column_end":12},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":756873,"byte_end":756878,"line_start":874,"line_end":874,"column_start":26,"column_end":31},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":3860},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":757935,"byte_end":757938,"line_start":912,"line_end":912,"column_start":36,"column_end":39},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3869}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":758117,"byte_end":758120,"line_start":919,"line_end":919,"column_start":35,"column_end":38},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3869}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":758303,"byte_end":758306,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":760174,"byte_end":760177,"line_start":977,"line_end":977,"column_start":27,"column_end":30},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":760368,"byte_end":760371,"line_start":987,"line_end":987,"column_start":30,"column_end":33},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":2069}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":760394,"byte_end":760397,"line_start":989,"line_end":989,"column_start":16,"column_end":19},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":764379,"byte_end":764382,"line_start":1076,"line_end":1076,"column_start":17,"column_end":20},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":768388,"byte_end":768391,"line_start":1181,"line_end":1181,"column_start":47,"column_end":50},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":771262,"byte_end":771265,"line_start":1254,"line_end":1254,"column_start":6,"column_end":9},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":772254,"byte_end":772258,"line_start":1289,"line_end":1289,"column_start":9,"column_end":13},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":3787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":778132,"byte_end":778136,"line_start":1450,"line_end":1450,"column_start":17,"column_end":21},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":3787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":783530,"byte_end":783534,"line_start":1608,"line_end":1608,"column_start":27,"column_end":31},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":784659,"byte_end":784663,"line_start":1645,"line_end":1645,"column_start":21,"column_end":25},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":785276,"byte_end":785280,"line_start":1667,"line_end":1667,"column_start":26,"column_end":30},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":3787},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":786959,"byte_end":786962,"line_start":1717,"line_end":1717,"column_start":47,"column_end":50},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3924}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":787771,"byte_end":787774,"line_start":1736,"line_end":1736,"column_start":40,"column_end":43},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3924}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":788107,"byte_end":788110,"line_start":1749,"line_end":1749,"column_start":43,"column_end":46},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1618}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":789321,"byte_end":789324,"line_start":1795,"line_end":1795,"column_start":45,"column_end":48},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":791412,"byte_end":791415,"line_start":1883,"line_end":1883,"column_start":31,"column_end":34},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":791923,"byte_end":791926,"line_start":1903,"line_end":1903,"column_start":29,"column_end":32},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":792028,"byte_end":792031,"line_start":1906,"line_end":1906,"column_start":49,"column_end":52},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":5982}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":792237,"byte_end":792240,"line_start":1913,"line_end":1913,"column_start":45,"column_end":48},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":792433,"byte_end":792436,"line_start":1920,"line_end":1920,"column_start":34,"column_end":37},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":5992}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":792642,"byte_end":792645,"line_start":1927,"line_end":1927,"column_start":30,"column_end":33},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":793038,"byte_end":793041,"line_start":1944,"line_end":1944,"column_start":33,"column_end":36},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":793206,"byte_end":793209,"line_start":1951,"line_end":1951,"column_start":21,"column_end":24},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":793361,"byte_end":793364,"line_start":1958,"line_end":1958,"column_start":31,"column_end":34},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":793558,"byte_end":793561,"line_start":1966,"line_end":1966,"column_start":21,"column_end":24},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":793826,"byte_end":793829,"line_start":1975,"line_end":1975,"column_start":23,"column_end":26},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":794015,"byte_end":794018,"line_start":1983,"line_end":1983,"column_start":34,"column_end":37},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":794191,"byte_end":794194,"line_start":1991,"line_end":1991,"column_start":26,"column_end":29},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":794571,"byte_end":794574,"line_start":2006,"line_end":2006,"column_start":47,"column_end":50},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1813}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":794994,"byte_end":794997,"line_start":2022,"line_end":2022,"column_start":35,"column_end":38},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":796791,"byte_end":796794,"line_start":2071,"line_end":2071,"column_start":54,"column_end":57},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3996}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":796956,"byte_end":796959,"line_start":2077,"line_end":2077,"column_start":62,"column_end":65},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3996}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":797711,"byte_end":797714,"line_start":2100,"line_end":2100,"column_start":68,"column_end":71},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":3769},"to":{"krate":0,"index":3996}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":798339,"byte_end":798342,"line_start":2115,"line_end":2115,"column_start":39,"column_end":42},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1570}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":798488,"byte_end":798491,"line_start":2122,"line_end":2122,"column_start":30,"column_end":33},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":798622,"byte_end":798625,"line_start":2129,"line_end":2129,"column_start":27,"column_end":30},"kind":{"Impl":{"id":598}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1921}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":811057,"byte_end":811060,"line_start":308,"line_end":308,"column_start":9,"column_end":12},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":849441,"byte_end":849444,"line_start":1472,"line_end":1472,"column_start":16,"column_end":19},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":851607,"byte_end":851610,"line_start":1535,"line_end":1535,"column_start":18,"column_end":21},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":853411,"byte_end":853424,"line_start":1589,"line_end":1589,"column_start":34,"column_end":47},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":4124},"to":{"krate":0,"index":4120}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":853595,"byte_end":853608,"line_start":1599,"line_end":1599,"column_start":36,"column_end":49},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":4132},"to":{"krate":0,"index":4120}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":853803,"byte_end":853813,"line_start":1609,"line_end":1609,"column_start":44,"column_end":54},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":4138},"to":{"krate":0,"index":4120}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":853939,"byte_end":853942,"line_start":1618,"line_end":1618,"column_start":9,"column_end":12},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":855389,"byte_end":855401,"line_start":1659,"line_end":1659,"column_start":10,"column_end":22},"kind":{"Impl":{"id":606}},"from":{"krate":0,"index":4151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":855642,"byte_end":855654,"line_start":1671,"line_end":1671,"column_start":15,"column_end":27},"kind":{"Impl":{"id":607}},"from":{"krate":0,"index":4151},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":855764,"byte_end":855767,"line_start":1678,"line_end":1678,"column_start":20,"column_end":23},"kind":{"Impl":{"id":608}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":856290,"byte_end":856293,"line_start":1700,"line_end":1700,"column_start":9,"column_end":12},"kind":{"Impl":{"id":609}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":857322,"byte_end":857327,"line_start":1734,"line_end":1734,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":1887},"to":{"krate":0,"index":4172}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":857418,"byte_end":857419,"line_start":1738,"line_end":1738,"column_start":33,"column_end":34},"kind":{"Impl":{"id":610}},"from":{"krate":0,"index":4175},"to":{"krate":0,"index":4172}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858009,"byte_end":858010,"line_start":1761,"line_end":1761,"column_start":42,"column_end":43},"kind":{"Impl":{"id":612}},"from":{"krate":0,"index":4180},"to":{"krate":0,"index":4172}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859688,"byte_end":859694,"line_start":1826,"line_end":1826,"column_start":35,"column_end":41},"kind":{"Impl":{"id":628}},"from":{"krate":1,"index":29308},"to":{"krate":0,"index":4182}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859813,"byte_end":859819,"line_start":1833,"line_end":1833,"column_start":35,"column_end":41},"kind":{"Impl":{"id":629}},"from":{"krate":1,"index":29308},"to":{"krate":0,"index":4182}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859942,"byte_end":859948,"line_start":1840,"line_end":1840,"column_start":35,"column_end":41},"kind":{"Impl":{"id":630}},"from":{"krate":1,"index":29308},"to":{"krate":0,"index":4182}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860311,"byte_end":860314,"line_start":1852,"line_end":1852,"column_start":26,"column_end":29},"kind":{"Impl":{"id":631}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860975,"byte_end":860978,"line_start":1873,"line_end":1873,"column_start":24,"column_end":27},"kind":{"Impl":{"id":632}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":6168}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861354,"byte_end":861357,"line_start":1885,"line_end":1885,"column_start":42,"column_end":45},"kind":{"Impl":{"id":633}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":2132}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861764,"byte_end":861767,"line_start":1899,"line_end":1899,"column_start":45,"column_end":48},"kind":{"Impl":{"id":634}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":2136}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861974,"byte_end":861977,"line_start":1907,"line_end":1907,"column_start":24,"column_end":27},"kind":{"Impl":{"id":635}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":2053}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":862184,"byte_end":862187,"line_start":1916,"line_end":1916,"column_start":27,"column_end":30},"kind":{"Impl":{"id":636}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":2064}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":862392,"byte_end":862395,"line_start":1923,"line_end":1923,"column_start":29,"column_end":32},"kind":{"Impl":{"id":637}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":862634,"byte_end":862637,"line_start":1931,"line_end":1931,"column_start":26,"column_end":29},"kind":{"Impl":{"id":638}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":4679}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":864275,"byte_end":864278,"line_start":1991,"line_end":1991,"column_start":23,"column_end":26},"kind":{"Impl":{"id":639}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":864651,"byte_end":864654,"line_start":2004,"line_end":2004,"column_start":33,"column_end":36},"kind":{"Impl":{"id":640}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":4249}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":865756,"byte_end":865759,"line_start":2035,"line_end":2035,"column_start":33,"column_end":36},"kind":{"Impl":{"id":641}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":4249}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":867010,"byte_end":867013,"line_start":2074,"line_end":2074,"column_start":40,"column_end":43},"kind":{"Impl":{"id":642}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":4249}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":867898,"byte_end":867901,"line_start":2100,"line_end":2100,"column_start":45,"column_end":48},"kind":{"Impl":{"id":643}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":4249}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868226,"byte_end":868229,"line_start":2114,"line_end":2114,"column_start":59,"column_end":62},"kind":{"Impl":{"id":644}},"from":{"krate":0,"index":4064},"to":{"krate":0,"index":4249}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868581,"byte_end":868584,"line_start":2129,"line_end":2129,"column_start":9,"column_end":12},"kind":{"Impl":{"id":645}},"from":{"krate":0,"index":4064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":873557,"byte_end":873560,"line_start":2263,"line_end":2263,"column_start":42,"column_end":45},"kind":{"Impl":{"id":646}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":4688}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":875222,"byte_end":875225,"line_start":2303,"line_end":2303,"column_start":36,"column_end":39},"kind":{"Impl":{"id":655}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1655}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":875434,"byte_end":875437,"line_start":2311,"line_end":2311,"column_start":20,"column_end":23},"kind":{"Impl":{"id":656}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1623}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":875567,"byte_end":875570,"line_start":2315,"line_end":2315,"column_start":22,"column_end":25},"kind":{"Impl":{"id":657}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1644}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":875767,"byte_end":875770,"line_start":2323,"line_end":2323,"column_start":39,"column_end":42},"kind":{"Impl":{"id":658}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876021,"byte_end":876024,"line_start":2334,"line_end":2334,"column_start":21,"column_end":24},"kind":{"Impl":{"id":659}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1873}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876203,"byte_end":876206,"line_start":2342,"line_end":2342,"column_start":36,"column_end":39},"kind":{"Impl":{"id":660}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876392,"byte_end":876395,"line_start":2349,"line_end":2349,"column_start":27,"column_end":30},"kind":{"Impl":{"id":661}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876534,"byte_end":876537,"line_start":2356,"line_end":2356,"column_start":27,"column_end":30},"kind":{"Impl":{"id":662}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1800}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876676,"byte_end":876679,"line_start":2363,"line_end":2363,"column_start":24,"column_end":27},"kind":{"Impl":{"id":663}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1797}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876812,"byte_end":876815,"line_start":2370,"line_end":2370,"column_start":24,"column_end":27},"kind":{"Impl":{"id":664}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1800}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876958,"byte_end":876961,"line_start":2377,"line_end":2377,"column_start":31,"column_end":34},"kind":{"Impl":{"id":665}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":877226,"byte_end":877229,"line_start":2389,"line_end":2389,"column_start":35,"column_end":38},"kind":{"Impl":{"id":666}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":877509,"byte_end":877512,"line_start":2401,"line_end":2401,"column_start":36,"column_end":39},"kind":{"Impl":{"id":667}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":877786,"byte_end":877789,"line_start":2413,"line_end":2413,"column_start":28,"column_end":31},"kind":{"Impl":{"id":668}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":878015,"byte_end":878018,"line_start":2422,"line_end":2422,"column_start":26,"column_end":29},"kind":{"Impl":{"id":669}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":878167,"byte_end":878170,"line_start":2429,"line_end":2429,"column_start":21,"column_end":24},"kind":{"Impl":{"id":670}},"from":{"krate":0,"index":4064},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":878524,"byte_end":878527,"line_start":2440,"line_end":2440,"column_start":38,"column_end":41},"kind":{"Impl":{"id":671}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":878704,"byte_end":878707,"line_start":2447,"line_end":2447,"column_start":37,"column_end":40},"kind":{"Impl":{"id":672}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":878889,"byte_end":878892,"line_start":2454,"line_end":2454,"column_start":41,"column_end":44},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":1806}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":879072,"byte_end":879075,"line_start":2461,"line_end":2461,"column_start":33,"column_end":36},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":4675}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":879936,"byte_end":879944,"line_start":2491,"line_end":2491,"column_start":36,"column_end":44},"kind":{"Impl":{"id":675}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":880097,"byte_end":880105,"line_start":2497,"line_end":2497,"column_start":9,"column_end":17},"kind":{"Impl":{"id":676}},"from":{"krate":0,"index":4358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":881406,"byte_end":881414,"line_start":2534,"line_end":2534,"column_start":31,"column_end":39},"kind":{"Impl":{"id":677}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":881497,"byte_end":881505,"line_start":2536,"line_end":2536,"column_start":31,"column_end":39},"kind":{"Impl":{"id":678}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":881580,"byte_end":881588,"line_start":2539,"line_end":2539,"column_start":22,"column_end":30},"kind":{"Impl":{"id":679}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":882841,"byte_end":882849,"line_start":2583,"line_end":2583,"column_start":33,"column_end":41},"kind":{"Impl":{"id":680}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":883546,"byte_end":883554,"line_start":2607,"line_end":2607,"column_start":31,"column_end":39},"kind":{"Impl":{"id":681}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":883704,"byte_end":883712,"line_start":2614,"line_end":2614,"column_start":27,"column_end":35},"kind":{"Impl":{"id":682}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":883804,"byte_end":883812,"line_start":2617,"line_end":2617,"column_start":31,"column_end":39},"kind":{"Impl":{"id":683}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":5038}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":883905,"byte_end":883913,"line_start":2620,"line_end":2620,"column_start":26,"column_end":34},"kind":{"Impl":{"id":684}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":1592}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":884096,"byte_end":884104,"line_start":2627,"line_end":2627,"column_start":39,"column_end":47},"kind":{"Impl":{"id":685}},"from":{"krate":0,"index":4358},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":884941,"byte_end":884946,"line_start":2657,"line_end":2657,"column_start":36,"column_end":41},"kind":{"Impl":{"id":686}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":5977}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":885109,"byte_end":885114,"line_start":2663,"line_end":2663,"column_start":13,"column_end":18},"kind":{"Impl":{"id":687}},"from":{"krate":0,"index":4398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":885761,"byte_end":885766,"line_start":2683,"line_end":2683,"column_start":31,"column_end":36},"kind":{"Impl":{"id":688}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":1894}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":885853,"byte_end":885858,"line_start":2685,"line_end":2685,"column_start":31,"column_end":36},"kind":{"Impl":{"id":689}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":1882}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":885937,"byte_end":885942,"line_start":2688,"line_end":2688,"column_start":22,"column_end":27},"kind":{"Impl":{"id":690}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":886274,"byte_end":886279,"line_start":2702,"line_end":2702,"column_start":33,"column_end":38},"kind":{"Impl":{"id":691}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":886497,"byte_end":886502,"line_start":2710,"line_end":2710,"column_start":18,"column_end":23},"kind":{"Impl":{"id":692}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":886785,"byte_end":886794,"line_start":2716,"line_end":2716,"column_start":34,"column_end":43},"kind":{"Impl":{"id":693}},"from":{"krate":0,"index":4429},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":888103,"byte_end":888108,"line_start":2752,"line_end":2752,"column_start":31,"column_end":36},"kind":{"Impl":{"id":694}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":888273,"byte_end":888278,"line_start":2759,"line_end":2759,"column_start":31,"column_end":36},"kind":{"Impl":{"id":695}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":5038}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":888363,"byte_end":888368,"line_start":2762,"line_end":2762,"column_start":27,"column_end":32},"kind":{"Impl":{"id":696}},"from":{"krate":0,"index":4398},"to":{"krate":1,"index":5035}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":888851,"byte_end":888857,"line_start":2779,"line_end":2779,"column_start":32,"column_end":38},"kind":{"Impl":{"id":697}},"from":{"krate":0,"index":4909},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":889159,"byte_end":889165,"line_start":2792,"line_end":2792,"column_start":43,"column_end":49},"kind":{"Impl":{"id":698}},"from":{"krate":0,"index":4909},"to":{"krate":1,"index":4698}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":889359,"byte_end":889365,"line_start":2799,"line_end":2799,"column_start":41,"column_end":47},"kind":{"Impl":{"id":699}},"from":{"krate":0,"index":4909},"to":{"krate":1,"index":4727}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":889456,"byte_end":889462,"line_start":2802,"line_end":2802,"column_start":28,"column_end":34},"kind":{"Impl":{"id":700}},"from":{"krate":0,"index":4909},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":891007,"byte_end":891012,"line_start":2843,"line_end":2843,"column_start":9,"column_end":14},"kind":{"Impl":{"id":701}},"from":{"krate":0,"index":4398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":893510,"byte_end":893521,"line_start":2905,"line_end":2905,"column_start":25,"column_end":36},"kind":{"Impl":{"id":702}},"from":{"krate":0,"index":4918},"to":{"krate":1,"index":4772}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":894812,"byte_end":894823,"line_start":2943,"line_end":2943,"column_start":21,"column_end":32},"kind":{"Impl":{"id":703}},"from":{"krate":0,"index":4918},"to":{"krate":1,"index":2075}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":895101,"byte_end":895116,"line_start":2955,"line_end":2955,"column_start":37,"column_end":52},"kind":{"Impl":{"id":704}},"from":{"krate":0,"index":4475},"to":{"krate":1,"index":2075}}]}